(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var AppView, GraphStore, HashParams, PaletteStore, appView;

AppView = React.createFactory(require('./views/app-view'));

GraphStore = require('./stores/graph-store');

PaletteStore = require('./stores/palette-store');

HashParams = require('./utils/hash-parameters');

appView = null;

window.Sage = {
  initApp: function() {
    var elem, opts;
    opts = {
      graphStore: GraphStore.store,
      publicUrl: HashParams.getParam('publicUrl'),
      data: HashParams.getParam('data'),
      googleDoc: HashParams.getParam('googleDoc')
    };
    appView = AppView(opts);
    elem = '#app';
    return jsPlumb.bind('ready', function() {
      return ReactDOM.render(appView, $(elem)[0]);
    });
  },
  clearModel: function() {
    return appView != null ? appView.props.graphStore.deleteAll() : void 0;
  },
  serializeModel: function() {
    return appView != null ? appView.props.graphStore.toJsonString(PaletteStore.store.palette) : void 0;
  },
  loadModel: function(data) {
    if (appView != null) {
      appView.props.graphStore.deleteAll();
    }
    if (typeof data === "string") {
      data = JSON.parse(data);
    }
    return appView != null ? appView.props.graphStore.loadData(data) : void 0;
  },
  addChangeListener: function(listener) {
    return appView != null ? appView.props.graphStore.addChangeListener(listener) : void 0;
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvYXBwLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2FwcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxPQUFBLEdBQWMsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLGtCQUFSLENBQXBCOztBQUVkLFVBQUEsR0FBZSxPQUFBLENBQVEsc0JBQVI7O0FBQ2YsWUFBQSxHQUFlLE9BQUEsQ0FBUSx3QkFBUjs7QUFDZixVQUFBLEdBQWUsT0FBQSxDQUFRLHlCQUFSOztBQUVmLE9BQUEsR0FBVTs7QUFHVixNQUFNLENBQUMsSUFBUCxHQUNFO0VBQUEsT0FBQSxFQUFTLFNBQUE7QUFDUCxRQUFBO0lBQUEsSUFBQSxHQU1FO01BQUEsVUFBQSxFQUFZLFVBQVUsQ0FBQyxLQUF2QjtNQUNBLFNBQUEsRUFBVyxVQUFVLENBQUMsUUFBWCxDQUFvQixXQUFwQixDQURYO01BRUEsSUFBQSxFQUFNLFVBQVUsQ0FBQyxRQUFYLENBQW9CLE1BQXBCLENBRk47TUFHQSxTQUFBLEVBQVcsVUFBVSxDQUFDLFFBQVgsQ0FBb0IsV0FBcEIsQ0FIWDs7SUFLRixPQUFBLEdBQVUsT0FBQSxDQUFRLElBQVI7SUFDVixJQUFBLEdBQU87V0FFUCxPQUFPLENBQUMsSUFBUixDQUFhLE9BQWIsRUFBc0IsU0FBQTthQUNwQixRQUFRLENBQUMsTUFBVCxDQUFnQixPQUFoQixFQUF5QixDQUFBLENBQUUsSUFBRixDQUFRLENBQUEsQ0FBQSxDQUFqQztJQURvQixDQUF0QjtFQWZPLENBQVQ7RUFrQkEsVUFBQSxFQUFZLFNBQUE7NkJBQ1YsT0FBTyxDQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsU0FBMUIsQ0FBQTtFQURVLENBbEJaO0VBcUJBLGNBQUEsRUFBZ0IsU0FBQTtBQUVkLDZCQUFPLE9BQU8sQ0FBRSxLQUFLLENBQUMsVUFBVSxDQUFDLFlBQTFCLENBQXVDLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBMUQ7RUFGTyxDQXJCaEI7RUF5QkEsU0FBQSxFQUFXLFNBQUMsSUFBRDs7TUFDVCxPQUFPLENBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUExQixDQUFBOztJQUNBLElBQUcsT0FBTyxJQUFQLEtBQWUsUUFBbEI7TUFDRSxJQUFBLEdBQU8sSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFYLEVBRFQ7OzZCQUVBLE9BQU8sQ0FBRSxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQTFCLENBQW1DLElBQW5DO0VBSlMsQ0F6Qlg7RUErQkEsaUJBQUEsRUFBbUIsU0FBQyxRQUFEOzZCQUNqQixPQUFPLENBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxpQkFBMUIsQ0FBNEMsUUFBNUM7RUFEaUIsQ0EvQm5CIn0=

},{"./stores/graph-store":665,"./stores/palette-store":670,"./utils/hash-parameters":678,"./views/app-view":693}],2:[function(require,module,exports){
/*!
	Autosize 3.0.21
	license: MIT
	http://www.jacklmoore.com/autosize
*/
(function (global, factory) {
	if (typeof define === 'function' && define.amd) {
		define(['exports', 'module'], factory);
	} else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
		factory(exports, module);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, mod);
		global.autosize = mod.exports;
	}
})(this, function (exports, module) {
	'use strict';

	var map = typeof Map === "function" ? new Map() : (function () {
		var keys = [];
		var values = [];

		return {
			has: function has(key) {
				return keys.indexOf(key) > -1;
			},
			get: function get(key) {
				return values[keys.indexOf(key)];
			},
			set: function set(key, value) {
				if (keys.indexOf(key) === -1) {
					keys.push(key);
					values.push(value);
				}
			},
			'delete': function _delete(key) {
				var index = keys.indexOf(key);
				if (index > -1) {
					keys.splice(index, 1);
					values.splice(index, 1);
				}
			}
		};
	})();

	var createEvent = function createEvent(name) {
		return new Event(name, { bubbles: true });
	};
	try {
		new Event('test');
	} catch (e) {
		// IE does not support `new Event()`
		createEvent = function (name) {
			var evt = document.createEvent('Event');
			evt.initEvent(name, true, false);
			return evt;
		};
	}

	function assign(ta) {
		if (!ta || !ta.nodeName || ta.nodeName !== 'TEXTAREA' || map.has(ta)) return;

		var heightOffset = null;
		var clientWidth = ta.clientWidth;
		var cachedHeight = null;

		function init() {
			var style = window.getComputedStyle(ta, null);

			if (style.resize === 'vertical') {
				ta.style.resize = 'none';
			} else if (style.resize === 'both') {
				ta.style.resize = 'horizontal';
			}

			if (style.boxSizing === 'content-box') {
				heightOffset = -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
			} else {
				heightOffset = parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
			}
			// Fix when a textarea is not on document body and heightOffset is Not a Number
			if (isNaN(heightOffset)) {
				heightOffset = 0;
			}

			update();
		}

		function changeOverflow(value) {
			{
				// Chrome/Safari-specific fix:
				// When the textarea y-overflow is hidden, Chrome/Safari do not reflow the text to account for the space
				// made available by removing the scrollbar. The following forces the necessary text reflow.
				var width = ta.style.width;
				ta.style.width = '0px';
				// Force reflow:
				/* jshint ignore:start */
				ta.offsetWidth;
				/* jshint ignore:end */
				ta.style.width = width;
			}

			ta.style.overflowY = value;
		}

		function getParentOverflows(el) {
			var arr = [];

			while (el && el.parentNode && el.parentNode instanceof Element) {
				if (el.parentNode.scrollTop) {
					arr.push({
						node: el.parentNode,
						scrollTop: el.parentNode.scrollTop
					});
				}
				el = el.parentNode;
			}

			return arr;
		}

		function resize() {
			var originalHeight = ta.style.height;
			var overflows = getParentOverflows(ta);
			var docTop = document.documentElement && document.documentElement.scrollTop; // Needed for Mobile IE (ticket #240)

			ta.style.height = 'auto';

			var endHeight = ta.scrollHeight + heightOffset;

			if (ta.scrollHeight === 0) {
				// If the scrollHeight is 0, then the element probably has display:none or is detached from the DOM.
				ta.style.height = originalHeight;
				return;
			}

			ta.style.height = endHeight + 'px';

			// used to check if an update is actually necessary on window.resize
			clientWidth = ta.clientWidth;

			// prevents scroll-position jumping
			overflows.forEach(function (el) {
				el.node.scrollTop = el.scrollTop;
			});

			if (docTop) {
				document.documentElement.scrollTop = docTop;
			}
		}

		function update() {
			resize();

			var styleHeight = Math.round(parseFloat(ta.style.height));
			var computed = window.getComputedStyle(ta, null);

			// Using offsetHeight as a replacement for computed.height in IE, because IE does not account use of border-box
			var actualHeight = computed.boxSizing === 'content-box' ? Math.round(parseFloat(computed.height)) : ta.offsetHeight;

			// The actual height not matching the style height (set via the resize method) indicates that
			// the max-height has been exceeded, in which case the overflow should be allowed.
			if (actualHeight !== styleHeight) {
				if (computed.overflowY === 'hidden') {
					changeOverflow('scroll');
					resize();
					actualHeight = computed.boxSizing === 'content-box' ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
				}
			} else {
				// Normally keep overflow set to hidden, to avoid flash of scrollbar as the textarea expands.
				if (computed.overflowY !== 'hidden') {
					changeOverflow('hidden');
					resize();
					actualHeight = computed.boxSizing === 'content-box' ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
				}
			}

			if (cachedHeight !== actualHeight) {
				cachedHeight = actualHeight;
				var evt = createEvent('autosize:resized');
				try {
					ta.dispatchEvent(evt);
				} catch (err) {
					// Firefox will throw an error on dispatchEvent for a detached element
					// https://bugzilla.mozilla.org/show_bug.cgi?id=889376
				}
			}
		}

		var pageResize = function pageResize() {
			if (ta.clientWidth !== clientWidth) {
				update();
			}
		};

		var destroy = (function (style) {
			window.removeEventListener('resize', pageResize, false);
			ta.removeEventListener('input', update, false);
			ta.removeEventListener('keyup', update, false);
			ta.removeEventListener('autosize:destroy', destroy, false);
			ta.removeEventListener('autosize:update', update, false);

			Object.keys(style).forEach(function (key) {
				ta.style[key] = style[key];
			});

			map['delete'](ta);
		}).bind(ta, {
			height: ta.style.height,
			resize: ta.style.resize,
			overflowY: ta.style.overflowY,
			overflowX: ta.style.overflowX,
			wordWrap: ta.style.wordWrap
		});

		ta.addEventListener('autosize:destroy', destroy, false);

		// IE9 does not fire onpropertychange or oninput for deletions,
		// so binding to onkeyup to catch most of those events.
		// There is no way that I know of to detect something like 'cut' in IE9.
		if ('onpropertychange' in ta && 'oninput' in ta) {
			ta.addEventListener('keyup', update, false);
		}

		window.addEventListener('resize', pageResize, false);
		ta.addEventListener('input', update, false);
		ta.addEventListener('autosize:update', update, false);
		ta.style.overflowX = 'hidden';
		ta.style.wordWrap = 'break-word';

		map.set(ta, {
			destroy: destroy,
			update: update
		});

		init();
	}

	function destroy(ta) {
		var methods = map.get(ta);
		if (methods) {
			methods.destroy();
		}
	}

	function update(ta) {
		var methods = map.get(ta);
		if (methods) {
			methods.update();
		}
	}

	var autosize = null;

	// Do nothing in Node.js environment and IE8 (or lower)
	if (typeof window === 'undefined' || typeof window.getComputedStyle !== 'function') {
		autosize = function (el) {
			return el;
		};
		autosize.destroy = function (el) {
			return el;
		};
		autosize.update = function (el) {
			return el;
		};
	} else {
		autosize = function (el, options) {
			if (el) {
				Array.prototype.forEach.call(el.length ? el : [el], function (x) {
					return assign(x, options);
				});
			}
			return el;
		};
		autosize.destroy = function (el) {
			if (el) {
				Array.prototype.forEach.call(el.length ? el : [el], destroy);
			}
			return el;
		};
		autosize.update = function (el) {
			if (el) {
				Array.prototype.forEach.call(el.length ? el : [el], update);
			}
			return el;
		};
	}

	module.exports = autosize;
});
},{}],3:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],4:[function(require,module,exports){
/**
 * @license Complex.js v2.0.3 11/02/2016
 *
 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/

/**
 *
 * This class allows the manipulation of complex numbers.
 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
 *
 * Object form
 * { re: <real>, im: <imaginary> }
 * { arg: <angle>, abs: <radius> }
 * { phi: <angle>, r: <radius> }
 *
 * Array / Vector form
 * [ real, imaginary ]
 *
 * Double form
 * 99.3 - Single double value
 *
 * String form
 * '23.1337' - Simple real number
 * '15+3i' - a simple complex number
 * '3-i' - a simple complex number
 *
 * Example:
 *
 * var c = new Complex('99.3+8i');
 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
 *
 */

(function(root) {

  'use strict';

  var P = {'re': 0, 'im': 0};

  var cosh = function(x) {
    return (Math.exp(x) + Math.exp(-x)) * 0.5;
  };

  var sinh = function(x) {
    return (Math.exp(x) - Math.exp(-x)) * 0.5;
  };

  var hypot = function(x, y) {

      var a = Math.abs(x);
      var b = Math.abs(y);

      if (a < 3000 && b < 3000) {
        return Math.sqrt(a * a + b * b);
      }

      if (a < b) {
        a = b;
        b = x / y;
      } else {
        b = y / x;
      }
      return a * Math.sqrt(1 + b * b);
  };

  var parser_exit = function() {
    throw SyntaxError('Invalid Param');
  };

  /**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  function logHypot(a, b) {

    var _a = Math.abs(a);
    var _b = Math.abs(b);

    if (a === 0) {
      return Math.log(_b);
    }

    if (b === 0) {
      return Math.log(_a);
    }

    if (_a < 3000 && _b < 3000) {
      return Math.log(a * a + b * b) * 0.5;
    }

    /* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

     Math.log(a * a + b * b) / 2

     *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

     var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;

     return Math.log(a) + Math.log(1 + t * t) / 2;
     };

     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

     Math.log(a / Math.cos(Math.atan2(b, a)))

     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

     */

    return Math.log(a / Math.cos(Math.atan2(b, a)));
  }

  var parse = function(a, b) {

    if (a === undefined || a === null) {
      P['re'] =
      P['im'] = 0;
    } else if (b !== undefined) {
      P['re'] = a;
      P['im'] = b;
    } else switch (typeof a) {

      case 'object':

        if ('im' in a && 're' in a) {
          P['re'] = a['re'];
          P['im'] = a['im'];
        } else if ('abs' in a && 'arg' in a) {
          P['re'] = a['abs'] * Math.cos(a['arg']);
          P['im'] = a['abs'] * Math.sin(a['arg']);
        } else if ('r' in a && 'phi' in a) {
          P['re'] = a['r'] * Math.cos(a['phi']);
          P['im'] = a['r'] * Math.sin(a['phi']);
        } else if (a.length === 2) { // Quick array check
          P['re'] = a[0];
          P['im'] = a[1];
        } else {
          parser_exit();
        }
        break;

      case 'string':

        P['im'] = /* void */
        P['re'] = 0;

        var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
        var plus = 1;
        var minus = 0;

        if (tokens === null) {
          parser_exit();
        }

        for (var i = 0; i < tokens.length; i++) {

          var c = tokens[i];

          if (c === ' ' || c === '\t' || c === '\n') {
            /* void */
          } else if (c === '+') {
            plus++;
          } else if (c === '-') {
            minus++;
          } else if (c === 'i' || c === 'I') {

            if (plus + minus === 0) {
              parser_exit();
            }

            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
              P['im']+= parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
              i++;
            } else {
              P['im']+= parseFloat((minus % 2 ? '-' : '') + '1');
            }
            plus = minus = 0;

          } else {

            if (plus + minus === 0 || isNaN(c)) {
              parser_exit();
            }

            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
              P['im']+= parseFloat((minus % 2 ? '-' : '') + c);
              i++;
            } else {
              P['re']+= parseFloat((minus % 2 ? '-' : '') + c);
            }
            plus = minus = 0;
          }
        }

        // Still something on the stack
        if (plus + minus > 0) {
          parser_exit();
        }
        break;

      case 'number':
        P['im'] = 0;
        P['re'] = a;
        break;

      default:
        parser_exit();
    }

    if (isNaN(P['re']) || isNaN(P['im'])) {
      // If a calculation is NaN, we treat it as NaN and don't throw
      //parser_exit();
    }
  };

  /**
   * @constructor
   * @returns {Complex}
   */
  function Complex(a, b) {

    if (!(this instanceof Complex)) {
      return new Complex(a, b);
    }

    parse(a, b); // mutates P

    this['re'] = P['re'];
    this['im'] = P['im'];
  }

  Complex.prototype = {

    're': 0,
    'im': 0,

    /**
     * Calculates the sign of a complex number, which is a normalized complex
     *
     * @returns {Complex}
     */
    'sign': function() {

      var abs = this['abs']();

      return new Complex(
              this['re'] / abs,
              this['im'] / abs);
    },

    /**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */
    'add': function(a, b) {

      parse(a, b); // mutates P

      return new Complex(
              this['re'] + P['re'],
              this['im'] + P['im']);
    },

    /**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */
    'sub': function(a, b) {

      parse(a, b); // mutates P

      return new Complex(
              this['re'] - P['re'],
              this['im'] - P['im']);
    },

    /**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */
    'mul': function(a, b) {

      parse(a, b); // mutates P

      // Besides the addition/subtraction, this helps having a solution for real Infinity
      if (P['im'] === 0 && this['im'] === 0) {
        return new Complex(this['re'] * P['re'], 0);
      }

      return new Complex(
              this['re'] * P['re'] - this['im'] * P['im'],
              this['re'] * P['im'] + this['im'] * P['re']);
    },

    /**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */
    'div': function(a, b) {

      parse(a, b); // mutates P

      a = this['re'];
      b = this['im'];

      var c = P['re'];
      var d = P['im'];
      var t, x;

      if (0 === d) {
        if (0 === c) {
          // Divisor is zero
          return new Complex(
                (a !== 0) ? (a / 0) : 0,
                (b !== 0) ? (b / 0) : 0);
        } else {
          // Divisor is real
          return new Complex(a / c, b / c);
        }
      }

      if (Math.abs(c) < Math.abs(d)) {

        x = c / d;
        t = c * x + d;

        return new Complex(
                (a * x + b) / t,
                (b * x - a) / t);

      } else {

        x = d / c;
        t = d * x + c;

        return new Complex(
                (a + b * x) / t,
                (b - a * x) / t);
      }
    },

    /**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */
    'pow': function(a, b) {

      parse(a, b); // mutates P

      a = this['re'];
      b = this['im'];

      if (a === 0 && b === 0) {
        return Complex['ZERO'];
      }

      // If the exponent is real
      if (P['im'] === 0) {

        if (b === 0 && a >= 0) {

          return new Complex(Math.pow(a, P['re']), 0);

        } else if (a === 0) { // If base is fully imaginary

          switch ((P['re'] % 4 + 4) % 4) {
            case 0:
              return new Complex(Math.pow(b, P['re']), 0);
            case 1:
              return new Complex(0, Math.pow(b, P['re']));
            case 2:
              return new Complex(-Math.pow(b, P['re']), 0);
            case 3:
              return new Complex(0, -Math.pow(b, P['re']));
          }
        }
      }

      /* I couldn't find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */

      var arg = Math.atan2(b, a);
      var loh = logHypot(a, b);

      a = Math.exp(P['re'] * loh - P['im'] * arg);
      b = P['im'] * loh + P['re'] * arg;
      return new Complex(
              a * Math.cos(b),
              a * Math.sin(b));
    },

    /**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */
    'sqrt': function() {

      var a = this['re'];
      var b = this['im'];
      var r = this['abs']();

      var re, im;

      if (a >= 0) {

        if (b === 0) {
          return new Complex(Math.sqrt(a), 0);
        }

        re = 0.5 * Math.sqrt(2.0 * (r + a));
      } else {
        re = Math.abs(b) / Math.sqrt(2 * (r - a));
      }

      if (a <= 0) {
        im = 0.5 * Math.sqrt(2.0 * (r - a));
      } else {
        im = Math.abs(b) / Math.sqrt(2 * (r + a));
      }

      return new Complex(re, b < 0 ? -im : im);
    },

    /**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */
    'exp': function() {

      var tmp = Math.exp(this['re']);

      if (this['im'] === 0) {
        //return new Complex(tmp, 0);
      }
      return new Complex(
              tmp * Math.cos(this['im']),
              tmp * Math.sin(this['im']));
    },

    /**
     * Calculate the natural log
     *
     * @returns {Complex}
     */
    'log': function() {

      var a = this['re'];
      var b = this['im'];

      if (b === 0 && a > 0) {
        //return new Complex(Math.log(a), 0);
      }

      return new Complex(
              logHypot(a, b),
              Math.atan2(b, a));
    },

    /**
     * Calculate the magnitude of the complex number
     *
     * @returns {number}
     */
    'abs': function() {

      return hypot(this['re'], this['im']);
    },

    /**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */
    'arg': function() {

      return Math.atan2(this['im'], this['re']);
    },

    /**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */
    'sin': function() {

      // sin(c) = (e^b - e^(-b)) / (2i)

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.sin(a) * cosh(b),
              Math.cos(a) * sinh(b));
    },

    /**
     * Calculate the cosine
     *
     * @returns {Complex}
     */
    'cos': function() {

      // cos(z) = (e^b + e^(-b)) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.cos(a) * cosh(b),
             -Math.sin(a) * sinh(b));
    },

    /**
     * Calculate the tangent
     *
     * @returns {Complex}
     */
    'tan': function() {

      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) + cosh(b);

      return new Complex(
              Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */
    'cot': function() {

      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) - cosh(b);

      return new Complex(
             -Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the secant
     *
     * @returns {Complex}
     */
    'sec': function() {

      // sec(c) = 2 / (e^(ci) + e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.cos(a) * cosh(b) / d,
              Math.sin(a) * sinh(b) / d);
    },

    /**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */
    'csc': function() {

      // csc(c) = 2i / (e^(ci) - e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.sin(a) * cosh(b) / d,
             -Math.cos(a) * sinh(b) / d);
    },

    /**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */
    'asin': function() {

      // asin(c) = -i * log(ci + sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
               b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(t2['im'], -t2['re']);
    },

    /**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */
    'acos': function() {

      // acos(c) = i * log(c - i * sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
               b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
    },

    /**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */
    'atan': function() {

      // atan(c) = i / 2 log((i + x) / (i - x))

      var a = this['re'];
      var b = this['im'];

      if (a === 0) {

        if (b === 1) {
          return new Complex(0, Infinity);
        }

        if (b === -1) {
          return new Complex(0, -Infinity);
        }
      }

      var d = a * a + (1.0 - b) * (1.0 - b);

      var t1 = new Complex(
              (1 - b * b - a * a) / d,
              -2 * a / d).log();

      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
    },

    /**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */
    'acot': function() {

      // acot(c) = i / 2 log((c - i) / (c + i))

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {
        return new Complex(Math.atan2(1, a), 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                     -b / d).atan()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ?-b / 0 : 0).atan();
    },

    /**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */
    'asec': function() {

      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).acos()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ?-b / 0 : 0).acos();
    },

    /**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */
    'acsc': function() {

      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(Math.PI / 2, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                     -b / d).asin()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ?-b / 0 : 0).asin();
    },

    /**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */
    'sinh': function() {

      // sinh(c) = (e^c - e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              sinh(a) * Math.cos(b),
              cosh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */
    'cosh': function() {

      // cosh(c) = (e^c + e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              cosh(a) * Math.cos(b),
              sinh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */
    'tanh': function() {

      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) + Math.cos(b);

      return new Complex(
              sinh(a) / d,
              Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'coth': function() {

      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) - Math.cos(b);

      return new Complex(
              sinh(a) / d,
             -Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'csch': function() {

      // csch(c) = 2 / (e^c - e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) - cosh(2 * a);

      return new Complex(
           -2 * sinh(a) * Math.cos(b) / d,
            2 * cosh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */
    'sech': function() {

      // sech(c) = 2 / (e^c + e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) + cosh(2 * a);

      return new Complex(
              2 * cosh(a) * Math.cos(b) / d,
             -2 * sinh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'asinh': function() {

      // asinh(c) = log(c + sqrt(c^2 + 1))

      var tmp = this['im'];
      this['im'] = -this['re'];
      this['re'] = tmp;
      var res = this['asin']();

      this['re'] = -this['im'];
      this['im'] = tmp;
      tmp = res['re'];

      res['re'] = -res['im'];
      res['im'] = tmp;
      return res;
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'acosh': function() {

      // acosh(c) = log(c + sqrt(c^2 - 1))

      var tmp;
      var res = this['acos']();
      if (res['im'] <= 0) {
        tmp = res['re'];
        res['re'] = -res['im'];
        res['im'] = tmp;
      } else {
        tmp = res['im'];
        res['im'] = -res['re'];
        res['re'] = tmp;
      }
      return res;
    },

    /**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */
    'atanh': function() {

      // atanh(c) = log((1+c) / (1-c)) / 2

      var a = this['re'];
      var b = this['im'];

      var noIM = a > 1 && b === 0;
      var oneMinus = 1 - a;
      var onePlus = 1 + a;
      var d = oneMinus * oneMinus + b * b;

      var x = (d !== 0)
              ? new Complex(
                      (onePlus * oneMinus - b * b) / d,
                      (b * oneMinus + onePlus * b) / d)
              : new Complex(
                      (a !== -1) ? (a / 0) : 0,
                      (b !== 0) ? (b / 0) : 0);

      var temp = x['re'];
      x['re'] = logHypot(x['re'], x['im']) / 2;
      x['im'] = Math.atan2(x['im'], temp) / 2;
      if (noIM) {
        x['im'] = -x['im'];
      }
      return x;
    },

    /**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */
    'acoth': function() {

      // acoth(c) = log((c+1) / (c-1)) / 2

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {

        return new Complex(0, Math.PI / 2);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                     -b / d).atanh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ?-b / 0 : 0).atanh();
    },

    /**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */
    'acsch': function() {

      // acsch(c) = log((1+sqrt(1+c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {

        return new Complex(
                (a !== 0)
                ? Math.log(a + Math.sqrt(a * a + 1))
                : Infinity, 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).asinh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ?-b / 0 : 0).asinh();
    },

    /**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */
    'asech': function() {

      // asech(c) = log((1+sqrt(1-c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(Infinity, 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                     -b / d).acosh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ?-b / 0 : 0).acosh();
    },

    /**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */
    'inverse': function() {

      var a = this['re'];
      var b = this['im'];

      var d = a * a + b * b;

      return new Complex(
              a !== 0 ? a / d : 0,
              b !== 0 ?-b / d : 0);
    },

    /**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */
    'conjugate': function() {

      return new Complex(this['re'], -this['im']);
    },

    /**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */
    'neg': function() {

      return new Complex(-this['re'], -this['im']);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'ceil': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.ceil(this['re'] * places) / places,
              Math.ceil(this['im'] * places) / places);
    },

    /**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */
    'floor': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.floor(this['re'] * places) / places,
              Math.floor(this['im'] * places) / places);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'round': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.round(this['re'] * places) / places,
              Math.round(this['im'] * places) / places);
    },

    /**
     * Compares two complex numbers
     *
     * @returns {boolean}
     */
    'equals': function(a, b) {

      parse(a, b); // mutates P

      return Math.abs(P['re'] - this['re']) <= Complex['EPSILON'] &&
             Math.abs(P['im'] - this['im']) <= Complex['EPSILON'];
    },

    /**
     * Clones the actual object
     *
     * @returns {Complex}
     */
    'clone': function() {

      return new Complex(this['re'], this['im']);
    },

    /**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */
    'toString': function() {

      var a = this['re'];
      var b = this['im'];
      var ret = '';

      if (isNaN(a) || isNaN(b)) {
        return 'NaN';
      }

      if (a !== 0) {
        ret+= a;
      }

      if (b !== 0) {

        if (a !== 0) {
          ret+= b < 0 ? ' - ' : ' + ';
        } else if (b < 0) {
          ret+= '-';
        }

        b = Math.abs(b);

        if (1 !== b) {
          ret+= b;
        }
        ret+= 'i';
      }

      if (!ret)
        return '0';

      return ret;
    },

    /**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */
    'toVector': function() {

      return [this['re'], this['im']];
    },

    /**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */
    'valueOf': function() {

      if (this['im'] === 0) {
        return this['re'];
      }
      return null;
    },

    /**
     * Checks if the given complex number is not a number
     *
     * @returns {boolean}
     */
    'isNaN': function() {
      return isNaN(this['re']) || isNaN(this['im']);
    },

    /**
     * Checks if the given complex number is finite
     *
     * @returns {boolean}
     */
    'isFinite': function() {
      return isFinite(this['re']) && isFinite(this['im']);
    }
  };

  Complex['ZERO'] = new Complex(0, 0);
  Complex['ONE'] = new Complex(1, 0);
  Complex['I'] = new Complex(0, 1);
  Complex['PI'] = new Complex(Math.PI, 0);
  Complex['E'] = new Complex(Math.E, 0);
  Complex['EPSILON'] = 1e-16;

  if (typeof define === 'function' && define['amd']) {
    define([], function() {
      return Complex;
    });
  } else if (typeof exports === 'object') {
    module['exports'] = Complex;
  } else {
    root['Complex'] = Complex;
  }

})(this);

},{}],5:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyObject = require('fbjs/lib/emptyObject');
var _invariant = require('fbjs/lib/invariant');

if (process.env.NODE_ENV !== 'production') {
  var warning = require('fbjs/lib/warning');
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isInherited = name in Constructor;
      _invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
        name
      );
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (process.env.NODE_ENV !== 'production') {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (process.env.NODE_ENV !== 'production') {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;

}).call(this,require('_process'))
},{"_process":3,"fbjs/lib/emptyObject":9,"fbjs/lib/invariant":10,"fbjs/lib/warning":11,"object-assign":563}],6:[function(require,module,exports){
/*! decimal.js v9.0.1 https://github.com/MikeMcl/decimal.js/LICENCE */
;(function (globalScope) {
  'use strict';


  /*
   *  decimal.js v9.0.1
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */


  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


    // The maximum exponent magnitude.
    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
  var EXP_LIMIT = 9e15,                      // 0 to 9e15

    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    MAX_DIGITS = 1e9,                        // 0 to 1e9

    // Base conversion alphabet.
    NUMERALS = '0123456789abcdef',

    // The natural logarithm of 10 (1025 digits).
    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

    // Pi (1025 digits).
    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


    // The initial configuration properties of the Decimal constructor.
    DEFAULTS = {

      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed at run-time using the `Decimal.config` method.

      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,                         // 1 to MAX_DIGITS

      // The rounding mode used when rounding to `precision`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,                           // 0 to 8

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP         0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN  6 The IEEE 754 remainder function.
      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
      //
      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
      // division (9) are commonly used for the modulus operation. The other rounding modes can also
      // be used, but they may not give useful results.
      modulo: 1,                             // 0 to 9

      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,                          // 0 to -EXP_LIMIT

      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos:  21,                         // 0 to EXP_LIMIT

      // The minimum exponent value, beneath which underflow to zero occurs.
      // JavaScript numbers: -324  (5e-324)
      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

      // The maximum exponent value, above which overflow to Infinity occurs.
      // JavaScript numbers: 308  (1.7976931348623157e+308)
      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

      // Whether to use cryptographically-secure random number generation, if available.
      crypto: false                          // true/false
    },


  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


    Decimal, inexact, noConflict, quadrant,
    external = true,

    decimalError = '[DecimalError] ',
    invalidArgument = decimalError + 'Invalid argument: ',
    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
    cryptoUnavailable = decimalError + 'crypto unavailable',

    mathfloor = Math.floor,
    mathpow = Math.pow,

    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

    BASE = 1e7,
    LOG_BASE = 7,
    MAX_SAFE_INTEGER = 9007199254740991,

    LN10_PRECISION = LN10.length - 1,
    PI_PRECISION = PI.length - 1,

    // Decimal.prototype object
    P = { name: '[object Decimal]' };


  // Decimal prototype methods


  /*
   *  absoluteValue             abs
   *  ceil
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */


  /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */
  P.absoluteValue = P.abs = function () {
    var x = new this.constructor(this);
    if (x.s < 0) x.s = 1;
    return finalise(x);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */
  P.ceil = function () {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };


  /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */
  P.comparedTo = P.cmp = function (y) {
    var i, j, xdL, ydL,
      x = this,
      xd = x.d,
      yd = (y = new x.constructor(y)).d,
      xs = x.s,
      ys = y.s;

    // Either NaN or ±Infinity?
    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    }

    // Either zero?
    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

    // Signs differ?
    if (xs !== ys) return xs;

    // Compare exponents.
    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

    xdL = xd.length;
    ydL = yd.length;

    // Compare digit by digit.
    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
    }

    // Compare lengths.
    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };


  /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */
  P.cosine = P.cos = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.d) return new Ctor(NaN);

    // cos(0) = cos(-0) = 1
    if (!x.d[0]) return new Ctor(1);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };


  /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */
  P.cubeRoot = P.cbrt = function () {
    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    external = false;

    // Initial estimate.
    s = x.s * Math.pow(x.s * x, 1 / 3);

     // Math.cbrt underflow/overflow?
     // Pass x to Math.pow as integer, then adjust the exponent of the result.
    if (!s || Math.abs(s) == 1 / 0) {
      n = digitsToString(x.d);
      e = x.e;

      // Adjust n exponent so it is a multiple of 3 away from x exponent.
      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
      s = Math.pow(n, 1 / 3);

      // Rarely, e may be one less than the result exponent value.
      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Halley's method.
    // TODO? Compare Newton's method.
    for (;;) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
        // , i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */
  P.decimalPlaces = P.dp = function () {
    var w,
      d = this.d,
      n = NaN;

    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last word.
      w = d[w];
      if (w) for (; w % 10 == 0; w /= 10) n--;
      if (n < 0) n = 0;
    }

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedBy = P.div = function (y) {
    return divide(this, new this.constructor(y));
  };


  /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedToIntegerBy = P.divToInt = function (y) {
    var x = this,
      Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };


  /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */
  P.equals = P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */
  P.floor = function () {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };


  /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */
  P.greaterThan = P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */
  P.greaterThanOrEqualTo = P.gte = function (y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */
  P.hyperbolicCosine = P.cosh = function () {
    var k, n, pr, rm, len,
      x = this,
      Ctor = x.constructor,
      one = new Ctor(1);

    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero()) return one;

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

    // Estimate the optimum number of times to use the argument reduction.
    // TODO? Estimation reused from cosine() and may not be optimal here.
    if (len < 32) {
      k = Math.ceil(len / 3);
      n = Math.pow(4, -k).toString();
    } else {
      k = 16;
      n = '2.3283064365386962890625e-10';
    }

    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

    // Reverse argument reduction
    var cosh2_x,
      i = k,
      d8 = new Ctor(8);
    for (; i--;) {
      cosh2_x = x.times(x);
      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }

    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */
  P.hyperbolicSine = P.sinh = function () {
    var k, pr, rm, len,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {

      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
      // 3 multiplications and 1 addition

      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
      // 4 multiplications and 2 additions

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(Math.pow(5, -k));

      x = taylorSeries(Ctor, 2, x, x, true);

      // Reverse argument reduction
      var sinh2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */
  P.hyperbolicTangent = P.tanh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(x.s);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;

    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };


  /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */
  P.inverseCosine = P.acos = function () {
    var halfPi,
      x = this,
      Ctor = x.constructor,
      k = x.abs().cmp(1),
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (k !== -1) {
      return k === 0
        // |x| is 1
        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
        // |x| > 1 or x is NaN
        : new Ctor(NaN);
    }

    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return halfPi.minus(x);
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */
  P.inverseHyperbolicCosine = P.acosh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).minus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */
  P.inverseHyperbolicSine = P.asinh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).plus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */
  P.inverseHyperbolicTangent = P.atanh = function () {
    var pr, rm, wpr, xsd,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();

    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

    Ctor.precision = wpr = xsd - x.e;

    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

    Ctor.precision = pr + 4;
    Ctor.rounding = 1;

    x = x.ln();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(0.5);
  };


  /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */
  P.inverseSine = P.asin = function () {
    var halfPi, k,
      pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.isZero()) return new Ctor(x);

    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (k !== -1) {

      // |x| is 1
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      }

      // |x| > 1 or x is NaN
      return new Ctor(NaN);
    }

    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(2);
  };


  /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */
  P.inverseTangent = P.atan = function () {
    var i, j, k, n, px, t, r, wpr, x2,
      x = this,
      Ctor = x.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (!x.isFinite()) {
      if (!x.s) return new Ctor(NaN);
      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }

    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1;

    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

    // Argument reduction
    // Ensure |x| < 0.42
    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

    external = false;

    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x;

    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
    for (; i !== -1;) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));

      px = px.times(x2);
      r = t.plus(px.div(n += 2));

      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
    }

    if (k) r = r.times(2 << (k - 1));

    external = true;

    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */
  P.isFinite = function () {
    return !!this.d;
  };


  /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */
  P.isInteger = P.isInt = function () {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };


  /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */
  P.isNegative = P.isNeg = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */
  P.isPositive = P.isPos = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */
  P.isZero = function () {
    return !!this.d && this.d[0] === 0;
  };


  /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */
  P.lessThan = P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */
  P.lessThanOrEqualTo = P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */
  P.logarithm = P.log = function (base) {
    var isBase10, d, denominator, k, inf, num, sd, r,
      arg = this,
      Ctor = arg.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding,
      guard = 5;

    // Default base is 10.
    if (base == null) {
      base = new Ctor(10);
      isBase10 = true;
    } else {
      base = new Ctor(base);
      d = base.d;

      // Return NaN if base is negative, or non-finite, or is 0 or 1.
      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

      isBase10 = base.eq(10);
    }

    d = arg.d;

    // Is arg negative, non-finite, 0 or 1?
    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    }

    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
    // integer power of 10.
    if (isBase10) {
      if (d.length > 1) {
        inf = true;
      } else {
        for (k = d[0]; k % 10 === 0;) k /= 10;
        inf = k !== 1;
      }
    }

    external = false;
    sd = pr + guard;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

    // The result will have 5 rounding digits.
    r = divide(num, denominator, sd, 1);

    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
    // calculate 10 further digits.
    //
    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
    // that the result is above or below the boundary. Otherwise, if after calculating the 10
    // further digits, the last 14 are nines, round up and assume the result is exact.
    // Also assume the result is exact if the last 14 are zero.
    //
    // Example of a result that will be incorrectly rounded:
    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
    // place is still 2.6.
    if (checkRoundingDigits(r.d, k = pr, rm)) {

      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);

        if (!inf) {

          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }

          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }

    external = true;

    return finalise(r, pr, rm);
  };


  /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */


  /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.minus = P.sub = function (y) {
    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return y negated if x is finite and y is ±Infinity.
      else if (x.d) y.s = -y.s;

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with different signs.
      // Return NaN if both are ±Infinity with the same sign.
      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

      return y;
    }

    // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return y negated if x is zero and y is non-zero.
      if (yd[0]) y.s = -y.s;

      // Return x if y is zero and x is non-zero.
      else if (xd[0]) y = new Ctor(x);

      // Return zero if both are zero.
      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
      else return new Ctor(rm === 3 ? -0 : 0);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    e = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);

    xd = xd.slice();
    k = xe - e;

    // If base 1e7 exponents differ...
    if (k) {
      xLTy = k < 0;

      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e = xe;
        len = xd.length;
      }

      // Numbers with massively different exponents would result in a very high number of
      // zeros needing to be prepended, but this can be avoided while still ensuring correct
      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

      if (k > i) {
        k = i;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents.
      d.reverse();
      for (i = k; i--;) d.push(0);
      d.reverse();

    // Base 1e7 exponents equal.
    } else {

      // Check digits to determine which is the bigger number.

      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;

      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }

      k = 0;
    }

    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }

    len = xd.length;

    // Append zeros to `xd` if shorter.
    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

    // Subtract yd from xd.
    for (i = yd.length; i > k;) {

      if (xd[--i] < yd[i]) {
        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
        --xd[j];
        xd[i] += BASE;
      }

      xd[i] -= yd[i];
    }

    // Remove trailing zeros.
    for (; xd[--len] === 0;) xd.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xd[0] === 0; xd.shift()) --e;

    // Zero?
    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */
  P.modulo = P.mod = function (y) {
    var q,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

    // Return x if y is ±Infinity or x is ±0.
    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    }

    // Prevent rounding of intermediate calculations.
    external = false;

    if (Ctor.modulo == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // result = x - q * y    where  0 <= result < abs(y)
      q = divide(x, y.abs(), 0, 3, 1);
      q.s *= y.s;
    } else {
      q = divide(x, y, 0, Ctor.modulo, 1);
    }

    q = q.times(y);

    external = true;

    return x.minus(q);
  };


  /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.naturalExponential = P.exp = function () {
    return naturalExponential(this);
  };


  /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.naturalLogarithm = P.ln = function () {
    return naturalLogarithm(this);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */
  P.negated = P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.plus = P.add = function (y) {
    var carry, d, e, i, k, len, pr, rm, xd, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with the same sign.
      // Return NaN if both are ±Infinity with different signs.
      // Return y if x is finite and y is ±Infinity.
      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

      return y;
    }

     // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return x if y is zero.
      // Return y if y is non-zero.
      if (!yd[0]) y = new Ctor(x);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    k = mathfloor(x.e / LOG_BASE);
    e = mathfloor(y.e / LOG_BASE);

    xd = xd.slice();
    i = k - e;

    // If base 1e7 exponents differ...
    if (i) {

      if (i < 0) {
        d = xd;
        i = -i;
        len = yd.length;
      } else {
        d = yd;
        e = k;
        len = xd.length;
      }

      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;

      if (i > len) {
        i = len;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
      d.reverse();
      for (; i--;) d.push(0);
      d.reverse();
    }

    len = xd.length;
    i = yd.length;

    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
    if (len - i < 0) {
      i = len;
      d = yd;
      yd = xd;
      xd = d;
    }

    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
    for (carry = 0; i;) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }

    if (carry) {
      xd.unshift(carry);
      ++e;
    }

    // Remove trailing zeros.
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    for (len = xd.length; xd[--len] == 0;) xd.pop();

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */
  P.precision = P.sd = function (z) {
    var k,
      x = this;

    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k) k = x.e + 1;
    } else {
      k = NaN;
    }

    return k;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */
  P.round = function () {
    var x = this,
      Ctor = x.constructor;

    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };


  /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */
  P.sine = P.sin = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = sine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, sd, r, rep, t,
      x = this,
      d = x.d,
      e = x.e,
      s = x.s,
      Ctor = x.constructor;

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !d || !d[0]) {
      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }

    external = false;

    // Initial estimate.
    s = Math.sqrt(+x);

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = digitsToString(d);

      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '1e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Newton-Raphson iteration.
    for (;;) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
        // 4999, i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */
  P.tangent = P.tan = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;

    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */
  P.times = P.mul = function (y) {
    var carry, e, i, k, r, rL, t, xdL, ydL,
      x = this,
      Ctor = x.constructor,
      xd = x.d,
      yd = (y = new Ctor(y)).d;

    y.s *= x.s;

     // If either is NaN, ±Infinity or ±0...
    if (!xd || !xd[0] || !yd || !yd[0]) {

      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

        // Return NaN if either is NaN.
        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
        ? NaN

        // Return ±Infinity if either is ±Infinity.
        // Return ±0 if either is ±0.
        : !xd || !yd ? y.s / 0 : y.s * 0);
    }

    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length;

    // Ensure xd points to the longer array.
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }

    // Initialise the result array with zeros.
    r = [];
    rL = xdL + ydL;
    for (i = rL; i--;) r.push(0);

    // Multiply!
    for (i = ydL; --i >= 0;) {
      carry = 0;
      for (k = xdL + i; k > i;) {
        t = r[k] + yd[i] * xd[k - i - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }

      r[k] = (r[k] + carry) % BASE | 0;
    }

    // Remove trailing zeros.
    for (; !r[--rL];) r.pop();

    if (carry) ++e;
    else r.shift();

    y.d = r;
    y.e = getBase10Exponent(r, e);

    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };


  /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toBinary = function (sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toDecimalPlaces = P.toDP = function (dp, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);
    if (dp === void 0) return x;

    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    return finalise(x, dp + x.e + 1, rm);
  };


  /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toExponential = function (dp, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */
  P.toFixed = function (dp, rm) {
    var str, y,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    }

    // To determine whether to add the minus sign look at the value before it was rounded,
    // i.e. look at `x` rather than `y`.
    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */
  P.toFraction = function (maxD) {
    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
      x = this,
      xd = x.d,
      Ctor = x.constructor;

    if (!xd) return new Ctor(x);

    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);

    d = new Ctor(d1);
    e = d.e = getPrecision(xd) - x.e - 1;
    k = e % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

    if (maxD == null) {

      // d is 10**e, the minimum max-denominator needed.
      maxD = e > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
    }

    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e = xd.length * LOG_BASE * 2;

    for (;;)  {
      q = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.cmp(maxD) == 1) break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q.times(d2));
      n = d2;
    }

    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;

    // Determine which fraction is closer to x, n0/d0 or n1/d1?
    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
        ? [n1, d1] : [n0, d0];

    Ctor.precision = pr;
    external = true;

    return r;
  };


  /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toHexadecimal = P.toHex = function (sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };



  /*
   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value
   * of this Decimal.
   *
   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,
   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.
   *
   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
   * (ROUND_UP), and so on.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */
  P.toNearest = function (y, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);

    if (y == null) {

      // If x is not finite, return x.
      if (!x.d) return x;

      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm !== void 0) checkInt32(rm, 0, 8);

      // If x is not finite, return x if y is not NaN, else NaN.
      if (!x.d) return y.s ? x : y;

      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
      if (!y.d) {
        if (y.s) y.s = x.s;
        return y;
      }
    }

    // If y is not zero, calculate the nearest multiple of y to x.
    if (y.d[0]) {
      external = false;
      if (rm < 4) rm = [4, 5, 7, 8][rm];
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x);

    // If y is zero, return zero with the sign of x.
    } else {
      y.s = x.s;
      x = y;
    }

    return x;
  };


  /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */
  P.toNumber = function () {
    return +this;
  };


  /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toOctal = function (sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */
  P.toPower = P.pow = function (y) {
    var e, k, pr, r, rm, s,
      x = this,
      Ctor = x.constructor,
      yn = +(y = new Ctor(y));

    // Either ±Infinity, NaN or ±0?
    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

    x = new Ctor(x);

    if (x.eq(1)) return x;

    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (y.eq(1)) return finalise(x, pr, rm);

    // y exponent
    e = mathfloor(y.e / LOG_BASE);

    // If y is a small integer use the 'exponentiation by squaring' algorithm.
    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }

    s = x.s;

    // if x is negative
    if (s < 0) {

      // if y is not an integer
      if (e < y.d.length - 1) return new Ctor(NaN);

      // Result is positive if x is negative and the last digit of integer y is even.
      if ((y.d[e] & 1) == 0) s = 1;

      // if x.eq(-1)
      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s;
        return x;
      }
    }

    // Estimate result exponent.
    // x^y = 10^e,  where e = y * log10(x)
    // log10(x) = log10(x_significand) + x_exponent
    // log10(x_significand) = ln(x_significand) / ln(10)
    k = mathpow(+x, yn);
    e = k == 0 || !isFinite(k)
      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
      : new Ctor(k + '').e;

    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

    // Overflow/underflow?
    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

    external = false;
    Ctor.rounding = x.s = 1;

    // Estimate the extra guard digits needed to ensure five correct rounding digits from
    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
    // new Decimal(2.32456).pow('2087987436534566.46411')
    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
    k = Math.min(12, (e + '').length);

    // r = x^y = exp(y*ln(x))
    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
    if (r.d) {

      // Truncate to the required precision plus five rounding digits.
      r = finalise(r, pr + 5, 1);

      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
      // the result.
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;

        // Truncate to the increased precision plus five rounding digits.
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }

    r.s = s;
    external = true;
    Ctor.rounding = rm;

    return finalise(r, pr, rm);
  };


  /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toPrecision = function (sd, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */
  P.toSignificantDigits = P.toSD = function (sd, rm) {
    var x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    }

    return finalise(new Ctor(x), sd, rm);
  };


  /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */
  P.toString = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */
  P.truncated = P.trunc = function () {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };


  /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */
  P.valueOf = P.toJSON = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() ? '-' + str : str;
  };


  /*
  // Add aliases to match BigDecimal method names.
  // P.add = P.plus;
  P.subtract = P.minus;
  P.multiply = P.times;
  P.divide = P.div;
  P.remainder = P.mod;
  P.compareTo = P.cmp;
  P.negate = P.neg;
   */


  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


  /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */


  function digitsToString(d) {
    var i, k, ws,
      indexOfLastWord = d.length - 1,
      str = '',
      w = d[0];

    if (indexOfLastWord > 0) {
      str += w;
      for (i = 1; i < indexOfLastWord; i++) {
        ws = d[i] + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
        str += ws;
      }

      w = d[i];
      ws = w + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
    } else if (w === 0) {
      return '0';
    }

    // Remove trailing zeros of last w.
    for (; w % 10 === 0;) w /= 10;

    return str + w;
  }


  function checkInt32(i, min, max) {
    if (i !== ~~i || i < min || i > max) {
      throw Error(invalidArgument + i);
    }
  }


  /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */
  function checkRoundingDigits(d, i, rm, repeating) {
    var di, k, r, rd;

    // Get the length of the first word of the array d.
    for (k = d[0]; k >= 10; k /= 10) --i;

    // Is the rounding digit in the first word of d?
    if (--i < 0) {
      i += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i + 1) / LOG_BASE);
      i %= LOG_BASE;
    }

    // i is the index (0 - 6) of the rounding digit.
    // E.g. if within the word 3487563 the first rounding digit is 5,
    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
    k = mathpow(10, LOG_BASE - i);
    rd = d[di] % k | 0;

    if (repeating == null) {
      if (i < 3) {
        if (i == 0) rd = rd / 100 | 0;
        else if (i == 1) rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i < 4) {
        if (i == 0) rd = rd / 1000 | 0;
        else if (i == 1) rd = rd / 100 | 0;
        else if (i == 2) rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k ||
        (!repeating && rm > 3) && rd + 1 == k / 2) &&
          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
      }
    }

    return r;
  }


  // Convert string of `baseIn` to an array of numbers of `baseOut`.
  // Eg. convertBase('255', 10, 16) returns [15, 15].
  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
  function convertBase(str, baseIn, baseOut) {
    var j,
      arr = [0],
      arrL,
      i = 0,
      strL = str.length;

    for (; i < strL;) {
      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
      arr[0] += NUMERALS.indexOf(str.charAt(i++));
      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0) arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }

    return arr.reverse();
  }


  /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */
  function cosine(Ctor, x) {
    var k, y,
      len = x.d.length;

    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

    // Estimate the optimum number of times to use the argument reduction.
    if (len < 32) {
      k = Math.ceil(len / 3);
      y = Math.pow(4, -k).toString();
    } else {
      k = 16;
      y = '2.3283064365386962890625e-10';
    }

    Ctor.precision += k;

    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

    // Reverse argument reduction
    for (var i = k; i--;) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }

    Ctor.precision -= k;

    return x;
  }


  /*
   * Perform division in the specified base.
   */
  var divide = (function () {

    // Assumes non-zero x and k, and hence non-zero result.
    function multiplyInteger(x, k, base) {
      var temp,
        carry = 0,
        i = x.length;

      for (x = x.slice(); i--;) {
        temp = x[i] * k + carry;
        x[i] = temp % base | 0;
        carry = temp / base | 0;
      }

      if (carry) x.unshift(carry);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, r;

      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            r = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return r;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1;) a.shift();
    }

    return function (x, y, pr, rm, dp, base) {
      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
        yL, yz,
        Ctor = x.constructor,
        sign = x.s == y.s ? 1 : -1,
        xd = x.d,
        yd = y.d;

      // Either NaN, Infinity or 0?
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
      }

      if (base) {
        logBase = 1;
        e = x.e - y.e;
      } else {
        base = BASE;
        logBase = LOG_BASE;
        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }

      yL = yd.length;
      xL = xd.length;
      q = new Ctor(sign);
      qd = q.d = [];

      // Result exponent may be one less than e.
      // The digit array of a Decimal from toStringBinary may have trailing zeros.
      for (i = 0; yd[i] == (xd[i] || 0); i++);

      if (yd[i] > (xd[i] || 0)) e--;

      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }

      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {

        // Convert precision in number of base 10 digits to base 1e7 digits.
        sd = sd / logBase + 2 | 0;
        i = 0;

        // divisor < 1e7
        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++;

          // k is the carry.
          for (; (i < xL || k) && sd--; i++) {
            t = k * base + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          }

          more = k || i < xL;

        // divisor >= 1e7
        } else {

          // Normalise xd and yd so highest order digit of yd is >= base/2
          k = base / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k, base);
            xd = multiplyInteger(xd, k, base);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];

          if (yd[1] >= base / 2) ++yd0;

          do {
            k = 0;

            // Compare divisor and remainder.
            cmp = compare(yd, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // k will be how many times the divisor goes into the current remainder.
              k = rem0 / yd0 | 0;

              //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= base) k = base - 1;

                // product = divisor * trial digit.
                prod = multiplyInteger(yd, k, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                cmp = compare(prod, rem, prodL, remL);

                // product > remainder.
                if (cmp == 1) {
                  k--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
                }
              } else {

                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);

              // If product was < previous remainder.
              if (cmp == -1) {
                remL = rem.length;

                // Compare divisor and new remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < new remainder, subtract divisor from remainder.
                if (cmp < 1) {
                  k++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yd, remL, base);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            }    // if cmp === 1, k will be 0

            // Add the next digit, k, to the result array.
            qd[i++] = k;

            // Update the remainder.
            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }

          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

          more = rem[0] !== void 0;
        }

        // Leading zero?
        if (!qd[0]) qd.shift();
      }

      // logBase is 1 when divide is being used for base conversion.
      if (logBase == 1) {
        q.e = e;
        inexact = more;
      } else {

        // To calculate q.e, first get the number of digits of qd[0].
        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
        q.e = i + e * logBase - 1;

        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
      }

      return q;
    };
  })();


  /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */
   function finalise(x, sd, rm, isTruncated) {
    var digits, i, j, k, rd, roundUp, w, xd, xdi,
      Ctor = x.constructor;

    // Don't round if sd is null or undefined.
    out: if (sd != null) {
      xd = x.d;

      // Infinity/NaN.
      if (!xd) return x;

      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd containing rd, a base 1e7 number.
      // xdi: the index of w within xd.
      // digits: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

      // Get the length of the first word of the digits array xd.
      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
      i = sd - digits;

      // Is the rounding digit in the first word of xd?
      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];

        // Get the rounding digit at index j of w.
        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) {
          if (isTruncated) {

            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
            for (; k++ <= xdi;) xd.push(0);
            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi];

          // Get the number of digits of w.
          for (digits = 1; k >= 10; k /= 10) digits++;

          // Get the index of rd within w.
          i %= LOG_BASE;

          // Get the index of rd within w, adjusted for leading zeros.
          // The number of leading zeros of w is given by LOG_BASE - digits.
          j = i - LOG_BASE + digits;

          // Get the rounding digit at index j of w.
          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      }

      // Are there any non-zero digits after the rounding digit?
      isTruncated = isTruncated || sd < 0 ||
        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
      // will give 714.

      roundUp = rm < 4
        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
            rm == (x.s < 0 ? 8 : 7));

      if (sd < 1 || !xd[0]) {
        xd.length = 0;
        if (roundUp) {

          // Convert sd to decimal places.
          sd -= x.e + 1;

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {

          // Zero.
          xd[0] = x.e = 0;
        }

        return x;
      }

      // Remove excess digits.
      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i);

        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.
        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (roundUp) {
        for (;;) {

          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {

            // i will be the length of xd[0] before k is added.
            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
            j = xd[0] += k;
            for (k = 1; j >= 10; j /= 10) k++;

            // if i != k the length has increased.
            if (i != k) {
              x.e++;
              if (xd[0] == BASE) xd[0] = 1;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      }

      // Remove trailing zeros.
      for (i = xd.length; xd[--i] === 0;) xd.pop();
    }

    if (external) {

      // Overflow?
      if (x.e > Ctor.maxE) {

        // Infinity.
        x.d = null;
        x.e = NaN;

      // Underflow?
      } else if (x.e < Ctor.minE) {

        // Zero.
        x.e = 0;
        x.d = [0];
        // Ctor.underflow = true;
      } // else Ctor.underflow = false;
    }

    return x;
  }


  function finiteToString(x, isExp, sd) {
    if (!x.isFinite()) return nonFiniteToString(x);
    var k,
      e = x.e,
      str = digitsToString(x.d),
      len = str.length;

    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + '.' + str.slice(1);
      }

      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
    } else if (e < 0) {
      str = '0.' + getZeroString(-e - 1) + str;
      if (sd && (k = sd - len) > 0) str += getZeroString(k);
    } else if (e >= len) {
      str += getZeroString(e + 1 - len);
      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
    } else {
      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
      if (sd && (k = sd - len) > 0) {
        if (e + 1 === len) str += '.';
        str += getZeroString(k);
      }
    }

    return str;
  }


  // Calculate the base 10 exponent from the base 1e7 exponent.
  function getBase10Exponent(digits, e) {
    var w = digits[0];

    // Add the number of digits of the first word of the digits array.
    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
    return e;
  }


  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {

      // Reset global state in case the exception is caught.
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }
    return finalise(new Ctor(LN10), sd, 1, true);
  }


  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }


  function getPrecision(digits) {
    var w = digits.length - 1,
      len = w * LOG_BASE + 1;

    w = digits[w];

    // If non-zero...
    if (w) {

      // Subtract the number of trailing zeros of the last word.
      for (; w % 10 == 0; w /= 10) len--;

      // Add the number of digits of the first word.
      for (w = digits[0]; w >= 10; w /= 10) len++;
    }

    return len;
  }


  function getZeroString(k) {
    var zs = '';
    for (; k--;) zs += '0';
    return zs;
  }


  /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */
  function intPow(Ctor, x, n, pr) {
    var isTruncated,
      r = new Ctor(1),

      // Max n of 9007199254740991 takes 53 loop iterations.
      // Maximum digits array length; leaves [28, 34] guard digits.
      k = Math.ceil(pr / LOG_BASE + 4);

    external = false;

    for (;;) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k)) isTruncated = true;
      }

      n = mathfloor(n / 2);
      if (n === 0) {

        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0) ++r.d[n];
        break;
      }

      x = x.times(x);
      truncate(x.d, k);
    }

    external = true;

    return r;
  }


  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }


  /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */
  function maxOrMin(Ctor, args, ltgt) {
    var y,
      x = new Ctor(args[0]),
      i = 0;

    for (; ++i < args.length;) {
      y = new Ctor(args[i]);
      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }

    return x;
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */
  function naturalExponential(x, sd) {
    var denominator, guard, j, pow, sum, t, wpr,
      rep = 0,
      i = 0,
      k = 0,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // 0/NaN/Infinity?
    if (!x.d || !x.d[0] || x.e > 17) {

      return new Ctor(x.d
        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    t = new Ctor(0.03125);

    // while abs(x) >= 0.1
    while (x.e > -2) {

      // x = x / 2^5
      x = x.times(t);
      k += 5;
    }

    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
    // necessary to ensure the first 4 rounding digits are correct.
    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow = sum = new Ctor(1);
    Ctor.precision = wpr;

    for (;;) {
      pow = finalise(pow.times(x), wpr, 1);
      denominator = denominator.times(++i);
      t = sum.plus(divide(pow, denominator, wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        j = k;
        while (j--) sum = finalise(sum.times(sum), wpr, 1);

        // Check to see if the first 4 rounding digits are [49]999.
        // If so, repeat the summation with a higher precision, otherwise
        // e.g. with precision: 18, rounding: 1
        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {

          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow = t = new Ctor(1);
            i = 0;
            rep++;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
    }
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */
  function naturalLogarithm(y, sd) {
    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
      n = 1,
      guard = 10,
      x = y,
      xd = x.d,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // Is x negative or Infinity, NaN, 0 or 1?
    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    Ctor.precision = wpr += guard;
    c = digitsToString(xd);
    c0 = c.charAt(0);

    if (Math.abs(e = x.e) < 1.5e15) {

      // Argument reduction.
      // The series converges faster the closer the argument is to 1, so using
      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
      // later be divided by this number, then separate out the power of 10 using
      // ln(a*10^b) = ln(a) + b*ln(10).

      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
      // max n is 6 (gives 0.7 - 1.3)
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }

      e = x.e;

      if (c0 > 1) {
        x = new Ctor('0.' + c);
        e++;
      } else {
        x = new Ctor(c0 + '.' + c.slice(1));
      }
    } else {

      // The argument reduction method above may result in overflow if the argument y is a massive
      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
      // function using ln(x*10^e) = ln(x) + e*ln(10).
      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
      Ctor.precision = pr;

      return sd == null ? finalise(x, pr, rm, external = true) : x;
    }

    // x1 is x reduced to a value near 1.
    x1 = x;

    // Taylor series.
    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
    // where x = (y - 1)/(y + 1)    (|x| < 1)
    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;

    for (;;) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2);

        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
        sum = divide(sum, new Ctor(n), wpr, 1);

        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
        // been repeated previously) and the first 4 rounding digits 9999?
        // If so, restart the summation with a higher precision, otherwise
        // e.g. with precision: 12, rounding: 1
        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {
          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += guard;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
      denominator += 2;
    }
  }


  // ±Infinity, NaN.
  function nonFiniteToString(x) {
    // Unsigned.
    return String(x.s * x.s / 0);
  }


  /*
   * Parse the value of a new Decimal `x` from string `str`.
   */
  function parseDecimal(x, str) {
    var e, i, len;

    // Decimal point?
    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

    // Exponential form?
    if ((i = str.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
    str = str.slice(i, len);

    if (str) {
      len -= i;
      x.e = e = e - i - 1;
      x.d = [];

      // Transform base

      // e is the base 10 exponent.
      // i is where to slice str to get the first word of the digits array.
      i = (e + 1) % LOG_BASE;
      if (e < 0) i += LOG_BASE;

      if (i < len) {
        if (i) x.d.push(+str.slice(0, i));
        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }

      for (; i--;) str += '0';
      x.d.push(+str);

      if (external) {

        // Overflow?
        if (x.e > x.constructor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < x.constructor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // x.constructor.underflow = true;
        } // else x.constructor.underflow = false;
      }
    } else {

      // Zero.
      x.e = 0;
      x.d = [0];
    }

    return x;
  }


  /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */
  function parseOther(x, str) {
    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

    if (str === 'Infinity' || str === 'NaN') {
      if (!+str) x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }

    if (isHex.test(str))  {
      base = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str))  {
      base = 2;
    } else if (isOctal.test(str))  {
      base = 8;
    } else {
      throw Error(invalidArgument + str);
    }

    // Is there a binary exponent part?
    i = str.search(/p/i);

    if (i > 0) {
      p = +str.slice(i + 1);
      str = str.substring(2, i);
    } else {
      str = str.slice(2);
    }

    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
    // fraction part will be restored.
    i = str.indexOf('.');
    isFloat = i >= 0;
    Ctor = x.constructor;

    if (isFloat) {
      str = str.replace('.', '');
      len = str.length;
      i = len - i;

      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
    }

    xd = convertBase(str, base, BASE);
    xe = xd.length - 1;

    // Remove trailing zeros.
    for (i = xe; xd[i] === 0; --i) xd.pop();
    if (i < 0) return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false;

    // At what precision to perform the division to ensure exact conversion?
    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
    // Therefore using 4 * the number of digits of str will always be enough.
    if (isFloat) x = divide(x, divisor, len * 4);

    // Multiply by the binary exponent part if present.
    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
    external = true;

    return x;
  }


  /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */
  function sine(Ctor, x) {
    var k,
      len = x.d.length;

    if (len < 3) return taylorSeries(Ctor, 2, x, x);

    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;

    // Max k before Math.pow precision loss is 22
    x = x.times(Math.pow(5, -k));
    x = taylorSeries(Ctor, 2, x, x);

    // Reverse argument reduction
    var sin2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }

    return x;
  }


  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j, t, u, x2,
      i = 1,
      pr = Ctor.precision,
      k = Math.ceil(pr / LOG_BASE);

    external = false;
    x2 = x.times(x);
    u = new Ctor(y);

    for (;;) {
      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
      u = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u.plus(y);

      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u.d[j] && j--;);
        if (j == -1) break;
      }

      j = u;
      u = y;
      y = t;
      t = j;
      i++;
    }

    external = true;
    t.d.length = k + 1;

    return t;
  }


  // Return the absolute value of `x` reduced to less than or equal to half pi.
  function toLessThanHalfPi(Ctor, x) {
    var t,
      isNeg = x.s < 0,
      pi = getPi(Ctor, Ctor.precision, 1),
      halfPi = pi.times(0.5);

    x = x.abs();

    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }

    t = x.divToInt(pi);

    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi));

      // 0 <= x < pi
      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
        return x;
      }

      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
    }

    return x.minus(pi).abs();
  }


  /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */
  function toStringBinary(x, baseOut, sd, rm) {
    var base, e, i, k, len, roundUp, str, xd, y,
      Ctor = x.constructor,
      isExp = sd !== void 0;

    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }

    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i = str.indexOf('.');

      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
      // minBinaryExponent = floor(decimalExponent * log[2](10))
      // log[2](10) = 3.321928094887362347870319429489390175864

      if (isExp) {
        base = 2;
        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base = baseOut;
      }

      // Convert the number as an integer then divide the result by its base raised to a power such
      // that the fraction part will be restored.

      // Non-integer.
      if (i >= 0) {
        str = str.replace('.', '');
        y = new Ctor(1);
        y.e = str.length - i;
        y.d = convertBase(finiteToString(y), 10, base);
        y.e = y.d.length;
      }

      xd = convertBase(str, 10, base);
      e = len = xd.length;

      // Remove trailing zeros.
      for (; xd[--len] == 0;) xd.pop();

      if (!xd[0]) {
        str = isExp ? '0p+0' : '0';
      } else {
        if (i < 0) {
          e--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e;
          x = divide(x, y, sd, rm, 0, base);
          xd = x.d;
          e = x.e;
          roundUp = inexact;
        }

        // The rounding digit, i.e. the digit after the digit that may be rounded up.
        i = xd[sd];
        k = base / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;

        roundUp = rm < 4
          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
            rm === (x.s < 0 ? 8 : 7));

        xd.length = sd;

        if (roundUp) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (; ++xd[--sd] > base - 1;) {
            xd[sd] = 0;
            if (!sd) {
              ++e;
              xd.unshift(1);
            }
          }
        }

        // Determine trailing zeros.
        for (len = xd.length; !xd[len - 1]; --len);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

        // Add binary exponent suffix?
        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i = baseOut == 16 ? 4 : 3;
              for (--len; len % i; len++) str += '0';
              xd = convertBase(str, base, baseOut);
              for (len = xd.length; !xd[len - 1]; --len);

              // xd[0] will always be be 1
              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
            } else {
              str = str.charAt(0) + '.' + str.slice(1);
            }
          }

          str =  str + (e < 0 ? 'p' : 'p+') + e;
        } else if (e < 0) {
          for (; ++e;) str = '0' + str;
          str = '0.' + str;
        } else {
          if (++e > len) for (e -= len; e-- ;) str += '0';
          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
    }

    return x.s < 0 ? '-' + str : str;
  }


  // Does not strip trailing zeros.
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }


  // Decimal methods


  /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  tan
   *  tanh
   *  trunc
   */


  /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function abs(x) {
    return new this(x).abs();
  }


  /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function acos(x) {
    return new this(x).acos();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function acosh(x) {
    return new this(x).acosh();
  }


  /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function add(x, y) {
    return new this(x).plus(y);
  }


  /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function asin(x) {
    return new this(x).asin();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function asinh(x) {
    return new this(x).asinh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function atan(x) {
    return new this(x).atan();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function atanh(x) {
    return new this(x).atanh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */
  function atan2(y, x) {
    y = new this(y);
    x = new this(x);
    var r,
      pr = this.precision,
      rm = this.rounding,
      wpr = pr + 4;

    // Either NaN
    if (!y.s || !x.s) {
      r = new this(NaN);

    // Both ±Infinity
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s;

    // x is ±Infinity or y is ±0
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s;

    // y is ±Infinity or x is ±0
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s;

    // Both non-zero and finite
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }

    return r;
  }


  /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function cbrt(x) {
    return new this(x).cbrt();
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */
  function ceil(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }


  /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */
  function config(obj) {
    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
    var i, p, v,
      useDefaults = obj.defaults === true,
      ps = [
        'precision', 1, MAX_DIGITS,
        'rounding', 0, 8,
        'toExpNeg', -EXP_LIMIT, 0,
        'toExpPos', 0, EXP_LIMIT,
        'maxE', 0, EXP_LIMIT,
        'minE', -EXP_LIMIT, 0,
        'modulo', 0, 9
      ];

    for (i = 0; i < ps.length; i += 3) {
      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
        else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != 'undefined' && crypto &&
            (crypto.getRandomValues || crypto.randomBytes)) {
            this[p] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p] = false;
        }
      } else {
        throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }


  /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cos(x) {
    return new this(x).cos();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cosh(x) {
    return new this(x).cosh();
  }


  /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */
  function clone(obj) {
    var i, p, ps;

    /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */
    function Decimal(v) {
      var e, i, t,
        x = this;

      // Decimal called without new.
      if (!(x instanceof Decimal)) return new Decimal(v);

      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
      // which points to Object.
      x.constructor = Decimal;

      // Duplicate.
      if (v instanceof Decimal) {
        x.s = v.s;
        x.e = v.e;
        x.d = (v = v.d) ? v.slice() : v;
        return;
      }

      t = typeof v;

      if (t === 'number') {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }

        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        }

        // Fast path for small integers.
        if (v === ~~v && v < 1e7) {
          for (e = 0, i = v; i >= 10; i /= 10) e++;
          x.e = e;
          x.d = [v];
          return;

        // Infinity, NaN.
        } else if (v * 0 !== 0) {
          if (!v) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }

        return parseDecimal(x, v.toString());

      } else if (t !== 'string') {
        throw Error(invalidArgument + v);
      }

      // Minus sign?
      if (v.charCodeAt(0) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        x.s = 1;
      }

      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }

    Decimal.prototype = P;

    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;

    Decimal.config = Decimal.set = config;
    Decimal.clone = clone;
    Decimal.isDecimal = isDecimalInstance;

    Decimal.abs = abs;
    Decimal.acos = acos;
    Decimal.acosh = acosh;        // ES6
    Decimal.add = add;
    Decimal.asin = asin;
    Decimal.asinh = asinh;        // ES6
    Decimal.atan = atan;
    Decimal.atanh = atanh;        // ES6
    Decimal.atan2 = atan2;
    Decimal.cbrt = cbrt;          // ES6
    Decimal.ceil = ceil;
    Decimal.cos = cos;
    Decimal.cosh = cosh;          // ES6
    Decimal.div = div;
    Decimal.exp = exp;
    Decimal.floor = floor;
    Decimal.hypot = hypot;        // ES6
    Decimal.ln = ln;
    Decimal.log = log;
    Decimal.log10 = log10;        // ES6
    Decimal.log2 = log2;          // ES6
    Decimal.max = max;
    Decimal.min = min;
    Decimal.mod = mod;
    Decimal.mul = mul;
    Decimal.pow = pow;
    Decimal.random = random;
    Decimal.round = round;
    Decimal.sign = sign;          // ES6
    Decimal.sin = sin;
    Decimal.sinh = sinh;          // ES6
    Decimal.sqrt = sqrt;
    Decimal.sub = sub;
    Decimal.tan = tan;
    Decimal.tanh = tanh;          // ES6
    Decimal.trunc = trunc;        // ES6

    if (obj === void 0) obj = {};
    if (obj) {
      if (obj.defaults !== true) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }
    }

    Decimal.config(obj);

    return Decimal;
  }


  /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function div(x, y) {
    return new this(x).div(y);
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */
  function exp(x) {
    return new this(x).exp();
  }


  /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */
  function floor(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }


  /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   */
  function hypot() {
    var i, n,
      t = new this(0);

    external = false;

    for (i = 0; i < arguments.length;) {
      n = new this(arguments[i++]);
      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }
        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }

    external = true;

    return t.sqrt();
  }


  /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */
  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function ln(x) {
    return new this(x).ln();
  }


  /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */
  function log(x, y) {
    return new this(x).log(y);
  }


  /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log2(x) {
    return new this(x).log(2);
  }


  /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log10(x) {
    return new this(x).log(10);
  }


  /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function max() {
    return maxOrMin(this, arguments, 'lt');
  }


  /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function min() {
    return maxOrMin(this, arguments, 'gt');
  }


  /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mod(x, y) {
    return new this(x).mod(y);
  }


  /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mul(x, y) {
    return new this(x).mul(y);
  }


  /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */
  function pow(x, y) {
    return new this(x).pow(y);
  }


  /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */
  function random(sd) {
    var d, e, k, n,
      i = 0,
      r = new this(1),
      rd = [];

    if (sd === void 0) sd = this.precision;
    else checkInt32(sd, 1, MAX_DIGITS);

    k = Math.ceil(sd / LOG_BASE);

    if (!this.crypto) {
      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

    // Browsers supporting crypto.getRandomValues.
    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));

      for (; i < k;) {
        n = d[i];

        // 0 <= n < 4294967296
        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
        if (n >= 4.29e9) {
          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {

          // 0 <= n <= 4289999999
          // 0 <= (n % 1e7) <= 9999999
          rd[i++] = n % 1e7;
        }
      }

    // Node.js supporting crypto.randomBytes.
    } else if (crypto.randomBytes) {

      // buffer
      d = crypto.randomBytes(k *= 4);

      for (; i < k;) {

        // 0 <= n < 2147483648
        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
        if (n >= 2.14e9) {
          crypto.randomBytes(4).copy(d, i);
        } else {

          // 0 <= n <= 2139999999
          // 0 <= (n % 1e7) <= 9999999
          rd.push(n % 1e7);
          i += 4;
        }
      }

      i = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }

    k = rd[--i];
    sd %= LOG_BASE;

    // Convert trailing digits to zeros according to sd.
    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i] = (k / n | 0) * n;
    }

    // Remove trailing words which are zero.
    for (; rd[i] === 0; i--) rd.pop();

    // Zero?
    if (i < 0) {
      e = 0;
      rd = [0];
    } else {
      e = -1;

      // Remove leading words which are zero and adjust exponent accordingly.
      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

      // Count the digits of the first word of rd to determine leading zeros.
      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

      // Adjust the exponent for leading zeros of the first word of rd.
      if (k < LOG_BASE) e -= LOG_BASE - k;
    }

    r.e = e;
    r.d = rd;

    return r;
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */
  function round(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }


  /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   */
  function sign(x) {
    x = new this(x);
    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
  }


  /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sin(x) {
    return new this(x).sin();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sinh(x) {
    return new this(x).sinh();
  }


  /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function sqrt(x) {
    return new this(x).sqrt();
  }


  /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function sub(x, y) {
    return new this(x).sub(y);
  }


  /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tan(x) {
    return new this(x).tan();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tanh(x) {
    return new this(x).tanh();
  }


  /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */
  function trunc(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  }


  // Create and configure initial Decimal constructor.
  Decimal = clone(DEFAULTS);

  Decimal['default'] = Decimal.Decimal = Decimal;

  // Create the internal constants from their string values.
  LN10 = new Decimal(LN10);
  PI = new Decimal(PI);


  // Export.


  // AMD.
  if (typeof define == 'function' && define.amd) {
    define(function () {
      return Decimal;
    });

  // Node and other environments that support module.exports.
  } else if (typeof module != 'undefined' && module.exports) {
    module.exports = Decimal;

  // Browser.
  } else {
    if (!globalScope) {
      globalScope = typeof self != 'undefined' && self && self.self == self
        ? self : Function('return this')();
    }

    noConflict = globalScope.Decimal;
    Decimal.noConflict = function () {
      globalScope.Decimal = noConflict;
      return Decimal;
    };

    globalScope.Decimal = Decimal;
  }
})(this);

},{}],7:[function(require,module,exports){
'use strict';

/**
 * Representation of a single EventEmitter function.
 *
 * @param {Function} fn Event handler to be called.
 * @param {Mixed} context Context for function execution.
 * @param {Boolean} once Only emit once
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal EventEmitter interface that is molded against the Node.js
 * EventEmitter interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() { /* Nothing to set */ }

/**
 * Holds the assigned EventEmitters by name.
 *
 * @type {Object}
 * @private
 */
EventEmitter.prototype._events = undefined;

/**
 * Return a list of assigned event listeners.
 *
 * @param {String} event The events that should be listed.
 * @returns {Array}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  if (!this._events || !this._events[event]) return [];
  if (this._events[event].fn) return [this._events[event].fn];

  for (var i = 0, l = this._events[event].length, ee = new Array(l); i < l; i++) {
    ee[i] = this._events[event][i].fn;
  }

  return ee;
};

/**
 * Emit an event to all registered event listeners.
 *
 * @param {String} event The name of the event.
 * @returns {Boolean} Indication if we've emitted an event.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  if (!this._events || !this._events[event]) return false;

  var listeners = this._events[event]
    , len = arguments.length
    , args
    , i;

  if ('function' === typeof listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this);

  if (!this._events) this._events = {};
  if (!this._events[event]) this._events[event] = listener;
  else {
    if (!this._events[event].fn) this._events[event].push(listener);
    else this._events[event] = [
      this._events[event], listener
    ];
  }

  return this;
};

/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true);

  if (!this._events) this._events = {};
  if (!this._events[event]) this._events[event] = listener;
  else {
    if (!this._events[event].fn) this._events[event].push(listener);
    else this._events[event] = [
      this._events[event], listener
    ];
  }

  return this;
};

/**
 * Remove event listeners.
 *
 * @param {String} event The event we want to remove.
 * @param {Function} fn The listener that we need to find.
 * @param {Boolean} once Only remove once listeners.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, once) {
  if (!this._events || !this._events[event]) return this;

  var listeners = this._events[event]
    , events = [];

  if (fn) {
    if (listeners.fn && (listeners.fn !== fn || (once && !listeners.once))) {
      events.push(listeners);
    }
    if (!listeners.fn) for (var i = 0, length = listeners.length; i < length; i++) {
      if (listeners[i].fn !== fn || (once && !listeners[i].once)) {
        events.push(listeners[i]);
      }
    }
  }

  //
  // Reset the array, or remove it completely if we have no more listeners.
  //
  if (events.length) {
    this._events[event] = events.length === 1 ? events[0] : events;
  } else {
    delete this._events[event];
  }

  return this;
};

/**
 * Remove all listeners or only the listeners for the specified event.
 *
 * @param {String} event The event want to remove all listeners for.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  if (!this._events) return this;

  if (event) delete this._events[event];
  else this._events = {};

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the module.
//
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.EventEmitter2 = EventEmitter;
EventEmitter.EventEmitter3 = EventEmitter;

//
// Expose the module.
//
module.exports = EventEmitter;

},{}],8:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],9:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))
},{"_process":3}],10:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":3}],11:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))
},{"./emptyFunction":8,"_process":3}],12:[function(require,module,exports){
/**
 * @license Fraction.js v4.0.4 09/09/2015
 * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/


/**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */

(function (root) {

  "use strict";

  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
  var MAX_CYCLE_LEN = 2000;

  // Parsed data to avoid calling "new" all the time
  var P = {
    "s": 1,
    "n": 0,
    "d": 1
  };

  function createError(name) {
    var errorConstructor = function () {
      var temp = Error.apply(this, arguments);
      temp.name = this.name = name;
      this.stack = temp.stack;
      this.message = temp.message;
    };

    var IntermediateInheritor = function () {};
    IntermediateInheritor.prototype = Error.prototype;
    errorConstructor.prototype = new IntermediateInheritor();

    return errorConstructor;
  }

  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

  function assign(n, s) {

    if (isNaN(n = parseInt(n, 10))) {
      throwInvalidParam();
    }
    return n * s;
  }

  function throwInvalidParam() {
    throw new InvalidParameter();
  }

  var parse = function (p1, p2) {

    var n = 0, d = 1, s = 1;
    var v = 0, w = 0, x = 0, y = 1, z = 1;

    var A = 0, B = 1;
    var C = 1, D = 1;

    var N = 10000000;
    var M;

    if (p1 === undefined || p1 === null) {
      /* void */
    } else if (p2 !== undefined) {
      n = p1;
      d = p2;
      s = n * d;
    } else
      switch (typeof p1) {

        case "object":
        {
          if ("d" in p1 && "n" in p1) {
            n = p1["n"];
            d = p1["d"];
            if ("s" in p1)
              n*= p1["s"];
          } else if (0 in p1) {
            n = p1[0];
            if (1 in p1)
              d = p1[1];
          } else {
            throwInvalidParam();
          }
          s = n * d;
          break;
        }
        case "number":
        {
          if (p1 < 0) {
            s = p1;
            p1 = -p1;
          }

          if (p1 % 1 === 0) {
            n = p1;
          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

            if (p1 >= 1) {
              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
              p1/= z;
            }

            // Using Farey Sequences
            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

            while (B <= N && D <= N) {
              M = (A + C) / (B + D);

              if (p1 === M) {
                if (B + D <= N) {
                  n = A + C;
                  d = B + D;
                } else if (D > B) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
                break;

              } else {

                if (p1 > M) {
                  A+= C;
                  B+= D;
                } else {
                  C+= A;
                  D+= B;
                }

                if (B > N) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
              }
            }
            n*= z;
          } else if (isNaN(p1) || isNaN(p2)) {
            d = n = NaN;
          }
          break;
        }
        case "string":
        {
          B = p1.match(/\d+|./g);
          
          if (B === null)
            throwInvalidParam();

          if (B[A] === '-') {// Check for minus sign at the beginning
            s = -1;
            A++;
          } else if (B[A] === '+') {// Check for plus sign at the beginning
            A++;
          }

          if (B.length === A + 1) { // Check if it's just a simple number "1234"
            w = assign(B[A++], s);
          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

            if (B[A] !== '.') { // Handle 0.5 and .5
              v = assign(B[A++], s);
            }
            A++;

            // Check for decimal places
            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
              w = assign(B[A], s);
              y = Math.pow(10, B[A].length);
              A++;
            }

            // Check for repeating places
            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
              x = assign(B[A + 1], s);
              z = Math.pow(10, B[A + 1].length) - 1;
              A+= 3;
            }

          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
            w = assign(B[A], s);
            y = assign(B[A + 2], 1);
            A+= 3;
          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
            v = assign(B[A], s);
            w = assign(B[A + 2], s);
            y = assign(B[A + 4], 1);
            A+= 5;
          }

          if (B.length <= A) { // Check for more tokens on the stack
            d = y * z;
            s = /* void */
                    n = x + d * v + z * w;
            break;
          }

          /* Fall through on error */
        }
        default:
          throwInvalidParam();
      }

    if (d === 0) {
      throw new DivisionByZero();
    }

    P["s"] = s < 0 ? -1 : 1;
    P["n"] = Math.abs(n);
    P["d"] = Math.abs(d);
  };

  var modpow = function (b, e, m) {

    for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {

      if (e & 1) {
        r = (r * b) % m;
      }
    }
    return r;
  };

  var cycleLen = function (n, d) {

    for (; d % 2 === 0;
            d/= 2) {}

    for (; d % 5 === 0;
            d/= 5) {}

    if (d === 1) // Catch non-cyclic numbers
      return 0;

    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
    // 10^(d-1) % d == 1
    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
    // as we want to translate the numbers to strings.

    var rem = 10 % d;

    for (var t = 1; rem !== 1; t++) {
      rem = rem * 10 % d;

      if (t > MAX_CYCLE_LEN)
        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
    }
    return t;
  };

  var cycleStart = function (n, d, len) {

    var rem1 = 1;
    var rem2 = modpow(10, len, d);

    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
      // Solve 10^s == 10^(s+t) (mod d)

      if (rem1 === rem2)
        return t;

      rem1 = rem1 * 10 % d;
      rem2 = rem2 * 10 % d;
    }
    return 0;
  };

  var gcd = function (a, b) {

    if (!a) return b;
    if (!b) return a;

    while (1) {
      a%= b;
      if (!a) return b;
      b%= a;
      if (!b) return a;
    }
  };

  /**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction} a
   * @param {number=} b
   */
  function Fraction(a, b) {

    if (!(this instanceof Fraction)) {
      return new Fraction(a, b);
    }

    parse(a, b);

    if (Fraction['REDUCE']) {
      a = gcd(P["d"], P["n"]); // Abuse a
    } else {
      a = 1;
    }

    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  }

  /**
   * Boolean global variable to be able to disable automatic reduction of the fraction
   *
   */
  Fraction['REDUCE'] = 1;

  Fraction.prototype = {

    "s": 1,
    "n": 0,
    "d": 1,

    /**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/
    "abs": function () {

      return new Fraction(this["n"], this["d"]);
    },

    /**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/
    "neg": function () {

      return new Fraction(-this["s"] * this["n"], this["d"]);
    },

    /**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/
    "add": function (a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/
    "sub": function (a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/
    "mul": function (a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/
    "div": function (a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["d"],
              this["d"] * P["n"]
              );
    },

    /**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/
    "clone": function () {
      return new Fraction(this);
    },

    /**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/
    "mod": function (a, b) {

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return new Fraction(NaN);
      }

      if (a === undefined) {
        return new Fraction(this["s"] * this["n"] % this["d"], 1);
      }

      parse(a, b);
      if (0 === P["n"] && 0 === this["d"]) {
        Fraction(0, 0); // Throw DivisionByZero
      }

      /*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/

      /*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */
      return new Fraction(
              (this["s"] * P["d"] * this["n"]) % (P["n"] * this["d"]),
              P["d"] * this["d"]
              );
    },

    /**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */
    "gcd": function (a, b) {

      parse(a, b);

      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

      return new Fraction(gcd(P["n"], this["n"]), P["d"] * this["d"] / gcd(P["d"], this["d"]));
    },

    /**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */
    "lcm": function (a, b) {

      parse(a, b);

      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

      if (P["n"] === 0 && this["n"] === 0) {
        return new Fraction;
      }
      return new Fraction(P["n"] * this["n"] / gcd(P["n"], this["n"]), gcd(P["d"], this["d"]));
    },

    /**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/
    "ceil": function (places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/
    "floor": function (places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/
    "round": function (places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/
    "inverse": function () {

      return new Fraction(this["s"] * this["d"], this["n"]);
    },

    /**
     * Calculates the fraction to some integer exponent
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */
    "pow": function (m) {

      if (m < 0) {
        return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
      } else {
        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
      }
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "equals": function (a, b) {

      parse(a, b);
      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "compare": function (a, b) {

      parse(a, b);
      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
      return (0 < t) - (t < 0);
    },

    /**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */
    "divisible": function (a, b) {

      parse(a, b);
      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
    },

    /**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/
    'valueOf': function () {

      return this["s"] * this["n"] / this["d"];
    },

    /**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
     **/
    'toFraction': function (excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str+= '-';
      }

      if (d === 1) {
        str+= n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str+= whole;
          str+= " ";
          n%= d;
        }

        str+= n;
        str+= '/';
        str+= d;
      }
      return str;
    },

    /**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/
    'toLatex': function (excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str+= '-';
      }

      if (d === 1) {
        str+= n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str+= whole;
          n%= d;
        }

        str+= "\\frac{";
        str+= n;
        str+= '}{';
        str+= d;
        str+= '}';
      }
      return str;
    },

    /**
     * Returns an array of continued fraction elements
     *
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */
    'toContinued': function () {

      var t;
      var a = this['n'];
      var b = this['d'];
      var res = [];

      do {
        res.push(Math.floor(a / b));
        t = a % b;
        a = b;
        b = t;
      } while (a !== 1);

      return res;
    },

    /**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/
    'toString': function () {

      var g;
      var N = this["n"];
      var D = this["d"];

      if (isNaN(N) || isNaN(D)) {
        return "NaN";
      }

      if (!Fraction['REDUCE']) {
        g = gcd(N, D);
        N/= g;
        D/= g;
      }

      var dec = 15; // 15 = decimal places when no repitation

      var cycLen = cycleLen(N, D); // Cycle length
      var cycOff = cycleStart(N, D, cycLen); // Cycle start

      var str = this['s'] === -1 ? "-" : "";

      str+= N / D | 0;

      N%= D;
      N*= 10;

      if (N)
        str+= ".";

      if (cycLen) {

        for (var i = cycOff; i--; ) {
          str+= N / D | 0;
          N%= D;
          N*= 10;
        }
        str+= "(";
        for (var i = cycLen; i--; ) {
          str+= N / D | 0;
          N%= D;
          N*= 10;
        }
        str+= ")";
      } else {
        for (var i = dec; N && i--; ) {
          str+= N / D | 0;
          N%= D;
          N*= 10;
        }
      }
      return str;
    }
  };

  if (typeof define === "function" && define["amd"]) {
    define([], function () {
      return Fraction;
    });
  } else if (typeof exports === "object") {
    module["exports"] = Fraction;
  } else {
    root['Fraction'] = Fraction;
  }

})(this);

},{}],13:[function(require,module,exports){
var structuredClone = require('./structured-clone');
var HELLO_INTERVAL_LENGTH = 200;
var HELLO_TIMEOUT_LENGTH = 60000;

function IFrameEndpoint() {
  var parentOrigin;
  var listeners = {};
  var isInitialized = false;
  var connected = false;
  var postMessageQueue = [];
  var helloInterval;

  function postToTarget(message, target) {
    // See http://dev.opera.com/articles/view/window-postmessage-messagechannel/#crossdoc
    //     https://github.com/Modernizr/Modernizr/issues/388
    //     http://jsfiddle.net/ryanseddon/uZTgD/2/
    if (structuredClone.supported()) {
      window.parent.postMessage(message, target);
    } else {
      window.parent.postMessage(JSON.stringify(message), target);
    }
  }

  function post(type, content) {
    var message;
    // Message object can be constructed from 'type' and 'content' arguments or it can be passed
    // as the first argument.
    if (arguments.length === 1 && typeof type === 'object' && typeof type.type === 'string') {
      message = type;
    } else {
      message = {
        type: type,
        content: content
      };
    }
    if (connected) {
      postToTarget(message, parentOrigin);
    } else {
      postMessageQueue.push(message);
    }
  }

  // Only the initial 'hello' message goes permissively to a '*' target (because due to cross origin
  // restrictions we can't find out our parent's origin until they voluntarily send us a message
  // with it.)
  function postHello() {
    postToTarget({
      type: 'hello',
      origin: document.location.href.match(/(.*?\/\/.*?)\//)[1]
    }, '*');
  }

  function addListener(type, fn) {
    listeners[type] = fn;
  }

  function removeAllListeners() {
    listeners = {};
  }

  function getListenerNames() {
    return Object.keys(listeners);
  }

  function messageListener(message) {
      // Anyone can send us a message. Only pay attention to messages from parent.
      if (message.source !== window.parent) return;

      var messageData = message.data;

      if (typeof messageData === 'string') messageData = JSON.parse(messageData);

      // We don't know origin property of parent window until it tells us.
      if (!connected && messageData.type === 'hello') {
        // This is the return handshake from the embedding window.
        parentOrigin = messageData.origin;
        connected = true;
        stopPostingHello();
        while(postMessageQueue.length > 0) {
          post(postMessageQueue.shift());
        }
      }

      // Perhaps-redundantly insist on checking origin as well as source window of message.
      if (message.origin === parentOrigin) {
        if (listeners[messageData.type]) listeners[messageData.type](messageData.content);
      }
   }

   function disconnect() {
     connected = false;
     stopPostingHello();
     window.removeEventListener('message', messsageListener);
   }

  /**
    Initialize communication with the parent frame. This should not be called until the app's custom
    listeners are registered (via our 'addListener' public method) because, once we open the
    communication, the parent window may send any messages it may have queued. Messages for which
    we don't have handlers will be silently ignored.
  */
  function initialize() {
    if (isInitialized) {
      return;
    }
    isInitialized = true;
    if (window.parent === window) return;

    // We kick off communication with the parent window by sending a "hello" message. Then we wait
    // for a handshake (another "hello" message) from the parent window.
    postHello();
    startPostingHello();
    window.addEventListener('message', messageListener, false);
  }

  function startPostingHello() {
    if (helloInterval) {
      stopPostingHello();
    }
    helloInterval = window.setInterval(postHello, HELLO_INTERVAL_LENGTH);
    window.setTimeout(stopPostingHello, HELLO_TIMEOUT_LENGTH);
  }

  function stopPostingHello() {
    window.clearInterval(helloInterval);
    helloInterval = null;
  }

  // Public API.
  return {
    initialize        : initialize,
    getListenerNames  : getListenerNames,
    addListener       : addListener,
    removeAllListeners: removeAllListeners,
    disconnect        : disconnect,
    post              : post
  };
}

var instance = null;

// IFrameEndpoint is a singleton, as iframe can't have multiple parents anyway.
module.exports = function getIFrameEndpoint() {
  if (!instance) {
    instance = new IFrameEndpoint();
  }
  return instance;
};
},{"./structured-clone":16}],14:[function(require,module,exports){
"use strict";

var ParentEndpoint = require('./parent-endpoint');
var getIFrameEndpoint = require('./iframe-endpoint');

// Not a real UUID as there's an RFC for that (needed for proper distributed computing).
// But in this fairly parochial situation, we just need to be fairly sure to avoid repeats.
function getPseudoUUID() {
    var chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
    var len = chars.length;
    var ret = [];

    for (var i = 0; i < 10; i++) {
        ret.push(chars[Math.floor(Math.random() * len)]);
    }
    return ret.join('');
}

module.exports = function IframePhoneRpcEndpoint(handler, namespace, targetWindow, targetOrigin, phone) {
    var pendingCallbacks = Object.create({});

    // if it's a non-null object, rather than a function, 'handler' is really an options object
    if (handler && typeof handler === 'object') {
        namespace = handler.namespace;
        targetWindow = handler.targetWindow;
        targetOrigin = handler.targetOrigin;
        phone = handler.phone;
        handler = handler.handler;
    }

    if ( ! phone ) {
        if (targetWindow === window.parent) {
            phone = getIFrameEndpoint();
            phone.initialize();
        } else {
            phone = new ParentEndpoint(targetWindow, targetOrigin);
        }
    }

    phone.addListener(namespace, function(message) {
        var callbackObj;

        if (message.messageType === 'call' && typeof this.handler === 'function') {
            this.handler.call(undefined, message.value, function(returnValue) {
                phone.post(namespace, {
                    messageType: 'returnValue',
                    uuid: message.uuid,
                    value: returnValue
                });
            });
        } else if (message.messageType === 'returnValue') {
            callbackObj = pendingCallbacks[message.uuid];

            if (callbackObj) {
                window.clearTimeout(callbackObj.timeout);
                if (callbackObj.callback) {
                    callbackObj.callback.call(undefined, message.value);
                }
                pendingCallbacks[message.uuid] = null;
            }
        }
    }.bind(this));

    function call(message, callback) {
        var uuid = getPseudoUUID();

        pendingCallbacks[uuid] = {
            callback: callback,
            timeout: window.setTimeout(function() {
                if (callback) {
                    callback(undefined, new Error("IframePhone timed out waiting for reply"));
                }
            }, 2000)
        };

        phone.post(namespace, {
            messageType: 'call',
            uuid: uuid,
            value: message
        });
    }

    function disconnect() {
        phone.disconnect();
    }

    this.handler = handler;
    this.call = call.bind(this);
    this.disconnect = disconnect.bind(this);
};

},{"./iframe-endpoint":13,"./parent-endpoint":15}],15:[function(require,module,exports){
var structuredClone = require('./structured-clone');

/**
  Call as:
    new ParentEndpoint(targetWindow, targetOrigin, afterConnectedCallback)
      targetWindow is a WindowProxy object. (Messages will be sent to it)

      targetOrigin is the origin of the targetWindow. (Messages will be restricted to this origin)

      afterConnectedCallback is an optional callback function to be called when the connection is
        established.

  OR (less secure):
    new ParentEndpoint(targetIframe, afterConnectedCallback)

      targetIframe is a DOM object (HTMLIframeElement); messages will be sent to its contentWindow.

      afterConnectedCallback is an optional callback function

    In this latter case, targetOrigin will be inferred from the value of the src attribute of the
    provided DOM object at the time of the constructor invocation. This is less secure because the
    iframe might have been navigated to an unexpected domain before constructor invocation.

  Note that it is important to specify the expected origin of the iframe's content to safeguard
  against sending messages to an unexpected domain. This might happen if our iframe is navigated to
  a third-party URL unexpectedly. Furthermore, having a reference to Window object (as in the first
  form of the constructor) does not protect against sending a message to the wrong domain. The
  window object is actualy a WindowProxy which transparently proxies the Window object of the
  underlying iframe, so that when the iframe is navigated, the "same" WindowProxy now references a
  completely differeent Window object, possibly controlled by a hostile domain.

  See http://www.esdiscuss.org/topic/a-dom-use-case-that-can-t-be-emulated-with-direct-proxies for
  more about this weird behavior of WindowProxies (the type returned by <iframe>.contentWindow).
*/

module.exports = function ParentEndpoint(targetWindowOrIframeEl, targetOrigin, afterConnectedCallback) {
  var selfOrigin = window.location.href.match(/(.*?\/\/.*?)\//)[1];
  var postMessageQueue = [];
  var connected = false;
  var handlers = {};
  var targetWindowIsIframeElement;

  function getOrigin(iframe) {
    return iframe.src.match(/(.*?\/\/.*?)\//)[1];
  }

  function post(type, content) {
    var message;
    // Message object can be constructed from 'type' and 'content' arguments or it can be passed
    // as the first argument.
    if (arguments.length === 1 && typeof type === 'object' && typeof type.type === 'string') {
      message = type;
    } else {
      message = {
        type: type,
        content: content
      };
    }
    if (connected) {
      var tWindow = getTargetWindow();
      // if we are laready connected ... send the message
      message.origin = selfOrigin;
      // See http://dev.opera.com/articles/view/window-postmessage-messagechannel/#crossdoc
      //     https://github.com/Modernizr/Modernizr/issues/388
      //     http://jsfiddle.net/ryanseddon/uZTgD/2/
      if (structuredClone.supported()) {
        tWindow.postMessage(message, targetOrigin);
      } else {
        tWindow.postMessage(JSON.stringify(message), targetOrigin);
      }
    } else {
      // else queue up the messages to send after connection complete.
      postMessageQueue.push(message);
    }
  }

  function addListener(messageName, func) {
    handlers[messageName] = func;
  }

  function removeListener(messageName) {
    handlers[messageName] = null;
  }

  // Note that this function can't be used when IFrame element hasn't been added to DOM yet
  // (.contentWindow would be null). At the moment risk is purely theoretical, as the parent endpoint
  // only listens for an incoming 'hello' message and the first time we call this function
  // is in #receiveMessage handler (so iframe had to be initialized before, as it could send 'hello').
  // It would become important when we decide to refactor the way how communication is initialized.
  function getTargetWindow() {
    if (targetWindowIsIframeElement) {
      var tWindow = targetWindowOrIframeEl.contentWindow;
      if (!tWindow) {
        throw "IFrame element needs to be added to DOM before communication " +
              "can be started (.contentWindow is not available)";
      }
      return tWindow;
    }
    return targetWindowOrIframeEl;
  }

  function receiveMessage(message) {
    var messageData;
    if (message.source === getTargetWindow() && message.origin === targetOrigin) {
      messageData = message.data;
      if (typeof messageData === 'string') {
        messageData = JSON.parse(messageData);
      }
      if (handlers[messageData.type]) {
        handlers[messageData.type](messageData.content);
      } else {
        console.log("cant handle type: " + messageData.type);
      }
    }
  }

  function disconnect() {
    connected = false;
    window.removeEventListener('message', receiveMessage);
  }

  // handle the case that targetWindowOrIframeEl is actually an <iframe> rather than a Window(Proxy) object
  // Note that if it *is* a WindowProxy, this probe will throw a SecurityException, but in that case
  // we also don't need to do anything
  try {
    targetWindowIsIframeElement = targetWindowOrIframeEl.constructor === HTMLIFrameElement;
  } catch (e) {
    targetWindowIsIframeElement = false;
  }

  if (targetWindowIsIframeElement) {
    // Infer the origin ONLY if the user did not supply an explicit origin, i.e., if the second
    // argument is empty or is actually a callback (meaning it is supposed to be the
    // afterConnectionCallback)
    if (!targetOrigin || targetOrigin.constructor === Function) {
      afterConnectedCallback = targetOrigin;
      targetOrigin = getOrigin(targetWindowOrIframeEl);
    }
  }

  // when we receive 'hello':
  addListener('hello', function() {
    connected = true;

    // send hello response
    post('hello');

    // give the user a chance to do things now that we are connected
    // note that is will happen before any queued messages
    if (afterConnectedCallback && typeof afterConnectedCallback === "function") {
      afterConnectedCallback();
    }

    // Now send any messages that have been queued up ...
    while(postMessageQueue.length > 0) {
      post(postMessageQueue.shift());
    }
  });

  window.addEventListener('message', receiveMessage, false);

  // Public API.
  return {
    post: post,
    addListener: addListener,
    removeListener: removeListener,
    disconnect: disconnect,
    getTargetWindow: getTargetWindow,
    targetOrigin: targetOrigin
  };
};

},{"./structured-clone":16}],16:[function(require,module,exports){
var featureSupported = false;

(function () {
  var result = 0;

  if (!!window.postMessage) {
    try {
      // Safari 5.1 will sometimes throw an exception and sometimes won't, lolwut?
      // When it doesn't we capture the message event and check the
      // internal [[Class]] property of the message being passed through.
      // Safari will pass through DOM nodes as Null iOS safari on the other hand
      // passes it through as DOMWindow, gotcha.
      window.onmessage = function(e){
        var type = Object.prototype.toString.call(e.data);
        result = (type.indexOf("Null") != -1 || type.indexOf("DOMWindow") != -1) ? 1 : 0;
        featureSupported = {
          'structuredClones': result
        };
      };
      // Spec states you can't transmit DOM nodes and it will throw an error
      // postMessage implimentations that support cloned data will throw.
      window.postMessage(document.createElement("a"),"*");
    } catch(e) {
      // BBOS6 throws but doesn't pass through the correct exception
      // so check error message
      result = (e.DATA_CLONE_ERR || e.message == "Cannot post cyclic structures.") ? 1 : 0;
      featureSupported = {
        'structuredClones': result
      };
    }
  }
}());

exports.supported = function supported() {
  return featureSupported && featureSupported.structuredClones > 0;
};

},{}],17:[function(require,module,exports){
module.exports = {
  /**
   * Allows to communicate with an iframe.
   */
  ParentEndpoint:  require('./lib/parent-endpoint'),
  /**
   * Allows to communicate with a parent page.
   * IFrameEndpoint is a singleton, as iframe can't have multiple parents anyway.
   */
  getIFrameEndpoint: require('./lib/iframe-endpoint'),
  structuredClone: require('./lib/structured-clone'),

  // TODO: May be misnamed
  IframePhoneRpcEndpoint: require('./lib/iframe-phone-rpc-endpoint')

};

},{"./lib/iframe-endpoint":13,"./lib/iframe-phone-rpc-endpoint":14,"./lib/parent-endpoint":15,"./lib/structured-clone":16}],18:[function(require,module,exports){
/*
 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 */
/*jshint unused:false */
module.exports = function naturalSort (a, b) {
	"use strict";
	var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
		sre = /(^[ ]*|[ ]*$)/g,
		dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
		hre = /^0x[0-9a-f]+$/i,
		ore = /^0/,
		i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
		// convert all to strings strip whitespace
		x = i(a).replace(sre, '') || '',
		y = i(b).replace(sre, '') || '',
		// chunk/tokenize
		xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		// numeric, hex or date detection
		xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
		yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
		oFxNcL, oFyNcL;
	// first try and sort Hex codes or Dates
	if (yD) {
		if ( xD < yD ) { return -1; }
		else if ( xD > yD ) { return 1; }
	}
	// natural sorting through split numeric strings and default strings
	for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
		// find floats not starting with '0', string or 0 if not defined (Clint Priest)
		oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
		oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
		// handle numeric vs string comparison - number < string - (Kyle Adams)
		if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
		// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
		else if (typeof oFxNcL !== typeof oFyNcL) {
			oFxNcL += '';
			oFyNcL += '';
		}
		if (oFxNcL < oFyNcL) { return -1; }
		if (oFxNcL > oFyNcL) { return 1; }
	}
	return 0;
};

},{}],19:[function(require,module,exports){
module.exports = require('./lib/core/core');
},{"./lib/core/core":22}],20:[function(require,module,exports){
var core = require('./core');

/**
 * math.js factory function. Creates a new instance of math.js
 *
 * @param {Object} [config] Available configuration options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'matrix' (default) or 'array'.
 *                            {string} number
 *                              A string 'number' (default), 'bignumber', or
 *                              'fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 */
function create (config) {
  // create a new math.js instance
  var math = core.create(config);
  math.create = create;

  // import data types, functions, constants, expression parser, etc.
  math['import'](require('./lib'));

  return math;
}

// return a new instance of math.js
module.exports = create();

},{"./core":19,"./lib":479}],21:[function(require,module,exports){
'use strict';

var object = require('./utils/object');
var bigConstants = require('./utils/bignumber/constants');

function factory (type, config, load, typed, math) {
  // listen for changed in the configuration, automatically reload
  // constants when needed
  math.on('config', function (curr, prev) {
    if (curr.number !== prev.number) {
      factory(type, config, load, typed, math);
    }
  });

  setConstant(math, 'true', true);
  setConstant(math, 'false', false);
  setConstant(math, 'null', null);
  setConstant(math, 'uninitialized', require('./utils/array').UNINITIALIZED);

  if (config.number === 'BigNumber') {
    setConstant(math, 'Infinity', new type.BigNumber(Infinity));
    setConstant(math, 'NaN', new type.BigNumber(NaN));

    setLazyConstant(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});
    setLazyConstant(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});
    setLazyConstant(math, 'e',   function () {return bigConstants.e(type.BigNumber)});
    setLazyConstant(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2

    // uppercase constants (for compatibility with built-in Math)
    setLazyConstant(math, 'E',       function () {return math.e;});
    setLazyConstant(math, 'LN2',     function () {return new type.BigNumber(2).ln();});
    setLazyConstant(math, 'LN10',    function () {return new type.BigNumber(10).ln()});
    setLazyConstant(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});
    setLazyConstant(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});
    setLazyConstant(math, 'PI',      function () {return math.pi});
    setLazyConstant(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});
    setLazyConstant(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});
  }
  else {
    setConstant(math, 'Infinity', Infinity);
    setConstant(math, 'NaN',      NaN);

    setConstant(math, 'pi',  Math.PI);
    setConstant(math, 'tau', Math.PI * 2);
    setConstant(math, 'e',   Math.E);
    setConstant(math, 'phi', 1.61803398874989484820458683436563811772030917980576286213545); // golden ratio, (1+sqrt(5))/2

    // uppercase constants (for compatibility with built-in Math)
    setConstant(math, 'E',           math.e);
    setConstant(math, 'LN2',         Math.LN2);
    setConstant(math, 'LN10',        Math.LN10);
    setConstant(math, 'LOG2E',       Math.LOG2E);
    setConstant(math, 'LOG10E',      Math.LOG10E);
    setConstant(math, 'PI',          math.pi);
    setConstant(math, 'SQRT1_2',     Math.SQRT1_2);
    setConstant(math, 'SQRT2',       Math.SQRT2);
  }

  // complex i
  setConstant(math, 'i', type.Complex.I);

  // meta information
  setConstant(math, 'version', require('./version'));
}

// create a constant in both math and mathWithTransform
function setConstant(math, name, value) {
  math[name] = value;
  math.expression.mathWithTransform[name] = value;
}

// create a lazy constant in both math and mathWithTransform
function setLazyConstant (math, name, resolver) {
  object.lazy(math, name,  resolver);
  object.lazy(math.expression.mathWithTransform, name,  resolver);
}

exports.factory = factory;
exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed
exports.math = true;   // request access to the math namespace
},{"./utils/array":532,"./utils/bignumber/constants":538,"./utils/object":558,"./version":561}],22:[function(require,module,exports){
var isFactory = require('./../utils/object').isFactory;
var typedFactory = require('./typed');
var emitter = require('./../utils/emitter');

var importFactory = require('./function/import');
var configFactory = require('./function/config');

/**
 * Math.js core. Creates a new, empty math.js instance
 * @param {Object} [options] Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 *                            {string} randomSeed
 *                              Random seed for seeded pseudo random number generator.
 *                              Set to null to randomly seed.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */
exports.create = function create (options) {
  // simple test for ES5 support
  if (typeof Object.create !== 'function') {
    throw new Error('ES5 not supported by this JavaScript engine. ' +
    'Please load the es5-shim and es5-sham library for compatibility.');
  }

  // cached factories and instances
  var factories = [];
  var instances = [];

  // create a namespace for the mathjs instance, and attach emitter functions
  var math = emitter.mixin({});
  math.type = {};
  math.expression = {
    transform: {},
    mathWithTransform: {}
  };

  // create a new typed instance
  math.typed = typedFactory.create(math.type);

  // create configuration options. These are private
  var _config = {
    // minimum relative difference between two compared values,
    // used by all comparison functions
    epsilon: 1e-12,

    // type of default matrix output. Choose 'matrix' (default) or 'array'
    matrix: 'Matrix',

    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
    number: 'number',

    // number of significant digits in BigNumbers
    precision: 64,

    // predictable output type of functions. When true, output type depends only
    // on the input types. When false (default), output type can vary depending
    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
    // predictable is false, and returns `NaN` when true.
    predictable: false,

    // random seed for seeded pseudo random number generation
    // null = randomly seed
    randomSeed: null
  };

  /**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {{type: string, name: string, factory: Function}} factory
   * @returns {*}
   */
  function load (factory) {
    if (!isFactory(factory)) {
      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
    }

    var index = factories.indexOf(factory);
    var instance;
    if (index === -1) {
      // doesn't yet exist
      if (factory.math === true) {
        // pass with math namespace
        instance = factory.factory(math.type, _config, load, math.typed, math);
      }
      else {
        instance = factory.factory(math.type, _config, load, math.typed);
      }

      // append to the cache
      factories.push(factory);
      instances.push(instance);
    }
    else {
      // already existing function, return the cached instance
      instance = instances[index];
    }

    return instance;
  }

  // load the import and config functions
  math['import'] = load(importFactory);
  math['config'] = load(configFactory);
  math.expression.mathWithTransform['config'] = math['config']

  // apply options
  if (options) {
    math.config(options);
  }

  return math;
};

},{"./../utils/emitter":553,"./../utils/object":558,"./function/config":23,"./function/import":24,"./typed":25}],23:[function(require,module,exports){
'use strict';

var object = require('../../utils/object');

function factory (type, config, load, typed, math) {
  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix
  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number

  /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *     math.config().number;                // outputs 'number'
   *     math.eval('0.4');                    // outputs number 0.4
   *     math.config({number: 'Fraction'});
   *     math.eval('0.4');                    // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */
  function _config(options) {
    if (options) {
      var prev = object.map(config, object.clone);

      // validate some of the options
      validateOption(options, 'matrix', MATRIX);
      validateOption(options, 'number', NUMBER);

      // merge options
      object.deepExtend(config, options);

      var curr = object.map(config, object.clone);

      var changes = object.map(options, object.clone);

      // emit 'config' event
      math.emit('config', curr, prev, changes);

      return curr;
    }
    else {
      return object.map(config, object.clone);
    }
  }

  // attach the valid options to the function so they can be extended
  _config.MATRIX = MATRIX;
  _config.NUMBER = NUMBER;

  return _config;
}

/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */
function contains (array, item) {
  return array.indexOf(item) !== -1;
}

/**
 * Find a string in an array. Case insensitive search
 * @param {Array.<string>} array
 * @param {string} item
 * @return {number} Returns the index when found. Returns -1 when not found
 */
function findIndex (array, item) {
  return array
      .map(function (i) {
        return i.toLowerCase();
      })
      .indexOf(item.toLowerCase());
}

/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */
function validateOption(options, name, values) {
  if (options[name] !== undefined && !contains(values, options[name])) {
    var index = findIndex(values, options[name]);
    if (index !== -1) {
      // right value, wrong casing
      // TODO: lower case values are deprecated since v3, remove this warning some day.
      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');

      options[name] = values[index]; // change the option to the right casing
    }
    else {
      // unknown value
      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
    }
  }
}

exports.name = 'config';
exports.math = true; // request the math namespace as fifth argument
exports.factory = factory;

},{"../../utils/object":558}],24:[function(require,module,exports){
'use strict';

var lazy = require('../../utils/object').lazy;
var isFactory = require('../../utils/object').isFactory;
var traverse = require('../../utils/object').traverse;
var ArgumentsError = require('../../error/ArgumentsError');

function factory (type, config, load, typed, math) {
  /**
   * Import functions from an object or a module
   *
   * Syntax:
   *
   *    math.import(object)
   *    math.import(object, options)
   *
   * Where:
   *
   * - `object: Object`
   *   An object with functions to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!';
   *      }
   *    });
   *
   *    // use the imported function and variable
   *    math.myvalue * 2;               // 84
   *    math.hello('user');             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(require('numbers'), {wrap: true});
   *
   *    math.fibonacci(7); // returns 13
   *
   * @param {Object | Array} object   Object with functions to be imported.
   * @param {Object} [options]        Import options.
   */
  function math_import(object, options) {
    var num = arguments.length;
    if (num !== 1 && num !== 2) {
      throw new ArgumentsError('import', num, 1, 2);
    }

    if (!options) {
      options = {};
    }

    if (isFactory(object)) {
      _importFactory(object, options);
    }
    // TODO: allow a typed-function with name too
    else if (Array.isArray(object)) {
      object.forEach(function (entry) {
        math_import(entry, options);
      });
    }
    else if (typeof object === 'object') {
      // a map with functions
      for (var name in object) {
        if (object.hasOwnProperty(name)) {
          var value = object[name];
          if (isSupportedType(value)) {
            _import(name, value, options);
          }
          else if (isFactory(object)) {
            _importFactory(object, options);
          }
          else {
            math_import(value, options);
          }
        }
      }
    }
    else {
      if (!options.silent) {
        throw new TypeError('Factory, Object, or Array expected');
      }
    }
  }

  /**
   * Add a property to the math namespace and create a chain proxy for it.
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */
  function _import(name, value, options) {
    // TODO: refactor this function, it's to complicated and contains duplicate code
    if (options.wrap && typeof value === 'function') {
      // create a wrapper around the function
      value = _wrap(value);
    }

    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
      if (options.override) {
        // give the typed function the right name
        value = typed(name, value.signatures);
      }
      else {
        // merge the existing and typed function
        value = typed(math[name], value);
      }

      math[name] = value;
      _importTransform(name, value);
      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (math[name] === undefined || options.override) {
      math[name] = value;
      _importTransform(name, value);
      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (!options.silent) {
      throw new Error('Cannot import "' + name + '": already exists');
    }
  }

  function _importTransform (name, value) {
    if (value && typeof value.transform === 'function') {
      math.expression.transform[name] = value.transform;
      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value.transform
      }
    }
    else {
      // remove existing transform
      delete math.expression.transform[name]
      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value
      }
    }
  }

  /**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */
  function _wrap (fn) {
    var wrapper = function wrapper () {
      var args = [];
      for (var i = 0, len = arguments.length; i < len; i++) {
        var arg = arguments[i];
        args[i] = arg && arg.valueOf();
      }
      return fn.apply(math, args);
    };

    if (fn.transform) {
      wrapper.transform = fn.transform;
    }

    return wrapper;
  }

  /**
   * Import an instance of a factory into math.js
   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
   * @param {Object} options  See import for a description of the options
   * @private
   */
  function _importFactory(factory, options) {
    if (typeof factory.name === 'string') {
      var name = factory.name;
      var existingTransform = name in math.expression.transform
      var namespace = factory.path ? traverse(math, factory.path) : math;
      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

      var resolver = function () {
        var instance = load(factory);
        if (instance && typeof instance.transform === 'function') {
          throw new Error('Transforms cannot be attached to factory functions. ' +
              'Please create a separate function for it with exports.path="expression.transform"');
        }

        if (isTypedFunction(existing) && isTypedFunction(instance)) {
          if (options.override) {
            // replace the existing typed function (nothing to do)
          }
          else {
            // merge the existing and new typed function
            instance = typed(existing, instance);
          }

          return instance;
        }

        if (existing === undefined || options.override) {
          return instance;
        }

        if (!options.silent) {
          throw new Error('Cannot import "' + name + '": already exists');
        }
      };

      if (factory.lazy !== false) {
        lazy(namespace, name, resolver);

        if (!existingTransform) {
          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
            lazy(math.expression.mathWithTransform, name, resolver);
          }
        }
      }
      else {
        namespace[name] = resolver();

        if (!existingTransform) {
          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
            math.expression.mathWithTransform[name] = resolver();
          }
        }
      }

      math.emit('import', name, resolver, factory.path);
    }
    else {
      // unnamed factory.
      // no lazy loading
      load(factory);
    }
  }

  /**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */
  function isSupportedType(object) {
    return typeof object === 'function'
        || typeof object === 'number'
        || typeof object === 'string'
        || typeof object === 'boolean'
        || object === null
        || (object && type.isUnit(object))
        || (object && type.isComplex(object))
        || (object && type.isBigNumber(object))
        || (object && type.isFraction(object))
        || (object && type.isMatrix(object))
        || (object && Array.isArray(object))
  }

  /**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */
  function isTypedFunction (fn) {
    return typeof fn === 'function' && typeof fn.signatures === 'object';
  }

  function allowedInExpressions (name) {
    return !unsafe.hasOwnProperty(name);
  }

  function factoryAllowedInExpressions (factory) {
    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);
  }

  // namespaces and functions not available in the parser for safety reasons
  var unsafe = {
    'expression': true,
    'type': true,
    'docs': true,
    'error': true,
    'json': true,
    'chain': true // chain method not supported. Note that there is a unit chain too.
  };

  return math_import;
}

exports.math = true; // request access to the math namespace as 5th argument of the factory function
exports.name = 'import';
exports.factory = factory;
exports.lazy = true;

},{"../../error/ArgumentsError":26,"../../utils/object":558}],25:[function(require,module,exports){
var typedFunction = require('typed-function');
var digits = require('./../utils/number').digits;
var isBigNumber = require('./../utils/bignumber/isBigNumber');
var isMatrix = require('./../utils/collection/isMatrix');

// returns a new instance of typed-function
var createTyped = function () {
  // initially, return the original instance of typed-function
  // consecutively, return a new instance from typed.create.
  createTyped = typedFunction.create;
  return typedFunction;
};

/**
 * Factory function for creating a new typed instance
 * @param {Object} type   Object with data types like Complex and BigNumber
 * @returns {Function}
 */
exports.create = function create(type) {
  // TODO: typed-function must be able to silently ignore signatures with unknown data types

  // type checks for all known types
  //
  // note that:
  //
  // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
  //   instanceof cannot be used because that would not allow to pass data from
  //   one instance of math.js to another since each has it's own instance of Unit.
  // - check the `isUnit` property via the constructor, so there will be no
  //   matches for "fake" instances like plain objects with a property `isUnit`.
  //   That is important for security reasons.
  // - It must not be possible to override the type checks used internally,
  //   for security reasons, so these functions are not exposed in the expression
  //   parser.
  type.isNumber = function (x) { return typeof x === 'number' };
  type.isComplex = function (x) { return type.Complex && x instanceof type.Complex || false };
  type.isBigNumber = isBigNumber;
  type.isFraction = function (x) { return type.Fraction && x instanceof type.Fraction || false };
  type.isUnit = function (x) { return x && x.constructor.prototype.isUnit || false };
  type.isString = function (x) { return typeof x === 'string' };
  type.isArray = Array.isArray;
  type.isMatrix = isMatrix;
  type.isDenseMatrix = function (x) { return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false };
  type.isSparseMatrix = function (x) { return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false };
  type.isRange = function (x) { return x && x.constructor.prototype.isRange || false };
  type.isIndex = function (x) { return x && x.constructor.prototype.isIndex || false };
  type.isBoolean = function (x) { return typeof x === 'boolean' };
  type.isResultSet = function (x) { return x && x.constructor.prototype.isResultSet || false };
  type.isHelp = function (x) { return x && x.constructor.prototype.isHelp || false };
  type.isFunction = function (x) { return typeof x === 'function'};
  type.isDate = function (x) { return x instanceof Date };
  type.isRegExp = function (x) { return x instanceof RegExp };
  type.isObject = function (x) { return typeof x === 'object' };
  type.isNull = function (x) { return x === null };
  type.isUndefined = function (x) { return x === undefined };

  type.isAccessorNode = function (x) { return x && x.isAccessorNode && x.constructor.prototype.isNode || false };
  type.isArrayNode = function (x) { return x && x.isArrayNode && x.constructor.prototype.isNode || false };
  type.isAssignmentNode = function (x) { return x && x.isAssignmentNode && x.constructor.prototype.isNode || false };
  type.isBlockNode = function (x) { return x && x.isBlockNode && x.constructor.prototype.isNode || false };
  type.isConditionalNode = function (x) { return x && x.isConditionalNode && x.constructor.prototype.isNode || false };
  type.isConstantNode = function (x) { return x && x.isConstantNode && x.constructor.prototype.isNode || false };
  type.isFunctionAssignmentNode = function (x) { return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false };
  type.isFunctionNode = function (x) { return x && x.isFunctionNode && x.constructor.prototype.isNode || false };
  type.isIndexNode = function (x) { return x && x.isIndexNode && x.constructor.prototype.isNode || false };
  type.isNode = function (x) { return x && x.isNode && x.constructor.prototype.isNode || false };
  type.isObjectNode = function (x) { return x && x.isObjectNode && x.constructor.prototype.isNode || false };
  type.isOperatorNode = function (x) { return x && x.isOperatorNode && x.constructor.prototype.isNode || false };
  type.isParenthesisNode = function (x) { return x && x.isParenthesisNode && x.constructor.prototype.isNode || false };
  type.isRangeNode = function (x) { return x && x.isRangeNode && x.constructor.prototype.isNode || false };
  type.isSymbolNode = function (x) { return x && x.isSymbolNode && x.constructor.prototype.isNode || false };

  type.isChain = function (x) { return x && x.constructor.prototype.isChain || false };

  // get a new instance of typed-function
  var typed = createTyped();

  // define all types. The order of the types determines in which order function
  // arguments are type-checked (so for performance it's important to put the
  // most used types first).
  typed.types = [
    { name: 'number',          test: type.isNumber },
    { name: 'Complex',         test: type.isComplex },
    { name: 'BigNumber',       test: type.isBigNumber },
    { name: 'Fraction',        test: type.isFraction },
    { name: 'Unit',            test: type.isUnit },
    { name: 'string',          test: type.isString },
    { name: 'Array',           test: type.isArray },
    { name: 'Matrix',          test: type.isMatrix },
    { name: 'DenseMatrix',     test: type.isDenseMatrix },
    { name: 'SparseMatrix',    test: type.isSparseMatrix },
    { name: 'Range',           test: type.isRange },
    { name: 'Index',           test: type.isIndex },
    { name: 'boolean',         test: type.isBoolean },
    { name: 'ResultSet',       test: type.isResultSet },
    { name: 'Help',            test: type.isHelp },
    { name: 'function',        test: type.isFunction },
    { name: 'Date',            test: type.isDate },
    { name: 'RegExp',          test: type.isRegExp },
    { name: 'Object',          test: type.isObject },
    { name: 'null',            test: type.isNull },
    { name: 'undefined',       test: type.isUndefined },

    { name: 'OperatorNode',    test: type.isOperatorNode },
    { name: 'ConstantNode',    test: type.isConstantNode },
    { name: 'SymbolNode',      test: type.isSymbolNode },
    { name: 'ParenthesisNode', test: type.isParenthesisNode },
    { name: 'FunctionNode',    test: type.isFunctionNode },
    { name: 'FunctionAssignmentNode',    test: type.isFunctionAssignmentNode },
    { name: 'ArrayNode',                 test: type.isArrayNode },
    { name: 'AssignmentNode',            test: type.isAssignmentNode },
    { name: 'BlockNode',                 test: type.isBlockNode },
    { name: 'ConditionalNode',           test: type.isConditionalNode },
    { name: 'IndexNode',                 test: type.isIndexNode },
    { name: 'RangeNode',                 test: type.isRangeNode },
    { name: 'Node',                      test: type.isNode }
  ];

  // TODO: add conversion from BigNumber to number?
  typed.conversions = [
    {
      from: 'number',
      to: 'BigNumber',
      convert: function (x) {
        // note: conversion from number to BigNumber can fail if x has >15 digits
        if (digits(x) > 15) {
          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +
          '(value: ' + x + '). ' +
          'Use function bignumber(x) to convert to BigNumber.');
        }
        return new type.BigNumber(x);
      }
    }, {
      from: 'number',
      to: 'Complex',
      convert: function (x) {
        return new type.Complex(x, 0);
      }
    }, {
      from: 'number',
      to: 'string',
      convert: function (x) {
        return x + '';
      }
    }, {
      from: 'BigNumber',
      to: 'Complex',
      convert: function (x) {
        return new type.Complex(x.toNumber(), 0);
      }
    }, {
      from: 'Fraction',
      to: 'BigNumber',
      convert: function (x) {
        throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' +
            'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
      }
    }, {
      from: 'Fraction',
      to: 'Complex',
      convert: function (x) {
        return new type.Complex(x.valueOf(), 0);
      }
    }, {
      from: 'number',
      to: 'Fraction',
      convert: function (x) {
        var f = new type.Fraction(x);
        if (f.valueOf() !== x) {
          throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' +
              '(value: ' + x + '). ' +
              'Use function fraction(x) to convert to Fraction.');
        }
        return new type.Fraction(x);
      }
    }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf();
    //  }
    //}, {
      from: 'string',
      to: 'number',
      convert: function (x) {
        var n = Number(x);
        if (isNaN(n)) {
          throw new Error('Cannot convert "' + x + '" to a number');
        }
        return n;
      }
    }, {
      from: 'string',
      to: 'BigNumber',
      convert: function (x) {
        try {
          return new type.BigNumber(x);
        }
        catch (err) {
          throw new Error('Cannot convert "' + x + '" to BigNumber');
        }
      }
    }, {
      from: 'string',
      to: 'Fraction',
      convert: function (x) {
        try {
          return new type.Fraction(x);
        }
        catch (err) {
          throw new Error('Cannot convert "' + x + '" to Fraction');
        }
      }
    }, {
      from: 'string',
      to: 'Complex',
      convert: function (x) {
        try {
          return new type.Complex(x);
        }
        catch (err) {
          throw new Error('Cannot convert "' + x + '" to Complex');
        }
      }
    }, {
      from: 'boolean',
      to: 'number',
      convert: function (x) {
        return +x;
      }
    }, {
      from: 'boolean',
      to: 'BigNumber',
      convert: function (x) {
        return new type.BigNumber(+x);
      }
    }, {
      from: 'boolean',
      to: 'Fraction',
      convert: function (x) {
        return new type.Fraction(+x);
      }
    }, {
      from: 'boolean',
      to: 'string',
      convert: function (x) {
        return +x;
      }
    }, {
      from: 'null',
      to: 'number',
      convert: function () {
        return 0;
      }
    }, {
      from: 'null',
      to: 'string',
      convert: function () {
        return 'null';
      }
    }, {
      from: 'null',
      to: 'BigNumber',
      convert: function () {
        return new type.BigNumber(0);
      }
    }, {
      from: 'null',
      to: 'Fraction',
      convert: function () {
        return new type.Fraction(0);
      }
    }, {
      from: 'Array',
      to: 'Matrix',
      convert: function (array) {
        // TODO: how to decide on the right type of matrix to create?
        return new type.DenseMatrix(array);
      }
    }, {
      from: 'Matrix',
      to: 'Array',
      convert: function (matrix) {
        return matrix.valueOf();
      }
    }
  ];

  return typed;
};

},{"./../utils/bignumber/isBigNumber":540,"./../utils/collection/isMatrix":549,"./../utils/number":557,"typed-function":617}],26:[function(require,module,exports){
'use strict';

/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */
function ArgumentsError(fn, count, min, max) {
  if (!(this instanceof ArgumentsError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.fn = fn;
  this.count = count;
  this.min = min;
  this.max = max;

  this.message = 'Wrong number of arguments in function ' + fn +
      ' (' + count + ' provided, ' +
      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';

  this.stack = (new Error()).stack;
}

ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;

module.exports = ArgumentsError;

},{}],27:[function(require,module,exports){
'use strict';

/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */
function DimensionError(actual, expected, relation) {
  if (!(this instanceof DimensionError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.actual   = actual;
  this.expected = expected;
  this.relation = relation;

  this.message = 'Dimension mismatch (' +
      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +
      ' ' + (this.relation || '!=') + ' ' +
      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +
      ')';

  this.stack = (new Error()).stack;
}

DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;

module.exports = DimensionError;

},{}],28:[function(require,module,exports){
'use strict';

/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */
function IndexError(index, min, max) {
  if (!(this instanceof IndexError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.index = index;
  if (arguments.length < 3) {
    this.min = 0;
    this.max = min;
  }
  else {
    this.min = min;
    this.max = max;
  }

  if (this.min !== undefined && this.index < this.min) {
    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
  }
  else if (this.max !== undefined && this.index >= this.max) {
    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
  }
  else {
    this.message = 'Index out of range (' + this.index + ')';
  }

  this.stack = (new Error()).stack;
}

IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;

module.exports = IndexError;

},{}],29:[function(require,module,exports){
'use strict';

var ArgumentsError = require('./ArgumentsError');
var DimensionError = require('./DimensionError');
var IndexError = require('./IndexError');

module.exports = [
  {
    name: 'ArgumentsError', path: 'error',
    factory: function () {
      return ArgumentsError;
    }
  },
  {
    name: 'DimensionError',
    path: 'error',
    factory: function () {
      return DimensionError;
    }
  },
  {
    name: 'IndexError',
    path: 'error',
    factory: function () {
      return IndexError;
    }
  }
];

// TODO: implement an InvalidValueError?

},{"./ArgumentsError":26,"./DimensionError":27,"./IndexError":28}],30:[function(require,module,exports){
'use strict';

var object = require('../utils/object');
var string = require('../utils/string');

function factory (type, config, load, typed) {
  var parser = load(require('./function/parser'))();

  /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */
  function Help(doc) {
    if (!(this instanceof Help)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!doc)  throw new Error('Argument "doc" missing');

    this.doc = doc;
  }

  /**
   * Attach type information
   */
  Help.prototype.type = 'Help';
  Help.prototype.isHelp = true;

  /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */
  Help.prototype.toString = function () {
    var doc = this.doc || {};
    var desc = '\n';

    if (doc.name) {
      desc += 'Name: ' + doc.name + '\n\n';
    }
    if (doc.category) {
      desc += 'Category: ' + doc.category + '\n\n';
    }
    if (doc.description) {
      desc += 'Description:\n    ' + doc.description + '\n\n';
    }
    if (doc.syntax) {
      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
    }
    if (doc.examples) {
      desc += 'Examples:\n';
      for (var i = 0; i < doc.examples.length; i++) {
        var expr = doc.examples[i];
        desc += '    ' + expr + '\n';

        var res;
        try {
          // note: res can be undefined when `expr` is an empty string
          res = parser.eval(expr);
        }
        catch (e) {
          res = e;
        }
        if (res !== undefined && !type.isHelp(res)) {
          desc += '        ' + string.format(res, {precision: 14}) + '\n';
        }
      }
      desc += '\n';
    }
    if (doc.seealso && doc.seealso.length) {
      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
    }

    return desc;
  };

  /**
   * Export the help object to JSON
   */
  Help.prototype.toJSON = function () {
    var obj = object.clone(this.doc);
    obj.mathjs = 'Help';
    return obj;
  };

  /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */
  Help.fromJSON = function (json) {
    var doc = {};
    for (var prop in json) {
      if (prop !== 'mathjs') { // ignore mathjs field
        doc[prop] = json[prop];
      }
    }
    return new Help(doc);
  };

  /**
   * Returns a string representation of the Help object
   */
  Help.prototype.valueOf = Help.prototype.toString;

  return Help;
}

exports.name = 'Help';
exports.path = 'type';
exports.factory = factory;

},{"../utils/object":558,"../utils/string":559,"./function/parser":232}],31:[function(require,module,exports){
'use strict';

var extend = require('../utils/object').extend;
var customs = require('../utils/customs');

function factory (type, config, load, typed, math) {
  var _parse = load(require('./parse'));

  /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    var result = parser.eval(expr);    // evaluate an expression
   *    var value = parser.get(name);      // retrieve a variable from the parser
   *    var values = parser.getAll();      // retrieve all defined variables
   *    parser.set(name, value);           // set a variable in the parser
   *    parser.remove(name);               // clear a variable from the
   *                                       // parsers scope
   *    parser.clear();                    // clear the parsers scope
   *
   * Example usage:
   *    var parser = new Parser();
   *    // Note: there is a convenience method which can be used instead:
   *    // var parser = new math.parser();
   *
   *    // evaluate expressions
   *    parser.eval('sqrt(3^2 + 4^2)');         // 5
   *    parser.eval('sqrt(-4)');                // 2i
   *    parser.eval('2 inch in cm');            // 5.08 cm
   *    parser.eval('cos(45 deg)');             // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.eval('x = 7 / 2');               // 3.5
   *    parser.eval('x + 3');                   // 6.5
   *    parser.eval('function f(x, y) = x^y');  // f(x, y)
   *    parser.eval('f(2, 3)');                 // 8
   *
   *    // get and set variables and functions
   *    var x = parser.get('x');                // 7
   *    var f = parser.get('f');                // function
   *    var g = f(3, 2);                        // 9
   *    parser.set('h', 500);
   *    var i = parser.eval('h / 2');           // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!';
   *    });
   *    parser.eval('hello("user")');           // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear();
   *
   */
  function Parser() {
    if (!(this instanceof Parser)) {
      throw new SyntaxError(
          'Constructor must be called with the new operator');
    }
    this.scope = {};
  }

  /**
   * Attach type information
   */
  Parser.prototype.type = 'Parser';
  Parser.prototype.isParser = true;

  /**
   * Parse an expression and return the parsed function node.
   * The node tree can be compiled via `code = node.compile(math)`,
   * and the compiled code can be executed as `code.eval([scope])`
   * @param {string} expr
   * @return {Node} node
   * @throws {Error}
   */
  Parser.prototype.parse = function (expr) {
    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
  };

  /**
   * Parse and compile an expression, return the compiled javascript code.
   * The node can be evaluated via code.eval([scope])
   * @param {string} expr
   * @return {{eval: function}} code
   * @throws {Error}
   */
  Parser.prototype.compile = function (expr) {
    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
  };

  /**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */
  Parser.prototype.eval = function (expr) {
    // TODO: validate arguments
    return _parse(expr)
        .compile()
        .eval(this.scope);
  };

  /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */
  Parser.prototype.get = function (name) {
    // TODO: validate arguments
    return name in this.scope
        ? customs.getSafeProperty(this.scope, name)
        : undefined;
  };

  /**
   * Get a map with all defined variables
   * @return {Object} values
   */
  Parser.prototype.getAll = function () {
    return extend({}, this.scope);
  };

  /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */
  Parser.prototype.set = function (name, value) {
    // TODO: validate arguments
    return customs.setSafeProperty(this.scope, name, value);
  };

  /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */
  Parser.prototype.remove = function (name) {
    // TODO: validate arguments
    delete this.scope[name];
  };

  /**
   * Clear the scope with variables and functions
   */
  Parser.prototype.clear = function () {
    for (var name in this.scope) {
      if (this.scope.hasOwnProperty(name)) {
        delete this.scope[name];
      }
    }
  };

  return Parser;
}

exports.name = 'Parser';
exports.path = 'expression';
exports.factory = factory;
exports.math = true; // requires the math namespace as 5th argument

},{"../utils/customs":552,"../utils/object":558,"./parse":257}],32:[function(require,module,exports){
module.exports = {
  'name': 'Infinity',
  'category': 'Constants',
  'syntax': [
    'Infinity'
  ],
  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
  'examples': [
    'Infinity',
    '1 / 0'
  ],
  'seealso': []
};

},{}],33:[function(require,module,exports){
module.exports = {
  'name': 'LN10',
  'category': 'Constants',
  'syntax': [
    'LN10'
  ],
  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
  'examples': [
    'LN10',
    'log(10)'
  ],
  'seealso': []
};

},{}],34:[function(require,module,exports){
module.exports = {
  'name': 'LN2',
  'category': 'Constants',
  'syntax': [
    'LN2'
  ],
  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
  'examples': [
    'LN2',
    'log(2)'
  ],
  'seealso': []
};

},{}],35:[function(require,module,exports){
module.exports = {
  'name': 'LOG10E',
  'category': 'Constants',
  'syntax': [
    'LOG10E'
  ],
  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
  'examples': [
    'LOG10E',
    'log(e, 10)'
  ],
  'seealso': []
};

},{}],36:[function(require,module,exports){
module.exports = {
  'name': 'LOG2E',
  'category': 'Constants',
  'syntax': [
    'LOG2E'
  ],
  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
  'examples': [
    'LOG2E',
    'log(e, 2)'
  ],
  'seealso': []
};

},{}],37:[function(require,module,exports){
module.exports = {
  'name': 'NaN',
  'category': 'Constants',
  'syntax': [
    'NaN'
  ],
  'description': 'Not a number',
  'examples': [
    'NaN',
    '0 / 0'
  ],
  'seealso': []
};

},{}],38:[function(require,module,exports){
module.exports = {
  'name': 'SQRT1_2',
  'category': 'Constants',
  'syntax': [
    'SQRT1_2'
  ],
  'description': 'Returns the square root of 1/2, approximately equal to 0.707',
  'examples': [
    'SQRT1_2',
    'sqrt(1/2)'
  ],
  'seealso': []
};

},{}],39:[function(require,module,exports){
module.exports = {
  'name': 'SQRT2',
  'category': 'Constants',
  'syntax': [
    'SQRT2'
  ],
  'description': 'Returns the square root of 2, approximately equal to 1.414',
  'examples': [
    'SQRT2',
    'sqrt(2)'
  ],
  'seealso': []
};

},{}],40:[function(require,module,exports){
module.exports = {
  'name': 'e',
  'category': 'Constants',
  'syntax': [
    'e'
  ],
  'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
  'examples': [
    'e',
    'e ^ 2',
    'exp(2)',
    'log(e)'
  ],
  'seealso': ['exp']
};

},{}],41:[function(require,module,exports){
module.exports = {
  'name': 'false',
  'category': 'Constants',
  'syntax': [
    'false'
  ],
  'description': 'Boolean value false',
  'examples': [
    'false'
  ],
  'seealso': ['true']
};

},{}],42:[function(require,module,exports){
module.exports = {
  'name': 'i',
  'category': 'Constants',
  'syntax': [
    'i'
  ],
  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
  'examples': [
    'i',
    'i * i',
    'sqrt(-1)'
  ],
  'seealso': []
};

},{}],43:[function(require,module,exports){
module.exports = {
  'name': 'null',
  'category': 'Constants',
  'syntax': [
    'null'
  ],
  'description': 'Value null',
  'examples': [
    'null'
  ],
  'seealso': ['true', 'false']
};

},{}],44:[function(require,module,exports){
module.exports = {
  'name': 'phi',
  'category': 'Constants',
  'syntax': [
    'phi'
  ],
  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
  'examples': [
    'phi'
  ],
  'seealso': []
};

},{}],45:[function(require,module,exports){
module.exports = {
  'name': 'pi',
  'category': 'Constants',
  'syntax': [
    'pi'
  ],
  'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
  'examples': [
    'pi',
    'sin(pi/2)'
  ],
  'seealso': ['tau']
};

},{}],46:[function(require,module,exports){
module.exports = {
  'name': 'tau',
  'category': 'Constants',
  'syntax': [
    'tau'
  ],
  'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
  'examples': [
    'tau',
    '2 * pi'
  ],
  'seealso': ['pi']
};

},{}],47:[function(require,module,exports){
module.exports = {
  'name': 'true',
  'category': 'Constants',
  'syntax': [
    'true'
  ],
  'description': 'Boolean value true',
  'examples': [
    'true'
  ],
  'seealso': ['false']
};

},{}],48:[function(require,module,exports){
module.exports = {
  'name': 'version',
  'category': 'Constants',
  'syntax': [
    'version'
  ],
  'description': 'A string with the version number of math.js',
  'examples': [
    'version'
  ],
  'seealso': []
};

},{}],49:[function(require,module,exports){
module.exports = {
  'name': 'bignumber',
  'category': 'Construction',
  'syntax': [
    'bignumber(x)'
  ],
  'description':
      'Create a big number from a number or string.',
  'examples': [
    '0.1 + 0.2',
    'bignumber(0.1) + bignumber(0.2)',
    'bignumber("7.2")',
    'bignumber("7.2e500")',
    'bignumber([0.1, 0.2, 0.3])'
  ],
  'seealso': [
    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
  ]
};

},{}],50:[function(require,module,exports){
module.exports = {
  'name': 'boolean',
  'category': 'Construction',
  'syntax': [
    'x',
    'boolean(x)'
  ],
  'description':
      'Convert a string or number into a boolean.',
  'examples': [
    'boolean(0)',
    'boolean(1)',
    'boolean(3)',
    'boolean("true")',
    'boolean("false")',
    'boolean([1, 0, 1, 1])'
  ],
  'seealso': [
    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'
  ]
};

},{}],51:[function(require,module,exports){
module.exports = {
  'name': 'complex',
  'category': 'Construction',
  'syntax': [
    'complex()',
    'complex(re, im)',
    'complex(string)'
  ],
  'description':
      'Create a complex number.',
  'examples': [
    'complex()',
    'complex(2, 3)',
    'complex("7 - 2i")'
  ],
  'seealso': [
    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'
  ]
};

},{}],52:[function(require,module,exports){
module.exports = {
  'name': 'createUnit',
  'category': 'Construction',
  'syntax': [
    'createUnit(definitions)',
    'createUnit(name, definition)'
  ],
  'description':
      'Create a user-defined unit and register it with the Unit type.',
  'examples': [
    'createUnit("foo")',
    'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})',
    'createUnit("mph", "1 mile/hour")'
  ],
  'seealso': [
    'unit', 'splitUnit'
  ]
};

},{}],53:[function(require,module,exports){
module.exports = {
  'name': 'fraction',
  'category': 'Construction',
  'syntax': [
    'fraction(num)',
    'fraction(num,den)'
  ],
  'description':
    'Create a fraction from a number or from a numerator and denominator.',
  'examples': [
    'fraction(0.125)',
    'fraction(1, 3) + fraction(2, 5)'
  ],
  'seealso': [
    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'
  ]
};

},{}],54:[function(require,module,exports){
module.exports = {
  'name': 'index',
  'category': 'Construction',
  'syntax': [
    '[start]',
    '[start:end]',
    '[start:step:end]',
    '[start1, start 2, ...]',
    '[start1:end1, start2:end2, ...]',
    '[start1:step1:end1, start2:step2:end2, ...]'
  ],
  'description':
      'Create an index to get or replace a subset of a matrix',
  'examples': [
    '[]',
    '[1, 2, 3]',
    'A = [1, 2, 3; 4, 5, 6]',
    'A[1, :]',
    'A[1, 2] = 50',
    'A[0:2, 0:2] = ones(2, 2)'
  ],
  'seealso': [
    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'
  ]
};

},{}],55:[function(require,module,exports){
module.exports = {
  'name': 'matrix',
  'category': 'Construction',
  'syntax': [
    '[]',
    '[a1, b1, ...; a2, b2, ...]',
    'matrix()',
    'matrix("dense")',
    'matrix([...])'
  ],
  'description':
      'Create a matrix.',
  'examples': [
    '[]',
    '[1, 2, 3]',
    '[1, 2, 3; 4, 5, 6]',
    'matrix()',
    'matrix([3, 4])',
    'matrix([3, 4; 5, 6], "sparse")',
    'matrix([3, 4; 5, 6], "sparse", "number")'
  ],
  'seealso': [
    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'
  ]
};

},{}],56:[function(require,module,exports){
module.exports = {
  'name': 'number',
  'category': 'Construction',
  'syntax': [
    'x',
    'number(x)',
    'number(unit, valuelessUnit)'
  ],
  'description':
      'Create a number or convert a string or boolean into a number.',
  'examples': [
    '2',
    '2e3',
    '4.05',
    'number(2)',
    'number("7.2")',
    'number(true)',
    'number([true, false, true, true])',
    'number(unit("52cm"), "m")'
  ],
  'seealso': [
    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
  ]
};

},{}],57:[function(require,module,exports){
module.exports = {
  'name': 'sparse',
  'category': 'Construction',
  'syntax': [
    'sparse()',
    'sparse([a1, b1, ...; a1, b2, ...])',
    'sparse([a1, b1, ...; a1, b2, ...], "number")'
  ],
  'description':
  'Create a sparse matrix.',
  'examples': [
    'sparse()',
    'sparse([3, 4; 5, 6])',
    'sparse([3, 0; 5, 0], "number")'
  ],
  'seealso': [
    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'
  ]
};

},{}],58:[function(require,module,exports){
module.exports = {
  'name': 'splitUnit',
  'category': 'Construction',
  'syntax': [
    'splitUnit(unit: Unit, parts: Unit[])'
  ],
  'description':
      'Split a unit in an array of units whose sum is equal to the original unit.',
  'examples': [
    'splitUnit(1 m, ["feet", "inch"])'
  ],
  'seealso': [
    'unit', 'createUnit'
  ]
};

},{}],59:[function(require,module,exports){
module.exports = {
  'name': 'string',
  'category': 'Construction',
  'syntax': [
    '"text"',
    'string(x)'
  ],
  'description':
      'Create a string or convert a value to a string',
  'examples': [
    '"Hello World!"',
    'string(4.2)',
    'string(3 + 2i)'
  ],
  'seealso': [
    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'
  ]
};

},{}],60:[function(require,module,exports){
module.exports = {
  'name': 'unit',
  'category': 'Construction',
  'syntax': [
    'value unit',
    'unit(value, unit)',
    'unit(string)'
  ],
  'description':
      'Create a unit.',
  'examples': [
    '5.5 mm',
    '3 inch',
    'unit(7.1, "kilogram")',
    'unit("23 deg")'
  ],
  'seealso': [
    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'
  ]
};

},{}],61:[function(require,module,exports){
module.exports = {
  'name': 'config',
  'category': 'Core',
  'syntax': [
    'config()',
    'config(options)'
  ],
  'description': 'Get configuration or change configuration.',
  'examples': [
    'config()',
    '1/3 + 1/4',
    'config({number: "Fraction"})',
    '1/3 + 1/4'
  ],
  'seealso': []
};

},{}],62:[function(require,module,exports){
module.exports = {
  'name': 'import',
  'category': 'Core',
  'syntax': [
    'import(functions)',
    'import(functions, options)'
  ],
  'description': 'Import functions or constants from an object.',
  'examples': [
    'import({myFn: f(x)=x^2, myConstant: 32 })',
    'myFn(2)',
    'myConstant'
  ],
  'seealso': []
};

},{}],63:[function(require,module,exports){
module.exports = {
  'name': 'typed',
  'category': 'Core',
  'syntax': [
    'typed(signatures)',
    'typed(name, signatures)'
  ],
  'description': 'Create a typed function.',
  'examples': [
    'double = typed({ "number, number": f(x)=x+x })',
    'double(2)',
    'double("hello")'
  ],
  'seealso': []
};

},{}],64:[function(require,module,exports){
module.exports = {
  'name': 'derivative',
  'category': 'Algebra',
  'syntax': [
    'derivative(expr, variable)',
    'derivative(expr, variable, {simplify: boolean})'
  ],
  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
  'examples': [
    'derivative("2x^3", "x")',
    'derivative("2x^3", "x", {simplify: false})',
    'derivative("2x^2 + 3x + 4", "x")',
    'derivative("sin(2x)", "x")',
    'f = parse("x^2 + x")',
    'x = parse("x")',
    'df = derivative(f, x)',
    'df.eval({x: 3})'
  ],
  'seealso': [
    'simplify', 'parse', 'eval'
  ]
};

},{}],65:[function(require,module,exports){
module.exports = {
  'name': 'lsolve',
  'category': 'Algebra',
  'syntax': [
    'x=lsolve(L, b)'
  ],
  'description':
  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  'examples': [
    'a = [-2, 3; 2, 1]',
    'b = [11, 9]',
    'x = lsolve(a, b)'
  ],
  'seealso': [
    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'
  ]
};

},{}],66:[function(require,module,exports){
module.exports = {
  'name': 'lup',
  'category': 'Algebra',
  'syntax': [
    'lup(m)'
  ],
  'description':
  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
  'examples': [
    'lup([[2, 1], [1, 4]])',
    'lup(matrix([[2, 1], [1, 4]]))',
    'lup(sparse([[2, 1], [1, 4]]))'
  ],
  'seealso': [
    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr'
  ]
};

},{}],67:[function(require,module,exports){
module.exports = {
  'name': 'lusolve',
  'category': 'Algebra',
  'syntax': [
    'x=lusolve(A, b)',
    'x=lusolve(lu, b)'
  ],
  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
  'examples': [
    'a = [-2, 3; 2, 1]',
    'b = [11, 9]',
    'x = lusolve(a, b)'
  ],
  'seealso': [
    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'
  ]
};

},{}],68:[function(require,module,exports){
module.exports = {
  'name': 'qr',
  'category': 'Algebra',
  'syntax': [
    'qr(A)'
  ],
  'description':
  'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
  'examples': [
    'qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'
  ],
  'seealso': [
    'lup', 'slu', 'matrix'
  ]
};

},{}],69:[function(require,module,exports){
module.exports = {
  'name': 'rationalize',
  'category': 'Algebra',
  'syntax': [
    'rationalize(expr)',
    'rationalize(expr, scope)',
    'rationalize(expr, scope, detailed)'
  ],
  'description': 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
  'examples': [
    'rationalize("2x/y - y/(x+1)")',
    'rationalize("2x/y - y/(x+1)", true)',
  ],
  'seealso': [
    'simplify'
  ]
};

},{}],70:[function(require,module,exports){
module.exports = {
  'name': 'simplify',
  'category': 'Algebra',
  'syntax': [
    'simplify(expr)',
    'simplify(expr, rules)'
  ],
  'description': 'Simplify an expression tree.',
  'examples': [
    'simplify("3 + 2 / 4")',
    'simplify("2x + x")',
    'f = parse("x * (x + 2 + x)")',
    'simplified = simplify(f)',
    'simplified.eval({x: 2})'
  ],
  'seealso': [
    'derivative', 'parse', 'eval'
  ]
};

},{}],71:[function(require,module,exports){
module.exports = {
  'name': 'slu',
  'category': 'Algebra',
  'syntax': [
    'slu(A, order, threshold)'
  ],
  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
  'examples': [
    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'
  ],
  'seealso': [
    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr'
  ]
};

},{}],72:[function(require,module,exports){
module.exports = {
  'name': 'usolve',
  'category': 'Algebra',
  'syntax': [
    'x=usolve(U, b)'
  ],
  'description':
  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  'examples': [
    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
  ],
  'seealso': [
    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'
  ]
};

},{}],73:[function(require,module,exports){
module.exports = {
  'name': 'abs',
  'category': 'Arithmetic',
  'syntax': [
    'abs(x)'
  ],
  'description': 'Compute the absolute value.',
  'examples': [
    'abs(3.5)',
    'abs(-4.2)'
  ],
  'seealso': ['sign']
};

},{}],74:[function(require,module,exports){
module.exports = {
  'name': 'add',
  'category': 'Operators',
  'syntax': [
    'x + y',
    'add(x, y)'
  ],
  'description': 'Add two values.',
  'examples': [
    'a = 2.1 + 3.6',
    'a - 3.6',
    '3 + 2i',
    '3 cm + 2 inch',
    '"2.3" + "4"'
  ],
  'seealso': [
    'subtract'
  ]
};

},{}],75:[function(require,module,exports){
module.exports = {
  'name': 'cbrt',
  'category': 'Arithmetic',
  'syntax': [
    'cbrt(x)',
    'cbrt(x, allRoots)'
  ],
  'description':
      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
  'examples': [
    'cbrt(64)',
    'cube(4)',
    'cbrt(-8)',
    'cbrt(2 + 3i)',
    'cbrt(8i)',
    'cbrt(8i, true)',
    'cbrt(27 m^3)'
  ],
  'seealso': [
    'square',
    'sqrt',
    'cube',
    'multiply'
  ]
};

},{}],76:[function(require,module,exports){
module.exports = {
  'name': 'ceil',
  'category': 'Arithmetic',
  'syntax': [
    'ceil(x)'
  ],
  'description':
      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
  'examples': [
    'ceil(3.2)',
    'ceil(3.8)',
    'ceil(-4.2)'
  ],
  'seealso': ['floor', 'fix', 'round']
};

},{}],77:[function(require,module,exports){
module.exports = {
  'name': 'cube',
  'category': 'Arithmetic',
  'syntax': [
    'cube(x)'
  ],
  'description': 'Compute the cube of a value. The cube of x is x * x * x.',
  'examples': [
    'cube(2)',
    '2^3',
    '2 * 2 * 2'
  ],
  'seealso': [
    'multiply',
    'square',
    'pow'
  ]
};

},{}],78:[function(require,module,exports){
module.exports = {
  'name': 'divide',
  'category': 'Operators',
  'syntax': [
    'x / y',
    'divide(x, y)'
  ],
  'description': 'Divide two values.',
  'examples': [
    'a = 2 / 3',
    'a * 3',
    '4.5 / 2',
    '3 + 4 / 2',
    '(3 + 4) / 2',
    '18 km / 4.5'
  ],
  'seealso': [
    'multiply'
  ]
};

},{}],79:[function(require,module,exports){
module.exports = {
  'name': 'dotDivide',
  'category': 'Operators',
  'syntax': [
    'x ./ y',
    'dotDivide(x, y)'
  ],
  'description': 'Divide two values element wise.',
  'examples': [
    'a = [1, 2, 3; 4, 5, 6]',
    'b = [2, 1, 1; 3, 2, 5]',
    'a ./ b'
  ],
  'seealso': [
    'multiply',
    'dotMultiply',
    'divide'
  ]
};

},{}],80:[function(require,module,exports){
module.exports = {
  'name': 'dotMultiply',
  'category': 'Operators',
  'syntax': [
    'x .* y',
    'dotMultiply(x, y)'
  ],
  'description': 'Multiply two values element wise.',
  'examples': [
    'a = [1, 2, 3; 4, 5, 6]',
    'b = [2, 1, 1; 3, 2, 5]',
    'a .* b'
  ],
  'seealso': [
    'multiply',
    'divide',
    'dotDivide'
  ]
};

},{}],81:[function(require,module,exports){
module.exports = {
  'name': 'dotpow',
  'category': 'Operators',
  'syntax': [
    'x .^ y',
    'dotpow(x, y)'
  ],
  'description':
      'Calculates the power of x to y element wise.',
  'examples': [
    'a = [1, 2, 3; 4, 5, 6]',
    'a .^ 2'
  ],
  'seealso': [
    'pow'
  ]
};

},{}],82:[function(require,module,exports){
module.exports = {
  'name': 'exp',
  'category': 'Arithmetic',
  'syntax': [
    'exp(x)'
  ],
  'description': 'Calculate the exponent of a value.',
  'examples': [
    'exp(1.3)',
    'e ^ 1.3',
    'log(exp(1.3))',
    'x = 2.4',
    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'
  ],
  'seealso': [
    'pow',
    'log'
  ]
};

},{}],83:[function(require,module,exports){
module.exports = {
  'name': 'fix',
  'category': 'Arithmetic',
  'syntax': [
    'fix(x)'
  ],
  'description':
      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
  'examples': [
    'fix(3.2)',
    'fix(3.8)',
    'fix(-4.2)',
    'fix(-4.8)'
  ],
  'seealso': ['ceil', 'floor', 'round']
};

},{}],84:[function(require,module,exports){
module.exports = {
  'name': 'floor',
  'category': 'Arithmetic',
  'syntax': [
    'floor(x)'
  ],
  'description':
      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
  'examples': [
    'floor(3.2)',
    'floor(3.8)',
    'floor(-4.2)'
  ],
  'seealso': ['ceil', 'fix', 'round']
};

},{}],85:[function(require,module,exports){
module.exports = {
  'name': 'gcd',
  'category': 'Arithmetic',
  'syntax': [
    'gcd(a, b)',
    'gcd(a, b, c, ...)'
  ],
  'description': 'Compute the greatest common divisor.',
  'examples': [
    'gcd(8, 12)',
    'gcd(-4, 6)',
    'gcd(25, 15, -10)'
  ],
  'seealso': [ 'lcm', 'xgcd' ]
};

},{}],86:[function(require,module,exports){
module.exports = {
  'name': 'hypot',
  'category': 'Arithmetic',
  'syntax': [
    'hypot(a, b, c, ...)',
    'hypot([a, b, c, ...])'
  ],
  'description': 'Calculate the hypotenusa of a list with values. ',
  'examples': [
    'hypot(3, 4)',
    'sqrt(3^2 + 4^2)',
    'hypot(-2)',
    'hypot([3, 4, 5])'
  ],
  'seealso': [ 'abs', 'norm' ]
};

},{}],87:[function(require,module,exports){
module.exports = {
  'name': 'lcm',
  'category': 'Arithmetic',
  'syntax': [
    'lcm(x, y)'
  ],
  'description': 'Compute the least common multiple.',
  'examples': [
    'lcm(4, 6)',
    'lcm(6, 21)',
    'lcm(6, 21, 5)'
  ],
  'seealso': [ 'gcd' ]
};

},{}],88:[function(require,module,exports){
module.exports = {
  'name': 'log',
  'category': 'Arithmetic',
  'syntax': [
    'log(x)',
    'log(x, base)'
  ],
  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
  'examples': [
    'log(3.5)',
    'a = log(2.4)',
    'exp(a)',
    '10 ^ 4',
    'log(10000, 10)',
    'log(10000) / log(10)',
    'b = log(1024, 2)',
    '2 ^ b'
  ],
  'seealso': [
    'exp',
    'log10'
  ]
};
},{}],89:[function(require,module,exports){
module.exports = {
  'name': 'log10',
  'category': 'Arithmetic',
  'syntax': [
    'log10(x)'
  ],
  'description': 'Compute the 10-base logarithm of a value.',
  'examples': [
    'log10(0.00001)',
    'log10(10000)',
    '10 ^ 4',
    'log(10000) / log(10)',
    'log(10000, 10)'
  ],
  'seealso': [
    'exp',
    'log'
  ]
};

},{}],90:[function(require,module,exports){
module.exports = {
  'name': 'mod',
  'category': 'Operators',
  'syntax': [
    'x % y',
    'x mod y',
    'mod(x, y)'
  ],
  'description':
      'Calculates the modulus, the remainder of an integer division.',
  'examples': [
    '7 % 3',
    '11 % 2',
    '10 mod 4',
    'isOdd(x) = x % 2',
    'isOdd(2)',
    'isOdd(3)'
  ],
  'seealso': ['divide']
};

},{}],91:[function(require,module,exports){
module.exports = {
  'name': 'multiply',
  'category': 'Operators',
  'syntax': [
    'x * y',
    'multiply(x, y)'
  ],
  'description': 'multiply two values.',
  'examples': [
    'a = 2.1 * 3.4',
    'a / 3.4',
    '2 * 3 + 4',
    '2 * (3 + 4)',
    '3 * 2.1 km'
  ],
  'seealso': [
    'divide'
  ]
};

},{}],92:[function(require,module,exports){
module.exports = {
  'name': 'norm',
  'category': 'Arithmetic',
  'syntax': [
    'norm(x)',
    'norm(x, p)'
  ],
  'description': 'Calculate the norm of a number, vector or matrix.',
  'examples': [
    'abs(-3.5)',
    'norm(-3.5)',
    'norm(3 - 4i)',
    'norm([1, 2, -3], Infinity)',
    'norm([1, 2, -3], -Infinity)',
    'norm([3, 4], 2)',
    'norm([[1, 2], [3, 4]], 1)',
    'norm([[1, 2], [3, 4]], "inf")',
    'norm([[1, 2], [3, 4]], "fro")'
  ]
};

},{}],93:[function(require,module,exports){
module.exports = {
  'name': 'nthRoot',
  'category': 'Arithmetic',
  'syntax': [
    'nthRoot(a)',
    'nthRoot(a, root)'
  ],
  'description': 'Calculate the nth root of a value. ' +
      'The principal nth root of a positive real number A, ' +
      'is the positive real solution of the equation "x^root = A".',
  'examples': [
    '4 ^ 3',
    'nthRoot(64, 3)',
    'nthRoot(9, 2)',
    'sqrt(9)'
  ],
  'seealso': [
    'sqrt',
    'pow'
  ]
};
},{}],94:[function(require,module,exports){
module.exports = {
  'name': 'pow',
  'category': 'Operators',
  'syntax': [
    'x ^ y',
    'pow(x, y)'
  ],
  'description':
      'Calculates the power of x to y, x^y.',
  'examples': [
    '2^3',
    '2*2*2',
    '1 + e ^ (pi * i)'
  ],
  'seealso': [ 'multiply' ]
};

},{}],95:[function(require,module,exports){
module.exports = {
  'name': 'round',
  'category': 'Arithmetic',
  'syntax': [
    'round(x)',
    'round(x, n)'
  ],
  'description':
      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
  'examples': [
    'round(3.2)',
    'round(3.8)',
    'round(-4.2)',
    'round(-4.8)',
    'round(pi, 3)',
    'round(123.45678, 2)'
  ],
  'seealso': ['ceil', 'floor', 'fix']
};

},{}],96:[function(require,module,exports){
module.exports = {
  'name': 'sign',
  'category': 'Arithmetic',
  'syntax': [
    'sign(x)'
  ],
  'description':
      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
  'examples': [
    'sign(3.5)',
    'sign(-4.2)',
    'sign(0)'
  ],
  'seealso': [
    'abs'
  ]
};

},{}],97:[function(require,module,exports){
module.exports = {
  'name': 'sqrt',
  'category': 'Arithmetic',
  'syntax': [
    'sqrt(x)'
  ],
  'description':
      'Compute the square root value. If x = y * y, then y is the square root of x.',
  'examples': [
    'sqrt(25)',
    '5 * 5',
    'sqrt(-1)'
  ],
  'seealso': [
    'square',
    'multiply'
  ]
};

},{}],98:[function(require,module,exports){
module.exports = {
  'name': 'square',
  'category': 'Arithmetic',
  'syntax': [
    'square(x)'
  ],
  'description':
      'Compute the square of a value. The square of x is x * x.',
  'examples': [
    'square(3)',
    'sqrt(9)',
    '3^2',
    '3 * 3'
  ],
  'seealso': [
    'multiply',
    'pow',
    'sqrt',
    'cube'
  ]
};

},{}],99:[function(require,module,exports){
module.exports = {
  'name': 'subtract',
  'category': 'Operators',
  'syntax': [
    'x - y',
    'subtract(x, y)'
  ],
  'description': 'subtract two values.',
  'examples': [
    'a = 5.3 - 2',
    'a + 2',
    '2/3 - 1/6',
    '2 * 3 - 3',
    '2.1 km - 500m'
  ],
  'seealso': [
    'add'
  ]
};

},{}],100:[function(require,module,exports){
module.exports = {
  'name': 'unaryMinus',
  'category': 'Operators',
  'syntax': [
    '-x',
    'unaryMinus(x)'
  ],
  'description':
      'Inverse the sign of a value. Converts booleans and strings to numbers.',
  'examples': [
    '-4.5',
    '-(-5.6)',
    '-"22"'
  ],
  'seealso': [
    'add', 'subtract', 'unaryPlus'
  ]
};

},{}],101:[function(require,module,exports){
module.exports = {
  'name': 'unaryPlus',
  'category': 'Operators',
  'syntax': [
    '+x',
    'unaryPlus(x)'
  ],
  'description':
      'Converts booleans and strings to numbers.',
  'examples': [
    '+true',
    '+"2"'
  ],
  'seealso': [
    'add', 'subtract', 'unaryMinus'
  ]
};

},{}],102:[function(require,module,exports){
module.exports = {
  'name': 'xgcd',
  'category': 'Arithmetic',
  'syntax': [
    'xgcd(a, b)'
  ],
  'description': 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
  'examples': [
    'xgcd(8, 12)',
    'gcd(8, 12)',
    'xgcd(36163, 21199)'
  ],
  'seealso': [ 'gcd', 'lcm' ]
};

},{}],103:[function(require,module,exports){
module.exports = {
  'name': 'bitAnd',
  'category': 'Bitwise',
  'syntax': [
    'x & y',
    'bitAnd(x, y)'
  ],
  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
  'examples': [
    '5 & 3',
    'bitAnd(53, 131)',
    '[1, 12, 31] & 42'
  ],
  'seealso': [
    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
  ]
};

},{}],104:[function(require,module,exports){
module.exports = {
  'name': 'bitNot',
  'category': 'Bitwise',
  'syntax': [
    '~x',
    'bitNot(x)'
  ],
  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
  'examples': [
    '~1',
    '~2',
    'bitNot([2, -3, 4])'
  ],
  'seealso': [
    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
  ]
};

},{}],105:[function(require,module,exports){
module.exports = {
  'name': 'bitOr',
  'category': 'Bitwise',
  'syntax': [
    'x | y',
    'bitOr(x, y)'
  ],
  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
  'examples': [
    '5 | 3',
    'bitOr([1, 2, 3], 4)'
  ],
  'seealso': [
    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
  ]
};

},{}],106:[function(require,module,exports){
module.exports = {
  'name': 'bitXor',
  'category': 'Bitwise',
  'syntax': [
    'bitXor(x, y)'
  ],
  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
  'examples': [
    'bitOr(1, 2)',
    'bitXor([2, 3, 4], 4)'
  ],
  'seealso': [
    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'
  ]
};

},{}],107:[function(require,module,exports){
module.exports = {
  'name': 'leftShift',
  'category': 'Bitwise',
  'syntax': [
    'x << y',
    'leftShift(x, y)'
  ],
  'description': 'Bitwise left logical shift of a value x by y number of bits.',
  'examples': [
    '4 << 1',
    '8 >> 1'
  ],
  'seealso': [
    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'
  ]
};

},{}],108:[function(require,module,exports){
module.exports = {
  'name': 'rightArithShift',
  'category': 'Bitwise',
  'syntax': [
    'x >> y',
    'rightArithShift(x, y)'
  ],
  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
  'examples': [
    '8 >> 1',
    '4 << 1',
    '-12 >> 2'
  ],
  'seealso': [
    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'
  ]
};

},{}],109:[function(require,module,exports){
module.exports = {
  'name': 'rightLogShift',
  'category': 'Bitwise',
  'syntax': [
    'x >>> y',
    'rightLogShift(x, y)'
  ],
  'description': 'Bitwise right logical shift of a value x by y number of bits.',
  'examples': [
    '8 >>> 1',
    '4 << 1',
    '-12 >>> 2'
  ],
  'seealso': [
    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'
  ]
};

},{}],110:[function(require,module,exports){
module.exports = {
  'name': 'bellNumbers',
  'category': 'Combinatorics',
  'syntax': [
    'bellNumbers(n)'
  ],
  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
  'examples': [
    'bellNumbers(3)',
    'bellNumbers(8)'
  ],
  'seealso': ['stirlingS2']
};
},{}],111:[function(require,module,exports){
module.exports = {
  'name': 'catalan',
  'category': 'Combinatorics',
  'syntax': [
    'catalan(n)'
  ],
  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
  'examples': [
    'catalan(3)',
    'catalan(8)'
  ],
  'seealso': ['bellNumbers']
};
},{}],112:[function(require,module,exports){
module.exports = {
  'name': 'composition',
  'category': 'Combinatorics',
  'syntax': [
    'composition(n, k)'
  ],
  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
  'examples': [
    'composition(5, 3)'
  ],
  'seealso': ['combinations']
};
},{}],113:[function(require,module,exports){
module.exports = {
  'name': 'stirlingS2',
  'category': 'Combinatorics',
  'syntax': [
    'stirlingS2(n, k)'
  ],
  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
  'examples': [
    'stirlingS2(5, 3)'
  ],
  'seealso': ['bellNumbers']
};

},{}],114:[function(require,module,exports){
module.exports = {
  'name': 'arg',
  'category': 'Complex',
  'syntax': [
    'arg(x)'
  ],
  'description':
      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
  'examples': [
    'arg(2 + 2i)',
    'atan2(3, 2)',
    'arg(2 + 3i)'
  ],
  'seealso': [
    're',
    'im',
    'conj',
    'abs'
  ]
};

},{}],115:[function(require,module,exports){
module.exports = {
  'name': 'conj',
  'category': 'Complex',
  'syntax': [
    'conj(x)'
  ],
  'description':
      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
  'examples': [
    'conj(2 + 3i)',
    'conj(2 - 3i)',
    'conj(-5.2i)'
  ],
  'seealso': [
    're',
    'im',
    'abs',
    'arg'
  ]
};

},{}],116:[function(require,module,exports){
module.exports = {
  'name': 'im',
  'category': 'Complex',
  'syntax': [
    'im(x)'
  ],
  'description': 'Get the imaginary part of a complex number.',
  'examples': [
    'im(2 + 3i)',
    're(2 + 3i)',
    'im(-5.2i)',
    'im(2.4)'
  ],
  'seealso': [
    're',
    'conj',
    'abs',
    'arg'
  ]
};

},{}],117:[function(require,module,exports){
module.exports = {
  'name': 're',
  'category': 'Complex',
  'syntax': [
    're(x)'
  ],
  'description': 'Get the real part of a complex number.',
  'examples': [
    're(2 + 3i)',
    'im(2 + 3i)',
    're(-5.2i)',
    're(2.4)'
  ],
  'seealso': [
    'im',
    'conj',
    'abs',
    'arg'
  ]
};

},{}],118:[function(require,module,exports){
module.exports = {
  'name': 'eval',
  'category': 'Expression',
  'syntax': [
    'eval(expression)',
    'eval([expr1, expr2, expr3, ...])'
  ],
  'description': 'Evaluate an expression or an array with expressions.',
  'examples': [
    'eval("2 + 3")',
    'eval("sqrt(" + 4 + ")")'
  ],
  'seealso': []
};

},{}],119:[function(require,module,exports){
module.exports = {
  'name': 'help',
  'category': 'Expression',
  'syntax': [
    'help(object)',
    'help(string)'
  ],
  'description': 'Display documentation on a function or data type.',
  'examples': [
    'help(sqrt)',
    'help("complex")'
  ],
  'seealso': []
};

},{}],120:[function(require,module,exports){
module.exports = {
  'name': 'distance',
  'category': 'Geometry',
  'syntax': [
    'distance([x1, y1], [x2, y2])',
    'distance([[x1, y1], [x2, y2])'
  ],
  'description': 'Calculates the Euclidean distance between two points.',
  'examples': [
    'distance([0,0], [4,4])',
    'distance([[0,0], [4,4]])'
  ],
  'seealso': []
};

},{}],121:[function(require,module,exports){
module.exports = {
  'name': 'intersect',
  'category': 'Geometry',
  'syntax': [
    'intersect(expr1, expr2, expr3, expr4)',
    'intersect(expr1, expr2, expr3)'
  ],
  'description': 'Computes the intersection point of lines and/or planes.',
  'examples': [
    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',
    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'
  ],
  'seealso': []
};

},{}],122:[function(require,module,exports){
module.exports = {
  'name': 'and',
  'category': 'Logical',
  'syntax': [
    'x and y',
    'and(x, y)'
  ],
  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
  'examples': [
    'true and false',
    'true and true',
    '2 and 4'
  ],
  'seealso': [
    'not', 'or', 'xor'
  ]
};

},{}],123:[function(require,module,exports){
module.exports = {
  'name': 'not',
  'category': 'Logical',
  'syntax': [
    'not x',
    'not(x)'
  ],
  'description': 'Logical not. Flips the boolean value of given argument.',
  'examples': [
    'not true',
    'not false',
    'not 2',
    'not 0'
  ],
  'seealso': [
    'and', 'or', 'xor'
  ]
};

},{}],124:[function(require,module,exports){
module.exports = {
  'name': 'or',
  'category': 'Logical',
  'syntax': [
    'x or y',
    'or(x, y)'
  ],
  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
  'examples': [
    'true or false',
    'false or false',
    '0 or 4'
  ],
  'seealso': [
    'not', 'and', 'xor'
  ]
};

},{}],125:[function(require,module,exports){
module.exports = {
  'name': 'xor',
  'category': 'Logical',
  'syntax': [
    'x xor y',
    'xor(x, y)'
  ],
  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
  'examples': [
    'true xor false',
    'false xor false',
    'true xor true',
    '0 xor 4'
  ],
  'seealso': [
    'not', 'and', 'or'
  ]
};

},{}],126:[function(require,module,exports){
module.exports = {
  'name': 'concat',
  'category': 'Matrix',
  'syntax': [
    'concat(A, B, C, ...)',
    'concat(A, B, C, ..., dim)'
  ],
  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
  'examples': [
    'A = [1, 2; 5, 6]',
    'B = [3, 4; 7, 8]',
    'concat(A, B)',
    'concat(A, B, 1)',
    'concat(A, B, 2)'
  ],
  'seealso': [
    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],127:[function(require,module,exports){
module.exports = {
  'name': 'cross',
  'category': 'Matrix',
  'syntax': [
    'cross(A, B)'
  ],
  'description': 'Calculate the cross product for two vectors in three dimensional space.',
  'examples': [
    'cross([1, 1, 0],  [0, 1, 1])',
    'cross([3, -3, 1], [4, 9, 2])',
    'cross([2, 3, 4],  [5, 6, 7])'
  ],
  'seealso': [
    'multiply',
    'dot'
  ]
};

},{}],128:[function(require,module,exports){
module.exports = {
  'name': 'det',
  'category': 'Matrix',
  'syntax': [
    'det(x)'
  ],
  'description': 'Calculate the determinant of a matrix',
  'examples': [
    'det([1, 2; 3, 4])',
    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'
  ],
  'seealso': [
    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],129:[function(require,module,exports){
module.exports = {
  'name': 'diag',
  'category': 'Matrix',
  'syntax': [
    'diag(x)',
    'diag(x, k)'
  ],
  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
  'examples': [
    'diag(1:3)',
    'diag(1:3, 1)',
    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',
    'diag(a)'
  ],
  'seealso': [
    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],130:[function(require,module,exports){
module.exports = {
  'name': 'dot',
  'category': 'Matrix',
  'syntax': [
    'dot(A, B)',
    'A * B'
  ],
  'description': 'Calculate the dot product of two vectors. ' +
      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +
      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
  'examples': [
    'dot([2, 4, 1], [2, 2, 3])',
    '[2, 4, 1] * [2, 2, 3]'
  ],
  'seealso': [
    'multiply',
    'cross'
  ]
};

},{}],131:[function(require,module,exports){
module.exports = {
  'name': 'eye',
  'category': 'Matrix',
  'syntax': [
    'eye(n)',
    'eye(m, n)',
    'eye([m, n])'
  ],
  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
  'examples': [
    'eye(3)',
    'eye(3, 5)',
    'a = [1, 2, 3; 4, 5, 6]',
    'eye(size(a))'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],132:[function(require,module,exports){
module.exports = {
  'name': 'filter',
  'category': 'Matrix',
  'syntax': [
    'filter(x, test)'
  ],
  'description': 'Filter items in a matrix.',
  'examples': [
    'isPositive(x) = x > 0',
    'filter([6, -2, -1, 4, 3], isPositive)',
    'filter([6, -2, 0, 1, 0], x != 0)'
  ],
  'seealso': ['sort', 'map', 'forEach']
};

},{}],133:[function(require,module,exports){
module.exports = {
  'name': 'flatten',
  'category': 'Matrix',
  'syntax': [
    'flatten(x)'
  ],
  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
  'examples': [
    'a = [1, 2, 3; 4, 5, 6]',
    'size(a)',
    'b = flatten(a)',
    'size(b)'
  ],
  'seealso': [
    'concat', 'resize', 'size', 'squeeze'
  ]
};

},{}],134:[function(require,module,exports){
module.exports = {
  'name': 'forEach',
  'category': 'Matrix',
  'syntax': [
    'forEach(x, callback)'
  ],
  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
  'examples': [
    'forEach([1, 2, 3], function(val) { console.log(val) })'
  ],
  'seealso': ['map', 'sort', 'filter']
};

},{}],135:[function(require,module,exports){
module.exports = {
  'name': 'inv',
  'category': 'Matrix',
  'syntax': [
    'inv(x)'
  ],
  'description': 'Calculate the inverse of a matrix',
  'examples': [
    'inv([1, 2; 3, 4])',
    'inv(4)',
    '1 / 4'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],136:[function(require,module,exports){
module.exports = {
  'name': 'kron',
  'category': 'Matrix',
  'syntax': [
    'kron(x, y)'
  ],
  'description': 'Calculates the kronecker product of 2 matrices or vectors.',
  'examples': [
    'kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])',
    'kron([1,1], [2,3,4])'
  ],
  'seealso': [
    'multiply', 'dot', 'cross'
  ]
};

},{}],137:[function(require,module,exports){
module.exports = {
  'name': 'map',
  'category': 'Matrix',
  'syntax': [
    'map(x, callback)'
  ],
  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
  'examples': [
    'map([1, 2, 3], square)'
  ],
  'seealso': ['filter', 'forEach']
};

},{}],138:[function(require,module,exports){
module.exports = {
  'name': 'ones',
  'category': 'Matrix',
  'syntax': [
    'ones(m)',
    'ones(m, n)',
    'ones(m, n, p, ...)',
    'ones([m])',
    'ones([m, n])',
    'ones([m, n, p, ...])'
  ],
  'description': 'Create a matrix containing ones.',
  'examples': [
    'ones(3)',
    'ones(3, 5)',
    'ones([2,3]) * 4.5',
    'a = [1, 2, 3; 4, 5, 6]',
    'ones(size(a))'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],139:[function(require,module,exports){
module.exports = {
  'name': 'partitionSelect',
  'category': 'Matrix',
  'syntax': [
    'partitionSelect(x, k)',
    'partitionSelect(x, k, compare)'
  ],
  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
  'examples': [
    'partitionSelect([5, 10, 1], 2)',
    'partitionSelect(["C", "B", "A", "D"], 1)'
  ],
  'seealso': ['sort']
};

},{}],140:[function(require,module,exports){
module.exports = {
  'name': 'range',
  'category': 'Type',
  'syntax': [
    'start:end',
    'start:step:end',
    'range(start, end)',
    'range(start, end, step)',
    'range(string)'
  ],
  'description':
      'Create a range. Lower bound of the range is included, upper bound is excluded.',
  'examples': [
    '1:5',
    '3:-1:-3',
    'range(3, 7)',
    'range(0, 12, 2)',
    'range("4:10")',
    'a = [1, 2, 3, 4; 5, 6, 7, 8]',
    'a[1:2, 1:2]'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],141:[function(require,module,exports){
module.exports = {
  'name': 'reshape',
  'category': 'Matrix',
  'syntax': [
    'reshape(x, sizes)'
  ],
  'description': 'Reshape a multi dimensional array to fit the specified dimensions.',
  'examples': [
    'reshape([1, 2, 3, 4, 5, 6], [2, 3])',
    'reshape([[1, 2], [3, 4]], [1, 4])',
    'reshape([[1, 2], [3, 4]], [4])'
  ],
  'seealso': [
    'size', 'squeeze', 'resize'
  ]
};

},{}],142:[function(require,module,exports){
module.exports = {
  'name': 'resize',
  'category': 'Matrix',
  'syntax': [
    'resize(x, size)',
    'resize(x, size, defaultValue)'
  ],
  'description': 'Resize a matrix.',
  'examples': [
    'resize([1,2,3,4,5], [3])',
    'resize([1,2,3], [5])',
    'resize([1,2,3], [5], -1)',
    'resize(2, [2, 3])',
    'resize("hello", [8], "!")'
  ],
  'seealso': [
    'size', 'subset', 'squeeze', 'reshape'
  ]
};

},{}],143:[function(require,module,exports){
module.exports = {
  'name': 'size',
  'category': 'Matrix',
  'syntax': [
    'size(x)'
  ],
  'description': 'Calculate the size of a matrix.',
  'examples': [
    'size(2.3)',
    'size("hello world")',
    'a = [1, 2; 3, 4; 5, 6]',
    'size(a)',
    'size(1:6)'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],144:[function(require,module,exports){
module.exports = {
  'name': 'sort',
  'category': 'Matrix',
  'syntax': [
    'sort(x)',
    'sort(x, compare)'
  ],
  'description': 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  'examples': [
    'sort([5, 10, 1])',
    'sort(["C", "B", "A", "D"])',
    'sortByLength(a, b) = size(a)[1] - size(b)[1]',
    'sort(["Langdon", "Tom", "Sara"], sortByLength)',
    'sort(["10", "1", "2"], "natural")'
  ],
  'seealso': ['map', 'filter', 'forEach']
};

},{}],145:[function(require,module,exports){
module.exports = {
  'name': 'squeeze',
  'category': 'Matrix',
  'syntax': [
    'squeeze(x)'
  ],
  'description': 'Remove inner and outer singleton dimensions from a matrix.',
  'examples': [
    'a = zeros(3,2,1)',
    'size(squeeze(a))',
    'b = zeros(1,1,3)',
    'size(squeeze(b))'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'
  ]
};

},{}],146:[function(require,module,exports){
module.exports = {
  'name': 'subset',
  'category': 'Matrix',
  'syntax': [
    'value(index)',
    'value(index) = replacement',
    'subset(value, [index])',
    'subset(value, [index], replacement)'
  ],
  'description': 'Get or set a subset of a matrix or string. ' +
      'Indexes are one-based. ' +
      'Both the ranges lower-bound and upper-bound are included.',
  'examples': [
    'd = [1, 2; 3, 4]',
    'e = []',
    'e[1, 1:2] = [5, 6]',
    'e[2, :] = [7, 8]',
    'f = d * e',
    'f[2, 1]',
    'f[:, 1]'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'
  ]
};

},{}],147:[function(require,module,exports){
module.exports = {
  'name': 'trace',
  'category': 'Matrix',
  'syntax': [
    'trace(A)'
  ],
  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
  'examples': [
    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',
    'trace(A)'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'
  ]
};

},{}],148:[function(require,module,exports){
module.exports = {
  'name': 'transpose',
  'category': 'Matrix',
  'syntax': [
    'x\'',
    'transpose(x)'
  ],
  'description': 'Transpose a matrix',
  'examples': [
    'a = [1, 2, 3; 4, 5, 6]',
    'a\'',
    'transpose(a)'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'
  ]
};

},{}],149:[function(require,module,exports){
module.exports = {
  'name': 'zeros',
  'category': 'Matrix',
  'syntax': [
    'zeros(m)',
    'zeros(m, n)',
    'zeros(m, n, p, ...)',
    'zeros([m])',
    'zeros([m, n])',
    'zeros([m, n, p, ...])'
  ],
  'description': 'Create a matrix containing zeros.',
  'examples': [
    'zeros(3)',
    'zeros(3, 5)',
    'a = [1, 2, 3; 4, 5, 6]',
    'zeros(size(a))'
  ],
  'seealso': [
    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'
  ]
};

},{}],150:[function(require,module,exports){
module.exports = {
  'name': 'combinations',
  'category': 'Probability',
  'syntax': [
    'combinations(n, k)'
  ],
  'description': 'Compute the number of combinations of n items taken k at a time',
  'examples': [
    'combinations(7, 5)'
  ],
  'seealso': ['permutations', 'factorial']
};

},{}],151:[function(require,module,exports){
module.exports = {
  'name': 'factorial',
  'category': 'Probability',
  'syntax': [
    'n!',
    'factorial(n)'
  ],
  'description': 'Compute the factorial of a value',
  'examples': [
    '5!',
    '5 * 4 * 3 * 2 * 1',
    '3!'
  ],
  'seealso': ['combinations', 'permutations', 'gamma']
};

},{}],152:[function(require,module,exports){
module.exports = {
  'name': 'gamma',
  'category': 'Probability',
  'syntax': [
    'gamma(n)'
  ],
  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
  'examples': [
    'gamma(4)',
    '3!',
    'gamma(1/2)',
    'sqrt(pi)'
  ],
  'seealso': ['factorial']
};

},{}],153:[function(require,module,exports){
module.exports = {
  'name': 'kldivergence',
  'category': 'Probability',
  'syntax': [
    'kldivergence(x, y)'
  ],
  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
  'examples': [
    'kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'
  ],
  'seealso': []
};

},{}],154:[function(require,module,exports){
module.exports = {
  'name': 'multinomial',
  'category': 'Probability',
  'syntax': [
    'multinomial(A)'
  ],
  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
  'examples': [
    'multinomial([1, 2, 1])'
  ],
  'seealso': ['combinations', 'factorial']
};
},{}],155:[function(require,module,exports){
module.exports = {
  'name': 'permutations',
  'category': 'Probability',
  'syntax': [
    'permutations(n)',
    'permutations(n, k)'
  ],
  'description': 'Compute the number of permutations of n items taken k at a time',
  'examples': [
    'permutations(5)',
    'permutations(5, 3)'
  ],
  'seealso': ['combinations', 'factorial']
};

},{}],156:[function(require,module,exports){
module.exports = {
  'name': 'pickRandom',
  'category': 'Probability',
  'syntax': [
    'pickRandom(array)',
    'pickRandom(array, number)',
    'pickRandom(array, weights)',
    'pickRandom(array, number, weights)',
    'pickRandom(array, weights, number)'
  ],
  'description':
      'Pick a random entry from a given array.',
  'examples': [
    'pickRandom(0:10)',
    'pickRandom([1, 3, 1, 6])',
    'pickRandom([1, 3, 1, 6], 2)',
    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',
    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',
    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'
  ],
  'seealso': ['random', 'randomInt']
};

},{}],157:[function(require,module,exports){
module.exports = {
  'name': 'random',
  'category': 'Probability',
  'syntax': [
    'random()',
    'random(max)',
    'random(min, max)',
    'random(size)',
    'random(size, max)',
    'random(size, min, max)'
  ],
  'description':
      'Return a random number.',
  'examples': [
    'random()',
    'random(10, 20)',
    'random([2, 3])'
  ],
  'seealso': ['pickRandom', 'randomInt']
};

},{}],158:[function(require,module,exports){
module.exports = {
  'name': 'randomInt',
  'category': 'Probability',
  'syntax': [
    'randomInt(max)',
    'randomInt(min, max)',
    'randomInt(size)',
    'randomInt(size, max)',
    'randomInt(size, min, max)'
  ],
  'description':
      'Return a random integer number',
  'examples': [
    'randomInt(10, 20)',
    'randomInt([2, 3], 10)'
  ],
  'seealso': ['pickRandom', 'random']
};
},{}],159:[function(require,module,exports){
module.exports = {
  'name': 'compare',
  'category': 'Relational',
  'syntax': [
    'compare(x, y)'
  ],
  'description':
      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',
  'examples': [
    'compare(2, 3)',
    'compare(3, 2)',
    'compare(2, 2)',
    'compare(5cm, 40mm)',
    'compare(2, [1, 2, 3])'
  ],
  'seealso': [
    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural'
  ]
};

},{}],160:[function(require,module,exports){
module.exports = {
  'name': 'compareNatural',
  'category': 'Relational',
  'syntax': [
    'compareNatural(x, y)'
  ],
  'description': 'Compare two values of any type in a deterministic, natural way.',
  'examples': [
    'compareNatural(2, 3)',
    'compareNatural(3, 2)',
    'compareNatural(2, 2)',
    'compareNatural(5cm, 40mm)',
    'compareNatural("2", "10")',
    'compareNatural(2 + 3i, 2 + 4i)',
    'compareNatural([1, 2, 4], [1, 2, 3])',
    'compareNatural([1, 5], [1, 2, 3])',
    'compareNatural([1, 2], [1, 2])',
    'compareNatural({a: 2}, {a: 4})'
  ],
  'seealso': [
    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'
  ]
};

},{}],161:[function(require,module,exports){
module.exports = {
  'name': 'deepEqual',
  'category': 'Relational',
  'syntax': [
    'deepEqual(x, y)'
  ],
  'description':
      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
  'examples': [
    'deepEqual([1,3,4], [1,3,4])',
    'deepEqual([1,3,4], [1,3])'
  ],
  'seealso': [
    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'
  ]
};

},{}],162:[function(require,module,exports){
module.exports = {
  'name': 'equal',
  'category': 'Relational',
  'syntax': [
    'x == y',
    'equal(x, y)'
  ],
  'description':
      'Check equality of two values. Returns true if the values are equal, and false if not.',
  'examples': [
    '2+2 == 3',
    '2+2 == 4',
    'a = 3.2',
    'b = 6-2.8',
    'a == b',
    '50cm == 0.5m'
  ],
  'seealso': [
    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
  ]
};

},{}],163:[function(require,module,exports){
module.exports = {
  'name': 'larger',
  'category': 'Relational',
  'syntax': [
    'x > y',
    'larger(x, y)'
  ],
  'description':
      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
  'examples': [
    '2 > 3',
    '5 > 2*2',
    'a = 3.3',
    'b = 6-2.8',
    '(a > b)',
    '(b < a)',
    '5 cm > 2 inch'
  ],
  'seealso': [
    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'
  ]
};

},{}],164:[function(require,module,exports){
module.exports = {
  'name': 'largerEq',
  'category': 'Relational',
  'syntax': [
    'x >= y',
    'largerEq(x, y)'
  ],
  'description':
      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
  'examples': [
    '2 >= 1+1',
    '2 > 1+1',
    'a = 3.2',
    'b = 6-2.8',
    '(a >= b)'
  ],
  'seealso': [
    'equal', 'unequal', 'smallerEq', 'smaller', 'compare'
  ]
};

},{}],165:[function(require,module,exports){
module.exports = {
  'name': 'smaller',
  'category': 'Relational',
  'syntax': [
    'x < y',
    'smaller(x, y)'
  ],
  'description':
      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
  'examples': [
    '2 < 3',
    '5 < 2*2',
    'a = 3.3',
    'b = 6-2.8',
    '(a < b)',
    '5 cm < 2 inch'
  ],
  'seealso': [
    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'
  ]
};

},{}],166:[function(require,module,exports){
module.exports = {
  'name': 'smallerEq',
  'category': 'Relational',
  'syntax': [
    'x <= y',
    'smallerEq(x, y)'
  ],
  'description':
      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
  'examples': [
    '2 <= 1+1',
    '2 < 1+1',
    'a = 3.2',
    'b = 6-2.8',
    '(a <= b)'
  ],
  'seealso': [
    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'
  ]
};

},{}],167:[function(require,module,exports){
module.exports = {
  'name': 'unequal',
  'category': 'Relational',
  'syntax': [
    'x != y',
    'unequal(x, y)'
  ],
  'description':
      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
  'examples': [
    '2+2 != 3',
    '2+2 != 4',
    'a = 3.2',
    'b = 6-2.8',
    'a != b',
    '50cm != 0.5m',
    '5 cm != 2 inch'
  ],
  'seealso': [
    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
  ]
};

},{}],168:[function(require,module,exports){
module.exports = {
  'name': 'setCartesian',
  'category': 'Set',
  'syntax': [
    'setCartesian(set1, set2)'
  ],
  'description':
      'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': [
    'setCartesian([1, 2], [3, 4])'
  ],
  'seealso': [
    'setUnion', 'setIntersect', 'setDifference', 'setPowerset'
  ]
};

},{}],169:[function(require,module,exports){
module.exports = {
  'name': 'setDifference',
  'category': 'Set',
  'syntax': [
    'setDifference(set1, set2)'
  ],
  'description':
      'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': [
    'setDifference([1, 2, 3, 4], [3, 4, 5, 6])',
    'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
  ],
  'seealso': [
    'setUnion', 'setIntersect', 'setSymDifference'
  ]
};

},{}],170:[function(require,module,exports){
module.exports = {
  'name': 'setDistinct',
  'category': 'Set',
  'syntax': [
    'setDistinct(set)'
  ],
  'description':
      'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': [
    'setDistinct([1, 1, 1, 2, 2, 3])'
  ],
  'seealso': [
    'setMultiplicity'
  ]
};

},{}],171:[function(require,module,exports){
module.exports = {
  'name': 'setIntersect',
  'category': 'Set',
  'syntax': [
    'setIntersect(set1, set2)'
  ],
  'description':
      'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': [
    'setIntersect([1, 2, 3, 4], [3, 4, 5, 6])',
    'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
  ],
  'seealso': [
    'setUnion', 'setDifference'
  ]
};

},{}],172:[function(require,module,exports){
module.exports = {
  'name': 'setIsSubset',
  'category': 'Set',
  'syntax': [
    'setIsSubset(set1, set2)'
  ],
  'description':
      'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': [
    'setIsSubset([1, 2], [3, 4, 5, 6])',
    'setIsSubset([3, 4], [3, 4, 5, 6])'
  ],
  'seealso': [
    'setUnion', 'setIntersect', 'setDifference'
  ]
};

},{}],173:[function(require,module,exports){
module.exports = {
  'name': 'setMultiplicity',
  'category': 'Set',
  'syntax': [
    'setMultiplicity(element, set)'
  ],
  'description':
      'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': [
    'setMultiplicity(1, [1, 2, 2, 4])',
    'setMultiplicity(2, [1, 2, 2, 4])'
  ],
  'seealso': [
    'setDistinct', 'setSize'
  ]
};

},{}],174:[function(require,module,exports){
module.exports = {
  'name': 'setPowerset',
  'category': 'Set',
  'syntax': [
    'setPowerset(set)'
  ],
  'description':
      'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': [
    'setPowerset([1, 2, 3])'
  ],
  'seealso': [
    'setCartesian'
  ]
};

},{}],175:[function(require,module,exports){
module.exports = {
  'name': 'setSize',
  'category': 'Set',
  'syntax': [
    'setSize(set)',
    'setSize(set, unique)'
  ],
  'description':
      'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': [
    'setSize([1, 2, 2, 4])',
    'setSize([1, 2, 2, 4], true)'
  ],
  'seealso': [
    'setUnion', 'setIntersect', 'setDifference'
  ]
};

},{}],176:[function(require,module,exports){
module.exports = {
  'name': 'setSymDifference',
  'category': 'Set',
  'syntax': [
    'setSymDifference(set1, set2)'
  ],
  'description':
      'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': [
    'setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])',
    'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
  ],
  'seealso': [
    'setUnion', 'setIntersect', 'setDifference'
  ]
};

},{}],177:[function(require,module,exports){
module.exports = {
  'name': 'setUnion',
  'category': 'Set',
  'syntax': [
    'setUnion(set1, set2)'
  ],
  'description':
      'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': [
    'setUnion([1, 2, 3, 4], [3, 4, 5, 6])',
    'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'
  ],
  'seealso': [
    'setIntersect', 'setDifference'
  ]
};

},{}],178:[function(require,module,exports){
module.exports = {
  'name': 'erf',
  'category': 'Special',
  'syntax': [
    'erf(x)'
  ],
  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
  'examples': [
    'erf(0.2)',
    'erf(-0.5)',
    'erf(4)'
  ],
  'seealso': []
};

},{}],179:[function(require,module,exports){
module.exports = {
  'name': 'mad',
  'category': 'Statistics',
  'syntax': [
    'mad(a, b, c, ...)',
    'mad(A)'
  ],
  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
  'examples': [
    'mad(10, 20, 30)',
    'mad([1, 2, 3])'
  ],
  'seealso': [
    'mean',
    'median',
    'std',
    'abs'
  ]
};

},{}],180:[function(require,module,exports){
module.exports = {
  'name': 'max',
  'category': 'Statistics',
  'syntax': [
    'max(a, b, c, ...)',
    'max(A)',
    'max(A, dim)'
  ],
  'description': 'Compute the maximum value of a list of values.',
  'examples': [
    'max(2, 3, 4, 1)',
    'max([2, 3, 4, 1])',
    'max([2, 5; 4, 3])',
    'max([2, 5; 4, 3], 1)',
    'max([2, 5; 4, 3], 2)',
    'max(2.7, 7.1, -4.5, 2.0, 4.1)',
    'min(2.7, 7.1, -4.5, 2.0, 4.1)'
  ],
  'seealso': [
    'mean',
    'median',
    'min',
    'prod',
    'std',
    'sum',
    'var'
  ]
};

},{}],181:[function(require,module,exports){
module.exports = {
  'name': 'mean',
  'category': 'Statistics',
  'syntax': [
    'mean(a, b, c, ...)',
    'mean(A)',
    'mean(A, dim)'
  ],
  'description': 'Compute the arithmetic mean of a list of values.',
  'examples': [
    'mean(2, 3, 4, 1)',
    'mean([2, 3, 4, 1])',
    'mean([2, 5; 4, 3])',
    'mean([2, 5; 4, 3], 1)',
    'mean([2, 5; 4, 3], 2)',
    'mean([1.0, 2.7, 3.2, 4.0])'
  ],
  'seealso': [
    'max',
    'median',
    'min',
    'prod',
    'std',
    'sum',
    'var'
  ]
};

},{}],182:[function(require,module,exports){
module.exports = {
  'name': 'median',
  'category': 'Statistics',
  'syntax': [
    'median(a, b, c, ...)',
    'median(A)'
  ],
  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
  'examples': [
    'median(5, 2, 7)',
    'median([3, -1, 5, 7])'
  ],
  'seealso': [
    'max',
    'mean',
    'min',
    'prod',
    'std',
    'sum',
    'var',
    'quantileSeq'
  ]
};

},{}],183:[function(require,module,exports){
module.exports = {
  'name': 'min',
  'category': 'Statistics',
  'syntax': [
    'min(a, b, c, ...)',
    'min(A)',
    'min(A, dim)'
  ],
  'description': 'Compute the minimum value of a list of values.',
  'examples': [
    'min(2, 3, 4, 1)',
    'min([2, 3, 4, 1])',
    'min([2, 5; 4, 3])',
    'min([2, 5; 4, 3], 1)',
    'min([2, 5; 4, 3], 2)',
    'min(2.7, 7.1, -4.5, 2.0, 4.1)',
    'max(2.7, 7.1, -4.5, 2.0, 4.1)'
  ],
  'seealso': [
    'max',
    'mean',
    'median',
    'prod',
    'std',
    'sum',
    'var'
  ]
};

},{}],184:[function(require,module,exports){
module.exports = {
  'name': 'mode',
  'category': 'Statistics',
  'syntax': [
    'mode(a, b, c, ...)',
    'mode(A)',
    'mode(A, a, b, B, c, ...)'
  ],
  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
  'examples': [
    'mode(2, 1, 4, 3, 1)',
    'mode([1, 2.7, 3.2, 4, 2.7])',
    'mode(1, 4, 6, 1, 6)'
  ],
  'seealso': [
    'max',
    'mean',
    'min',
    'median',
    'prod',
    'std',
    'sum',
    'var'
  ]
};

},{}],185:[function(require,module,exports){
module.exports = {
  'name': 'prod',
  'category': 'Statistics',
  'syntax': [
    'prod(a, b, c, ...)',
    'prod(A)'
  ],
  'description': 'Compute the product of all values.',
  'examples': [
    'prod(2, 3, 4)',
    'prod([2, 3, 4])',
    'prod([2, 5; 4, 3])'
  ],
  'seealso': [
    'max',
    'mean',
    'min',
    'median',
    'min',
    'std',
    'sum',
    'var'
  ]
};

},{}],186:[function(require,module,exports){
module.exports = {
  'name': 'quantileSeq',
  'category': 'Statistics',
  'syntax': [
    'quantileSeq(A, prob[, sorted])',
    'quantileSeq(A, [prob1, prob2, ...][, sorted])',
    'quantileSeq(A, N[, sorted])'
  ],
  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
  'examples': [
    'quantileSeq([3, -1, 5, 7], 0.5)',
    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',
    'quantileSeq([3, -1, 5, 7], 2)',
    'quantileSeq([-1, 3, 5, 7], 0.5, true)'
  ],
  'seealso': [
    'mean',
    'median',
    'min',
    'max',
    'prod',
    'std',
    'sum',
    'var'
  ]
};
},{}],187:[function(require,module,exports){
module.exports = {
  'name': 'std',
  'category': 'Statistics',
  'syntax': [
    'std(a, b, c, ...)',
    'std(A)',
    'std(A, normalization)'
  ],
  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  'examples': [
    'std(2, 4, 6)',
    'std([2, 4, 6, 8])',
    'std([2, 4, 6, 8], "uncorrected")',
    'std([2, 4, 6, 8], "biased")',
    'std([1, 2, 3; 4, 5, 6])'
  ],
  'seealso': [
    'max',
    'mean',
    'min',
    'median',
    'min',
    'prod',
    'sum',
    'var'
  ]
};

},{}],188:[function(require,module,exports){
module.exports = {
  'name': 'sum',
  'category': 'Statistics',
  'syntax': [
    'sum(a, b, c, ...)',
    'sum(A)'
  ],
  'description': 'Compute the sum of all values.',
  'examples': [
    'sum(2, 3, 4, 1)',
    'sum([2, 3, 4, 1])',
    'sum([2, 5; 4, 3])'
  ],
  'seealso': [
    'max',
    'mean',
    'median',
    'min',
    'prod',
    'std',
    'sum',
    'var'
  ]
};

},{}],189:[function(require,module,exports){
module.exports = {
  'name': 'var',
  'category': 'Statistics',
  'syntax': [
    'var(a, b, c, ...)',
    'var(A)',
    'var(A, normalization)'
  ],
  'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  'examples': [
    'var(2, 4, 6)',
    'var([2, 4, 6, 8])',
    'var([2, 4, 6, 8], "uncorrected")',
    'var([2, 4, 6, 8], "biased")',
    'var([1, 2, 3; 4, 5, 6])'
  ],
  'seealso': [
    'max',
    'mean',
    'min',
    'median',
    'min',
    'prod',
    'std',
    'sum'
  ]
};

},{}],190:[function(require,module,exports){
module.exports = {
  'name': 'acos',
  'category': 'Trigonometry',
  'syntax': [
    'acos(x)'
  ],
  'description': 'Compute the inverse cosine of a value in radians.',
  'examples': [
    'acos(0.5)',
    'acos(cos(2.3))'
  ],
  'seealso': [
    'cos',
    'atan',
    'asin'
  ]
};

},{}],191:[function(require,module,exports){
module.exports = {
  'name': 'acosh',
  'category': 'Trigonometry',
  'syntax': [
    'acosh(x)'
  ],
  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
  'examples': [
    'acosh(1.5)'
  ],
  'seealso': [
    'cosh',
    'asinh',
    'atanh'
  ]
};
},{}],192:[function(require,module,exports){
module.exports = {
  'name': 'acot',
  'category': 'Trigonometry',
  'syntax': [
    'acot(x)'
  ],
  'description': 'Calculate the inverse cotangent of a value.',
  'examples': [
    'acot(0.5)',
    'acot(cot(0.5))',
    'acot(2)'
  ],
  'seealso': [
    'cot',
    'atan'
  ]
};

},{}],193:[function(require,module,exports){
module.exports = {
  'name': 'acoth',
  'category': 'Trigonometry',
  'syntax': [
    'acoth(x)'
  ],
  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
  'examples': [
    'acoth(2)',
    'acoth(0.5)'
  ],
  'seealso': [
    'acsch',
    'asech'
  ]
};
},{}],194:[function(require,module,exports){
module.exports = {
  'name': 'acsc',
  'category': 'Trigonometry',
  'syntax': [
    'acsc(x)'
  ],
  'description': 'Calculate the inverse cotangent of a value.',
  'examples': [
    'acsc(2)',
    'acsc(csc(0.5))',
    'acsc(0.5)'
  ],
  'seealso': [
    'csc',
    'asin',
    'asec'
  ]
};

},{}],195:[function(require,module,exports){
module.exports = {
  'name': 'acsch',
  'category': 'Trigonometry',
  'syntax': [
    'acsch(x)'
  ],
  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
  'examples': [
    'acsch(0.5)'
  ],
  'seealso': [
    'asech',
    'acoth'
  ]
};

},{}],196:[function(require,module,exports){
module.exports = {
  'name': 'asec',
  'category': 'Trigonometry',
  'syntax': [
    'asec(x)'
  ],
  'description': 'Calculate the inverse secant of a value.',
  'examples': [
    'asec(0.5)',
    'asec(sec(0.5))',
    'asec(2)'
  ],
  'seealso': [
    'acos',
    'acot',
    'acsc'
  ]
};

},{}],197:[function(require,module,exports){
module.exports = {
  'name': 'asech',
  'category': 'Trigonometry',
  'syntax': [
    'asech(x)'
  ],
  'description': 'Calculate the inverse secant of a value.',
  'examples': [
    'asech(0.5)'
  ],
  'seealso': [
    'acsch',
    'acoth'
  ]
};

},{}],198:[function(require,module,exports){
module.exports = {
  'name': 'asin',
  'category': 'Trigonometry',
  'syntax': [
    'asin(x)'
  ],
  'description': 'Compute the inverse sine of a value in radians.',
  'examples': [
    'asin(0.5)',
    'asin(sin(0.5))'
  ],
  'seealso': [
    'sin',
    'acos',
    'atan'
  ]
};

},{}],199:[function(require,module,exports){
module.exports = {
  'name': 'asinh',
  'category': 'Trigonometry',
  'syntax': [
    'asinh(x)'
  ],
  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
  'examples': [
    'asinh(0.5)'
  ],
  'seealso': [
    'acosh',
    'atanh'
  ]
};

},{}],200:[function(require,module,exports){
module.exports = {
  'name': 'atan',
  'category': 'Trigonometry',
  'syntax': [
    'atan(x)'
  ],
  'description': 'Compute the inverse tangent of a value in radians.',
  'examples': [
    'atan(0.5)',
    'atan(tan(0.5))'
  ],
  'seealso': [
    'tan',
    'acos',
    'asin'
  ]
};

},{}],201:[function(require,module,exports){
module.exports = {
  'name': 'atan2',
  'category': 'Trigonometry',
  'syntax': [
    'atan2(y, x)'
  ],
  'description':
      'Computes the principal value of the arc tangent of y/x in radians.',
  'examples': [
    'atan2(2, 2) / pi',
    'angle = 60 deg in rad',
    'x = cos(angle)',
    'y = sin(angle)',
    'atan2(y, x)'
  ],
  'seealso': [
    'sin',
    'cos',
    'tan'
  ]
};

},{}],202:[function(require,module,exports){
module.exports = {
  'name': 'atanh',
  'category': 'Trigonometry',
  'syntax': [
    'atanh(x)'
  ],
  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
  'examples': [
    'atanh(0.5)'
  ],
  'seealso': [
    'acosh',
    'asinh'
  ]
};

},{}],203:[function(require,module,exports){
module.exports = {
  'name': 'cos',
  'category': 'Trigonometry',
  'syntax': [
    'cos(x)'
  ],
  'description': 'Compute the cosine of x in radians.',
  'examples': [
    'cos(2)',
    'cos(pi / 4) ^ 2',
    'cos(180 deg)',
    'cos(60 deg)',
    'sin(0.2)^2 + cos(0.2)^2'
  ],
  'seealso': [
    'acos',
    'sin',
    'tan'
  ]
};

},{}],204:[function(require,module,exports){
module.exports = {
  'name': 'cosh',
  'category': 'Trigonometry',
  'syntax': [
    'cosh(x)'
  ],
  'description': 'Compute the hyperbolic cosine of x in radians.',
  'examples': [
    'cosh(0.5)'
  ],
  'seealso': [
    'sinh',
    'tanh',
    'coth'
  ]
};

},{}],205:[function(require,module,exports){
module.exports = {
  'name': 'cot',
  'category': 'Trigonometry',
  'syntax': [
    'cot(x)'
  ],
  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
  'examples': [
    'cot(2)',
    '1 / tan(2)'
  ],
  'seealso': [
    'sec',
    'csc',
    'tan'
  ]
};

},{}],206:[function(require,module,exports){
module.exports = {
  'name': 'coth',
  'category': 'Trigonometry',
  'syntax': [
    'coth(x)'
  ],
  'description': 'Compute the hyperbolic cotangent of x in radians.',
  'examples': [
    'coth(2)',
    '1 / tanh(2)'
  ],
  'seealso': [
    'sech',
    'csch',
    'tanh'
  ]
};

},{}],207:[function(require,module,exports){
module.exports = {
  'name': 'csc',
  'category': 'Trigonometry',
  'syntax': [
    'csc(x)'
  ],
  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
  'examples': [
    'csc(2)',
    '1 / sin(2)'
  ],
  'seealso': [
    'sec',
    'cot',
    'sin'
  ]
};

},{}],208:[function(require,module,exports){
module.exports = {
  'name': 'csch',
  'category': 'Trigonometry',
  'syntax': [
    'csch(x)'
  ],
  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
  'examples': [
    'csch(2)',
    '1 / sinh(2)'
  ],
  'seealso': [
    'sech',
    'coth',
    'sinh'
  ]
};

},{}],209:[function(require,module,exports){
module.exports = {
  'name': 'sec',
  'category': 'Trigonometry',
  'syntax': [
    'sec(x)'
  ],
  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
  'examples': [
    'sec(2)',
    '1 / cos(2)'
  ],
  'seealso': [
    'cot',
    'csc',
    'cos'
  ]
};

},{}],210:[function(require,module,exports){
module.exports = {
  'name': 'sech',
  'category': 'Trigonometry',
  'syntax': [
    'sech(x)'
  ],
  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
  'examples': [
    'sech(2)',
    '1 / cosh(2)'
  ],
  'seealso': [
    'coth',
    'csch',
    'cosh'
  ]
};

},{}],211:[function(require,module,exports){
module.exports = {
  'name': 'sin',
  'category': 'Trigonometry',
  'syntax': [
    'sin(x)'
  ],
  'description': 'Compute the sine of x in radians.',
  'examples': [
    'sin(2)',
    'sin(pi / 4) ^ 2',
    'sin(90 deg)',
    'sin(30 deg)',
    'sin(0.2)^2 + cos(0.2)^2'
  ],
  'seealso': [
    'asin',
    'cos',
    'tan'
  ]
};

},{}],212:[function(require,module,exports){
module.exports = {
  'name': 'sinh',
  'category': 'Trigonometry',
  'syntax': [
    'sinh(x)'
  ],
  'description': 'Compute the hyperbolic sine of x in radians.',
  'examples': [
    'sinh(0.5)'
  ],
  'seealso': [
    'cosh',
    'tanh'
  ]
};

},{}],213:[function(require,module,exports){
module.exports = {
  'name': 'tan',
  'category': 'Trigonometry',
  'syntax': [
    'tan(x)'
  ],
  'description': 'Compute the tangent of x in radians.',
  'examples': [
    'tan(0.5)',
    'sin(0.5) / cos(0.5)',
    'tan(pi / 4)',
    'tan(45 deg)'
  ],
  'seealso': [
    'atan',
    'sin',
    'cos'
  ]
};

},{}],214:[function(require,module,exports){
module.exports = {
  'name': 'tanh',
  'category': 'Trigonometry',
  'syntax': [
    'tanh(x)'
  ],
  'description': 'Compute the hyperbolic tangent of x in radians.',
  'examples': [
    'tanh(0.5)',
    'sinh(0.5) / cosh(0.5)'
  ],
  'seealso': [
    'sinh',
    'cosh'
  ]
};

},{}],215:[function(require,module,exports){
module.exports = {
  'name': 'to',
  'category': 'Units',
  'syntax': [
    'x to unit',
    'to(x, unit)'
  ],
  'description': 'Change the unit of a value.',
  'examples': [
    '5 inch to cm',
    '3.2kg to g',
    '16 bytes in bits'
  ],
  'seealso': []
};

},{}],216:[function(require,module,exports){
module.exports = {
  'name': 'clone',
  'category': 'Utils',
  'syntax': [
    'clone(x)'
  ],
  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
  'examples': [
    'clone(3.5)',
    'clone(2 - 4i)',
    'clone(45 deg)',
    'clone([1, 2; 3, 4])',
    'clone("hello world")'
  ],
  'seealso': []
};

},{}],217:[function(require,module,exports){
module.exports = {
  'name': 'format',
  'category': 'Utils',
  'syntax': [
    'format(value)',
    'format(value, precision)'
  ],
  'description': 'Format a value of any type as string.',
  'examples': [
    'format(2.3)',
    'format(3 - 4i)',
    'format([])',
    'format(pi, 3)'
  ],
  'seealso': ['print']
};

},{}],218:[function(require,module,exports){
module.exports = {
  'name': 'isInteger',
  'category': 'Utils',
  'syntax': [
    'isInteger(x)'
  ],
  'description': 'Test whether a value is an integer number.',
  'examples': [
    'isInteger(2)',
    'isInteger(3.5)',
    'isInteger([3, 0.5, -2])'
  ],
  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};

},{}],219:[function(require,module,exports){
module.exports = {
  'name': 'isNaN',
  'category': 'Utils',
  'syntax': [
    'isNaN(x)'
  ],
  'description': 'Test whether a value is NaN (not a number)',
  'examples': [
    'isNaN(2)',
    'isNaN(0 / 0)',
    'isNaN(NaN)',
    'isNaN(Infinity)'
  ],
  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};

},{}],220:[function(require,module,exports){
module.exports = {
  'name': 'isNegative',
  'category': 'Utils',
  'syntax': [
    'isNegative(x)'
  ],
  'description': 'Test whether a value is negative: smaller than zero.',
  'examples': [
    'isNegative(2)',
    'isNegative(0)',
    'isNegative(-4)',
    'isNegative([3, 0.5, -2])'
  ],
  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
};

},{}],221:[function(require,module,exports){
module.exports = {
  'name': 'isNumeric',
  'category': 'Utils',
  'syntax': [
    'isNumeric(x)'
  ],
  'description': 'Test whether a value is a numeric value. ' +
    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
  'examples': [
    'isNumeric(2)',
    'isNumeric(0)',
    'isNumeric(bignumber(500))',
    'isNumeric(fraction(0.125))',
    'isNumeric("3")',
    'isNumeric(2 + 3i)',
    'isNumeric([2.3, "foo", false])'
  ],
  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']
};

},{}],222:[function(require,module,exports){
module.exports = {
  'name': 'isPositive',
  'category': 'Utils',
  'syntax': [
    'isPositive(x)'
  ],
  'description': 'Test whether a value is positive: larger than zero.',
  'examples': [
    'isPositive(2)',
    'isPositive(0)',
    'isPositive(-4)',
    'isPositive([3, 0.5, -2])'
  ],
  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};

},{}],223:[function(require,module,exports){
module.exports = {
  'name': 'isPrime',
  'category': 'Utils',
  'syntax': [
    'isPrime(x)'
  ],
  'description': 'Test whether a value is prime: has no divisors other than itself and one.',
  'examples': [
    'isPrime(3)',
    'isPrime(-2)',
    'isPrime([2, 17, 100])'
  ],
  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};
},{}],224:[function(require,module,exports){
module.exports = {
  'name': 'isZero',
  'category': 'Utils',
  'syntax': [
    'isZero(x)'
  ],
  'description': 'Test whether a value is zero.',
  'examples': [
    'isZero(2)',
    'isZero(0)',
    'isZero(-4)',
    'isZero([3, 0, -2, 0])'
  ],
  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
};

},{}],225:[function(require,module,exports){
module.exports = {
  'name': 'typeof',
  'category': 'Utils',
  'syntax': [
    'typeof(x)'
  ],
  'description': 'Get the type of a variable.',
  'examples': [
    'typeof(3.5)',
    'typeof(2 - 4i)',
    'typeof(45 deg)',
    'typeof("hello world")'
  ],
  'seealso': []
};

},{}],226:[function(require,module,exports){
function factory (construction, config, load, typed) {
  var docs = {};


  // construction functions
  docs.bignumber = require('./construction/bignumber');
  docs['boolean'] = require('./construction/boolean');
  docs.complex = require('./construction/complex');
  docs.createUnit = require('./construction/createUnit');
  docs.fraction = require('./construction/fraction');
  docs.index = require('./construction/index');
  docs.matrix = require('./construction/matrix');
  docs.number = require('./construction/number');
  docs.sparse = require('./construction/sparse');
  docs.splitUnit = require('./construction/splitUnit');
  docs.string = require('./construction/string');
  docs.unit = require('./construction/unit');

  // constants
  docs.e = require('./constants/e');
  docs.E = require('./constants/e');
  docs['false'] = require('./constants/false');
  docs.i = require('./constants/i');
  docs['Infinity'] = require('./constants/Infinity');
  docs.LN2 = require('./constants/LN2');
  docs.LN10 = require('./constants/LN10');
  docs.LOG2E = require('./constants/LOG2E');
  docs.LOG10E = require('./constants/LOG10E');
  docs.NaN = require('./constants/NaN');
  docs['null'] = require('./constants/null');
  docs.pi = require('./constants/pi');
  docs.PI = require('./constants/pi');
  docs.phi = require('./constants/phi');
  docs.SQRT1_2 = require('./constants/SQRT1_2');
  docs.SQRT2 = require('./constants/SQRT2');
  docs.tau = require('./constants/tau');
  docs['true'] = require('./constants/true');
  docs.version = require('./constants/version');

  // physical constants
  // TODO: more detailed docs for physical constants
  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};
  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};
  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};
  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};

  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};
  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};
  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};
  docs.coulomb = {description: 'Coulomb\'s constant', examples: ['coulomb']};
  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};
  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};
  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};
  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};
  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};
  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};
  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};
  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};

  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};
  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};
  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};
  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};
  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};
  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};
  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};
  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};
  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};
  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};
  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};
  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};
  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};
  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};

  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};
  docs.avogadro = {description: 'Avogadro\'s number', examples: ['avogadro']};
  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};
  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};
  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};
  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};
  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};
  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};
  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};
  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};
  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};
  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};
  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};
  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};

  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};
  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};
  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};

  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};
  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};
  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};
  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};
  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};

  // functions - algebra
  docs.derivative = require('./function/algebra/derivative');
  docs.lsolve = require('./function/algebra/lsolve');
  docs.lup = require('./function/algebra/lup');
  docs.lusolve = require('./function/algebra/lusolve');
  docs.simplify = require('./function/algebra/simplify');
  docs.rationalize = require('./function/algebra/rationalize');
  docs.slu = require('./function/algebra/slu');
  docs.usolve = require('./function/algebra/usolve');
  docs.qr = require('./function/algebra/qr');

  // functions - arithmetic
  docs.abs = require('./function/arithmetic/abs');
  docs.add = require('./function/arithmetic/add');
  docs.cbrt = require('./function/arithmetic/cbrt');
  docs.ceil = require('./function/arithmetic/ceil');
  docs.cube = require('./function/arithmetic/cube');
  docs.divide = require('./function/arithmetic/divide');
  docs.dotDivide = require('./function/arithmetic/dotDivide');
  docs.dotMultiply = require('./function/arithmetic/dotMultiply');
  docs.dotPow = require('./function/arithmetic/dotPow');
  docs.exp = require('./function/arithmetic/exp');
  docs.fix = require('./function/arithmetic/fix');
  docs.floor = require('./function/arithmetic/floor');
  docs.gcd = require('./function/arithmetic/gcd');
  docs.hypot = require('./function/arithmetic/hypot');
  docs.lcm = require('./function/arithmetic/lcm');
  docs.log = require('./function/arithmetic/log');
  docs.log10 = require('./function/arithmetic/log10');
  docs.mod = require('./function/arithmetic/mod');
  docs.multiply = require('./function/arithmetic/multiply');
  docs.norm = require('./function/arithmetic/norm');
  docs.nthRoot = require('./function/arithmetic/nthRoot');
  docs.pow = require('./function/arithmetic/pow');
  docs.round = require('./function/arithmetic/round');
  docs.sign = require('./function/arithmetic/sign');
  docs.sqrt = require('./function/arithmetic/sqrt');
  docs.square = require('./function/arithmetic/square');
  docs.subtract = require('./function/arithmetic/subtract');
  docs.unaryMinus = require('./function/arithmetic/unaryMinus');
  docs.unaryPlus = require('./function/arithmetic/unaryPlus');
  docs.xgcd = require('./function/arithmetic/xgcd');

  // functions - bitwise
  docs.bitAnd = require('./function/bitwise/bitAnd');
  docs.bitNot = require('./function/bitwise/bitNot');
  docs.bitOr = require('./function/bitwise/bitOr');
  docs.bitXor = require('./function/bitwise/bitXor');
  docs.leftShift = require('./function/bitwise/leftShift');
  docs.rightArithShift = require('./function/bitwise/rightArithShift');
  docs.rightLogShift = require('./function/bitwise/rightLogShift');

  // functions - combinatorics
  docs.bellNumbers = require('./function/combinatorics/bellNumbers');
  docs.catalan = require('./function/combinatorics/catalan');
  docs.composition = require('./function/combinatorics/composition');
  docs.stirlingS2 = require('./function/combinatorics/stirlingS2');

  // functions - core
  docs['config'] =  require('./core/config');
  docs['import'] =  require('./core/import');
  docs['typed'] =  require('./core/typed');

  // functions - complex
  docs.arg = require('./function/complex/arg');
  docs.conj = require('./function/complex/conj');
  docs.re = require('./function/complex/re');
  docs.im = require('./function/complex/im');

  // functions - expression
  docs['eval'] =  require('./function/expression/eval');
  docs.help =  require('./function/expression/help');

  // functions - geometry
  docs.distance = require('./function/geometry/distance');
  docs.intersect = require('./function/geometry/intersect');

  // functions - logical
  docs['and'] = require('./function/logical/and');
  docs['not'] = require('./function/logical/not');
  docs['or'] = require('./function/logical/or');
  docs['xor'] = require('./function/logical/xor');

  // functions - matrix
  docs['concat'] = require('./function/matrix/concat');
  docs.cross = require('./function/matrix/cross');
  docs.det = require('./function/matrix/det');
  docs.diag = require('./function/matrix/diag');
  docs.dot = require('./function/matrix/dot');
  docs.eye = require('./function/matrix/eye');
  docs.filter =  require('./function/matrix/filter');
  docs.flatten = require('./function/matrix/flatten');
  docs.forEach =  require('./function/matrix/forEach');
  docs.inv = require('./function/matrix/inv');
  docs.kron = require('./function/matrix/kron');
  docs.map =  require('./function/matrix/map');
  docs.ones = require('./function/matrix/ones');
  docs.partitionSelect =  require('./function/matrix/partitionSelect');
  docs.range = require('./function/matrix/range');
  docs.resize = require('./function/matrix/resize');
  docs.reshape = require('./function/matrix/reshape');
  docs.size = require('./function/matrix/size');
  docs.sort =  require('./function/matrix/sort');
  docs.squeeze = require('./function/matrix/squeeze');
  docs.subset = require('./function/matrix/subset');
  docs.trace = require('./function/matrix/trace');
  docs.transpose = require('./function/matrix/transpose');
  docs.zeros = require('./function/matrix/zeros');

  // functions - probability
  docs.combinations = require('./function/probability/combinations');
  //docs.distribution = require('./function/probability/distribution');
  docs.factorial = require('./function/probability/factorial');
  docs.gamma = require('./function/probability/gamma');
  docs.kldivergence = require('./function/probability/kldivergence');
  docs.multinomial = require('./function/probability/multinomial');
  docs.permutations = require('./function/probability/permutations');
  docs.pickRandom = require('./function/probability/pickRandom');
  docs.random = require('./function/probability/random');
  docs.randomInt = require('./function/probability/randomInt');

  // functions - relational
  docs.compare = require('./function/relational/compare');
  docs.compareNatural = require('./function/relational/compareNatural');
  docs.deepEqual = require('./function/relational/deepEqual');
  docs['equal'] = require('./function/relational/equal');
  docs.larger = require('./function/relational/larger');
  docs.largerEq = require('./function/relational/largerEq');
  docs.smaller = require('./function/relational/smaller');
  docs.smallerEq = require('./function/relational/smallerEq');
  docs.unequal = require('./function/relational/unequal');

  // functions - set
  docs.setCartesian = require('./function/set/setCartesian');
  docs.setDifference = require('./function/set/setDifference');
  docs.setDistinct = require('./function/set/setDistinct');
  docs.setIntersect = require('./function/set/setIntersect');
  docs.setIsSubset = require('./function/set/setIsSubset');
  docs.setMultiplicity = require('./function/set/setMultiplicity');
  docs.setPowerset = require('./function/set/setPowerset');
  docs.setSize = require('./function/set/setSize');
  docs.setSymDifference = require('./function/set/setSymDifference');
  docs.setUnion = require('./function/set/setUnion');

  // functions - special
  docs.erf = require('./function/special/erf');

  // functions - statistics
  docs.mad = require('./function/statistics/mad');
  docs.max = require('./function/statistics/max');
  docs.mean = require('./function/statistics/mean');
  docs.median = require('./function/statistics/median');
  docs.min = require('./function/statistics/min');
  docs.mode = require('./function/statistics/mode');
  docs.prod = require('./function/statistics/prod');
  docs.quantileSeq = require('./function/statistics/quantileSeq');
  docs.std = require('./function/statistics/std');
  docs.sum = require('./function/statistics/sum');
  docs['var'] = require('./function/statistics/var');

  // functions - trigonometry
  docs.acos = require('./function/trigonometry/acos');
  docs.acosh = require('./function/trigonometry/acosh');
  docs.acot = require('./function/trigonometry/acot');
  docs.acoth = require('./function/trigonometry/acoth');
  docs.acsc = require('./function/trigonometry/acsc');
  docs.acsch = require('./function/trigonometry/acsch');
  docs.asec = require('./function/trigonometry/asec');
  docs.asech = require('./function/trigonometry/asech');
  docs.asin = require('./function/trigonometry/asin');
  docs.asinh = require('./function/trigonometry/asinh');
  docs.atan = require('./function/trigonometry/atan');
  docs.atanh = require('./function/trigonometry/atanh');
  docs.atan2 = require('./function/trigonometry/atan2');
  docs.cos = require('./function/trigonometry/cos');
  docs.cosh = require('./function/trigonometry/cosh');
  docs.cot = require('./function/trigonometry/cot');
  docs.coth = require('./function/trigonometry/coth');
  docs.csc = require('./function/trigonometry/csc');
  docs.csch = require('./function/trigonometry/csch');
  docs.sec = require('./function/trigonometry/sec');
  docs.sech = require('./function/trigonometry/sech');
  docs.sin = require('./function/trigonometry/sin');
  docs.sinh = require('./function/trigonometry/sinh');
  docs.tan = require('./function/trigonometry/tan');
  docs.tanh = require('./function/trigonometry/tanh');

  // functions - units
  docs.to = require('./function/units/to');

  // functions - utils
  docs.clone = require('./function/utils/clone');
  docs.format = require('./function/utils/format');
  docs.isNaN = require('./function/utils/isNaN');
  docs.isInteger = require('./function/utils/isInteger');
  docs.isNegative = require('./function/utils/isNegative');
  docs.isNumeric = require('./function/utils/isNumeric');
  docs.isPositive = require('./function/utils/isPositive');
  docs.isPrime = require('./function/utils/isPrime');
  docs.isZero = require('./function/utils/isZero');
  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.
  docs['typeof'] =  require('./function/utils/typeof');

  return docs;
}

exports.name = 'docs';
exports.path = 'expression';
exports.factory = factory;

},{"./constants/Infinity":32,"./constants/LN10":33,"./constants/LN2":34,"./constants/LOG10E":35,"./constants/LOG2E":36,"./constants/NaN":37,"./constants/SQRT1_2":38,"./constants/SQRT2":39,"./constants/e":40,"./constants/false":41,"./constants/i":42,"./constants/null":43,"./constants/phi":44,"./constants/pi":45,"./constants/tau":46,"./constants/true":47,"./constants/version":48,"./construction/bignumber":49,"./construction/boolean":50,"./construction/complex":51,"./construction/createUnit":52,"./construction/fraction":53,"./construction/index":54,"./construction/matrix":55,"./construction/number":56,"./construction/sparse":57,"./construction/splitUnit":58,"./construction/string":59,"./construction/unit":60,"./core/config":61,"./core/import":62,"./core/typed":63,"./function/algebra/derivative":64,"./function/algebra/lsolve":65,"./function/algebra/lup":66,"./function/algebra/lusolve":67,"./function/algebra/qr":68,"./function/algebra/rationalize":69,"./function/algebra/simplify":70,"./function/algebra/slu":71,"./function/algebra/usolve":72,"./function/arithmetic/abs":73,"./function/arithmetic/add":74,"./function/arithmetic/cbrt":75,"./function/arithmetic/ceil":76,"./function/arithmetic/cube":77,"./function/arithmetic/divide":78,"./function/arithmetic/dotDivide":79,"./function/arithmetic/dotMultiply":80,"./function/arithmetic/dotPow":81,"./function/arithmetic/exp":82,"./function/arithmetic/fix":83,"./function/arithmetic/floor":84,"./function/arithmetic/gcd":85,"./function/arithmetic/hypot":86,"./function/arithmetic/lcm":87,"./function/arithmetic/log":88,"./function/arithmetic/log10":89,"./function/arithmetic/mod":90,"./function/arithmetic/multiply":91,"./function/arithmetic/norm":92,"./function/arithmetic/nthRoot":93,"./function/arithmetic/pow":94,"./function/arithmetic/round":95,"./function/arithmetic/sign":96,"./function/arithmetic/sqrt":97,"./function/arithmetic/square":98,"./function/arithmetic/subtract":99,"./function/arithmetic/unaryMinus":100,"./function/arithmetic/unaryPlus":101,"./function/arithmetic/xgcd":102,"./function/bitwise/bitAnd":103,"./function/bitwise/bitNot":104,"./function/bitwise/bitOr":105,"./function/bitwise/bitXor":106,"./function/bitwise/leftShift":107,"./function/bitwise/rightArithShift":108,"./function/bitwise/rightLogShift":109,"./function/combinatorics/bellNumbers":110,"./function/combinatorics/catalan":111,"./function/combinatorics/composition":112,"./function/combinatorics/stirlingS2":113,"./function/complex/arg":114,"./function/complex/conj":115,"./function/complex/im":116,"./function/complex/re":117,"./function/expression/eval":118,"./function/expression/help":119,"./function/geometry/distance":120,"./function/geometry/intersect":121,"./function/logical/and":122,"./function/logical/not":123,"./function/logical/or":124,"./function/logical/xor":125,"./function/matrix/concat":126,"./function/matrix/cross":127,"./function/matrix/det":128,"./function/matrix/diag":129,"./function/matrix/dot":130,"./function/matrix/eye":131,"./function/matrix/filter":132,"./function/matrix/flatten":133,"./function/matrix/forEach":134,"./function/matrix/inv":135,"./function/matrix/kron":136,"./function/matrix/map":137,"./function/matrix/ones":138,"./function/matrix/partitionSelect":139,"./function/matrix/range":140,"./function/matrix/reshape":141,"./function/matrix/resize":142,"./function/matrix/size":143,"./function/matrix/sort":144,"./function/matrix/squeeze":145,"./function/matrix/subset":146,"./function/matrix/trace":147,"./function/matrix/transpose":148,"./function/matrix/zeros":149,"./function/probability/combinations":150,"./function/probability/factorial":151,"./function/probability/gamma":152,"./function/probability/kldivergence":153,"./function/probability/multinomial":154,"./function/probability/permutations":155,"./function/probability/pickRandom":156,"./function/probability/random":157,"./function/probability/randomInt":158,"./function/relational/compare":159,"./function/relational/compareNatural":160,"./function/relational/deepEqual":161,"./function/relational/equal":162,"./function/relational/larger":163,"./function/relational/largerEq":164,"./function/relational/smaller":165,"./function/relational/smallerEq":166,"./function/relational/unequal":167,"./function/set/setCartesian":168,"./function/set/setDifference":169,"./function/set/setDistinct":170,"./function/set/setIntersect":171,"./function/set/setIsSubset":172,"./function/set/setMultiplicity":173,"./function/set/setPowerset":174,"./function/set/setSize":175,"./function/set/setSymDifference":176,"./function/set/setUnion":177,"./function/special/erf":178,"./function/statistics/mad":179,"./function/statistics/max":180,"./function/statistics/mean":181,"./function/statistics/median":182,"./function/statistics/min":183,"./function/statistics/mode":184,"./function/statistics/prod":185,"./function/statistics/quantileSeq":186,"./function/statistics/std":187,"./function/statistics/sum":188,"./function/statistics/var":189,"./function/trigonometry/acos":190,"./function/trigonometry/acosh":191,"./function/trigonometry/acot":192,"./function/trigonometry/acoth":193,"./function/trigonometry/acsc":194,"./function/trigonometry/acsch":195,"./function/trigonometry/asec":196,"./function/trigonometry/asech":197,"./function/trigonometry/asin":198,"./function/trigonometry/asinh":199,"./function/trigonometry/atan":200,"./function/trigonometry/atan2":201,"./function/trigonometry/atanh":202,"./function/trigonometry/cos":203,"./function/trigonometry/cosh":204,"./function/trigonometry/cot":205,"./function/trigonometry/coth":206,"./function/trigonometry/csc":207,"./function/trigonometry/csch":208,"./function/trigonometry/sec":209,"./function/trigonometry/sech":210,"./function/trigonometry/sin":211,"./function/trigonometry/sinh":212,"./function/trigonometry/tan":213,"./function/trigonometry/tanh":214,"./function/units/to":215,"./function/utils/clone":216,"./function/utils/format":217,"./function/utils/isInteger":218,"./function/utils/isNaN":219,"./function/utils/isNegative":220,"./function/utils/isNumeric":221,"./function/utils/isPositive":222,"./function/utils/isPrime":223,"./function/utils/isZero":224,"./function/utils/typeof":225}],227:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var parse = load(require('../parse'));

  /**
   * Parse and compile an expression.
   * Returns a an object with a function `eval([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     var code = math.compile('sqrt(3^2 + 4^2)');
   *     code.eval(); // 5
   *
   *     var scope = {a: 3, b: 4}
   *     var code = math.compile('a * b'); // 12
   *     code.eval(scope); // 12
   *     scope.a = 5;
   *     code.eval(scope); // 20
   *
   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);
   *     nodes[2].eval(); // 12
   *
   * See also:
   *
   *    parse, eval
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{eval: Function} | Array.<{eval: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */
  return typed('compile', {
    'string': function (expr) {
      return parse(expr).compile();
    },

    'Array | Matrix': function (expr) {
      return deepMap(expr, function (entry) {
        return parse(entry).compile();
      });
    }
  });
}

exports.name = 'compile';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../parse":257}],228:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var parse = load(require('../parse'));

  /**
   * Evaluate an expression.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.eval(expr)
   *     math.eval(expr, scope)
   *     math.eval([expr1, expr2, expr3, ...])
   *     math.eval([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.eval('(2+3)/4');                // 1.25
   *     math.eval('sqrt(3^2 + 4^2)');        // 5
   *     math.eval('sqrt(-4)');               // 2i
   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]
   *
   *     var scope = {a:3, b:4};
   *     math.eval('a * b', scope);           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */
  return typed('compile', {
    'string': function (expr) {
      var scope = {};
      return parse(expr).compile().eval(scope);
    },

    'string, Object': function (expr, scope) {
      return parse(expr).compile().eval(scope);
    },

    'Array | Matrix': function (expr) {
      var scope = {};
      return deepMap(expr, function (entry) {
        return parse(entry).compile().eval(scope);
      });
    },

    'Array | Matrix, Object': function (expr, scope) {
      return deepMap(expr, function (entry) {
        return parse(entry).compile().eval(scope);
      });
    }
  });
}

exports.name = 'eval';
exports.factory = factory;
},{"../../utils/collection/deepMap":547,"../parse":257}],229:[function(require,module,exports){
'use strict';

var getSafeProperty = require('../../utils/customs').getSafeProperty;

function factory (type, config, load, typed, math) {
  var docs = load(require('../embeddedDocs'));

  /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the documentation in math.expression.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString());
   *    console.log(math.help(math.add).toString());
   *    console.log(math.help(math.add).toJSON());
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */
  return typed('help', {
    'any': function (search) {
      var prop;
      var name = search;

      if (typeof search !== 'string') {
        for (prop in math) {
          // search in functions and constants
          if (math.hasOwnProperty(prop) && (search === math[prop])) {
            name = prop;
            break;
          }
        }

        /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (math.type.hasOwnProperty(prop)) {
         if (search === math.type[prop]) {
         text = prop;
         break;
         }
         }
         }
         }
         */
      }

      var doc = getSafeProperty(docs, name);
      if (!doc) {
        throw new Error('No documentation found on "' + name + '"');
      }
      return new type.Help(doc);
    }
  });
}

exports.math = true; // request access to the math namespace as 5th argument of the factory function
exports.name = 'help';
exports.factory = factory;

},{"../../utils/customs":552,"../embeddedDocs":226}],230:[function(require,module,exports){
module.exports = [
  require('./compile'),
  require('./eval'),
  require('./help'),
  require('./parse'),
  require('./parser')
];

},{"./compile":227,"./eval":228,"./help":229,"./parse":231,"./parser":232}],231:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var parse = load(require('../parse'));

  /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.eval();
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     var node = math.parse('sqrt(3^2 + 4^2)');
   *     node.compile().eval(); // 5
   *
   *     var scope = {a:3, b:4}
   *     var node = math.parse('a * b'); // 12
   *     var code = node.compile();
   *     code.eval(scope); // 12
   *     scope.a = 5;
   *     code.eval(scope); // 20
   *
   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
   *     nodes[2].compile().eval(); // 12
   *
   * See also:
   *
   *     eval, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
  return typed('parse', {
    'string | Array | Matrix': parse,
    'string | Array | Matrix, Object': parse
  });
}

exports.name = 'parse';
exports.factory = factory;

},{"../parse":257}],232:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed, math) {
  var Parser = load(require('../Parser'));

  /**
   * Create a parser. The function creates a new `math.expression.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     var parser = new math.parser();
   *
   *     // evaluate expressions
   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5
   *     var b = parser.eval('sqrt(-4)');        // 2i
   *     var c = parser.eval('2 inch in cm');    // 5.08 cm
   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.eval('x = 7 / 2');               // 3.5
   *     parser.eval('x + 3');                   // 6.5
   *     parser.eval('function f(x, y) = x^y');  // f(x, y)
   *     parser.eval('f(2, 3)');                 // 8
   *
   *     // get and set variables and functions
   *     var x = parser.get('x');                // 7
   *     var f = parser.get('f');                // function
   *     var g = f(3, 2);                        // 9
   *     parser.set('h', 500);
   *     var i = parser.eval('h / 2');           // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!';
   *     });
   *     parser.eval('hello("user")');           // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear();
   *
   * See also:
   *
   *    eval, compile, parse
   *
   * @return {Parser} Parser
   */
  return typed('parser', {
    '': function () {
      return new Parser(math);
    }
  });
}

exports.name = 'parser';
exports.factory = factory;
exports.math = true; // requires the math namespace as 5th argument

},{"../Parser":31}],233:[function(require,module,exports){
module.exports = [
  // Note that the docs folder is called "embeddedDocs" and not "docs" to prevent issues
  // with yarn autoclean. See https://github.com/josdejong/mathjs/issues/969
  require('./embeddedDocs'),
  require('./function'),
  require('./node'),
  require('./transform'),

  require('./Help'),
  require('./parse'),
  require('./Parser')
];

},{"./Help":30,"./Parser":31,"./embeddedDocs":226,"./function":230,"./node":252,"./parse":257,"./transform":262}],234:[function(require,module,exports){
'use strict';

// Reserved keywords not allowed to use in the parser
module.exports = {
  end: true
};

},{}],235:[function(require,module,exports){
'use strict';

var stringify = require('../../utils/string').stringify;
var getSafeProperty = require('../../utils/customs').getSafeProperty;

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));
  var IndexNode = load(require('./IndexNode'));
  var access = load(require('./utils/access'));

  /**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */
  function AccessorNode(object, index) {
    if (!(this instanceof AccessorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!type.isNode(object)) {
      throw new TypeError('Node expected for parameter "object"');
    }
    if (!type.isIndexNode(index)) {
      throw new TypeError('IndexNode expected for parameter "index"');
    }

    this.object = object || null;
    this.index = index;

    // readonly property name
    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return (this.index.isObjectProperty())
              ? this.index.getObjectProperty()
              : '';
        }
        else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function () {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AccessorNode.prototype = new Node();

  AccessorNode.prototype.type = 'AccessorNode';

  AccessorNode.prototype.isAccessorNode = true;

  /**
   * Compile the node to javascript code
   * @param {AccessorNode} node  Node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileAccessorNode(node, defs, args) {
    if (!(node instanceof AccessorNode)) {
      throw new TypeError('No valid AccessorNode')
    }

    defs.access = access;
    defs.getSafeProperty = getSafeProperty;

    var object = compile(node.object, defs, args);
    var index = compile(node.index, defs, args);

    if (node.index.isObjectProperty()) {
      var jsProp = stringify(node.index.getObjectProperty());
      return 'getSafeProperty(' + object + ', ' + jsProp + ')';
    }
    else if (node.index.needsSize()) {
      // if some parameters use the 'end' parameter, we need to calculate the size
      return '(function () {' +
          '  var object = ' + object + ';' +
          '  var size = math.size(object).valueOf();' +
          '  return access(object, ' + index + ');' +
          '})()';
    }
    else {
      return 'access(' + object + ', ' + index + ')';
    }
  }

  // register the compile function
  register(AccessorNode.prototype.type, compileAccessorNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  AccessorNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    callback(this.index, 'index', this);
  };

  /**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */
  AccessorNode.prototype.map = function (callback) {
    return new AccessorNode(
        this._ifNode(callback(this.object, 'object', this)),
        this._ifNode(callback(this.index, 'index', this))
    );
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */
  AccessorNode.prototype.clone = function () {
    return new AccessorNode(this.object, this.index);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */
  AccessorNode.prototype._toString = function (options) {
    var object = this.object.toString(options);
    if (needParenthesis(this.object)) {
      object = '(' + object + ')';
    }

    return object + this.index.toString(options);
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */
  AccessorNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);
    if (needParenthesis(this.object)) {
      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return object + this.index.toHTML(options);
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */
  AccessorNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);
    if (needParenthesis(this.object)) {
      object = '\\left(' + object + '\\right)';
    }

    return object + this.index.toTex(options);
  };

  /**
   * Are parenthesis needed?
   * @private
   */
  function needParenthesis(node) {
    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
    return !(
        type.isAccessorNode(node) ||
        type.isArrayNode(node) ||
        type.isConstantNode(node) ||
        type.isFunctionNode(node) ||
        type.isObjectNode(node) ||
        type.isParenthesisNode(node) ||
        type.isSymbolNode(node));
  }

  return AccessorNode;
}

exports.name = 'AccessorNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../utils/customs":552,"../../utils/string":559,"./IndexNode":243,"./Node":244,"./compile":251,"./utils/access":253}],236:[function(require,module,exports){
'use strict';

var map = require('../../utils/array').map;
var join = require('../../utils/array').join;

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */
  function ArrayNode(items) {
    if (!(this instanceof ArrayNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.items = items || [];

    // validate input
    if (!Array.isArray(this.items) || !this.items.every(type.isNode)) {
      throw new TypeError('Array containing Nodes expected');
    }

    // TODO: deprecated since v3, remove some day
    var deprecated = function () {
      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
    };
    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });
  }

  ArrayNode.prototype = new Node();

  ArrayNode.prototype.type = 'ArrayNode';

  ArrayNode.prototype.isArrayNode = true;

  /**
   * Compile the node to javascript code
   * @param {ArrayNode} node  Node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @private
   */
  function compileArrayNode(node, defs, args) {
    if (!(node instanceof ArrayNode)) {
      throw new TypeError('No valid ArrayNode')
    }

    var asMatrix = (defs.math.config().matrix !== 'Array');

    var items = map(node.items, function (item) {
      return compile(item, defs, args);
    });

    return (asMatrix ? 'math.matrix([' : '[') +
        join(items, ',') +
        (asMatrix ? '])' : ']');
  }

  // register the compile function
  register(ArrayNode.prototype.type, compileArrayNode);

      /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  ArrayNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.items.length; i++) {
      var node = this.items[i];
      callback(node, 'items[' + i + ']', this);
    }
  };

  /**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */
  ArrayNode.prototype.map = function (callback) {
    var items = [];
    for (var i = 0; i < this.items.length; i++) {
      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
    }
    return new ArrayNode(items);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */
  ArrayNode.prototype.clone = function() {
    return new ArrayNode(this.items.slice(0));
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  ArrayNode.prototype._toString = function(options) {
    var items = this.items.map(function (node) {
      return node.toString(options);
    });
    return '[' + items.join(', ') + ']';
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  ArrayNode.prototype.toHTML = function(options) {
    var items = this.items.map(function (node) {
      return node.toHTML(options);
    });
    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  ArrayNode.prototype._toTex = function(options) {
    var s = '\\begin{bmatrix}';

    this.items.forEach(function(node) {
      if (node.items) {
        s += node.items.map(function(childNode) {
          return childNode.toTex(options);
        }).join('&');
      }
      else {
        s += node.toTex(options);
      }

      // new line
      s += '\\\\';
    });
    s += '\\end{bmatrix}';
    return s;
  };

  return ArrayNode;
}

exports.name = 'ArrayNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../utils/array":532,"./Node":244,"./compile":251}],237:[function(require,module,exports){
'use strict';

var latex = require('../../utils/latex');
var stringify = require('../../utils/string').stringify;
var getSafeProperty = require('../../utils/customs').getSafeProperty;
var setSafeProperty = require('../../utils/customs').setSafeProperty;

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));
  var ArrayNode = load(require('./ArrayNode'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var assign = load(require('./utils/assign'));
  var access = load(require('./utils/access'));

  var keywords = require('../keywords');
  var operators = require('../operators');

  /**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */
  function AssignmentNode(object, index, value) {
    if (!(this instanceof AssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.object = object;
    this.index = value ? index : null;
    this.value = value ? value : index;

    // validate input
    if (!type.isSymbolNode(object) && !type.isAccessorNode(object)) {
      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
    }
    if (type.isSymbolNode(object) && object.name === 'end') {
      throw new Error('Cannot assign to symbol "end"');
    }
    if (this.index && !type.isIndexNode(this.index)) { // index is optional
      throw new TypeError('IndexNode expected as "index"');
    }
    if (!type.isNode(this.value)) {
      throw new TypeError('Node expected as "value"');
    }

    // readonly property name
    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return (this.index.isObjectProperty())
              ? this.index.getObjectProperty()
              : '';
        }
        else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function () {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AssignmentNode.prototype = new Node();

  AssignmentNode.prototype.type = 'AssignmentNode';

  AssignmentNode.prototype.isAssignmentNode = true;

  /**
   * Compile the node to javascript code
   * @param {AssignmentNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @private
   */
  function compileAssignmentNode (node, defs, args) {
    if (!(node instanceof AssignmentNode)) {
      throw new TypeError('No valid AssignmentNode')
    }

    defs.assign = assign;
    defs.access = access;
    defs.getSafeProperty = getSafeProperty;
    defs.setSafeProperty = setSafeProperty;

    var size;
    var object = compile(node.object, defs, args);
    var index = node.index ? compile(node.index, defs, args) : null;
    var value = compile(node.value, defs, args);
    var jsName = stringify(node.object.name);

    if (!node.index) {
      // apply a variable to the scope, for example `a=2`
      if (!type.isSymbolNode(node.object)) {
        throw new TypeError('SymbolNode expected as object');
      }

      return 'setSafeProperty(scope, ' + jsName + ', ' + value + ')';
    }
    else if (node.index.isObjectProperty()) {
      // apply an object property for example `a.b=2`
      var jsProp = stringify(node.index.getObjectProperty());
      return 'setSafeProperty(' + object + ', ' + jsProp + ', ' + value + ')';
    }
    else if (type.isSymbolNode(node.object)) {
      // update a matrix subset, for example `a[2]=3`
      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';

      // apply updated object to scope
      return '(function () {' +
          '  var object = ' + object + ';' +
          '  var value = ' + value + ';' +
          '  ' + size +
          '  setSafeProperty(scope, ' + jsName + ', assign(object, ' + index + ', value));' +
          '  return value;' +
          '})()';
    }
    else { // type.isAccessorNode(node.object) === true
      // update a matrix subset, for example `a.b[2]=3`
      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';

      // we will not use the compile function of the AccessorNode, but compile it
      // ourselves here as we need the parent object of the AccessorNode:
      // wee need to apply the updated object to parent object
      var parentObject = compile(node.object.object, defs, args);

      if (node.object.index.isObjectProperty()) {
        var jsParentProperty = stringify(node.object.index.getObjectProperty());
        return '(function () {' +
            '  var parent = ' + parentObject + ';' +
            '  var object = getSafeProperty(parent, ' + jsParentProperty + ');' + // parentIndex is a property
            '  var value = ' + value + ';' +
            size +
            '  setSafeProperty(parent, ' + jsParentProperty + ', assign(object, ' + index + ', value));' +
            '  return value;' +
            '})()';
      }
      else {
        // if some parameters use the 'end' parameter, we need to calculate the size
        var parentSize = node.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';
        var parentIndex = compile(node.object.index, defs, args);

        return '(function () {' +
            '  var parent = ' + parentObject + ';' +
            '  ' + parentSize +
            '  var parentIndex = ' + parentIndex + ';' +
            '  var object = access(parent, parentIndex);' +
            '  var value = ' + value + ';' +
            '  ' + size +
            '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +
            '  return value;' +
            '})()';
      }
    }
  }

  // register the compile function
  register(AssignmentNode.prototype.type, compileAssignmentNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  AssignmentNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    if (this.index) {
      callback(this.index, 'index', this);
    }
    callback(this.value, 'value', this);
  };

  /**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */
  AssignmentNode.prototype.map = function (callback) {
    var object = this._ifNode(callback(this.object, 'object', this));
    var index = this.index
        ? this._ifNode(callback(this.index, 'index', this))
        : null;
    var value = this._ifNode(callback(this.value, 'value', this));

    return new AssignmentNode(object, index, value);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */
  AssignmentNode.prototype.clone = function() {
    return new AssignmentNode(this.object, this.index, this.value);
  };

  /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */
  function needParenthesis(node, parenthesis) {
    if (!parenthesis) {
      parenthesis = 'keep';
    }

    var precedence = operators.getPrecedence(node, parenthesis);
    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);
    return (parenthesis === 'all')
      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
  }

  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */
  AssignmentNode.prototype._toString = function(options) {
    var object = this.object.toString(options);
    var index = this.index ? this.index.toString(options) : '';
    var value = this.value.toString(options);
    if (needParenthesis(this, options && options.parenthesis)) {
      value = '(' + value + ')';
    }

    return object + index + ' = ' + value;
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */
  AssignmentNode.prototype.toHTML = function(options) {
    var object = this.object.toHTML(options);
    var index = this.index ? this.index.toHTML(options) : '';
    var value = this.value.toHTML(options);
    if (needParenthesis(this, options && options.parenthesis)) {
      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }

    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */
  AssignmentNode.prototype._toTex = function(options) {
    var object = this.object.toTex(options);
    var index = this.index ? this.index.toTex(options) : '';
    var value = this.value.toTex(options);
    if (needParenthesis(this, options && options.parenthesis)) {
      value = '\\left(' + value + '\\right)';
    }

    return object + index + ':=' + value;
  };

  return AssignmentNode;
}

exports.name = 'AssignmentNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/customs":552,"../../utils/latex":556,"../../utils/string":559,"../keywords":234,"../operators":256,"./ArrayNode":236,"./Node":244,"./compile":251,"./utils/access":253,"./utils/assign":254}],238:[function(require,module,exports){
'use strict';

var map = require('../../utils/array').map;
var join = require('../../utils/array').join;

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));
  var ResultSet = load(require('../../type/resultset/ResultSet'));

  /**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */
  function BlockNode(blocks) {
    if (!(this instanceof BlockNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    // validate input, copy blocks
    if (!Array.isArray(blocks)) throw new Error('Array expected');
    this.blocks = blocks.map(function (block) {
      var node = block && block.node;
      var visible = block && block.visible !== undefined ? block.visible : true;

      if (!type.isNode(node)) throw new TypeError('Property "node" must be a Node');
      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');

      return {
        node: node,
        visible: visible
      }
    });
  }

  BlockNode.prototype = new Node();

  BlockNode.prototype.type = 'BlockNode';

  BlockNode.prototype.isBlockNode = true;

  /**
   * Compile the node to javascript code
   * @param {BlockNode} node  The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileBlockNode (node, defs, args) {
    if (!(node instanceof BlockNode)) {
      throw new TypeError('No valid BlockNode')
    }

    defs.ResultSet = ResultSet;
    var blocks = map(node.blocks, function (param) {
      var js = compile(param.node, defs, args);
      if (param.visible) {
        return 'results.push(' + js + ');';
      }
      else {
        return js + ';';
      }
    });

    return '(function () {' +
        'var results = [];' +
        join(blocks, '') +
        'return new ResultSet(results);' +
        '})()';
  }

  // register the compile function
  register(BlockNode.prototype.type, compileBlockNode);

  /**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  BlockNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.blocks.length; i++) {
      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
    }
  };

  /**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */
  BlockNode.prototype.map = function (callback) {
    var blocks = [];
    for (var i = 0; i < this.blocks.length; i++) {
      var block = this.blocks[i];
      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
      blocks[i] = {
        node: node,
        visible: block.visible
      };
    }
    return new BlockNode(blocks);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */
  BlockNode.prototype.clone = function () {
    var blocks = this.blocks.map(function (block) {
      return {
        node: block.node,
        visible: block.visible
      };
    });

    return new BlockNode(blocks);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  BlockNode.prototype._toString = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toString(options) + (param.visible ? '' : ';');
    }).join('\n');
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  BlockNode.prototype.toHTML = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
    }).join('<span class="math-separator"><br /></span>');
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  BlockNode.prototype._toTex = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toTex(options) + (param.visible ? '' : ';');
    }).join('\\;\\;\n');
  };

  return BlockNode;
}

exports.name = 'BlockNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../type/resultset/ResultSet":523,"../../utils/array":532,"./Node":244,"./compile":251}],239:[function(require,module,exports){
'use strict';

var latex = require('../../utils/latex');
var operators = require('../operators');

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */
  function ConditionalNode(condition, trueExpr, falseExpr) {
    if (!(this instanceof ConditionalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (!type.isNode(condition)) throw new TypeError('Parameter condition must be a Node');
    if (!type.isNode(trueExpr))  throw new TypeError('Parameter trueExpr must be a Node');
    if (!type.isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');

    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }

  ConditionalNode.prototype = new Node();

  ConditionalNode.prototype.type = 'ConditionalNode';

  ConditionalNode.prototype.isConditionalNode = true;

  /**
   * Compile the node to javascript code
   * @param {ConditionalNode} node  The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileConditionalNode(node, defs, args) {
    if (!(node instanceof ConditionalNode)) {
      throw new TypeError('No valid ConditionalNode')
    }

    /**
     * Test whether a condition is met
     * @param {*} condition
     * @returns {boolean} true if condition is true or non-zero, else false
     */
    defs.testCondition = function (condition) {
      if (typeof condition === 'number'
          || typeof condition === 'boolean'
          || typeof condition === 'string') {
        return condition ? true : false;
      }

      if (condition) {
        if (type.isBigNumber(condition)) {
          return condition.isZero() ? false : true;
        }

        if (type.isComplex(condition)) {
          return (condition.re || condition.im) ? true : false;
        }

        if (type.isUnit(condition)) {
          return condition.value ? true : false;
        }
      }

      if (condition === null || condition === undefined) {
        return false;
      }

      throw new TypeError('Unsupported type of condition "' + defs.math['typeof'](condition) + '"');
    };

    return (
      'testCondition(' + compile(node.condition, defs, args) + ') ? ' +
      '( ' + compile(node.trueExpr, defs, args) + ') : ' +
      '( ' + compile(node.falseExpr, defs, args) + ')'
    );
  }

  // register the compile function
  register(ConditionalNode.prototype.type, compileConditionalNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  ConditionalNode.prototype.forEach = function (callback) {
    callback(this.condition, 'condition', this);
    callback(this.trueExpr, 'trueExpr', this);
    callback(this.falseExpr, 'falseExpr', this);
  };

  /**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */
  ConditionalNode.prototype.map = function (callback) {
    return new ConditionalNode(
        this._ifNode(callback(this.condition, 'condition', this)),
        this._ifNode(callback(this.trueExpr, 'trueExpr', this)),
        this._ifNode(callback(this.falseExpr, 'falseExpr', this))
    );
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */
  ConditionalNode.prototype.clone = function () {
    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
  ConditionalNode.prototype._toString = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var precedence = operators.getPrecedence(this, parenthesis);

    //Enclose Arguments in parentheses if they are an OperatorNode
    //or have lower or equal precedence
    //NOTE: enclosing all OperatorNodes in parentheses is a decision
    //purely based on aesthetics and readability
    var condition = this.condition.toString(options);
    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
    if ((parenthesis === 'all')
        || (this.condition.type === 'OperatorNode')
        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
      condition = '(' + condition + ')';
    }

    var trueExpr = this.trueExpr.toString(options);
    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
    if ((parenthesis === 'all')
        || (this.trueExpr.type === 'OperatorNode')
        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
      trueExpr = '(' + trueExpr + ')';
    }

    var falseExpr = this.falseExpr.toString(options);
    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
    if ((parenthesis === 'all')
        || (this.falseExpr.type === 'OperatorNode')
        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
      falseExpr = '(' + falseExpr + ')';
    }
    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */
  ConditionalNode.prototype.toHTML = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var precedence = operators.getPrecedence(this, parenthesis);

    //Enclose Arguments in parentheses if they are an OperatorNode
    //or have lower or equal precedence
    //NOTE: enclosing all OperatorNodes in parentheses is a decision
    //purely based on aesthetics and readability
    var condition = this.condition.toHTML(options);
    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
    if ((parenthesis === 'all')
        || (this.condition.type === 'OperatorNode')
        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var trueExpr = this.trueExpr.toHTML(options);
    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
    if ((parenthesis === 'all')
        || (this.trueExpr.type === 'OperatorNode')
        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    var falseExpr = this.falseExpr.toHTML(options);
    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
    if ((parenthesis === 'all')
        || (this.falseExpr.type === 'OperatorNode')
        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  ConditionalNode.prototype._toTex = function (options) {
    return '\\begin{cases} {'
        + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;'
        + this.condition.toTex(options)
        + '}\\\\{' + this.falseExpr.toTex(options)
        + '}, &\\quad{\\text{otherwise}}\\end{cases}';
  };

  return ConditionalNode;
}

exports.name = 'ConditionalNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../utils/latex":556,"../operators":256,"./Node":244,"./compile":251}],240:[function(require,module,exports){
'use strict';

var getType = require('../../utils/types').type;
var stringify = require('../../utils/string').stringify;
var escape = require('../../utils/string').escape;

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * A ConstantNode holds a constant value like a number or string. A ConstantNode
   * stores a stringified version of the value and uses this to compile to
   * JavaScript.
   *
   * In case of a stringified number as input, this may be compiled to a BigNumber
   * when the math instance is configured for BigNumbers.
   *
   * Usage:
   *
   *     // stringified values with type
   *     new ConstantNode('2.3', 'number');
   *     new ConstantNode('true', 'boolean');
   *     new ConstantNode('hello', 'string');
   *
   *     // non-stringified values, type will be automatically detected
   *     new ConstantNode(2.3);
   *     new ConstantNode('hello');
   *
   * @param {string | number | boolean | null | undefined} value
   *                            When valueType is provided, value must contain
   *                            an uninterpreted string representing the value.
   *                            When valueType is undefined, value can be a
   *                            number, string, boolean, null, or undefined, and
   *                            the type will be determined automatically.
   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',
   *                              'boolean', 'undefined', 'null'
   * @constructor ConstantNode
   * @extends {Node}
   */
  function ConstantNode(value, valueType) {
    if (!(this instanceof ConstantNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (valueType) {
      if (typeof valueType !== 'string') {
        throw new TypeError('String expected for parameter "valueType"');
      }
      if (typeof value !== 'string') {
        throw new TypeError('String expected for parameter "value"');
      }

      this.value = value;
      this.valueType = valueType;
    }
    else {
      // stringify the value and determine the type
      this.value = value + '';
      this.valueType = getType(value);
    }

    if (!SUPPORTED_TYPES[this.valueType]) {
      throw new TypeError('Unsupported type of value "' + this.valueType + '"');
    }
  }

  var SUPPORTED_TYPES = {
    'number': true,
    'string': true,
    'boolean': true,
    'undefined': true,
    'null': true
  };

  ConstantNode.prototype = new Node();

  ConstantNode.prototype.type = 'ConstantNode';

  ConstantNode.prototype.isConstantNode = true;

  /**
   * Compile the node to javascript code
   * @param {ConstantNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileConstantNode(node, defs, args) {
    if (!(node instanceof ConstantNode)) {
      throw new TypeError('No valid ConstantNode')
    }

    switch (node.valueType) {
      case 'number':
        if (config.number === 'BigNumber') {
          return 'math.bignumber(' + stringify(node.value) + ')';
        }
        else if (config.number === 'Fraction') {
          return 'math.fraction(' + stringify(node.value) + ')';
        }
        else {
          // remove leading zeros like '003.2' which are not allowed by JavaScript
          validateNumericValue(node.value);
          return node.value.replace(/^(0*)[0-9]/, function (match, zeros) {
            return match.substring(zeros.length);
          });
        }

      case 'string':
        // Important to escape unescaped double quotes in the string
        return stringify(node.value);

      case 'boolean':
        // prevent invalid values
        return String(node.value) === 'true' ? 'true' : 'false';

      case 'undefined':
        return 'undefined';

      case 'null':
        return 'null';

      default:
        // TODO: move this error to the constructor?
        throw new TypeError('Unsupported type of constant "' + node.valueType + '"');
    }
  }

  /**
   * Test whether value is a string containing a numeric value
   * @param {String} value
   * @return {boolean} Returns true when ok
   */
  function validateNumericValue (value) {
    // The following regexp is relatively permissive
    if (typeof value !== 'string' ||
        !/^[\-+]?((\d+\.?\d*)|(\d*\.?\d+))([eE][+\-]?\d+)?$/.test(value)) {
      throw new Error('Invalid numeric value "' + value + '"');
    }
  }

  // register the compile function
  register(ConstantNode.prototype.type, compileConstantNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  ConstantNode.prototype.forEach = function (callback) {
    // nothing to do, we don't have childs
  };


  /**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */
  ConstantNode.prototype.map = function (callback) {
    return this.clone();
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */
  ConstantNode.prototype.clone = function () {
    return new ConstantNode(this.value, this.valueType);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
  ConstantNode.prototype._toString = function (options) {
    switch (this.valueType) {
      case 'string':
        return stringify(this.value);

      default:
        return this.value;
    }
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */
  ConstantNode.prototype.toHTML = function (options) {
	var value = escape(this.value);
    switch (this.valueType) {
	  case 'number':
	    return '<span class="math-number">' + value + '</span>';
      case 'string':
	    return '<span class="math-string">' + value + '</span>';
      case 'boolean':
	    return '<span class="math-boolean">' + value + '</span>';
      case 'null':
	    return '<span class="math-null-symbol">' + value + '</span>';
      case 'undefined':
	    return '<span class="math-undefined">' + value + '</span>';

      default:
        return '<span class="math-symbol">' + value + '</span>';
    }
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  ConstantNode.prototype._toTex = function (options) {
    var value = this.value,
        index;
    switch (this.valueType) {
      case 'string':
        return '\\mathtt{' + stringify(value) + '}';

      case 'number':
        index = value.toLowerCase().indexOf('e');
        if (index !== -1) {
          return value.substring(0, index) + '\\cdot10^{' +
              value.substring(index + 1) + '}';
        }
        return value;

      default:
        return value;
    }
  };

  return ConstantNode;
}

exports.name = 'ConstantNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../utils/string":559,"../../utils/types":560,"./Node":244,"./compile":251}],241:[function(require,module,exports){
'use strict';

var keywords = require('../keywords');
var stringify = require('../../utils/string').stringify;
var escape = require('../../utils/string').escape;
var map = require('../../utils/array').map;
var join = require('../../utils/array').join;
var latex = require('../../utils/latex');
var operators = require('../operators');
var setSafeProperty = require('../../utils/customs').setSafeProperty;
var getUniqueArgumentName = require('./utils/getUniqueArgumentName');

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */
  function FunctionAssignmentNode(name, params, expr) {
    if (!(this instanceof FunctionAssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    // validate input
    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    if (!Array.isArray(params))  throw new TypeError('Array containing strings or objects expected for parameter "params"');
    if (!type.isNode(expr)) throw new TypeError('Node expected for parameter "expr"');
    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');

    this.name = name;
    this.params = params.map(function (param) {
      return param && param.name || param;
    });
    this.types = params.map(function (param) {
      return param && param.type || 'any'
    });
    this.expr = expr;
  }

  FunctionAssignmentNode.prototype = new Node();

  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';

  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;

  /**
   * Compile the node to javascript code
   * @param {FunctionAssignmentNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileFunctionAssignmentNode(node, defs, args) {
    if (!(node instanceof FunctionAssignmentNode)) {
      throw new TypeError('No valid FunctionAssignmentNode')
    }

    defs.typed = typed;
    defs.setSafeProperty = setSafeProperty;

    // validate params
    // FIXME: rename parameters to safe, internal names

    // we extend the original args and add the args to the child object
    // and create a mapping from the unsafe param name to a safe, internal one
    var childArgs = Object.create(args);
    var jsParams = map(node.params, function (param) {
      childArgs[param] = getUniqueArgumentName(childArgs);
      return childArgs[param];
    });

    // compile the function expression with the child args
    var jsExpr = compile(node.expr, defs, childArgs);
    var jsName = stringify(node.name);

    return 'setSafeProperty(scope, ' + jsName + ', ' +
        '  (function () {' +
        '    var fn = typed(' + jsName + ', {' +
        '      ' + stringify(join(node.types, ',')) + ': function (' + join(jsParams, ',') + ') {' +
        '        return ' + jsExpr + '' +
        '      }' +
        '    });' +
        '    fn.syntax = ' + stringify(node.name + '(' + join(node.params, ', ') + ')') + ';' +
        '    return fn;' +
        '  })())';
  }

  // register the compile function
  register(FunctionAssignmentNode.prototype.type, compileFunctionAssignmentNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  FunctionAssignmentNode.prototype.forEach = function (callback) {
    callback(this.expr, 'expr', this);
  };

  /**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */
  FunctionAssignmentNode.prototype.map = function (callback) {
    var expr = this._ifNode(callback(this.expr, 'expr', this));

    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */
  FunctionAssignmentNode.prototype.clone = function () {
    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
  };

  /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */
  function needParenthesis(node, parenthesis) {
    var precedence = operators.getPrecedence(node, parenthesis);
    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);

    return (parenthesis === 'all')
      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
  }

  /**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */
  FunctionAssignmentNode.prototype._toString = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var expr = this.expr.toString(options);
    if (needParenthesis(this, parenthesis)) {
      expr = '(' + expr + ')';
    }
    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
  };

  /**
   * get HTML representation
   * @param {Object} options
   * @return {string} str
   */
   FunctionAssignmentNode.prototype.toHTML = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	var params = [];
	for (var i=0; i<this.params.length; i++)	{
	  params.push('<span class="math-symbol math-parameter">' + escape(this.params[i]) + '</span>');
	}
    var expr = this.expr.toHTML(options);
    if (needParenthesis(this, parenthesis)) {
      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    return '<span class="math-function">' + escape(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
  };

  /**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  FunctionAssignmentNode.prototype._toTex = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var expr = this.expr.toTex(options);
    if (needParenthesis(this, parenthesis)) {
      expr = '\\left(' + expr + '\\right)';
    }

    return '\\mathrm{' + this.name
        + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
  };

  return FunctionAssignmentNode;
}
exports.name = 'FunctionAssignmentNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../utils/array":532,"../../utils/customs":552,"../../utils/latex":556,"../../utils/string":559,"../keywords":234,"../operators":256,"./Node":244,"./compile":251,"./utils/getUniqueArgumentName":255}],242:[function(require,module,exports){
'use strict';

var latex = require('../../utils/latex');
var stringify = require('../../utils/string').stringify;
var escape = require('../../utils/string').escape;
var extend = require('../../utils/object').extend;
var hasOwnProperty = require('../../utils/object').hasOwnProperty;
var map = require('../../utils/array').map;
var join = require('../../utils/array').join;
var validateSafeMethod = require('../../utils/customs').validateSafeMethod;
var getUniqueArgumentName = require('./utils/getUniqueArgumentName');

function factory (type, config, load, typed, math) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));
  var SymbolNode = load(require('./SymbolNode'));

  /**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node | string} fn Node resolving with a function on which to invoke
   *                             the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */
  function FunctionNode(fn, args) {
    if (!(this instanceof FunctionNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (typeof fn === 'string') {
      fn = new SymbolNode(fn);
    }

    // validate input
    if (!type.isNode(fn)) throw new TypeError('Node expected as parameter "fn"');
    if (!Array.isArray(args) || !args.every(type.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.fn = fn;
    this.args = args || [];

    // readonly property name
    Object.defineProperty(this, 'name', {
      get: function () {
        return this.fn.name || '';
      }.bind(this),
      set: function () {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });

    // TODO: deprecated since v3, remove some day
    var deprecated = function () {
      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
    };
    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
  }

  FunctionNode.prototype = new Node();

  FunctionNode.prototype.type = 'FunctionNode';

  FunctionNode.prototype.isFunctionNode = true;

  /**
   * Compile the node to javascript code
   * @param {FunctionNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileFunctionNode(node, defs, args) {
    if (!(node instanceof FunctionNode)) {
      throw new TypeError('No valid FunctionNode')
    }

    // compile fn and arguments
    var jsFn = compile(node.fn, defs, args);
    var jsArgs = map(node.args, function (arg) {
      return compile(arg, defs, args);
    });
    var jsScope = compileScope(defs, args);
    var argsName;

    if (type.isSymbolNode(node.fn)) {
      // we can statically determine whether the function has an rawArgs property
      var name = node.fn.name;
      var fn = hasOwnProperty(defs.math, name) ? defs.math[name] : undefined;
      var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);

      if (isRaw) {
        // pass unevaluated parameters (nodes) to the function
        argsName = getUniqueArgumentName(defs);
        defs[argsName] = node.args;

        return jsFn + '(' + argsName + ', math, ' + jsScope + ')'; // "raw" evaluation
      }
      else {
        return jsFn + '(' + join(jsArgs, ', ') + ')';              // "regular" evaluation
      }
    }
    else if (type.isAccessorNode(node.fn) &&
        type.isIndexNode(node.fn.index) && node.fn.index.isObjectProperty()) {
      // execute the function with the right context: the object of the AccessorNode
      argsName = getUniqueArgumentName(defs);
      defs[argsName] = node.args;
      defs.validateSafeMethod = validateSafeMethod

      var jsObject = compile(node.fn.object, defs, args);
      var jsProp = stringify(node.fn.index.getObjectProperty());

      return '(function () {' +
          'var object = ' + jsObject + ';' +
          'validateSafeMethod(object, ' + jsProp + ');' +
          'return (object[' + jsProp + '] && object[' + jsProp + '].rawArgs) ' +
          ' ? object[' + jsProp + '](' + argsName + ', math, ' + jsScope + ')' + // "raw" evaluation
          ' : object[' + jsProp + '](' + join(jsArgs, ', ') + ')' +              // "regular" evaluation
          '})()';
    }
    else { // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
      // we have to dynamically determine whether the function has a rawArgs property
      argsName = getUniqueArgumentName(defs);
      defs[argsName] = node.args;

      return '(function () {' +
          'var fn = ' + jsFn + ';' +
          'return (fn && fn.rawArgs) ' +
          ' ? fn(' + argsName + ', math, ' + jsScope + ')' +  // "raw" evaluation
          ' : fn(' + join(jsArgs, ', ') + ')' +               // "regular" evaluation
          '})()';
    }
  }

  // register the compile function
  register(FunctionNode.prototype.type, compileFunctionNode);

  /**
   * Merge function arguments into scope before passing to the actual function.
   * This is needed when the function has `rawArgs=true`. In that case we have
   * to pass the `scope` as third argument, including any variables of
   * enclosing functions.
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileScope (defs, args) {
    var names = Object.keys(args)
        // .map(function (arg) {
        //   return args[arg];
        // });
    if (names.length === 0) {
      return 'scope';
    }
    else {
      // merge arguments into scope
      defs.extend = extend;

      var jsArgs = map(names, function (name) {
        return stringify(name) + ': ' + args[name];
      });

      return 'extend(extend({}, scope), {' + join(jsArgs, ', ') + '})';
    }
  }

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  FunctionNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };

  /**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */
  FunctionNode.prototype.map = function (callback) {
    var fn = this.fn.map(callback);
    var args = [];
    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }
    return new FunctionNode(fn, args);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */
  FunctionNode.prototype.clone = function () {
    return new FunctionNode(this.fn, this.args.slice(0));
  };

  //backup Node's toString function
  //@private
  var nodeToString = FunctionNode.prototype.toString;

  /**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */
  FunctionNode.prototype.toString = function (options) {
    var customString;
    var name = this.fn.toString(options);
    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, name)) {
      //callback is a map of callback functions
      customString = options.handler[name](this, options);
    }

    if (typeof customString !== 'undefined') {
      return customString;
    }

    //fall back to Node's toString
    return nodeToString.call(this, options);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
  FunctionNode.prototype._toString = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toString(options);
    });

    var fn = type.isFunctionAssignmentNode(this.fn)
        ? ('(' + this.fn.toString(options) + ')')
        : this.fn.toString(options)

    // format the arguments like "add(2, 4.2)"
    return fn + '(' + args.join(', ') + ')';
  };
  
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */
  FunctionNode.prototype.toHTML = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toHTML(options);
    });

    // format the arguments like "add(2, 4.2)"
    return '<span class="math-function">' + escape(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  };

  /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/
  function expandTemplate(template, node, options) {
    var latex = '';

    // Match everything of the form ${identifier} or ${identifier[2]} or $$
    // while submatching identifier and 2 (in the second case)
    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');

    var inputPos = 0;   //position in the input string
    var match;
    while ((match = regex.exec(template)) !== null) {   //go through all matches
      // add everything in front of the match to the LaTeX string
      latex += template.substring(inputPos, match.index);
      inputPos = match.index;

      if (match[0] === '$$') { // escaped dollar sign
        latex += '$';
        inputPos++;
      }
      else { // template parameter
        inputPos += match[0].length;
        var property = node[match[1]];
        if (!property) {
          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
        }
        if (match[2] === undefined) { //no square brackets
          switch (typeof property) {
            case 'string':
              latex += property;
              break;
            case 'object':
              if (type.isNode(property)) {
                latex += property.toTex(options);
              }
              else if (Array.isArray(property)) {
                //make array of Nodes into comma separated list
                latex += property.map(function (arg, index) {
                  if (type.isNode(arg)) {
                    return arg.toTex(options);
                  }
                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                }).join(',');
              }
              else {
                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }
              break;
            default:
              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
          }
        }
        else { //with square brackets
          if (type.isNode(property[match[2]] && property[match[2]])) {
            latex += property[match[2]].toTex(options);
          }
          else {
            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
          }
        }
      }
    }
    latex += template.slice(inputPos);  //append rest of the template

    return latex;
  }

  //backup Node's toTex function
  //@private
  var nodeToTex = FunctionNode.prototype.toTex;

  /**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */
  FunctionNode.prototype.toTex = function (options) {
    var customTex;
    if (options && (typeof options.handler === 'object') && hasOwnProperty(options.handler, this.name)) {
      //callback is a map of callback functions
      customTex = options.handler[this.name](this, options);
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    }

    //fall back to Node's toTex
    return nodeToTex.call(this, options);
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  FunctionNode.prototype._toTex = function (options) {
    var args = this.args.map(function (arg) { //get LaTeX of the arguments
      return arg.toTex(options);
    });

    var latexConverter;

    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {
      //.toTex is a callback function
      latexConverter = math[this.name].toTex;
    }

    var customToTex;
    switch (typeof latexConverter) {
      case 'function': //a callback function
        customToTex = latexConverter(this, options);
        break;
      case 'string': //a template string
        customToTex = expandTemplate(latexConverter, this, options);
        break;
      case 'object': //an object with different "converters" for different numbers of arguments
        switch (typeof latexConverter[args.length]) {
          case 'function':
            customToTex = latexConverter[args.length](this, options);
            break;
          case 'string':
            customToTex = expandTemplate(latexConverter[args.length], this, options);
            break;
        }
    }

    if (typeof customToTex !== 'undefined') {
      return customToTex;
    }

    return expandTemplate(latex.defaultTemplate, this, options);
  };

  /**
   * Get identifier.
   * @return {string}
   */
  FunctionNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.name;
  };

  return FunctionNode;
}

exports.name = 'FunctionNode';
exports.path = 'expression.node';
exports.math = true; // request access to the math namespace as 5th argument of the factory function
exports.factory = factory;

},{"../../utils/array":532,"../../utils/customs":552,"../../utils/latex":556,"../../utils/object":558,"../../utils/string":559,"./Node":244,"./SymbolNode":249,"./compile":251,"./utils/getUniqueArgumentName":255}],243:[function(require,module,exports){
'use strict';

var map = require('../../utils/array').map;
var join = require('../../utils/array').join;
var escape = require('../../utils/string').escape;

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));
  var RangeNode = load(require('./RangeNode'));
  var SymbolNode = load(require('./SymbolNode'));

  var Range = load(require('../../type/matrix/Range'));

  var isArray = Array.isArray;

  /**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */
  function IndexNode(dimensions, dotNotation) {
    if (!(this instanceof IndexNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.dimensions = dimensions;
    this.dotNotation = dotNotation || false;

    // validate input
    if (!isArray(dimensions) || !dimensions.every(type.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
    }
    if (this.dotNotation && !this.isObjectProperty()) {
      throw new Error('dotNotation only applicable for object properties');
    }

    // TODO: deprecated since v3, remove some day
    var deprecated = function () {
      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
    };
    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
  }

  IndexNode.prototype = new Node();

  IndexNode.prototype.type = 'IndexNode';

  IndexNode.prototype.isIndexNode = true;

  /**
   * Compile all range nodes
   *
   * When some of the dimensions has `end` defined, the IndexNode requires
   * a variable `size` to be defined in the current closure, and must contain
   * the size of the matrix that's being handled. To check whether the `size`
   * variable is needed, call IndexNode.needsSize().
   *
   * @param {IndexNode} node        The node to be compiled
   * @param {Object} defs           Object which can be used to define functions
   *                                or constants globally available for the
   *                                compiled expression
   * @param {Object} args           Object with local function arguments, the key is
   *                                the name of the argument, and the value is `true`.
   *                                The object may not be mutated, but must be
   *                                extended instead.
   * @return {string} code
   */
  function compileIndexNode(node, defs, args) {
    if (!(node instanceof IndexNode)) {
      throw new TypeError('No valid IndexNode')
    }

    // args can be mutated by IndexNode, when dimensions use `end`
    var childArgs = Object.create(args);

    // helper function to create a Range from start, step and end
    defs.range = function (start, end, step) {
      return new Range(
          type.isBigNumber(start) ? start.toNumber() : start,
          type.isBigNumber(end)   ? end.toNumber()   : end,
          type.isBigNumber(step)  ? step.toNumber()  : step
      );
    };

    // TODO: implement support for bignumber (currently bignumbers are silently
    //       reduced to numbers when changing the value to zero-based)

    // TODO: Optimization: when the range values are ConstantNodes,
    //       we can beforehand resolve the zero-based value

    // optimization for a simple object property
    var dimensions = map(node.dimensions, function (range, i) {
      if (type.isRangeNode(range)) {
        if (range.needsEnd()) {
          childArgs.end = 'end';

          // resolve end and create range
          return '(function () {' +
              'var end = size[' + i + ']; ' +
              'return range(' +
              compile(range.start, defs, childArgs) + ', ' +
              compile(range.end, defs, childArgs) + ', ' +
              (range.step ? compile(range.step, defs, childArgs) : '1') +
              '); ' +
              '})()';
        }
        else {
          // create range
          return 'range(' +
              compile(range.start, defs, childArgs) + ', ' +
              compile(range.end, defs, childArgs) + ', ' +
              (range.step ? compile(range.step, defs, childArgs) : '1') +
              ')';
        }
      }
      if (type.isSymbolNode(range) && range.name === 'end') {
        childArgs.end = 'end';

        // resolve the parameter 'end'
        return '(function () {' +
            'var end = size[' + i + ']; ' +
            'return ' + compile(range, defs, childArgs) + '; ' +
            '})()'
      }
      else { // ConstantNode
        return compile(range, defs, childArgs);
      }
    });

    return 'math.index(' + join(dimensions, ', ') + ')';
  }

  // register the compile function
  register(IndexNode.prototype.type, compileIndexNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  IndexNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.dimensions.length; i++) {
      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
    }
  };

  /**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */
  IndexNode.prototype.map = function (callback) {
    var dimensions = [];
    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
    }

    return new IndexNode(dimensions);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */
  IndexNode.prototype.clone = function () {
    return new IndexNode(this.dimensions.slice(0));
  };

  /**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */
  IndexNode.prototype.isObjectProperty = function () {
    return this.dimensions.length === 1 &&
        type.isConstantNode(this.dimensions[0]) &&
        this.dimensions[0].valueType === 'string';
  };

  /**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */
  IndexNode.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this.dimensions[0].value : null;
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
  IndexNode.prototype._toString = function (options) {
    // format the parameters like "[1, 0:5]"
    return this.dotNotation
        ? ('.' + this.getObjectProperty())
        : ('[' + this.dimensions.join(', ') + ']');
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */
  IndexNode.prototype.toHTML = function (options) {
    // format the parameters like "[1, 0:5]"
	var dimensions = []
	for (var i=0; i<this.dimensions.length; i++)	{
	  dimensions[i] = this.dimensions[i].toHTML();
	}
	if (this.dotNotation) {
	  return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + escape(this.getObjectProperty()) + '</span>';}
	else {
	  return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>'}
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  IndexNode.prototype._toTex = function (options) {
    var dimensions = this.dimensions.map(function (range) {
      return range.toTex(options);
    });

    return this.dotNotation
        ? ('.' + this.getObjectProperty() + '')
        : ('_{' + dimensions.join(',') + '}');
  };

  /**
   * Test whether this IndexNode needs the object size, size of the Matrix
   * @return {boolean}
   */
  IndexNode.prototype.needsSize = function () {
    return this.dimensions.some(function (range) {
      return (type.isRangeNode(range) && range.needsEnd()) ||
          (type.isSymbolNode(range) && range.name === 'end');
    });
  };

  return IndexNode;
}

exports.name = 'IndexNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../type/matrix/Range":501,"../../utils/array":532,"../../utils/string":559,"./Node":244,"./RangeNode":248,"./SymbolNode":249,"./compile":251}],244:[function(require,module,exports){
'use strict';

var keywords = require('../keywords');
var deepEqual= require('../../utils/object').deepEqual;
var hasOwnProperty = require('../../utils/object').hasOwnProperty;

function factory (type, config, load, typed, math) {
  var compile = load(require('./compile')).compile;

  /**
   * Node
   */
  function Node() {
    if (!(this instanceof Node)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }

  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */
  Node.prototype.eval = function(scope) {
    return this.compile().eval(scope);
  };

  Node.prototype.type = 'Node';

  Node.prototype.isNode = true;

  Node.prototype.comment = '';

  /**
   * Compile the node to javascript code
   * @return {{eval: function}} expr  Returns an object with a function 'eval',
   *                                  which can be invoked as expr.eval([scope]),
   *                                  where scope is an optional object with
   *                                  variables.
   */
  Node.prototype.compile = function () {
    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day
    if (arguments.length > 0) {
      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');
    }

    // definitions globally available inside the closure of the compiled expressions
    var defs = {
      math: math.expression.mathWithTransform,
      args: {}, // can be filled with names of FunctionAssignment arguments
      _validateScope: _validateScope
    };

    // will be used to put local function arguments
    var args = {};

    var code = compile(this, defs, args);

    var defsCode = Object.keys(defs).map(function (name) {
      return '    var ' + name + ' = defs["' + name + '"];';
    });

    var factoryCode =
        defsCode.join(' ') +
        'return {' +
        '  "eval": function (scope) {' +
        '    if (scope) _validateScope(scope);' +
        '    scope = scope || {};' +
        '    return ' + code + ';' +
        '  }' +
        '};';

    var factory = new Function('defs', factoryCode);
    return factory(defs);
  };

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  Node.prototype.forEach = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run forEach on a Node interface');
  };

  /**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */
  Node.prototype.map = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run map on a Node interface');
  };

  /**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */
  Node.prototype._ifNode = function (node) {
    if (!type.isNode(node)) {
      throw new TypeError('Callback function must return a Node');
    }

    return node;
  };

  /**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */
  Node.prototype.traverse = function (callback) {
    // execute callback for itself
    callback(this, null, null);

    // recursively traverse over all childs of a node
    function _traverse(node, callback) {
      node.forEach(function (child, path, parent) {
        callback(child, path, parent);
        _traverse(child, callback);
      });
    }

    _traverse(this, callback);
  };

  /**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     var res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name == 'x')) {
   *         return new ConstantNode(2);
   *       }
   *       else {
   *         return node;
   *       }
   *     });
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */
  Node.prototype.transform = function (callback) {
    // traverse over all childs
    function _transform (node, callback) {
      return node.map(function(child, path, parent) {
        var replacement = callback(child, path, parent);
        return _transform(replacement, callback);
      });
    }

    var replacement = callback(this, null, null);
    return _transform(replacement, callback);
  };

  /**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     var results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name == 'x');
   *     });
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */
  Node.prototype.filter = function (callback) {
    var nodes = [];

    this.traverse(function (node, path, parent) {
      if (callback(node, path, parent)) {
        nodes.push(node);
      }
    });

    return nodes;
  };

  // TODO: deprecated since version 1.1.0, remove this some day
  Node.prototype.find = function () {
    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
  };

  // TODO: deprecated since version 1.1.0, remove this some day
  Node.prototype.match = function () {
    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
  };

  /**
   * Create a shallow clone of this node
   * @return {Node}
   */
  Node.prototype.clone = function () {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot clone a Node interface');
  };

  /**
   * Create a deep clone of this node
   * @return {Node}
   */
  Node.prototype.cloneDeep = function () {
    return this.map(function (node) {
      return node.cloneDeep();
    });
  };

  /**
   * Deep compare this node with another node.
   * @param {Node} other
   * @return {boolean} Returns true when both nodes are of the same type and
   *                   contain the same values (as do their childs)
   */
  Node.prototype.equals = function (other) {
    return other
        ? deepEqual(this, other)
        : false
  };

  /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */
  Node.prototype.toString = function (options) {
    var customString;
    if (options && typeof options === 'object') {
        switch (typeof options.handler) {
          case 'object':
          case 'undefined':
            break;
          case 'function':
            customString = options.handler(this, options);
            break;
          default:
            throw new TypeError('Object or function expected as callback');
        }
    }

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this._toString(options);
  };

  /**
   * Get HTML representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)" or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */
  Node.prototype.toHTML = function (options) {
    var customString;
    if (options && typeof options === 'object') {
        switch (typeof options.handler) {
          case 'object':
          case 'undefined':
            break;
          case 'function':
            customString = options.handler(this, options);
            break;
          default:
            throw new TypeError('Object or function expected as callback');
        }
    }

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this.toHTML(options);
  };

  /**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */
  Node.prototype._toString = function () {
    //must be implemented by each of the Node implementations
    throw new Error('_toString not implemented for ' + this.type);
  };

  /**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */
  Node.prototype.toTex = function (options) {
    var customTex;
    if (options && typeof options == 'object') {
      switch (typeof options.handler) {
        case 'object':
        case 'undefined':
          break;
        case 'function':
          customTex = options.handler(this, options);
          break;
        default:
          throw new TypeError('Object or function expected as callback');
      }
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    }

    return this._toTex(options);
  };

  /**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */
  Node.prototype._toTex = function (options) {
    //must be implemented by each of the Node implementations
    throw new Error('_toTex not implemented for ' + this.type);
  };

  /**
   * Get identifier.
   * @return {string}
   */
  Node.prototype.getIdentifier = function () {
    return this.type;
  };

  /**
   * Get the content of the current Node.
   * @return {Node} node
   **/
  Node.prototype.getContent = function () {
    return this;
  };

  /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */
  function _validateScope(scope) {
    for (var symbol in scope) {
      if (hasOwnProperty(scope, symbol)) {
        if (symbol in keywords) {
          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
        }
      }
    }
  }

  return Node;
}

exports.name = 'Node';
exports.path = 'expression.node';
exports.math = true; // request access to the math namespace as 5th argument of the factory function
exports.factory = factory;

},{"../../utils/object":558,"../keywords":234,"./compile":251}],245:[function(require,module,exports){
'use strict';

var stringify = require('../../utils/string').stringify;
var escape = require('../../utils/string').escape;
var isSafeProperty = require('../../utils/customs').isSafeProperty;
var hasOwnProperty = require('../../utils/object').hasOwnProperty;

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   array with key/value pairs
   */
  function ObjectNode(properties) {
    if (!(this instanceof ObjectNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.properties = properties || {};

    // validate input
    if (properties) {
      if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {
            return type.isNode(properties[key]);
          })) {
        throw new TypeError('Object containing Nodes expected');
      }
    }
  }

  ObjectNode.prototype = new Node();

  ObjectNode.prototype.type = 'ObjectNode';

  ObjectNode.prototype.isObjectNode = true;

  /**
   * Compile the node to javascript code
   * @param {ObjectNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} code
   * @private
   */
  function compileObjectNode(node, defs, args) {
    if (!(node instanceof ObjectNode)) {
      throw new TypeError('No valid ObjectNode')
    }

    var entries = [];
    for (var key in node.properties) {
      if (hasOwnProperty(node.properties, key)) {
        // we stringify/parse the key here to resolve unicode characters,
        // so you cannot create a key like {"co\\u006Estructor": null} 
        var stringifiedKey = stringify(key)
        var parsedKey = JSON.parse(stringifiedKey)
        if (!isSafeProperty(node.properties, parsedKey)) {
          throw new Error('No access to property "' + parsedKey + '"');
        }

        entries.push(stringifiedKey + ': ' + compile(node.properties[key], defs, args));
      }
    }
    return '{' + entries.join(', ') + '}';
  }

  // register the compile function
  register(ObjectNode.prototype.type, compileObjectNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  ObjectNode.prototype.forEach = function (callback) {
    for (var key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
      }
    }
  };

  /**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */
  ObjectNode.prototype.map = function (callback) {
    var properties = {};
    for (var key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        properties[key] = this._ifNode(callback(this.properties[key],
            'properties[' + stringify(key) + ']', this));
      }
    }
    return new ObjectNode(properties);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */
  ObjectNode.prototype.clone = function() {
    var properties = {};
    for (var key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        properties[key] = this.properties[key];
      }
    }
    return new ObjectNode(properties);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  ObjectNode.prototype._toString = function(options) {
    var entries = [];
    for (var key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
      }
    }
    return '{' + entries.join(', ') + '}';
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  ObjectNode.prototype.toHTML = function(options) {
    var entries = [];
    for (var key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        entries.push('<span class="math-symbol math-property">' + escape(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
      }
    }
    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  ObjectNode.prototype._toTex = function(options) {
    var entries = [];
    for (var key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        entries.push("\\mathbf{" + key + ':} & ' + this.properties[key].toTex(options) + "\\\\");
      }
    }
    return '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
  };

  return ObjectNode;
}

exports.name = 'ObjectNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../utils/customs":552,"../../utils/object":558,"../../utils/string":559,"./Node":244,"./compile":251}],246:[function(require,module,exports){
'use strict';

var latex = require('../../utils/latex');
var map = require('../../utils/array').map;
var join = require('../../utils/array').join;
var stringify = require('../../utils/string').stringify;
var escape = require('../../utils/string').escape;
var isSafeMethod = require('../../utils/customs').isSafeMethod;
var operators = require('../operators');

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node         = load(require('./Node'));
  var ConstantNode = load(require('./ConstantNode'));
  var SymbolNode   = load(require('./SymbolNode'));
  var FunctionNode = load(require('./FunctionNode'));

  /**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   */
  function OperatorNode(op, fn, args, implicit) {
    if (!(this instanceof OperatorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    //validate input
    if (typeof op !== 'string') {
      throw new TypeError('string expected for parameter "op"');
    }
    if (typeof fn !== 'string') {
      throw new TypeError('string expected for parameter "fn"');
    }
    if (!Array.isArray(args) || !args.every(type.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.implicit = (implicit === true);
    this.op = op;
    this.fn = fn;
    this.args = args || [];
  }

  OperatorNode.prototype = new Node();

  OperatorNode.prototype.type = 'OperatorNode';

  OperatorNode.prototype.isOperatorNode = true;

  /**
   * Compile the node to javascript code
   * @param {OperatorNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileOperatorNode(node, defs, args) {
    if (!(node instanceof OperatorNode)) {
      throw new TypeError('No valid OperatorNode')
    }

    // validate fn
    if (typeof node.fn !== 'string' || !isSafeMethod(defs.math, node.fn)) {
      if (!defs.math[node.fn]) {
        throw new Error('Function ' + node.fn + ' missing in provided namespace "math"');
      }
      else {
        throw new Error('No access to function "' + node.fn + '"');
      }
    }

    var jsArgs = map(node.args, function (arg) {
      return compile(arg, defs, args);
    });

    return 'math[' + stringify(node.fn) + '](' + join(jsArgs, ', ') + ')';
  }

  // register the compile function
  register(OperatorNode.prototype.type, compileOperatorNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  OperatorNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };

  /**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */
  OperatorNode.prototype.map = function (callback) {
    var args = [];
    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }
    return new OperatorNode(this.op, this.fn, args);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */
  OperatorNode.prototype.clone = function () {
    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
  };

  /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */
  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
    //precedence of the root OperatorNode
    var precedence = operators.getPrecedence(root, parenthesis);
    var associativity = operators.getAssociativity(root, parenthesis);

    if ((parenthesis === 'all') || ((args.length > 2) && (root.getIdentifier() !== 'OperatorNode:add') && (root.getIdentifier() !== 'OperatorNode:multiply'))) {
      var parens = args.map(function (arg) {
        switch (arg.getContent().type) { //Nodes that don't need extra parentheses
          case 'ArrayNode':
          case 'ConstantNode':
          case 'SymbolNode':
          case 'ParenthesisNode':
            return false;
            break;
          default:
            return true;
        }
      });
      return parens;
    }

    var result = undefined;
    switch (args.length) {
      case 0:
        result = [];
        break;

      case 1: //unary operators
        //precedence of the operand
        var operandPrecedence = operators.getPrecedence(args[0], parenthesis);

        //handle special cases for LaTeX, where some of the parentheses aren't needed
        if (latex && (operandPrecedence !== null)) {
          var operandIdentifier;
          var rootIdentifier;
          if (parenthesis === 'keep') {
            operandIdentifier = args[0].getIdentifier();
            rootIdentifier = root.getIdentifier();
          }
          else {
            //Ignore Parenthesis Nodes when not in 'keep' mode
            operandIdentifier = args[0].getContent().getIdentifier();
            rootIdentifier = root.getContent().getIdentifier();
          }
          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
            result = [false];
            break;
          }

          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
            result = [false];
            break;
          }
        }

        if (operandPrecedence === null) {
          //if the operand has no defined precedence, no parens are needed
          result = [false];
          break;
        }

        if (operandPrecedence <= precedence) {
          //if the operands precedence is lower, parens are needed
          result = [true];
          break;
        }

        //otherwise, no parens needed
        result = [false];
        break;

      case 2: //binary operators
        var lhsParens; //left hand side needs parenthesis?
        //precedence of the left hand side
        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
        //is the root node associative with the left hand side
        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);

        if (lhsPrecedence === null) {
          //if the left hand side has no defined precedence, no parens are needed
          //FunctionNode for example
          lhsParens = false;
        }
        else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {
          //In case of equal precedence, if the root node is left associative
          // parens are **never** necessary for the left hand side.
          //If it is right associative however, parens are necessary
          //if the root node isn't associative with the left hand side
          lhsParens = true;
        }
        else if (lhsPrecedence < precedence) {
          lhsParens = true;
        }
        else {
          lhsParens = false;
        }

        var rhsParens; //right hand side needs parenthesis?
        //precedence of the right hand side
        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
        //is the root node associative with the right hand side?
        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);

        if (rhsPrecedence === null) {
          //if the right hand side has no defined precedence, no parens are needed
          //FunctionNode for example
          rhsParens = false;
        }
        else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {
          //In case of equal precedence, if the root node is right associative
          // parens are **never** necessary for the right hand side.
          //If it is left associative however, parens are necessary
          //if the root node isn't associative with the right hand side
          rhsParens = true;
        }
        else if (rhsPrecedence < precedence) {
          rhsParens = true;
        }
        else {
          rhsParens = false;
        }

        //handle special cases for LaTeX, where some of the parentheses aren't needed
        if (latex) {
          var rootIdentifier;
          var lhsIdentifier;
          var rhsIdentifier;
          if (parenthesis === 'keep') {
            rootIdentifier = root.getIdentifier();
            lhsIdentifier = root.args[0].getIdentifier();
            rhsIdentifier = root.args[1].getIdentifier();
          }
          else {
            //Ignore ParenthesisNodes when not in 'keep' mode
            rootIdentifier = root.getContent().getIdentifier();
            lhsIdentifier = root.args[0].getContent().getIdentifier();
            rhsIdentifier = root.args[1].getContent().getIdentifier();
          }

          if (lhsPrecedence !== null) {
            if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
              lhsParens = false;
            }

            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
              lhsParens = false;
            }
          }

          if (rhsPrecedence !== null) {
            if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
              rhsParens = false;
            }

            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
              rhsParens = false;
            }
          }
        }

        result = [lhsParens, rhsParens];
        break;

      default:
        if ((root.getIdentifier() === 'OperatorNode:add') || (root.getIdentifier() === 'OperatorNode:multiply')) {
          var result = args.map(function (arg) {
            var argPrecedence = operators.getPrecedence(arg, parenthesis);
            var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);
            var argAssociativity = operators.getAssociativity(arg, parenthesis);
            if (argPrecedence === null) {
              //if the argument has no defined precedence, no parens are needed
              return false;
            } else if ((precedence === argPrecedence) && (associativity === argAssociativity) && !assocWithArg) {
              return true;
            } else if (argPrecedence < precedence) {
              return true;
            }

            return false;
          });
        }
        break;
    }

    //handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
    //In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
    //printed.
    if ((args.length >= 2) && (root.getIdentifier() === 'OperatorNode:multiply') && root.implicit && (parenthesis === 'auto') && (implicit === 'hide')) {
      result = args.map(function (arg, index) {
        var isParenthesisNode = (arg.getIdentifier() === 'ParenthesisNode');
        if (result[index] || isParenthesisNode) { //put in parenthesis?
          return true;
        }

        return false;
      });
    }

    return result;
  }

  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */
  OperatorNode.prototype._toString = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var implicit = (options && options.implicit) ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) { //unary operators
      var assoc = operators.getAssociativity(this, parenthesis);

      var operand = args[0].toString(options);
      if (parens[0]) {
        operand = '(' + operand + ')';
      }

      if (assoc === 'right') { //prefix operator
        return this.op + operand;
      }
      else if (assoc === 'left') { //postfix
        return operand + this.op;
      }

      //fall back to postfix
      return operand + this.op;
    } else if (args.length == 2) {
      var lhs = args[0].toString(options); //left hand side
      var rhs = args[1].toString(options); //right hand side
      if (parens[0]) { //left hand side in parenthesis?
        lhs = '(' + lhs + ')';
      }
      if (parens[1]) { //right hand side in parenthesis?
        rhs = '(' + rhs + ')';
      }

      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {
        return lhs + ' ' + rhs;
      }

      return lhs + ' ' + this.op + ' ' + rhs;
    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toString(options);
        if (parens[index]) { //put in parenthesis?
          arg = '(' + arg + ')';
        }

        return arg;
      });

      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {
        return stringifiedArgs.join(' ');
      }

      return stringifiedArgs.join(' ' + this.op + ' ');
    } else {
      //fallback to formatting as a function call
      return this.fn + '(' + this.args.join(', ') + ')';
    }
  };

  /**
   * Get HTML representation.
   * @param {Object} options
   * @return {string} str
   */
  OperatorNode.prototype.toHTML = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var implicit = (options && options.implicit) ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) { //unary operators
      var assoc = operators.getAssociativity(this, parenthesis);

      var operand = args[0].toHTML(options);
      if (parens[0]) {
        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (assoc === 'right') { //prefix operator
        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + escape(this.op) + '</span>' + operand;
      }
      else if (assoc === 'left') { //postfix
        return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape(this.op) + '</span>' + operand;
      }

      //fall back to postfix
      return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape(this.op) + '</span>' + operand;
    }
	else if (args.length == 2) { // binary operatoes
      var lhs = args[0].toHTML(options); //left hand side
      var rhs = args[1].toHTML(options); //right hand side
      if (parens[0]) { //left hand side in parenthesis?
        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }
      if (parens[1]) { //right hand side in parenthesis?
        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }
	  
	  if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {
	    return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
	  }
      
	  return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape(this.op) + '</span>' + rhs;
    }
	else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toHTML(options);
        if (parens[index]) { //put in parenthesis?
          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return arg;
      });

      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {
        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
      }

      return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape(this.op) + '</span>');
    } else {
      //fallback to formatting as a function call
      return '<span class="math-function">' + escape(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */
  OperatorNode.prototype._toTex = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var implicit = (options && options.implicit) ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
    var op = latex.operators[this.fn];
    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op

    if (args.length === 1) { //unary operators
      var assoc = operators.getAssociativity(this, parenthesis);

      var operand = args[0].toTex(options);
      if (parens[0]) {
        operand = '\\left(' + operand + '\\right)';
      }

      if (assoc === 'right') { //prefix operator
        return op + operand;
      }
      else if (assoc === 'left') { //postfix operator
        return operand + op;
      }

      //fall back to postfix
      return operand + op;
    } else if (args.length === 2) { //binary operators
      var lhs = args[0]; //left hand side
      var lhsTex = lhs.toTex(options);
      if (parens[0]) {
        lhsTex = '\\left(' + lhsTex + '\\right)';
      }

      var rhs = args[1]; //right hand side
      var rhsTex = rhs.toTex(options);
      if (parens[1]) {
        rhsTex = '\\left(' + rhsTex + '\\right)';
      }

      //handle some exceptions (due to the way LaTeX works)
      var lhsIdentifier;
      if (parenthesis === 'keep') {
        lhsIdentifier = lhs.getIdentifier();
      }
      else {
        //Ignore ParenthesisNodes if in 'keep' mode
        lhsIdentifier = lhs.getContent().getIdentifier();
      }
      switch (this.getIdentifier()) {
        case 'OperatorNode:divide':
          //op contains '\\frac' at this point
          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
        case 'OperatorNode:pow':
          lhsTex = '{' + lhsTex + '}';
          rhsTex = '{' + rhsTex + '}';
          switch (lhsIdentifier) {
            case 'ConditionalNode': //
            case 'OperatorNode:divide':
              lhsTex = '\\left(' + lhsTex + '\\right)';
          }
        case 'OperatorNode:multiply':
          if (this.implicit && (implicit === 'hide')) {
            return lhsTex + '~' + rhsTex;
          }
      }
      return lhsTex + op + rhsTex;
    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
      var texifiedArgs = args.map(function (arg, index) {
        arg = arg.toTex(options);
        if (parens[index]) {
          arg = '\\left(' + arg + '\\right)';
        }
        return arg;
      });

      if ((this.getIdentifier() === 'OperatorNode:multiply') && this.implicit) {
        return texifiedArgs.join('~');
      }

      return texifiedArgs.join(op)
    } else {
      //fall back to formatting as a function call
      //as this is a fallback, it doesn't use
      //fancy function names
      return '\\mathrm{' + this.fn + '}\\left('
          + args.map(function (arg) {
            return arg.toTex(options);
          }).join(',') + '\\right)';
    }
  };

  /**
   * Get identifier.
   * @return {string}
   */
  OperatorNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.fn;
  };

  return OperatorNode;
}

exports.name = 'OperatorNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../../utils/array":532,"../../utils/customs":552,"../../utils/latex":556,"../../utils/string":559,"../operators":256,"./ConstantNode":240,"./FunctionNode":242,"./Node":244,"./SymbolNode":249,"./compile":251}],247:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */
  function ParenthesisNode(content) {
    if (!(this instanceof ParenthesisNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    // validate input
    if (!type.isNode(content)) {
      throw new TypeError('Node expected for parameter "content"');
    }

    this.content = content;
  }

  ParenthesisNode.prototype = new Node();

  ParenthesisNode.prototype.type = 'ParenthesisNode';

  ParenthesisNode.prototype.isParenthesisNode = true;

  /**
   * Compile the node to javascript code
   * @param {ParenthesisNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileParenthesisNode(node, defs, args) {
    if (!(node instanceof ParenthesisNode)) {
      throw new TypeError('No valid ParenthesisNode')
    }

    return compile(node.content, defs, args);
  }

  // register the compile function
  register(ParenthesisNode.prototype.type, compileParenthesisNode);

  /**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/
  ParenthesisNode.prototype.getContent = function () {
    return this.content.getContent();
  };

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  ParenthesisNode.prototype.forEach = function (callback) {
    callback(this.content, 'content', this);
  };

  /**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */
  ParenthesisNode.prototype.map = function (callback) {
    var content = callback(this.content, 'content', this);
    return new ParenthesisNode(content);
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */
  ParenthesisNode.prototype.clone = function() {
    return new ParenthesisNode(this.content);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  ParenthesisNode.prototype._toString = function(options) {
    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
      return '(' + this.content.toString(options) + ')';
    }
    return this.content.toString(options);
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  ParenthesisNode.prototype.toHTML = function(options) {
    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    return this.content.toHTML(options);
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  ParenthesisNode.prototype._toTex = function(options) {
    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
      return '\\left(' + this.content.toTex(options) + '\\right)';
    }
    return this.content.toTex(options);
  };

  return ParenthesisNode;
}

exports.name = 'ParenthesisNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"./Node":244,"./compile":251}],248:[function(require,module,exports){
'use strict';

var operators = require('../operators');

function factory (type, config, load, typed) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */
  function RangeNode(start, end, step) {
    if (!(this instanceof RangeNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    // validate inputs
    if (!type.isNode(start)) throw new TypeError('Node expected');
    if (!type.isNode(end)) throw new TypeError('Node expected');
    if (step && !type.isNode(step)) throw new TypeError('Node expected');
    if (arguments.length > 3) throw new Error('Too many arguments');

    this.start = start;         // included lower-bound
    this.end = end;           // included upper-bound
    this.step = step || null;  // optional step
  }

  RangeNode.prototype = new Node();

  RangeNode.prototype.type = 'RangeNode';

  RangeNode.prototype.isRangeNode = true;

  /**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */
  RangeNode.prototype.needsEnd = function () {
    // find all `end` symbols in this RangeNode
    var endSymbols = this.filter(function (node) {
      return type.isSymbolNode(node) && (node.name === 'end');
    });

    return endSymbols.length > 0;
  };

  /**
   * Compile the node to javascript code
   *
   * When the range has a symbol `end` defined, the RangeNode requires
   * a variable `end` to be defined in the current closure, which must contain
   * the length of the of the matrix that's being handled in the range's
   * dimension. To check whether the `end` variable is needed, call
   * RangeNode.needsEnd().
   *
   * @param {RangeNode} node  The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileRangeNode(node, defs, args) {
    if (!(node instanceof RangeNode)) {
      throw new TypeError('No valid RangeNode')
    }

    return 'math.range(' +
        compile(node.start, defs, args) + ', ' +
        compile(node.end, defs, args) +
        (node.step ? (', ' + compile(node.step, defs, args)) : '') +
        ')';
  }

  // register the compile function
  register(RangeNode.prototype.type, compileRangeNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  RangeNode.prototype.forEach = function (callback) {
    callback(this.start, 'start', this);
    callback(this.end, 'end', this);
    if (this.step) {
      callback(this.step, 'step', this);
    }
  };

  /**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */
  RangeNode.prototype.map = function (callback) {
    return new RangeNode(
        this._ifNode(callback(this.start, 'start', this)),
        this._ifNode(callback(this.end, 'end', this)),
        this.step && this._ifNode(callback(this.step, 'step', this))
    );
  };

  /**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */
  RangeNode.prototype.clone = function () {
    return new RangeNode(this.start, this.end, this.step && this.step);
  };

  /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */
  function calculateNecessaryParentheses(node, parenthesis) {
    var precedence = operators.getPrecedence(node, parenthesis);
    var parens = {};

    var startPrecedence = operators.getPrecedence(node.start, parenthesis);
    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))
      || (parenthesis === 'all');

    if (node.step) {
      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
      parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))
        || (parenthesis === 'all');
    }

    var endPrecedence = operators.getPrecedence(node.end, parenthesis);
    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))
      || (parenthesis === 'all');

    return parens;
  }

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */
  RangeNode.prototype._toString = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis);

    //format string as start:step:stop
    var str;

    var start = this.start.toString(options);
    if (parens.start) {
      start = '(' + start + ')';
    }
    str = start;

    if (this.step) {
      var step = this.step.toString(options);
      if (parens.step) {
        step = '(' + step + ')';
      }
      str += ':' + step;
    }

    var end = this.end.toString(options);
    if (parens.end) {
      end = '(' + end + ')';
    }
    str += ':' + end;

    return str;
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */
  RangeNode.prototype.toHTML = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis);

    //format string as start:step:stop
    var str;

    var start = this.start.toHTML(options);
    if (parens.start) {
      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    str = start;

    if (this.step) {
      var step = this.step.toHTML(options);
      if (parens.step) {
        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }
      str += '<span class="math-operator math-range-operator">:</span>' + step;
    }

    var end = this.end.toHTML(options);
    if (parens.end) {
      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    str += '<span class="math-operator math-range-operator">:</span>' + end;

    return str;
  };

  /**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */
  RangeNode.prototype._toTex = function (options) {
    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis);

    var str = this.start.toTex(options);
    if (parens.start) {
      str = '\\left(' + str + '\\right)';
    }

    if (this.step) {
      var step = this.step.toTex(options);
      if (parens.step) {
        step = '\\left(' + step + '\\right)';
      }
      str += ':' + step;
    }

    var end = this.end.toTex(options);
    if (parens.end) {
      end = '\\left(' + end + '\\right)';
    }
    str += ':' + end;

    return str;
  };

  return RangeNode;
}

exports.name = 'RangeNode';
exports.path = 'expression.node';
exports.factory = factory;

},{"../operators":256,"./Node":244,"./compile":251}],249:[function(require,module,exports){
'use strict';

var latex = require('../../utils/latex');
var stringify = require('../../utils/string').stringify;
var escape = require('../../utils/string').escape;
var hasOwnProperty = require('../../utils/object').hasOwnProperty;
var getSafeProperty = require('../../utils/customs').getSafeProperty;

function factory (type, config, load, typed, math) {
  var register = load(require('./compile')).register;
  var compile = load(require('./compile')).compile;
  var Node = load(require('./Node'));

  /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */
  function isValuelessUnit (name) {
    return type.Unit ? type.Unit.isValuelessUnit(name) : false;
  }

  /**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */
  function SymbolNode(name) {
    if (!(this instanceof SymbolNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    // validate input
    if (typeof name !== 'string')  throw new TypeError('String expected for parameter "name"');

    this.name = name;
  }

  SymbolNode.prototype = new Node();

  SymbolNode.prototype.type = 'SymbolNode';

  SymbolNode.prototype.isSymbolNode = true;

  /**
   * Compile the node to javascript code
   * @param {SymbolNode} node The node to be compiled
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} js
   * @private
   */
  function compileSymbolNode(node, defs, args) {
    if (!(node instanceof SymbolNode)) {
      throw new TypeError('No valid SymbolNode')
    }

    // add a function to the definitions
    defs['undef'] = undef;
    defs['Unit'] = type.Unit;
    defs.getSafeProperty = getSafeProperty;
    defs.hasOwnProperty = hasOwnProperty;

    var jsName = stringify(node.name); // escaped node name inside double quotes

    if (hasOwnProperty(args, node.name)) {
      // this is a FunctionAssignment argument
      // (like an x when inside the expression of a function assignment `f(x) = ...`)
      return args[node.name];
    }
    else if (node.name in defs.math) {
      return '(' + jsName + ' in scope ' +
          '? getSafeProperty(scope, ' + jsName + ') ' +
          ': getSafeProperty(math, ' + jsName + '))';
    }
    else {
      return '(' +
          jsName + ' in scope ' +
          '? getSafeProperty(scope, ' + jsName + ') ' +
          ': ' + (isValuelessUnit(node.name)
              ? 'new Unit(null, ' + jsName + ')'
              : 'undef(' + jsName + ')') +
          ')';
    }
  }

  // register the compile function
  register(SymbolNode.prototype.type, compileSymbolNode);

  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */
  SymbolNode.prototype.forEach = function (callback) {
    // nothing to do, we don't have childs
  };

  /**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */
  SymbolNode.prototype.map = function (callback) {
    return this.clone();
  };

  /**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */
  function undef (name) {
    throw new Error('Undefined symbol ' + name);
  }

  /**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */
  SymbolNode.prototype.clone = function() {
    return new SymbolNode(this.name);
  };

  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  SymbolNode.prototype._toString = function(options) {
    return this.name;
  };

  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  SymbolNode.prototype.toHTML = function(options) {
	var name = escape(this.name);
	
    if (name == "true" || name == "false") {
	  return '<span class="math-symbol math-boolean">' + name + '</span>';
	}
	else if (name == "i") {
	  return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
	}
	else if (name == "Infinity") {
	  return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
	}
	else if (name == "NaN") {
	  return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
	}
	else if (name == "null") {
	  return '<span class="math-symbol math-null-symbol">' + name + '</span>';
	}
	else if (name == "uninitialized") {
	  return '<span class="math-symbol math-uninitialized-symbol">' + name + '</span>';
	}
	
	return '<span class="math-symbol">' + name + '</span>';
  };

  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */
  SymbolNode.prototype._toTex = function(options) {
    var isUnit = false;
    if ((typeof math[this.name] === 'undefined') && isValuelessUnit(this.name)) {
      isUnit = true;
    }
    var symbol = latex.toSymbol(this.name, isUnit);
    if (symbol[0] === '\\') {
      //no space needed if the symbol starts with '\'
      return symbol;
    }
    //the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol
    return ' ' + symbol;
  };

  return SymbolNode;
}

exports.name = 'SymbolNode';
exports.path = 'expression.node';
exports.math = true; // request access to the math namespace as 5th argument of the factory function
exports.factory = factory;

},{"../../utils/customs":552,"../../utils/latex":556,"../../utils/object":558,"../../utils/string":559,"./Node":244,"./compile":251}],250:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  /**
   * @constructor UpdateNode
   */
  function UpdateNode() {
    // TODO: deprecated since v3. Cleanup some day
    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
  }

  return UpdateNode;
}

exports.name = 'UpdateNode';
exports.path = 'expression.node';
exports.factory = factory;

},{}],251:[function(require,module,exports){
// the compile functions which compile a Node into JavaScript are not
// exposed as class methods for security reasons to prevent being able to
// override them or create fake Nodes. Instead, only compile functions of
// registered nodes can be executed

var hasOwnProperty = require('../../utils/object').hasOwnProperty;

function factory () {
  // map with node type as key and compile functions as value
  var compileFunctions = {}

  /**
   * Register a compile function for a node
   * @param {string} type
   * @param {function} compileFunction
   *                      The compile function, invoked as
   *                      compileFunction(node, defs, args)
   */
  function register(type, compileFunction) {
    if (compileFunctions[type] === undefined) {
      compileFunctions[type] = compileFunction;
    }
    else {
      throw new Error('Cannot register type "' + type + '": already exists');
    }
  }

  /**
   * Compile a Node into JavaScript
   * @param {Node} node
   * @param {Object} defs     Object which can be used to define functions
   *                          or constants globally available for the compiled
   *                          expression
   * @param {Object} args     Object with local function arguments, the key is
   *                          the name of the argument, and the value is `true`.
   *                          The object may not be mutated, but must be
   *                          extended instead.
   * @return {string} Returns JavaScript code
   */
  function compile (node, defs, args) {
    if (hasOwnProperty(compileFunctions, node.type)) {
      var compileFunction = compileFunctions[node.type];
      return compileFunction(node, defs, args);
    }
    else if (typeof node._compile === 'function' &&
        !hasOwnProperty(node, '_compile')) {
      // Compatibility for CustomNodes
      // TODO: this is a security risk, change it such that you have to register CustomNodes separately in math.js, like math.expression.node.register(MyCustomNode)
      return node._compile(defs, args);
    }
    else {
      throw new Error('Cannot compile node: unknown type "' + node.type + '"');
    }
  }

  return {
    register: register,
    compile: compile
  }
}

exports.factory = factory;

},{"../../utils/object":558}],252:[function(require,module,exports){
module.exports = [
  require('./AccessorNode'),
  require('./ArrayNode'),
  require('./AssignmentNode'),
  require('./BlockNode'),
  require('./ConditionalNode'),
  require('./ConstantNode'),
  require('./IndexNode'),
  require('./FunctionAssignmentNode'),
  require('./FunctionNode'),
  require('./Node'),
  require('./ObjectNode'),
  require('./OperatorNode'),
  require('./ParenthesisNode'),
  require('./RangeNode'),
  require('./SymbolNode'),
  require('./UpdateNode')
];

},{"./AccessorNode":235,"./ArrayNode":236,"./AssignmentNode":237,"./BlockNode":238,"./ConditionalNode":239,"./ConstantNode":240,"./FunctionAssignmentNode":241,"./FunctionNode":242,"./IndexNode":243,"./Node":244,"./ObjectNode":245,"./OperatorNode":246,"./ParenthesisNode":247,"./RangeNode":248,"./SymbolNode":249,"./UpdateNode":250}],253:[function(require,module,exports){
'use strict';

var errorTransform = require('../../transform/error.transform').transform;
var getSafeProperty = require('../../../utils/customs').getSafeProperty;

function factory (type, config, load, typed) {
  var subset = load(require('../../../function/matrix/subset'));

  /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */
  return function access(object, index) {
    try {
      if (Array.isArray(object)) {
        return subset(object, index);
      }
      else if (object && typeof object.subset === 'function') { // Matrix
        return object.subset(index);
      }
      else if (typeof object === 'string') {
        // TODO: move getStringSubset into a separate util file, use that
        return subset(object, index);
      }
      else if (typeof object === 'object') {
        if (!index.isObjectProperty()) {
          throw new TypeError('Cannot apply a numeric index as object property');
        }

        return getSafeProperty(object, index.getObjectProperty());
      }
      else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    }
    catch (err) {
      throw errorTransform(err);
    }
  }
}

exports.factory = factory;

},{"../../../function/matrix/subset":386,"../../../utils/customs":552,"../../transform/error.transform":259}],254:[function(require,module,exports){
'use strict';

var errorTransform = require('../../transform/error.transform').transform;
var setSafeProperty = require('../../../utils/customs').setSafeProperty;

function factory (type, config, load, typed) {
  var subset = load(require('../../../function/matrix/subset'));
  var matrix = load(require('../../../type/matrix/function/matrix'));

  /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */
  // TODO: change assign to return the value instead of the object
  return function assign(object, index, value) {
    try {
      if (Array.isArray(object)) {
        return matrix(object).subset(index, value).valueOf();
      }
      else if (object && typeof object.subset === 'function') { // Matrix
        return object.subset(index, value);
      }
      else if (typeof object === 'string') {
        // TODO: move setStringSubset into a separate util file, use that
        return subset(object, index, value);
      }
      else if (typeof object === 'object') {
        if (!index.isObjectProperty()) {
          throw TypeError('Cannot apply a numeric index as object property');
        }
        setSafeProperty(object, index.getObjectProperty(), value);
        return object;
      }
      else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    }
    catch (err) {
        throw errorTransform(err);
    }
  }
}

exports.factory = factory;

},{"../../../function/matrix/subset":386,"../../../type/matrix/function/matrix":505,"../../../utils/customs":552,"../../transform/error.transform":259}],255:[function(require,module,exports){
/**
 * Get a unique name for an argument name to store in defs
 * @param {Object} defs
 * @return {string} A string like 'arg1', 'arg2', ...
 * @private
 */
function getUniqueArgumentName (defs) {
  return 'arg' + Object.keys(defs).length
}

module.exports = getUniqueArgumentName;

},{}],256:[function(require,module,exports){
'use strict'

//list of identifiers of nodes in order of their precedence
//also contains information about left/right associativity
//and which other operator the operator is associative with
//Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators 
// are right associative
//
//It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's! 
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument
var properties = [
  { //assignment
    'AssignmentNode': {},
    'FunctionAssignmentNode': {}
  },
  { //conditional expression
    'ConditionalNode': {
      latexLeftParens: false,
      latexRightParens: false,
      latexParens: false
      //conditionals don't need parentheses in LaTeX because
      //they are 2 dimensional
    }
  },
  { //logical or
    'OperatorNode:or': {
      associativity: 'left',
      associativeWith: []
    }

  },
  { //logical xor
    'OperatorNode:xor': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //logical and
    'OperatorNode:and': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //bitwise or
    'OperatorNode:bitOr': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //bitwise xor
    'OperatorNode:bitXor': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //bitwise and
    'OperatorNode:bitAnd': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //relational operators
    'OperatorNode:equal': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:unequal': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:smaller': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:larger': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:smallerEq': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:largerEq': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //bitshift operators
    'OperatorNode:leftShift': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:rightArithShift': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:rightLogShift': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //unit conversion
    'OperatorNode:to': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //range
    'RangeNode': {}
  },
  { //addition, subtraction
    'OperatorNode:add': {
      associativity: 'left',
      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
    },
    'OperatorNode:subtract': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //multiply, divide, modulus
    'OperatorNode:multiply': {
      associativity: 'left',
      associativeWith: [
        'OperatorNode:multiply',
        'OperatorNode:divide',
        'Operator:dotMultiply',
        'Operator:dotDivide'
      ]
    },
    'OperatorNode:divide': {
      associativity: 'left',
      associativeWith: [],
      latexLeftParens: false,
      latexRightParens: false,
      latexParens: false
      //fractions don't require parentheses because
      //they're 2 dimensional, so parens aren't needed
      //in LaTeX
    },
    'OperatorNode:dotMultiply': {
      associativity: 'left',
      associativeWith: [
        'OperatorNode:multiply',
        'OperatorNode:divide',
        'OperatorNode:dotMultiply',
        'OperatorNode:doDivide'
      ]
    },
    'OperatorNode:dotDivide': {
      associativity: 'left',
      associativeWith: []
    },
    'OperatorNode:mod': {
      associativity: 'left',
      associativeWith: []
    }
  },
  { //unary prefix operators
    'OperatorNode:unaryPlus': {
      associativity: 'right'
    },
    'OperatorNode:unaryMinus': {
      associativity: 'right'
    },
    'OperatorNode:bitNot': {
      associativity: 'right'
    },
    'OperatorNode:not': {
      associativity: 'right'
    }
  },
  { //exponentiation
    'OperatorNode:pow': {
      associativity: 'right',
      associativeWith: [],
      latexRightParens: false
      //the exponent doesn't need parentheses in
      //LaTeX because it's 2 dimensional
      //(it's on top)
    },
    'OperatorNode:dotPow': {
      associativity: 'right',
      associativeWith: []
    }
  },
  { //factorial
    'OperatorNode:factorial': {
      associativity: 'left'
    }
  },
  { //matrix transpose
    'OperatorNode:transpose': {
      associativity: 'left'
    }
  }
];

/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {number|null}
 */
function getPrecedence (_node, parenthesis) {
  var node = _node;
  if (parenthesis !== 'keep') {
    //ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }
  var identifier = node.getIdentifier();
  for (var i = 0; i < properties.length; i++) {
    if (identifier in properties[i]) {
      return i;
    }
  }
  return null;
}

/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */
function getAssociativity (_node, parenthesis) {
  var node = _node;
  if (parenthesis !== 'keep') {
    //ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }
  var identifier = node.getIdentifier();
  var index = getPrecedence(node, parenthesis);
  if (index === null) {
    //node isn't in the list
    return null;
  }
  var property = properties[index][identifier];

  if (property.hasOwnProperty('associativity')) {
    if (property.associativity === 'left') {
      return 'left';
    }
    if (property.associativity === 'right') {
      return 'right';
    }
    //associativity is invalid
    throw Error('\'' + identifier + '\' has the invalid associativity \''
                + property.associativity + '\'.');
  }

  //associativity is undefined
  return null;
}

/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {bool|null}
 */
function isAssociativeWith (nodeA, nodeB, parenthesis) {
  var a = nodeA;
  var b = nodeB;
  if (parenthesis !== 'keep') {
    //ParenthesisNodes are only ignored when not in 'keep' mode
    var a = nodeA.getContent();
    var b = nodeB.getContent();
  }
  var identifierA = a.getIdentifier();
  var identifierB = b.getIdentifier();
  var index = getPrecedence(a, parenthesis);
  if (index === null) {
    //node isn't in the list
    return null;
  }
  var property = properties[index][identifierA];

  if (property.hasOwnProperty('associativeWith')
      && (property.associativeWith instanceof Array)) {
    for (var i = 0; i < property.associativeWith.length; i++) {
      if (property.associativeWith[i] === identifierB) {
        return true;
      }
    }
    return false;
  }

  //associativeWith is not defined
  return null;
}

module.exports.properties = properties;
module.exports.getPrecedence = getPrecedence;
module.exports.getAssociativity = getAssociativity;
module.exports.isAssociativeWith = isAssociativeWith;

},{}],257:[function(require,module,exports){
'use strict';

var ArgumentsError = require('../error/ArgumentsError');
var deepMap = require('../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var AccessorNode            = load(require('./node/AccessorNode'));
  var ArrayNode               = load(require('./node/ArrayNode'));
  var AssignmentNode          = load(require('./node/AssignmentNode'));
  var BlockNode               = load(require('./node/BlockNode'));
  var ConditionalNode         = load(require('./node/ConditionalNode'));
  var ConstantNode            = load(require('./node/ConstantNode'));
  var FunctionAssignmentNode  = load(require('./node/FunctionAssignmentNode'));
  var IndexNode               = load(require('./node/IndexNode'));
  var ObjectNode              = load(require('./node/ObjectNode'));
  var OperatorNode            = load(require('./node/OperatorNode'));
  var ParenthesisNode         = load(require('./node/ParenthesisNode'));
  var FunctionNode            = load(require('./node/FunctionNode'));
  var RangeNode               = load(require('./node/RangeNode'));
  var SymbolNode              = load(require('./node/SymbolNode'));


  /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.eval();
   *
   * Syntax:
   *
   *     parse(expr)
   *     parse(expr, options)
   *     parse([expr1, expr2, expr3, ...])
   *     parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     var node = parse('sqrt(3^2 + 4^2)');
   *     node.compile(math).eval(); // 5
   *
   *     var scope = {a:3, b:4}
   *     var node = parse('a * b'); // 12
   *     var code = node.compile(math);
   *     code.eval(scope); // 12
   *     scope.a = 5;
   *     code.eval(scope); // 20
   *
   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
   *     nodes[2].compile(math).eval(); // 12
   *
   * @param {string | string[] | Matrix} expr
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
  function parse (expr, options) {
    if (arguments.length != 1 && arguments.length != 2) {
      throw new ArgumentsError('parse', arguments.length, 1, 2);
    }

    // pass extra nodes
    extra_nodes = (options && options.nodes) ? options.nodes : {};

    if (typeof expr === 'string') {
      // parse a single expression
      expression = expr;
      return parseStart();
    }
    else if (Array.isArray(expr) || expr instanceof type.Matrix) {
      // parse an array or matrix with expressions
      return deepMap(expr, function (elem) {
        if (typeof elem !== 'string') throw new TypeError('String expected');

        expression = elem;
        return parseStart();
      });
    }
    else {
      // oops
      throw new TypeError('String or matrix expected');
    }
  }

  // token types enumeration
  var TOKENTYPE = {
    NULL : 0,
    DELIMITER : 1,
    NUMBER : 2,
    SYMBOL : 3,
    UNKNOWN : 4
  };

  // map with all delimiters
  var DELIMITERS = {
    ',': true,
    '(': true,
    ')': true,
    '[': true,
    ']': true,
    '{': true,
    '}': true,
    '\"': true,
    ';': true,

    '+': true,
    '-': true,
    '*': true,
    '.*': true,
    '/': true,
    './': true,
    '%': true,
    '^': true,
    '.^': true,
    '~': true,
    '!': true,
    '&': true,
    '|': true,
    '^|': true,
    '\'': true,
    '=': true,
    ':': true,
    '?': true,

    '==': true,
    '!=': true,
    '<': true,
    '>': true,
    '<=': true,
    '>=': true,

    '<<': true,
    '>>': true,
    '>>>': true
  };

  // map with all named delimiters
  var NAMED_DELIMITERS = {
    'mod': true,
    'to': true,
    'in': true,
    'and': true,
    'xor': true,
    'or': true,
    'not': true
  };

  var extra_nodes = {};             // current extra nodes
  var expression = '';              // current expression
  var comment = '';                 // last parsed comment
  var index = 0;                    // current index in expr
  var c = '';                       // current token character in expr
  var token = '';                   // current token
  var token_type = TOKENTYPE.NULL;  // type of the token
  var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters
  var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here

  /**
   * Get the first character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */
  function first() {
    index = 0;
    c = expression.charAt(0);
    nesting_level = 0;
    conditional_level = null;
  }

  /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */
  function next() {
    index++;
    c = expression.charAt(index);
  }

  /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */
  function prevPreview() {
    return expression.charAt(index - 1);
  }

  /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */
  function nextPreview() {
    return expression.charAt(index + 1);
  }

  /**
   * Preview the second next character from the expression.
   * @return {string} cNext
   * @private
   */
  function nextNextPreview() {
    return expression.charAt(index + 2);
  }

  /**
   * Get next token in the current string expr.
   * The token and token type are available as token and token_type
   * @private
   */
  function getToken() {
    token_type = TOKENTYPE.NULL;
    token = '';
    comment = '';

    // skip over whitespaces
    // space, tab, and newline when inside parameters
    while (parse.isWhitespace(c, nesting_level)) {
      next();
    }

    // skip comment
    if (c == '#') {
      while (c != '\n' && c != '') {
        comment += c;
        next();
      }
    }

    // check for end of expression
    if (c == '') {
      // token is still empty
      token_type = TOKENTYPE.DELIMITER;
      return;
    }

    // check for new line character
    if (c == '\n' && !nesting_level) {
      token_type = TOKENTYPE.DELIMITER;
      token = c;
      next();
      return;
    }

    // check for delimiters consisting of 3 characters
    var c2 = c + nextPreview();
    var c3 = c2 + nextNextPreview();
    if (c3.length == 3 && DELIMITERS[c3]) {
      token_type = TOKENTYPE.DELIMITER;
      token = c3;
      next();
      next();
      next();
      return;
    }

    // check for delimiters consisting of 2 characters
    if (c2.length == 2 && DELIMITERS[c2]) {
      token_type = TOKENTYPE.DELIMITER;
      token = c2;
      next();
      next();
      return;
    }

    // check for delimiters consisting of 1 character
    if (DELIMITERS[c]) {
      token_type = TOKENTYPE.DELIMITER;
      token = c;
      next();
      return;
    }

    // check for a number
    if (parse.isDigitDot(c)) {
      token_type = TOKENTYPE.NUMBER;

      // get number, can have a single dot
      if (c == '.') {
        token += c;
        next();

        if (!parse.isDigit(c)) {
          // this is no number, it is just a dot (can be dot notation)
          token_type = TOKENTYPE.DELIMITER;
        }
      }
      else {
        while (parse.isDigit(c)) {
          token += c;
          next();
        }
        if (parse.isDecimalMark(c, nextPreview())) {
          token += c;
          next();
        }
      }
      while (parse.isDigit(c)) {
        token += c;
        next();
      }

      // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
      c2 = nextPreview();
      if (c == 'E' || c == 'e') {
        if (parse.isDigit(c2) || c2 == '-' || c2 == '+') {
          token += c;
          next();

          if (c == '+' || c == '-') {
            token += c;
            next();
          }

          // Scientific notation MUST be followed by an exponent
          if (!parse.isDigit(c)) {
            throw createSyntaxError('Digit expected, got "' + c + '"');
          }

          while (parse.isDigit(c)) {
            token += c;
            next();
          }

          if (parse.isDecimalMark(c, nextPreview())) {
            throw createSyntaxError('Digit expected, got "' + c + '"');
          }
        }
        else if (c2 == '.') {
          next();
          throw createSyntaxError('Digit expected, got "' + c + '"');
        }
      }

      return;
    }

    // check for variables, functions, named operators
    if (parse.isAlpha(c, prevPreview(), nextPreview())) {
      while (parse.isAlpha(c, prevPreview(), nextPreview()) || parse.isDigit(c)) {
        token += c;
        next();
      }

      if (NAMED_DELIMITERS.hasOwnProperty(token)) {
        token_type = TOKENTYPE.DELIMITER;
      }
      else {
        token_type = TOKENTYPE.SYMBOL;
      }

      return;
    }

    // something unknown is found, wrong characters -> a syntax error
    token_type = TOKENTYPE.UNKNOWN;
    while (c != '') {
      token += c;
      next();
    }
    throw createSyntaxError('Syntax error in part "' + token + '"');
  }

  /**
   * Get next token and skip newline tokens
   */
  function getTokenSkipNewline () {
    do {
      getToken();
    }
    while (token == '\n');
  }

  /**
   * Open parameters.
   * New line characters will be ignored until closeParams() is called
   */
  function openParams() {
    nesting_level++;
  }

  /**
   * Close parameters.
   * New line characters will no longer be ignored
   */
  function closeParams() {
    nesting_level--;
  }

  /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */
  parse.isAlpha = function isAlpha (c, cPrev, cNext) {
    return parse.isValidLatinOrGreek(c)
        || parse.isValidMathSymbol(c, cNext)
        || parse.isValidMathSymbol(cPrev, c);
  };

  /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */
  parse.isValidLatinOrGreek = function isValidLatinOrGreek (c) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
  };

  /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * http://unicode-table.com/en/
   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */
  parse.isValidMathSymbol = function isValidMathSymbol (high, low) {
    return /^[\uD835]$/.test(high) &&
        /^[\uDC00-\uDFFF]$/.test(low) &&
        /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
  };

  /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */
  parse.isWhitespace = function isWhitespace (c, nestingLevel) {
    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
    return c == ' ' || c == '\t' || (c == '\n' && nestingLevel > 0);
  };

  /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */
  parse.isDecimalMark = function isDecimalMark (c, cNext) {
    return c == '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
  };

  /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */
  parse.isDigitDot = function isDigitDot (c) {
    return ((c >= '0' && c <= '9') || c == '.');
  };

  /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */
  parse.isDigit = function isDigit (c) {
    return (c >= '0' && c <= '9');
  };

  /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */
  function parseStart () {
    // get the first character in expression
    first();

    getToken();

    var node = parseBlock();

    // check for garbage at the end of the expression
    // an expression ends with a empty character '' and token_type DELIMITER
    if (token != '') {
      if (token_type == TOKENTYPE.DELIMITER) {
        // user entered a not existing operator like "//"

        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean != ?"
        throw createError('Unexpected operator ' + token);
      }
      else {
        throw createSyntaxError('Unexpected part "' + token + '"');
      }
    }

    return node;
  }

  /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */
  function parseBlock () {
    var node;
    var blocks = [];
    var visible;

    if (token != '' && token != '\n' && token != ';') {
      node = parseAssignment();
      node.comment = comment;
    }

    // TODO: simplify this loop
    while (token == '\n' || token == ';') {
      if (blocks.length == 0 && node) {
        visible = (token != ';');
        blocks.push({
          node: node,
          visible: visible
        });
      }

      getToken();
      if (token != '\n' && token != ';' && token != '') {
        node = parseAssignment();
        node.comment = comment;

        visible = (token != ';');
        blocks.push({
          node: node,
          visible: visible
        });
      }
    }

    if (blocks.length > 0) {
      return new BlockNode(blocks);
    }
    else {
      if (!node) {
        node = new ConstantNode('undefined', 'undefined');
        node.comment = comment;
      }

      return node
    }
  }

  /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */
  function parseAssignment () {
    var name, args, value, valid;

    var node = parseConditional();

    if (token == '=') {
      if (type.isSymbolNode(node)) {
        // parse a variable assignment like 'a = 2/3'
        name = node.name;
        getTokenSkipNewline();
        value = parseAssignment();
        return new AssignmentNode(new SymbolNode(name), value);
      }
      else if (type.isAccessorNode(node)) {
        // parse a matrix subset assignment like 'A[1,2] = 4'
        getTokenSkipNewline();
        value = parseAssignment();
        return new AssignmentNode(node.object, node.index, value);
      }
      else if (type.isFunctionNode(node) && type.isSymbolNode(node.fn)) {
        // parse function assignment like 'f(x) = x^2'
        valid = true;
        args = [];

        name = node.name;
        node.args.forEach(function (arg, index) {
          if (type.isSymbolNode(arg)) {
            args[index] = arg.name;
          }
          else {
            valid = false;
          }
        });

        if (valid) {
          getTokenSkipNewline();
          value = parseAssignment();
          return new FunctionAssignmentNode(name, args, value);
        }
      }

      throw createSyntaxError('Invalid left hand side of assignment operator =');
    }

    return node;
  }

  /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */
  function parseConditional () {
    var node = parseLogicalOr();

    while (token == '?') {
      // set a conditional level, the range operator will be ignored as long
      // as conditional_level == nesting_level.
      var prev = conditional_level;
      conditional_level = nesting_level;
      getTokenSkipNewline();

      var condition = node;
      var trueExpr = parseAssignment();

      if (token != ':') throw createSyntaxError('False part of conditional expression expected');

      conditional_level = null;
      getTokenSkipNewline();

      var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity

      node = new ConditionalNode(condition, trueExpr, falseExpr);

      // restore the previous conditional level
      conditional_level = prev;
    }

    return node;
  }

  /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */
  function parseLogicalOr() {
    var node = parseLogicalXor();

    while (token == 'or') {
      getTokenSkipNewline();
      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);
    }

    return node;
  }

  /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */
  function parseLogicalXor() {
    var node = parseLogicalAnd();

    while (token == 'xor') {
      getTokenSkipNewline();
      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);
    }

    return node;
  }

  /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */
  function parseLogicalAnd() {
    var node = parseBitwiseOr();

    while (token == 'and') {
      getTokenSkipNewline();
      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);
    }

    return node;
  }

  /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */
  function parseBitwiseOr() {
    var node = parseBitwiseXor();

    while (token == '|') {
      getTokenSkipNewline();
      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);
    }

    return node;
  }

  /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */
  function parseBitwiseXor() {
    var node = parseBitwiseAnd();

    while (token == '^|') {
      getTokenSkipNewline();
      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);
    }

    return node;
  }

  /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */
  function parseBitwiseAnd () {
    var node = parseRelational();

    while (token == '&') {
      getTokenSkipNewline();
      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);
    }

    return node;
  }

  /**
   * relational operators
   * @return {Node} node
   * @private
   */
  function parseRelational () {
    var node, operators, name, fn, params;

    node = parseShift();

    operators = {
      '==': 'equal',
      '!=': 'unequal',
      '<': 'smaller',
      '>': 'larger',
      '<=': 'smallerEq',
      '>=': 'largerEq'
    };
    while (operators.hasOwnProperty(token)) {
      name = token;
      fn = operators[name];

      getTokenSkipNewline();
      params = [node, parseShift()];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }

  /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */
  function parseShift () {
    var node, operators, name, fn, params;

    node = parseConversion();

    operators = {
      '<<' : 'leftShift',
      '>>' : 'rightArithShift',
      '>>>' : 'rightLogShift'
    };

    while (operators.hasOwnProperty(token)) {
      name = token;
      fn = operators[name];

      getTokenSkipNewline();
      params = [node, parseConversion()];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }

  /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */
  function parseConversion () {
    var node, operators, name, fn, params;

    node = parseRange();

    operators = {
      'to' : 'to',
      'in' : 'to'   // alias of 'to'
    };

    while (operators.hasOwnProperty(token)) {
      name = token;
      fn = operators[name];

      getTokenSkipNewline();
      
      if (name === 'in' && token === '') {
        // end of expression -> this is the unit 'in' ('inch')
        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
      }
      else {
        // operator 'a to b' or 'a in b'
        params = [node, parseRange()];
        node = new OperatorNode(name, fn, params);
      }
    }

    return node;
  }

  /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */
  function parseRange () {
    var node, params = [];

    if (token == ':') {
      // implicit start=1 (one-based)
      node = new ConstantNode('1', 'number');
    }
    else {
      // explicit start
      node = parseAddSubtract();
    }

    if (token == ':' && (conditional_level !== nesting_level)) {
      // we ignore the range operator when a conditional operator is being processed on the same level
      params.push(node);

      // parse step and end
      while (token == ':' && params.length < 3) {
        getTokenSkipNewline();

        if (token == ')' || token == ']' || token == ',' || token == '') {
          // implicit end
          params.push(new SymbolNode('end'));
        }
        else {
          // explicit end
          params.push(parseAddSubtract());
        }
      }

      if (params.length == 3) {
        // params = [start, step, end]
        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
      }
      else { // length == 2
        // params = [start, end]
        node = new RangeNode(params[0], params[1]); // start, end
      }
    }

    return node;
  }

  /**
   * add or subtract
   * @return {Node} node
   * @private
   */
  function parseAddSubtract ()  {
    var node, operators, name, fn, params;

    node = parseMultiplyDivide();

    operators = {
      '+': 'add',
      '-': 'subtract'
    };
    while (operators.hasOwnProperty(token)) {
      name = token;
      fn = operators[name];

      getTokenSkipNewline();
      params = [node, parseMultiplyDivide()];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }

  /**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */
  function parseMultiplyDivide () {
    var node, last, operators, name, fn;

    node = parseUnary();
    last = node;

    operators = {
      '*': 'multiply',
      '.*': 'dotMultiply',
      '/': 'divide',
      './': 'dotDivide',
      '%': 'mod',
      'mod': 'mod'
    };

    while (true) {
      if (operators.hasOwnProperty(token)) {
        // explicit operators
        name = token;
        fn = operators[name];

        getTokenSkipNewline();

        last = parseUnary();
        node = new OperatorNode(name, fn, [node, last]);
      }
      else if ((token_type === TOKENTYPE.SYMBOL) ||
          (token === 'in' && type.isConstantNode(node)) ||
          (token_type === TOKENTYPE.NUMBER &&
              !type.isConstantNode(last) &&
              (!type.isOperatorNode(last) || last.op === '!')) ||
          (token === '(')) {
        // parse implicit multiplication
        //
        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
        // number:      implicit multiplication like '(2+3)2'
        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
        last = parseUnary();
        node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);
      }
      else {
        break;
      }
    }

    return node;
  }

  /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */
  function parseUnary () {
    var name, params, fn;
    var operators = {
      '-': 'unaryMinus',
      '+': 'unaryPlus',
      '~': 'bitNot',
      'not': 'not'
    };

    if (operators.hasOwnProperty(token)) {
      fn = operators[token];
      name = token;

      getTokenSkipNewline();
      params = [parseUnary()];

      return new OperatorNode(name, fn, params);
    }

    return parsePow();
  }

  /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */
  function parsePow () {
    var node, name, fn, params;

    node = parseLeftHandOperators();

    if (token == '^' || token == '.^') {
      name = token;
      fn = (name == '^') ? 'pow' : 'dotPow';

      getTokenSkipNewline();
      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }

  /**
   * Left hand operators: factorial x!, transpose x'
   * @return {Node} node
   * @private
   */
  function parseLeftHandOperators ()  {
    var node, operators, name, fn, params;

    node = parseCustomNodes();

    operators = {
      '!': 'factorial',
      '\'': 'transpose'
    };

    while (operators.hasOwnProperty(token)) {
      name = token;
      fn = operators[name];

      getToken();
      params = [node];

      node = new OperatorNode(name, fn, params);
      node = parseAccessors(node);
    }

    return node;
  }

  /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.expression.node.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     };
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params);
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes);
   *
   * @return {Node} node
   * @private
   */
  function parseCustomNodes () {
    var params = [];

    if (token_type == TOKENTYPE.SYMBOL && extra_nodes.hasOwnProperty(token)) {
      var CustomNode = extra_nodes[token];

      getToken();

      // parse parameters
      if (token == '(') {
        params = [];

        openParams();
        getToken();

        if (token != ')') {
          params.push(parseAssignment());

          // parse a list with parameters
          while (token == ',') {
            getToken();
            params.push(parseAssignment());
          }
        }

        if (token != ')') {
          throw createSyntaxError('Parenthesis ) expected');
        }
        closeParams();
        getToken();
      }

      // create a new custom node
      //noinspection JSValidateTypes
      return new CustomNode(params);
    }

    return parseSymbol();
  }

  /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */
  function parseSymbol () {
    var node, name;

    if (token_type == TOKENTYPE.SYMBOL ||
        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {
      name = token;

      getToken();

      // parse function parameters and matrix index
      node = new SymbolNode(name);
      node = parseAccessors(node);
      return node;
    }

    return parseString();
  }

  /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */
  function parseAccessors (node, types) {
    var params;

    while ((token === '(' || token === '[' || token === '.') &&
        (!types || types.indexOf(token) !== -1)) {
      params = [];

      if (token === '(') {
        if (type.isSymbolNode(node) || type.isAccessorNode(node) || type.isFunctionNode(node)) {
          // function invocation like fn(2, 3)
          openParams();
          getToken();

          if (token !== ')') {
            params.push(parseAssignment());

            // parse a list with parameters
            while (token === ',') {
              getToken();
              params.push(parseAssignment());
            }
          }

          if (token !== ')') {
            throw createSyntaxError('Parenthesis ) expected');
          }
          closeParams();
          getToken();

          node = new FunctionNode(node, params);
        }
        else {
          // implicit multiplication like (2+3)(4+5)
          // don't parse it here but let it be handled by parseMultiplyDivide
          // with correct precedence
          return node;
        }
      }
      else if (token === '[') {
        // index notation like variable[2, 3]
        openParams();
        getToken();

        if (token !== ']') {
          params.push(parseAssignment());

          // parse a list with parameters
          while (token === ',') {
            getToken();
            params.push(parseAssignment());
          }
        }

        if (token !== ']') {
          throw createSyntaxError('Parenthesis ] expected');
        }
        closeParams();
        getToken();

        node = new AccessorNode(node, new IndexNode(params));
      }
      else {
        // dot notation like variable.prop
        getToken();

        if (token_type !== TOKENTYPE.SYMBOL) {
          throw createSyntaxError('Property name expected after dot');
        }
        params.push(new ConstantNode(token));
        getToken();

        var dotNotation = true;
        node = new AccessorNode(node, new IndexNode(params, dotNotation));
      }
    }

    return node;
  }

  /**
   * parse a string.
   * A string is enclosed by double quotes
   * @return {Node} node
   * @private
   */
  function parseString () {
    var node, str;

    if (token == '"') {
      str = parseStringToken();

      // create constant
      node = new ConstantNode(str, 'string');

      // parse index parameters
      node = parseAccessors(node);

      return node;
    }

    return parseMatrix();
  }

  /**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */
  function parseStringToken () {
    var str = '';

    while (c != '' && c != '\"') {
      if (c == '\\') {
        // escape character
        str += c;
        next();
      }

      str += c;
      next();
    }

    getToken();
    if (token != '"') {
      throw createSyntaxError('End of string " expected');
    }
    getToken();

    return str;
  }

  /**
   * parse the matrix
   * @return {Node} node
   * @private
   */
  function parseMatrix () {
    var array, params, rows, cols;

    if (token == '[') {
      // matrix [...]
      openParams();
      getToken();

      if (token != ']') {
        // this is a non-empty matrix
        var row = parseRow();

        if (token == ';') {
          // 2 dimensional array
          rows = 1;
          params = [row];

          // the rows of the matrix are separated by dot-comma's
          while (token == ';') {
            getToken();

            params[rows] = parseRow();
            rows++;
          }

          if (token != ']') {
            throw createSyntaxError('End of matrix ] expected');
          }
          closeParams();
          getToken();

          // check if the number of columns matches in all rows
          cols = params[0].items.length;
          for (var r = 1; r < rows; r++) {
            if (params[r].items.length != cols) {
              throw createError('Column dimensions mismatch ' +
                  '(' + params[r].items.length + ' != ' + cols + ')');
            }
          }

          array = new ArrayNode(params);
        }
        else {
          // 1 dimensional vector
          if (token != ']') {
            throw createSyntaxError('End of matrix ] expected');
          }
          closeParams();
          getToken();

          array = row;
        }
      }
      else {
        // this is an empty matrix "[ ]"
        closeParams();
        getToken();
        array = new ArrayNode([]);
      }

      return parseAccessors(array);
    }

    return parseObject();
  }

  /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */
  function parseRow () {
    var params = [parseAssignment()];
    var len = 1;

    while (token == ',') {
      getToken();

      // parse expression
      params[len] = parseAssignment();
      len++;
    }

    return new ArrayNode(params);
  }

  /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */
  function parseObject () {
    if (token == '{') {
      var key;

      var properties = {};
      do {
        getToken();

        if (token != '}') {
          // parse key
          if (token == '"') {
            key = parseStringToken();
          }
          else if (token_type == TOKENTYPE.SYMBOL) {
            key = token;
            getToken();
          }
          else {
            throw createSyntaxError('Symbol or string expected as object key');
          }

          // parse key/value separator
          if (token != ':') {
            throw createSyntaxError('Colon : expected after object key');
          }
          getToken();

          // parse key
          properties[key] = parseAssignment();
        }
      }
      while (token == ',');

      if (token != '}') {
        throw createSyntaxError('Comma , or bracket } expected after object value');
      }
      getToken();

      var node = new ObjectNode(properties);

      // parse index parameters
      node = parseAccessors(node);

      return node;
    }

    return parseNumber();
  }

  /**
   * parse a number
   * @return {Node} node
   * @private
   */
  function parseNumber () {
    var number;

    if (token_type == TOKENTYPE.NUMBER) {
      // this is a number
      number = token;
      getToken();

      return new ConstantNode(number, 'number');
    }

    return parseParentheses();
  }

  /**
   * parentheses
   * @return {Node} node
   * @private
   */
  function parseParentheses () {
    var node;

    // check if it is a parenthesized expression
    if (token == '(') {
      // parentheses (...)
      openParams();
      getToken();

      node = parseAssignment(); // start again

      if (token != ')') {
        throw createSyntaxError('Parenthesis ) expected');
      }
      closeParams();
      getToken();

      node = new ParenthesisNode(node);
      node = parseAccessors(node);
      return node;
    }

    return parseEnd();
  }

  /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */
  function parseEnd () {
    if (token == '') {
      // syntax error or unexpected end of expression
      throw createSyntaxError('Unexpected end of expression');
    } else if (token === "'") {
      throw createSyntaxError('Value expected. Note: strings must be enclosed by double quotes');
    } else {
      throw createSyntaxError('Value expected');
    }
  }

  /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */
  /* TODO: implement keeping track on the row number
  function row () {
    return null;
  }
  */

  /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last token starts
   * @private
   */
  function col () {
    return index - token.length + 1;
  }

  /**
   * Create an error
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */
  function createSyntaxError (message) {
    var c = col();
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error['char'] = c;

    return error;
  }

  /**
   * Create an error
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */
  function createError (message) {
    var c = col();
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error['char'] = c;

    return error;
  }

  return parse;
}

exports.name = 'parse';
exports.path = 'expression';
exports.factory = factory;

},{"../error/ArgumentsError":26,"../utils/collection/deepMap":547,"./node/AccessorNode":235,"./node/ArrayNode":236,"./node/AssignmentNode":237,"./node/BlockNode":238,"./node/ConditionalNode":239,"./node/ConstantNode":240,"./node/FunctionAssignmentNode":241,"./node/FunctionNode":242,"./node/IndexNode":243,"./node/ObjectNode":245,"./node/OperatorNode":246,"./node/ParenthesisNode":247,"./node/RangeNode":248,"./node/SymbolNode":249}],258:[function(require,module,exports){
'use strict';

var errorTransform = require('./error.transform').transform;

/**
 * Attach a transform function to math.range
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function concat
 * from one-based to zero based
 */
function factory (type, config, load, typed) {
  var concat = load(require('../../function/matrix/concat'));

  // @see: comment of concat itself
 return typed('concat', {
    '...any': function (args) {
      // change last argument from one-based to zero-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];
      if (type.isNumber(last)) {
        args[lastIndex] = last - 1;
      }
      else if (type.isBigNumber(last)) {
        args[lastIndex] = last.minus(1);
      }

      try {
        return concat.apply(null, args);
      }
      catch (err) {
        throw errorTransform(err);
      }
    }
  });
}

exports.name = 'concat';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../function/matrix/concat":365,"./error.transform":259}],259:[function(require,module,exports){
var IndexError = require('../../error/IndexError');

/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error} Returns the transformed error
 */
exports.transform = function (err) {
  if (err && err.isIndexError) {
    return new IndexError(
        err.index + 1,
        err.min + 1,
        err.max !== undefined ? err.max + 1 : undefined);
  }

  return err;
};

},{"../../error/IndexError":28}],260:[function(require,module,exports){
'use strict';

var filter = require('../../utils/array').filter;
var filterRegExp = require('../../utils/array').filterRegExp;
var maxArgumentCount = require('../../utils/function').maxArgumentCount;

/**
 * Attach a transform function to math.filter
 * Adds a property transform containing the transform function.
 *
 * This transform adds support for equations as test function for math.filter,
 * so you can do something like 'filter([3, -2, 5], x > 0)'.
 */
function factory (type, config, load, typed) {
  var compileInlineExpression = load(require('./utils/compileInlineExpression'));
  var matrix = load(require('../../type/matrix/function/matrix'));

  function filterTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().eval(scope);
    }

    if (args[1]) {
      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction);
        callback = args[1].compile().eval(scope);
      }
      else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = compileInlineExpression(args[1], math, scope);
      }
    }

    return filter(x, callback);
  }
  filterTransform.rawArgs = true;

  // one based version of function filter
  var filter = typed('filter', {
    'Array, function': _filter,

    'Matrix, function': function (x, test) {
      return matrix(_filter(x.toArray(), test));
    },

    'Array, RegExp': filterRegExp,

    'Matrix, RegExp': function (x, test) {
      return matrix(filterRegExp(x.toArray(), test));
    }
  });

  filter.toTex = undefined; // use default template

  return filterTransform;
}

/**
 * Filter values in a callback given a callback function
 *
 * !!! Passes a one-based index !!!
 *
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */
function _filter (x, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  return filter(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    }
    else if (args === 2) {
      return callback(value, [index + 1]);
    }
    else { // 3 or -1
      return callback(value, [index + 1], array);
    }
  });
}

exports.name = 'filter';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/function":554,"./utils/compileInlineExpression":270}],261:[function(require,module,exports){
'use strict';

var maxArgumentCount = require('../../utils/function').maxArgumentCount;
var forEach = require('../../utils/array').forEach;

/**
 * Attach a transform function to math.forEach
 * Adds a property transform containing the transform function.
 *
 * This transform creates a one-based index instead of a zero-based index
 */
function factory (type, config, load, typed) {
  var compileInlineExpression = load(require('./utils/compileInlineExpression'));

  function forEachTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().eval(scope);
    }

    if (args[1]) {
        if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
        // a function pointer, like forEach([3, -2, 5], myTestFunction);
        callback = args[1].compile().eval(scope);
      }
      else {
        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
        callback = compileInlineExpression(args[1], math, scope);
      }
    }

    return _forEach(x, callback);
  }
  forEachTransform.rawArgs = true;

  // one-based version of forEach
  var _forEach = typed('forEach', {
    'Array | Matrix, function': function (array, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);

      var recurse = function (value, index) {
        if (Array.isArray(value)) {
          forEach(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i + 1)); // one based index, hence i+1
          });
        }
        else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          }
          else if (args === 2) {
            callback(value, index);
          }
          else { // 3 or -1
            callback(value, index, array);
          }
        }
      };
      recurse(array.valueOf(), []); // pass Array
    }
  });

  return forEachTransform;
}

exports.name = 'forEach';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../utils/array":532,"../../utils/function":554,"./utils/compileInlineExpression":270}],262:[function(require,module,exports){
module.exports = [
  require('./concat.transform'),
  require('./filter.transform'),
  require('./forEach.transform'),
  require('./index.transform'),
  require('./map.transform'),
  require('./max.transform'),
  require('./mean.transform'),
  require('./min.transform'),
  require('./range.transform'),
  require('./subset.transform')
];

},{"./concat.transform":258,"./filter.transform":260,"./forEach.transform":261,"./index.transform":263,"./map.transform":264,"./max.transform":265,"./mean.transform":266,"./min.transform":267,"./range.transform":268,"./subset.transform":269}],263:[function(require,module,exports){
'use strict';

/**
 * Attach a transform function to math.index
 * Adds a property transform containing the transform function.
 *
 * This transform creates a one-based index instead of a zero-based index
 */
function factory (type, config, load) {

  return function indexTransform() {
    var args = [];
    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i];

      // change from one-based to zero based, and convert BigNumber to number
      if (type.isRange(arg)) {
        arg.start--;
        arg.end -= (arg.step > 0 ? 0 : 2);
      }
      else if (arg && arg.isSet === true) {
        arg = arg.map(function (v) { return v - 1; });
      }
      else if (type.isArray(arg) || type.isMatrix(arg)) {
        arg = arg.map(function (v) { return v - 1; });
      }
      else if (type.isNumber(arg)) {
        arg--;
      }
      else if (type.isBigNumber(arg)) {
        arg = arg.toNumber() - 1;
      }
      else if (typeof arg === 'string') {
        // leave as is
      }
      else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      }

      args[i] = arg;
    }

    var res = new type.Index();
    type.Index.apply(res, args);
    return res;
  };
}

exports.name = 'index';
exports.path = 'expression.transform';
exports.factory = factory;

},{}],264:[function(require,module,exports){
'use strict';

var maxArgumentCount = require('../../utils/function').maxArgumentCount;
var map = require('../../utils/array').map;

/**
 * Attach a transform function to math.map
 * Adds a property transform containing the transform function.
 *
 * This transform creates a one-based index instead of a zero-based index
 */
function factory (type, config, load, typed) {
  var compileInlineExpression = load(require('./utils/compileInlineExpression'));
  var matrix = load(require('../../type/matrix/function/matrix'));

  function mapTransform(args, math, scope) {
    var x, callback;

    if (args[0]) {
      x = args[0].compile().eval(scope);
    }

    if (args[1]) {
      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction);
        callback = args[1].compile().eval(scope);
      }
      else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = compileInlineExpression(args[1], math, scope);
      }
    }

    return map(x, callback);
  }
  mapTransform.rawArgs = true;

  // one-based version of map function
  var map = typed('map', {
    'Array, function': function (x, callback) {
      return _map(x, callback, x);
    },

    'Matrix, function': function (x, callback) {
      return matrix(_map(x.valueOf(), callback, x));
    }
  });

  return mapTransform;
}

/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */
function _map (array, callback, orig) {
  // figure out what number of arguments the callback function expects
  var argsCount = maxArgumentCount(callback);

  function recurse(value, index) {
    if (Array.isArray(value)) {
      return map(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
      });
    }
    else {
      // invoke the (typed) callback function with the right number of arguments
      if (argsCount === 1) {
        return callback(value);
      }
      else if (argsCount === 2) {
        return callback(value, index);
      }
      else { // 3 or -1
        return callback(value, index, orig);
      }
    }
  }

  return recurse(array, []);
}

exports.name = 'map';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/function":554,"./utils/compileInlineExpression":270}],265:[function(require,module,exports){
'use strict';

var errorTransform = require('./error.transform').transform;
var isCollection = require('../../utils/collection/isCollection');

/**
 * Attach a transform function to math.max
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function max
 * from one-based to zero based
 */
function factory (type, config, load, typed) {
  var max = load(require('../../function/statistics/max'));

  return typed('max', {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length == 2 && isCollection(args[0])) {
        var dim = args[1];
        if (type.isNumber(dim)) {
          args[1] = dim - 1;
        }
        else if (type.isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return max.apply(null, args);
      }
      catch (err) {
        throw errorTransform(err);
      }
    }
  });
}

exports.name = 'max';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../function/statistics/max":428,"../../utils/collection/isCollection":548,"./error.transform":259}],266:[function(require,module,exports){
'use strict';

var errorTransform = require('./error.transform').transform;
var isCollection = require('../../utils/collection/isCollection');

/**
 * Attach a transform function to math.mean
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */
function factory (type, config, load, typed) {
  var mean = load(require('../../function/statistics/mean'));

  return typed('mean', {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length == 2 && isCollection(args[0])) {
        var dim = args[1];
        if (type.isNumber(dim)) {
          args[1] = dim - 1;
        }
        else if (type.isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return mean.apply(null, args);
      }
      catch (err) {
        throw errorTransform(err);
      }
    }
  });
}

exports.name = 'mean';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../function/statistics/mean":429,"../../utils/collection/isCollection":548,"./error.transform":259}],267:[function(require,module,exports){
'use strict';

var errorTransform = require('./error.transform').transform;
var isCollection = require('../../utils/collection/isCollection');

/**
 * Attach a transform function to math.min
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function min
 * from one-based to zero based
 */
function factory (type, config, load, typed) {
  var min = load(require('../../function/statistics/min'));

  return typed('min', {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length == 2 && isCollection(args[0])) {
        var dim = args[1];
        if (type.isNumber(dim)) {
          args[1] = dim - 1;
        }
        else if (type.isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return min.apply(null, args);
      }
      catch (err) {
        throw errorTransform(err);
      }
    }
  });
}

exports.name = 'min';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../function/statistics/min":431,"../../utils/collection/isCollection":548,"./error.transform":259}],268:[function(require,module,exports){
'use strict';

/**
 * Attach a transform function to math.range
 * Adds a property transform containing the transform function.
 *
 * This transform creates a range which includes the end value
 */
function factory (type, config, load, typed) {
  var range = load(require('../../function/matrix/range'));

  return typed('range', {
    '...any': function (args) {
      var lastIndex = args.length - 1;
      var last = args[lastIndex];
      if (typeof last !== 'boolean') {
        // append a parameter includeEnd=true
        args.push(true);
      }

      return range.apply(null, args);
    }
  });
}

exports.name = 'range';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../function/matrix/range":380}],269:[function(require,module,exports){
'use strict';

var errorTransform = require('./error.transform').transform;

/**
 * Attach a transform function to math.subset
 * Adds a property transform containing the transform function.
 *
 * This transform creates a range which includes the end value
 */
function factory (type, config, load, typed) {
  var subset = load(require('../../function/matrix/subset'));

  return typed('subset', {
    '...any': function (args) {
      try {
        return subset.apply(null, args);
      }
      catch (err) {
        throw errorTransform(err);
      }
    }
  });
}

exports.name = 'subset';
exports.path = 'expression.transform';
exports.factory = factory;

},{"../../function/matrix/subset":386,"./error.transform":259}],270:[function(require,module,exports){
function factory (type, config, load, typed) {
  /**
   * Compile an inline expression like "x > 0"
   * @param {Node} expression
   * @param {Object} math
   * @param {Object} scope
   * @return {function} Returns a function with one argument which fills in the
   *                    undefined variable (like "x") and evaluates the expression
   */
  return function compileInlineExpression(expression, math, scope) {
    // find an undefined symbol
    var symbol = expression.filter(function (node) {
      return type.isSymbolNode(node) &&
          !(node.name in math) &&
          !(node.name in scope);
    })[0];

    if (!symbol) {
      throw new Error('No undefined variable found in inline expression "' + expression + '"');
    }

    // create a test function for this equation
    var name = symbol.name; // variable name
    var subScope = Object.create(scope);
    var eq = expression.compile();
    return function inlineExpression(x) {
      subScope[name] = x;
      return eq.eval(subScope);
    }
  };
}

exports.factory = factory;

},{}],271:[function(require,module,exports){
'use strict';

var util = require('../../../utils/index');

var object = util.object;

function factory (type, config, load, typed) {

  var matrix = load(require('../../../type/matrix/function/matrix'));
  var abs = load(require('../../arithmetic/abs'));
  var addScalar = load(require('../../arithmetic/addScalar'));
  var divideScalar = load(require('../../arithmetic/divideScalar'));
  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));
  var subtract = load(require('../../arithmetic/subtract'));
  var larger = load(require('../../relational/larger'));
  var equalScalar = load(require('../../relational/equalScalar'));
  var unaryMinus = load(require('../../arithmetic/unaryMinus'));
  
  var SparseMatrix = type.SparseMatrix;
  var DenseMatrix = type.DenseMatrix;
  var Spa = type.Spa;
  
  /**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A);
   *
   * Example:
   *
   *    var m = [[2, 1], [1, 4]];
   *    var r = math.lup(m);
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */
  var lup = typed('lup', {

    'DenseMatrix': function (m) {
      return _denseLUP(m);
    },
    
    'SparseMatrix': function (m) {
      return _sparseLUP(m);
    },

    'Array': function (a) {
      // create dense matrix from array
      var m = matrix(a);
      // lup, use matrix implementation
      var r = _denseLUP(m);
      // result
      return {
        L: r.L.valueOf(),
        U: r.U.valueOf(),
        p: r.p
      };
    }
  });

  var _denseLUP = function (m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1];
    // minimum rows and columns
    var n = Math.min(rows, columns);
    // matrix array, clone original data
    var data = object.clone(m._data);
    // l matrix arrays
    var ldata = [];
    var lsize = [rows, n];
    // u matrix arrays
    var udata = [];
    var usize = [n, columns];
    // vars
    var i, j, k;
    // permutation vector    
    var p = [];
    for (i = 0; i < rows; i++)
      p[i] = i;    
    // loop columns
    for (j = 0; j < columns; j++) {
      // skip first column in upper triangular matrix
      if (j > 0) {
        // loop rows
        for (i = 0; i < rows; i++) {
          // min i,j
          var min = Math.min(i, j);
          // v[i, j]
          var s = 0;
          // loop up to min
          for (k = 0; k < min; k++) {
            // s = l[i, k] - data[k, j]
            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
          }
          data[i][j] = subtract(data[i][j], s);
        }
      }      
      // row with larger value in cvector, row >= j
      var pi = j;
      var pabsv = 0;
      var vjj = 0;
      // loop rows
      for (i = j; i < rows; i++) {
        // data @ i, j
        var v = data[i][j];
        // absolute value
        var absv = abs(v);
        // value is greater than pivote value
        if (larger(absv, pabsv)) {
          // store row
          pi = i;
          // update max value
          pabsv = absv;
          // value @ [j, j]
          vjj = v;
        }
      }
      // swap rows (j <-> pi)
      if (j !== pi) {
        // swap values j <-> pi in p
        p[j] = [p[pi], p[pi] = p[j]][0];
        // swap j <-> pi in data
        DenseMatrix._swapRows(j, pi, data);
      }
      // check column is in lower triangular matrix
      if (j < rows) {
        // loop rows (lower triangular matrix)
        for (i = j + 1; i < rows; i++) {
          // value @ i, j
          var vij = data[i][j];
          if (!equalScalar(vij, 0)) {
            // update data
            data[i][j] = divideScalar(data[i][j], vjj);
          }
        }
      }
    }
    // loop columns
    for (j = 0; j < columns; j++) {
      // loop rows
      for (i = 0; i < rows; i++) {
        // initialize row in arrays
        if (j === 0) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i] = [];
          }
          // L
          ldata[i] = [];
        }
        // check we are in the upper triangular matrix
        if (i < j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          }
          // check column exists in lower triangular matrix
          if (j < rows) {
            // L
            ldata[i][j] = 0;
          }
          continue;
        }
        // diagonal value
        if (i === j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          }
          // check column exists in lower triangular matrix
          if (j < rows) {
            // L
            ldata[i][j] = 1;
          }
          continue;
        }
        // check row exists in upper triangular matrix
        if (i < columns) {
          // U
          udata[i][j] = 0;
        }
        // check column exists in lower triangular matrix
        if (j < rows) {
          // L
          ldata[i][j] = data[i][j];
        }
      }
    }
    // l matrix
    var l =  new DenseMatrix({
      data: ldata,
      size: lsize
    });
    // u matrix
    var u =  new DenseMatrix({
      data: udata,
      size: usize
    });
    // p vector
    var pv = [];
    for (i = 0, n = p.length; i < n; i++)
      pv[p[i]] = i;
    // return matrices
    return { 
      L: l, 
      U: u, 
      p: pv, 
      toString: function () {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  };
  
  var _sparseLUP = function (m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1];
    // minimum rows and columns
    var n = Math.min(rows, columns);
    // matrix arrays (will not be modified, thanks to permutation vector)
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    // l matrix arrays
    var lvalues = [];
    var lindex = [];
    var lptr = [];
    var lsize = [rows, n];
    // u matrix arrays
    var uvalues = [];
    var uindex = [];
    var uptr = [];
    var usize = [n, columns];
    // vars
    var i, j, k;
    // permutation vectors, (current index -> original index) and (original index -> current index)
    var pv_co = [];
    var pv_oc = [];
    for (i = 0; i < rows; i++) {
      pv_co[i] = i;
      pv_oc[i] = i;
    }
    // swap indices in permutation vectors (condition x < y)!
    var swapIndeces = function (x, y) {      
      // find pv indeces getting data from x and y
      var kx = pv_oc[x];
      var ky = pv_oc[y];
      // update permutation vector current -> original
      pv_co[kx] = y;
      pv_co[ky] = x;
      // update permutation vector original -> current
      pv_oc[x] = ky;
      pv_oc[y] = kx;
    };
    // loop columns
    for (j = 0; j < columns; j++) {
      // sparse accumulator
      var spa = new Spa();            
      // check lower triangular matrix has a value @ column j
      if (j < rows) {
        // update ptr
        lptr.push(lvalues.length);
        // first value in j column for lower triangular matrix
        lvalues.push(1);
        lindex.push(j);
      }
      // update ptr
      uptr.push(uvalues.length);
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1];
      // copy column j into sparse accumulator
      for (k = k0; k < k1; k++) {
        // row
        i = index[k];
        // copy column values into sparse accumulator (use permutation vector)
        spa.set(pv_co[i], values[k]);
      }
      // skip first column in upper triangular matrix
      if (j > 0) {
        // loop rows in column j (above diagonal)
        spa.forEach(0, j - 1, function (k, vkj) {
          // loop rows in column k (L)
          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
            // check row is below k
            if (i > k) {
              // update spa value
              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
            }
          });
        });        
      }
      // row with larger value in spa, row >= j
      var pi = j;
      var vjj = spa.get(j);
      var pabsv = abs(vjj);      
      // loop values in spa (order by row, below diagonal)
      spa.forEach(j + 1, rows - 1, function (x, v) {
        // absolute value
        var absv = abs(v);
        // value is greater than pivote value
        if (larger(absv, pabsv)) {
          // store row
          pi = x;
          // update max value
          pabsv = absv;
          // value @ [j, j]
          vjj = v;
        }
      });
      // swap rows (j <-> pi)
      if (j !== pi) {
        // swap values j <-> pi in L
        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
        // swap values j <-> pi in U
        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
        // swap values in spa
        spa.swap(j, pi);
        // update permutation vector (swap values @ j, pi)
        swapIndeces(j, pi);
      }
      // loop values in spa (order by row)
      spa.forEach(0, rows - 1, function (x, v) {
        // check we are above diagonal
        if (x <= j) {
          // update upper triangular matrix
          uvalues.push(v);
          uindex.push(x);
        }
        else {
          // update value
          v = divideScalar(v, vjj);
          // check value is non zero
          if (!equalScalar(v, 0)) {
            // update lower triangular matrix
            lvalues.push(v);
            lindex.push(x);
          }
        }
      });
    }
    // update ptrs
    uptr.push(uvalues.length);
    lptr.push(lvalues.length);

    // return matrices
    return {
      L: new SparseMatrix({
        values: lvalues,
        index: lindex,
        ptr: lptr,
        size: lsize
      }), 
      U: new SparseMatrix({
        values: uvalues,
        index: uindex,
        ptr: uptr,
        size: usize
      }),
      p: pv_co,
      toString: function () {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  };
  
  return lup;
}

exports.name = 'lup';
exports.factory = factory;

},{"../../../type/matrix/function/matrix":505,"../../../utils/index":555,"../../arithmetic/abs":304,"../../arithmetic/addScalar":306,"../../arithmetic/divideScalar":311,"../../arithmetic/multiplyScalar":326,"../../arithmetic/subtract":334,"../../arithmetic/unaryMinus":335,"../../relational/equalScalar":406,"../../relational/larger":408}],272:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../../type/matrix/function/matrix'));
  var zeros = load(require('../../matrix/zeros'));
  var eye = load(require('../../matrix/eye'));
  var clone = load(require('../../utils/clone'));
  
  var isZero = load(require('../../utils/isZero'));
  var isPositive = load(require('../../utils/isPositive'));
  var unequal = load(require('../../relational/unequal'));
    
  var abs = load(require('../../arithmetic/abs'));
  var sign = load(require('../../arithmetic/sign'));
  var sqrt = load(require('../../arithmetic/sqrt'));
  var conj = load(require('../../complex/conj'));
  
  var unaryMinus = load(require('../../arithmetic/unaryMinus')); 
  var addScalar = load(require('../../arithmetic/addScalar'));  
  var divideScalar = load(require('../../arithmetic/divideScalar'));
  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));  
  var subtract = load(require('../../arithmetic/subtract'));
    
  
  /**
   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in 
   * two matrices (`Q`, `R`) where `Q` is an 
   * orthogonal matrix and `R` is an upper triangular matrix.
   *
   * Syntax:
   *
   *    math.qr(A);
   *
   * Example:
   *
   *    var m = [
   *      [1, -1,  4],
   *      [1,  4, -2],
   *      [1,  4,  2],
   *      [1,  -1, 0]
   *    ];
   *    var result = math.qr(m);
   *    // r = {
   *    //   Q: [
   *    //     [0.5, -0.5,   0.5],
   *    //     [0.5,  0.5,  -0.5],
   *    //     [0.5,  0.5,   0.5],
   *    //     [0.5, -0.5,  -0.5],
   *    //   ],
   *    //   R: [
   *    //     [2, 3,  2],
   *    //     [0, 5, -2],
   *    //     [0, 0,  4],
   *    //     [0, 0,  0]
   *    //   ]
   *    // }
   *
   * See also:
   *
   *    lu
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array 
   * for which to get the QR decomposition.
   *
   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
   * matrix and R: the upper triangular matrix
   */
  var qr = typed('qr', {

    'DenseMatrix': function (m) {
      return _denseQR(m);
    },
    
    'SparseMatrix': function (m) {
      return _sparseQR(m);
    },

    'Array': function (a) {
      // create dense matrix from array
      var m = matrix(a);
      // lup, use matrix implementation
      var r = _denseQR(m);
      // result
      return {
        Q: r.Q.valueOf(),
        R: r.R.valueOf()
      };
    }
  });

  var _denseQR = function (m) {
    
    // rows & columns (m x n)
    var rows = m._size[0]; // m
    var cols = m._size[1]; // n
            
    var Q = eye([rows], 'dense');
    var Qdata = Q._data;
    
    var R = m.clone();
    var Rdata = R._data;
    
    // vars
    var i, j, k;
        
    var w = zeros([rows], '');
    
    for (k = 0; k < Math.min(cols, rows); ++k) {
      
      /*
       * **k-th Household matrix**
       *
       * The matrix I - 2*v*transpose(v)
       * x     = first column of A
       * x1    = first element of x
       * alpha = x1 / |x1| * |x|
       * e1    = tranpose([1, 0, 0, ...])
       * u     = x - alpha * e1
       * v     = u / |u|
       *
       * Household matrix = I - 2 * v * tranpose(v)
       *
       *  * Initially Q = I and R = A.
       *  * Household matrix is a reflection in a plane normal to v which 
       *    will zero out all but the top right element in R.
       *  * Appplying reflection to both Q and R will not change product.
       *  * Repeat this process on the (1,1) minor to get R as an upper 
       *    triangular matrix.
       *  * Reflections leave the magnitude of the columns of Q unchanged 
       *    so Q remains othoganal.
       *
       */  
      
      var pivot = Rdata[k][k];          
      var sgn = unaryMinus(sign(pivot));
      var conjSgn = conj(sgn);
      
      var alphaSquared = 0;

      for(i = k; i < rows; i++) {
        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));        
      }
      
      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));
      
      
      if (!isZero(alpha)) {
          
        // first element in vector u
        var u1 = subtract(pivot, alpha);
        
        // w = v * u1 / |u|    (only elements k to (rows-1) are used)    
        w[k] = 1;
        
        for (i = k+1; i < rows; i++) {
          w[i] = divideScalar(Rdata[i][k], u1);
        }        
         
        // tau = - conj(u1 / alpha)
        var tau = unaryMinus(conj(divideScalar(u1, alpha)));
        
        var s;
        
        /*
         * tau and w have been choosen so that
         * 
         * 2 * v * tranpose(v) = tau * w * tranpose(w)
         */
         
        /*
         * -- calculate R = R - tau * w * tranpose(w) * R --
         * Only do calculation with rows k to (rows-1)
         * Additionally columns 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */
        for (j = k; j < cols; j++) {
          s = 0.0;
          
          // calculate jth element of [tranpose(w) * R]
          for (i = k; i < rows; i++) {
            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
          }
          
          // calculate the jth element of [tau * transpose(w) * R]
          s = multiplyScalar(s, tau);
          
          for (i = k; i < rows; i++) {
            Rdata[i][j] = multiplyScalar(
              subtract(Rdata[i][j], multiplyScalar(w[i], s)), 
              conjSgn
            );            
          }          
        }
        /*
         * -- calculate Q = Q - tau * Q * w * transpose(w) --
         * Q is a square matrix (rows x rows)
         * Only do calculation with columns k to (rows-1)
         * Additionally rows 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */
        for (i = 0; i < rows; i++) {
          s = 0.0;
          
          // calculate ith element of [Q * w]
          for (j = k; j < rows; j++) {
            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
          }
          
          // calculate the ith element of [tau * Q * w]
          s = multiplyScalar(s, tau);
          
          for (j = k; j < rows; ++j) {
            Qdata[i][j] = divideScalar(
              subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), 
              conjSgn
            );
          }
          
        }
      }
      
    }
    
    // coerse almost zero elements to zero
    // TODO I feel uneasy just zeroing these values
    for (i = 0; i < rows; ++i) {
      for (j = 0; j < i && j < cols; ++j) {
        if (unequal(0, divideScalar(Rdata[i][j], 1e5))) {
          throw new Error('math.qr(): unknown error - ' + 
           'R is not lower triangular (element (' + 
            i + ', ' + j + ')  = ' + Rdata[i][j] + ')'
          );
        }
        Rdata[i][j] = multiplyScalar(Rdata[i][j], 0);
      }
    }
    
    // return matrices
    return { 
      Q: Q,
      R: R,
      toString: function () {
        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
      }
    };
  };
  
  var _sparseQR = function (m) {
    
    throw new Error('qr not implemented for sparse matrices yet');
  
  };
  
  return qr;
}

exports.name = 'qr';
exports.factory = factory;

},{"../../../type/matrix/function/matrix":505,"../../arithmetic/abs":304,"../../arithmetic/addScalar":306,"../../arithmetic/divideScalar":311,"../../arithmetic/multiplyScalar":326,"../../arithmetic/sign":331,"../../arithmetic/sqrt":332,"../../arithmetic/subtract":334,"../../arithmetic/unaryMinus":335,"../../complex/conj":352,"../../matrix/eye":370,"../../matrix/zeros":389,"../../relational/unequal":412,"../../utils/clone":469,"../../utils/isPositive":475,"../../utils/isZero":477}],273:[function(require,module,exports){
'use strict';

var util = require('../../../utils/index');

var number = util.number,
    
    isInteger = number.isInteger;

function factory (type, config, load, typed) {

  var cs_sqr = load(require('../../algebra/sparse/cs_sqr'));
  var cs_lu = load(require('../../algebra/sparse/cs_lu'));

  /**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold);
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. 
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */
  var slu = typed('slu', {

    'SparseMatrix, number, number': function (a, order, threshold) {
      // verify order
      if (!isInteger(order) || order < 0 || order > 3)
        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
      // verify threshold
      if (threshold < 0 || threshold > 1)
        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
      
      // perform symbolic ordering and analysis
      var s = cs_sqr(order, a, false);
      
      // perform lu decomposition
      var f = cs_lu(a, s, threshold);
      
      // return decomposition
      return {
        L: f.L,
        U: f.U,
        p: f.pinv,
        q: s.q,
        toString: function () {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
        }
      };
    }
  });

  return slu;
}

exports.name = 'slu';
exports.factory = factory;

},{"../../../utils/index":555,"../../algebra/sparse/cs_lu":294,"../../algebra/sparse/cs_sqr":301}],274:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var parse = load(require('../../expression/parse'));
  var simplify = load(require('./simplify'));
  var ConstantNode = load(require('../../expression/node/ConstantNode'));
  var FunctionNode = load(require('../../expression/node/FunctionNode'));
  var OperatorNode = load(require('../../expression/node/OperatorNode'));
  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));
  var SymbolNode = load(require('../../expression/node/SymbolNode'));

  /**
   * Takes the derivative of an expression expressed in parser Nodes.
   * The derivative will be taken over the supplied variable in the
   * second parameter. If there are multiple variables in the expression,
   * it will return a partial derivative.
   *
   * This uses rules of differentiation which can be found here:
   *
   * - [Differentiation rules (Wikipedia)](http://en.wikipedia.org/wiki/Differentiation_rules)
   *
   * Syntax:
   *
   *     derivative(expr, variable)
   *     derivative(expr, variable, options)
   *
   * Examples:
   *
   *     math.derivative('x^2', 'x');                     // Node {2 * x}
   *     math.derivative('x^2', 'x', {simplify: false});  // Node {2 * 1 * x ^ (2 - 1)
   *     math.derivative('sin(2x)', 'x'));                // Node {2 * cos(2 * x)}
   *     math.derivative('2*x', 'x').eval();              // number 2
   *     math.derivative('x^2', 'x').eval({x: 4});        // number 8
   *     var f = math.parse('x^2');
   *     var x = math.parse('x');
   *     math.derivative(f, x);                           // Node {2 * x}
   *
   * See also:
   *
   *     simplify, parse, eval
   *
   * @param  {Node | string} expr           The expression to differentiate
   * @param  {SymbolNode | string} variable The variable over which to differentiate
   * @param  {{simplify: boolean}} [options]
   *                         There is one option available, `simplify`, which
   *                         is true by default. When false, output will not
   *                         be simplified.
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */
  var derivative = typed('derivative', {
    'Node, SymbolNode, Object': function (expr, variable, options) {
      var constNodes = {};
      constTag(constNodes, expr, variable.name);
      var res = _derivative(expr, constNodes);
      return options.simplify ? simplify(res) : res;
    },
    'Node, SymbolNode': function (expr, variable) {
      return derivative(expr, variable, {simplify: true})
    },

    'string, SymbolNode': function (expr, variable) {
      return derivative(parse(expr), variable)
    },
    'string, SymbolNode, Object': function (expr, variable, options) {
      return derivative(parse(expr), variable, options)
    },

    'string, string': function (expr, variable) {
      return derivative(parse(expr), parse(variable))
    },
    'string, string, Object': function (expr, variable, options) {
      return derivative(parse(expr), parse(variable), options)
    },

    'Node, string': function (expr, variable) {
      return derivative(expr, parse(variable))
    },
    'Node, string, Object': function (expr, variable, options) {
      return derivative(expr, parse(variable), options)
    }

    // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      var res = expr;
      for (var i = 0; i < order; i++) {
        var constNodes = {};
        constTag(constNodes, expr, variable.name);
        res = _derivative(res, constNodes);
      }
      return res;
    }
    */
  });

  derivative._simplify = true

  derivative.toTex = function(deriv) {
    return _derivTex.apply(null, deriv.args);
  }

  var _derivTex = typed('_derivTex', {
    'Node, SymbolNode': function (expr, x) {
      return _derivTex(expr.toString(), x.toString(), 1);
    },
    'Node, SymbolNode, ConstantNode': function (expr, x, order) {
      return _derivTex(expr.toString(), x.name, order.value);
    },
    'string, string, number': function (expr, x, order) {
      var d;
      if (order === 1) {
        d = "{d\\over d" + x + "}";
      }
      else {
        d = "{d^{" + order + "}\\over d" + x + "^{" + order + "}}";
      }
      return d + "\\left[" + expr + "\\right]"
    }
  });

  /**
   * Does a depth-first search on the expression tree to identify what Nodes
   * are constants (e.g. 2 + 2), and stores the ones that are constants in
   * constNodes. Classification is done as follows:
   *
   *   1. ConstantNodes are constants.
   *   2. If there exists a SymbolNode, of which we are differentiating over,
   *      in the subtree it is not constant.
   *
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {string} varName     Variable that we are differentiating
   * @return {boolean}  if node is constant
   */
  // TODO: can we rewrite constTag into a pure function?
  var constTag = typed('constTag', {
    'Object, ConstantNode, string': function (constNodes, node) {
      return constNodes[node] = true;
    },

    'Object, SymbolNode, string': function (constNodes, node, varName) {
      // Treat other variables like constants. For reasoning, see:
      //   https://en.wikipedia.org/wiki/Partial_derivative
      if (node.name != varName) {
        return constNodes[node] = true;
      }
      return false;
    },

    'Object, ParenthesisNode, string': function (constNodes, node, varName) {
      return constTag(constNodes, node.content, varName);
    },

    'Object, FunctionAssignmentNode, string': function (constNodes, node, varName) {
      if (node.params.indexOf(varName) == -1) {
        return constNodes[node] = true;
      }
      return constTag(constNodes, node.expr, varName);
    },

    'Object, FunctionNode | OperatorNode, string': function (constNodes, node, varName) {
      if (node.args.length != 0) {
        var isConst = constTag(constNodes, node.args[0], varName);
        for (var i = 1; i < node.args.length; ++i) {
          isConst = constTag(constNodes, node.args[i], varName) && isConst;
        }

        if (isConst) {
          return constNodes[node] = true;
        }
      }
      return false;
    }
  });

  /**
   * Applies differentiation rules.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */
  var _derivative = typed('_derivative', {
    'ConstantNode, Object': function (node) {
       return new ConstantNode('0', node.valueType);
    },

    'SymbolNode, Object': function (node, constNodes) {
      if (constNodes[node] !== undefined) {
        return new ConstantNode('0', config.number);
      }
      return new ConstantNode('1', config.number);
    },

    'ParenthesisNode, Object': function (node, constNodes) {
      return new ParenthesisNode(_derivative(node.content, constNodes));
    },

    'FunctionAssignmentNode, Object': function (node, constNodes) {
      if (constNodes[node] !== undefined) {
        return new ConstantNode('0', config.number);
      }
      return _derivative(node.expr, constNodes);
    },

    'FunctionNode, Object': function (node, constNodes) {
      if (node.args.length != 1) {
        funcArgsCheck(node);
      }

      if (constNodes[node] !== undefined) {
        return new ConstantNode('0', config.number);
      }

      var arg1 = node.args[0];
      var arg2;

      var div = false;       // is output a fraction?
      var negative = false;  // is output negative?

      var funcDerivative;
      switch (node.name) {
        case 'cbrt':
          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            new ConstantNode('3', config.number),
            new OperatorNode('^', 'pow', [
              arg1,
              new OperatorNode('/', 'divide', [
                new ConstantNode('2', config.number),
                new ConstantNode('3', config.number)
              ])
            ])
          ]);
          break;
        case 'sqrt':
        case 'nthRoot':
          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
          if (node.args.length == 1) {
            div = true;
            funcDerivative = new OperatorNode('*', 'multiply', [
              new ConstantNode('2', config.number),
              new FunctionNode('sqrt', [arg1])
            ]);
            break;
          }

          // Rearrange from nthRoot(x, a) -> x^(1/a)
          arg2 = new OperatorNode('/', 'divide', [
            new ConstantNode('1', config.number),
            node.args[1]
          ]);

          // Is a variable?
          constNodes[arg2] = constNodes[node.args[1]];

          return _derivative(new OperatorNode('^', 'pow', [arg1, arg2]), constNodes);
        case 'log10':
          arg2 = new ConstantNode('10', config.number);
        case 'log':
          if (!arg2 && node.args.length == 1) {
            // d/dx(log(x)) = 1 / x
            funcDerivative = arg1.clone();
          } else if (arg2 || constNodes[node.args[1]] !== undefined) {
            // d/dx(log(x, c)) = 1 / (x*ln(c))
            funcDerivative = new OperatorNode('*', 'multiply', [
              arg1.clone(),
              new FunctionNode('log', [arg2 || node.args[1]])
            ]);
          } else {
            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
            return _derivative(new OperatorNode('/', 'divide', [
                new FunctionNode('log', [arg1]),
                new FunctionNode('log', [node.args[1]])
              ]), constNodes);
          }

          div = true;
          break;
        case 'exp':
          // d/dx(e^x) = e^x
          funcDerivative = new FunctionNode('exp', [arg1.clone()]);
          break;
        case 'sin':
          // d/dx(sin(x)) = cos(x)
          funcDerivative = new FunctionNode('cos', [arg1.clone()]);
          break;
        case 'cos':
          // d/dx(cos(x)) = -sin(x)
          funcDerivative = new OperatorNode('-', 'unaryMinus', [
            new FunctionNode('sin', [arg1.clone()])
          ]);
          break;
        case 'tan':
          // d/dx(tan(x)) = sec(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [
            new FunctionNode('sec', [arg1.clone()]),
            new ConstantNode('2', config.number)
          ]);
          break;
        case 'sec':
          // d/dx(sec(x)) = sec(x)tan(x)
          funcDerivative = new OperatorNode('*', 'multiply', [
            node,
            new FunctionNode('tan', [arg1.clone()])
          ]);
          break;
        case 'csc':
          // d/dx(csc(x)) = -csc(x)cot(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            node,
            new FunctionNode('cot', [arg1.clone()])
          ]);
          break;
        case 'cot':
          // d/dx(cot(x)) = -csc(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [
            new FunctionNode('csc', [arg1.clone()]),
            new ConstantNode('2', config.number)
          ]);
          break;
        case 'asin':
          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [
            new OperatorNode('-', 'subtract', [
              new ConstantNode('1', config.number),
              new OperatorNode('^', 'pow', [
                arg1.clone(),
                new ConstantNode('2', config.number)
              ])
            ])
          ]);
          break;
        case 'acos':
          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new FunctionNode('sqrt', [
            new OperatorNode('-', 'subtract', [
              new ConstantNode('1', config.number),
              new OperatorNode('^', 'pow', [
                arg1.clone(),
                new ConstantNode('2', config.number)
              ])
            ])
          ]);
          break;
        case 'atan':
          // d/dx(atan(x)) = 1 / (x^2 + 1)
          div = true;
          funcDerivative = new OperatorNode('+', 'add', [
            new OperatorNode('^', 'pow', [
              arg1.clone(),
              new ConstantNode('2', config.number)
            ]),
            new ConstantNode('1', config.number)
          ]);
          break;
        case 'asec':
          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            new FunctionNode('abs', [arg1.clone()]),
            new FunctionNode('sqrt', [
              new OperatorNode('-', 'subtract', [
                new OperatorNode('^', 'pow', [
                  arg1.clone(),
                  new ConstantNode('2', config.number)
                ]),
                new ConstantNode('1', config.number)
              ])
            ])
          ]);
          break;
        case 'acsc':
          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            new FunctionNode('abs', [arg1.clone()]),
            new FunctionNode('sqrt', [
              new OperatorNode('-', 'subtract', [
                new OperatorNode('^', 'pow', [
                  arg1.clone(),
                  new ConstantNode('2', config.number)
                ]),
                new ConstantNode('1', config.number)
              ])
            ])
          ]);
          break;
        case 'acot':
          // d/dx(acot(x)) = -1 / (x^2 + 1)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('+', 'add', [
            new OperatorNode('^', 'pow', [
              arg1.clone(),
              new ConstantNode('2', config.number)
            ]),
            new ConstantNode('1', config.number)
          ]);
          break;
        case 'sinh':
          // d/dx(sinh(x)) = cosh(x)
          funcDerivative = new FunctionNode('cosh', [arg1.clone()]);
          break;
        case 'cosh':
          // d/dx(cosh(x)) = sinh(x)
          funcDerivative = new FunctionNode('sinh', [arg1.clone()]);
          break;
        case 'tanh':
          // d/dx(tanh(x)) = sech(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [
            new FunctionNode('sech', [arg1.clone()]),
            new ConstantNode('2', config.number)
          ]);
          break;
        case 'sech':
          // d/dx(sech(x)) = -sech(x)tanh(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            node,
            new FunctionNode('tanh', [arg1.clone()])
          ]);
          break;
        case 'csch':
          // d/dx(csch(x)) = -csch(x)coth(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            node,
            new FunctionNode('coth', [arg1.clone()])
          ]);
          break;
        case 'coth':
          // d/dx(coth(x)) = -csch(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [
            new FunctionNode('csch', [arg1.clone()]),
            new ConstantNode('2', config.number)
          ]);
          break;
        case 'asinh':
          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [
            new OperatorNode('+', 'add', [
              new OperatorNode('^', 'pow', [
                arg1.clone(),
                new ConstantNode('2', config.number)
              ]),
              new ConstantNode('1', config.number)
            ])
          ]);
          break;
        case 'acosh':
          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [
            new OperatorNode('-', 'subtract', [
              new OperatorNode('^', 'pow', [
                arg1.clone(),
                new ConstantNode('2', config.number)
              ]),
              new ConstantNode('1', config.number),
            ])
          ]);
          break;
        case 'atanh':
          // d/dx(atanh(x)) = 1 / (1 - x^2)
          div = true;
          funcDerivative = new OperatorNode('-', 'subtract', [
            new ConstantNode('1', config.number),
            new OperatorNode('^', 'pow', [
              arg1.clone(),
              new ConstantNode('2', config.number)
            ])
          ]);
          break;
        case 'asech':
          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            arg1.clone(),
            new FunctionNode('sqrt', [
              new OperatorNode('-', 'subtract', [
                new ConstantNode('1', config.number),
                new OperatorNode('^', 'pow', [
                  arg1.clone(),
                  new ConstantNode('2', config.number)
                ])
              ])
            ])
          ]);
          break;
        case 'acsch':
          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [
            new FunctionNode('abs', [arg1.clone()]),
            new FunctionNode('sqrt', [
              new OperatorNode('+', 'add', [
                new OperatorNode('^', 'pow', [
                  arg1.clone(),
                  new ConstantNode('2', config.number)
                ]),
                new ConstantNode('1', config.number)
              ])
            ])
          ]);
          break;
        case 'acoth':
          // d/dx(acoth(x)) = -1 / (1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('-', 'subtract', [
            new ConstantNode('1', config.number),
            new OperatorNode('^', 'pow', [
              arg1.clone(),
              new ConstantNode('2', config.number)
            ])
          ]);
          break;
        case 'abs':
          // d/dx(abs(x)) = abs(x)/x
          funcDerivative = new OperatorNode('/', 'divide', [
            new FunctionNode(new SymbolNode('abs'), [arg1.clone()]),
            arg1.clone()
          ]);
          break;
        case 'gamma':  // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)
        default: throw new Error('Function "' + node.name + '" not supported by derivative');
      }

      var op, func;
      if (div) {
        op = '/';
        func = 'divide';
      } else {
        op = '*';
        func = 'multiply';
      }

      /* Apply chain rule to all functions:
         F(x)  = f(g(x))
         F'(x) = g'(x)*f'(g(x)) */
      var chainDerivative = _derivative(arg1, constNodes);
      if (negative) {
        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
      }
      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
    },

    'OperatorNode, Object': function (node, constNodes) {
      if (constNodes[node] !== undefined) {
        return new ConstantNode('0', config.number);
      }

      var arg1 = node.args[0];
      var arg2 = node.args[1];

      switch (node.op) {
        case '+':
        case '-':
          // d/dx(+/-f(x)) = +/-f'(x)
          if (node.args.length == 1) {
            return new OperatorNode(node.op, node.fn, [_derivative(arg1, constNodes)]);
          }

          // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)
          return new OperatorNode(node.op, node.fn, [
            _derivative(arg1, constNodes),
            _derivative(arg2, constNodes)
          ]);
        case '*':
          // d/dx(c*f(x)) = c*f'(x)
          if (constNodes[arg1] !== undefined || constNodes[arg2] !== undefined) {
            var newArgs = (constNodes[arg1] !== undefined)
              ? [arg1.clone(), _derivative(arg2, constNodes)]
              : [arg2.clone(), _derivative(arg1, constNodes)];

            return new OperatorNode('*', 'multiply', newArgs);
          }

          // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)
          return new OperatorNode('+', 'add', [
            new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),
            new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])
          ]);
        case '/':
          // d/dx(f(x) / c) = f'(x) / c
          if (constNodes[arg2] !== undefined) {
            return new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), arg2]);
          }

          // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)
          if (constNodes[arg1] !== undefined) {
            return new OperatorNode('*', 'multiply', [
              new OperatorNode('-', 'unaryMinus', [arg1]),
              new OperatorNode('/', 'divide', [
                _derivative(arg2, constNodes),
                new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])
              ])
            ]);
          }

          // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2
          return new OperatorNode('/', 'divide', [
            new OperatorNode('-', 'subtract', [
              new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),
              new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])
            ]),
            new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])
          ]);
        case '^':
          if (constNodes[arg1] !== undefined) {
            // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
            if (type.isConstantNode(arg1) && (arg1.value === '0' || arg1.value === '1')) {
              return new ConstantNode('0', config.number);
            }

            // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)
            return new OperatorNode('*', 'multiply', [
              node,
              new OperatorNode('*', 'multiply', [
                new FunctionNode('log', [arg1.clone()]),
                _derivative(arg2.clone(), constNodes)
              ])
            ]);
          }

          if (constNodes[arg2] !== undefined) {
            if (type.isConstantNode(arg2)) {
              var expValue = arg2.value;

              // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
              if (expValue === '0') {
                return new ConstantNode('0', config.number);
              }
              // Ignore exponent; f(x)^1 = f(x)
              if (expValue === '1') {
                return _derivative(arg1, constNodes);
              }
            }

            // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)
            var powMinusOne = new OperatorNode('^', 'pow', [
              arg1.clone(),
              new OperatorNode('-', 'subtract', [
                arg2,
                new ConstantNode('1', config.number)
              ])
            ]);

            return new OperatorNode('*', 'multiply', [
              arg2.clone(),
              new OperatorNode('*', 'multiply', [
                _derivative(arg1, constNodes),
                powMinusOne
              ]),
            ]);
          }

          // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]
          return new OperatorNode('*', 'multiply', [
            new OperatorNode('^', 'pow', [arg1.clone(), arg2.clone()]),
            new OperatorNode('+', 'add', [
              new OperatorNode('*', 'multiply', [
                _derivative(arg1, constNodes),
                new OperatorNode('/', 'divide', [arg2.clone(), arg1.clone()])
              ]),
              new OperatorNode('*', 'multiply', [
                _derivative(arg2, constNodes),
                new FunctionNode('log', [arg1.clone()])
              ])
            ])
          ]);
        case '%':
        case 'mod':
        default: throw new Error('Operator "' + node.op + '" not supported by derivative');
      }
    }
  });

  /**
   * Ensures the number of arguments for a function are correct,
   * and will throw an error otherwise.
   *
   * @param {FunctionNode} node
   */
  function funcArgsCheck(node) {
    //TODO add min, max etc
    if ((node.name == 'log' || node.name == 'nthRoot') && node.args.length == 2) {
      return;
    }

    // There should be an incorrect number of arguments if we reach here

    // Change all args to constants to avoid unidentified
    // symbol error when compiling function
    for (var i = 0; i < node.args.length; ++i) {
      node.args[i] = new ConstantNode(0);
    }

    node.compile().eval();
    throw new Error('Expected TypeError, but none found');
  }


  return derivative;
}

exports.name = 'derivative';
exports.factory = factory;

},{"../../expression/node/ConstantNode":240,"../../expression/node/FunctionNode":242,"../../expression/node/OperatorNode":246,"../../expression/node/ParenthesisNode":247,"../../expression/node/SymbolNode":249,"../../expression/parse":257,"./simplify":277}],275:[function(require,module,exports){
module.exports = [
  require('./derivative'),

  // simplify
  require('./simplify'),

  // polynomial 
  require('./rationalize'),
    
  
  // decomposition
  require('./decomposition/qr'),
  require('./decomposition/lup'),
  require('./decomposition/slu'),

  // solver
  require('./solver/lsolve'),
  require('./solver/lusolve'),
  require('./solver/usolve')
];

},{"./decomposition/lup":271,"./decomposition/qr":272,"./decomposition/slu":273,"./derivative":274,"./rationalize":276,"./simplify":277,"./solver/lsolve":282,"./solver/lusolve":283,"./solver/usolve":284}],276:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var simplify = load(require('./simplify'));
  var simplifyCore = load(require('./simplify/simplifyCore'));  
  var simplifyConstant = load(require('./simplify/simplifyConstant'));  
  var ArgumentsError = require('../../error/ArgumentsError');
  var parse = load(require('../../expression/function/parse'));
  var number = require('../../utils/number')
  var ConstantNode = load(require('../../expression/node/ConstantNode'));
  var OperatorNode = load(require('../../expression/node/OperatorNode'));
  var SymbolNode = load(require('../../expression/node/SymbolNode'));

  /**
   * Transform a rationalizable expression in a rational fraction. 
   * If rational fraction is one variable polynomial then converts
   * the numerator and denominator in canonical form, with decreasing
   * exponents, returning the coefficients of numerator. 
   *
   * Syntax:
   *
   *     rationalize(expr)
   *     rationalize(expr, detailed)
   *     rationalize(expr, scope)
   *     rationalize(expr, scope, detailed)
   *
   * Examples:
   *
   *     math.rationalize('sin(x)+y')  //  Error: There is an unsolved function call
   *     math.rationalize('2x/y - y/(x+1)')  // (2*x^2-y^2+2*x)/(x*y+y)
   *     math.rationalize('(2x+1)^6')  
   *                   //     64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3') 
   *                   //    -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
   *                   //  (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
   *                   //   (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
   *
   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
   *     math.rationalize('x+x+x+y',{})    // 3*x+y
   *     ret = math.rationalize('x+x+x+y',{},true) 
   *                          // ret.expression=3*x+y,  ret.variables = ["x","y"]
   *     ret = math.rationalize('-2+5x^2',{},true) 
   *                          // ret.expression=5*x^2-2,  ret.variables = ["x"], ret.coefficients=[-2,0,5]
   *
   * See also:
   * 
   *     simplify
   * 
   * @param  {Node|string} expr    The expression to check if is a polynomial expression
   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default) 
   *
   * @return {Object | Expression Node}    The rational polynomial of `expr` or na object
   *            {Object}
   *              {Expression Node} expression: node simplified expression
   *              {Expression Node} numerator: simplified numerator of expression
   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
   *              {Array}           variables:  variable names
   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent 
   *           {Expression Node}  node simplified expression
   *   
   */
  var rationalize = typed('rationalize', {
    'string': function (expr) {
       return rationalize(parse(expr), {}, false);  
    },

    'string, boolean': function (expr, detailed) {
       return rationalize(parse(expr), {} , detailed); 
    },

    'string, Object': function (expr, scope) {
       return rationalize(parse(expr), scope, false);  
    },

    'string, Object, boolean': function (expr, scope, detailed) {
       return rationalize(parse(expr), scope, detailed); 
    },

    'Node': function (expr) {
       return rationalize(expr, {}, false);
    },

    'Node, boolean': function (expr, detailed) {
      return rationalize(expr, {}, detailed);
    },

    'Node, Object': function (expr, scope) {
      return rationalize(expr, scope, false);
    },

    'Node, Object, boolean': function (expr, scope, detailed) {

      var polyRet = polynomial(expr, scope, true)  // Check if expression is a rationalizable polynomial
      var nVars =  polyRet.variables.length;
      var expr = polyRet.expression;         
           
      if (nVars>=1) {   // If expression in not a constant
        var setRules = rulesRationalize();   // Rules for change polynomial in near canonical form
        expr = expandPower(expr);              // First expand power of polynomials (cannot be made from rules!)
        var redoInic = true;   // If has change after start, redo the beginning
        var s = "";            // New expression
        var sBefore;           // Previous expression
        var rules;  
        var eDistrDiv = true  

        expr = simplify(expr, setRules.firstRules);  // Apply the initial rules, including succ div rules
        s = expr.toString();


        while (true) {                  // Apply alternately  successive division rules and distr.div.rules
          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules
          expr = simplify(expr,rules);         // until no more changes
          eDistrDiv = ! eDistrDiv;    // Swap between Distr.Div and Succ. Div. Rules
          
          s = expr.toString();
          if (s===sBefore) break   // No changes : end of the loop
          
          redoInic = true;
          sBefore = s;
        }  
       
        if (redoInic)  {         // Apply first rules again without succ div rules (if there are changes)
          expr = simplify(expr,setRules.firstRulesAgain); 
        }
        expr = simplify(expr,setRules.finalRules);  // Aplly final rules 

      }  // NVars >= 1

      var coefficients=[];
      var retRationalize = {};

      if (expr.type==='OperatorNode'  &&  expr.op==='/')  {   // Separate numerator from denominator
          if (nVars==1)  {
             expr.args[0] = polyToCanonical(expr.args[0],coefficients);
             expr.args[1] = polyToCanonical(expr.args[1]);
          }
          if (detailed) {
            retRationalize.numerator = expr.args[0];
            retRationalize.denominator = expr.args[1];
          }
        } else {
          if (nVars==1) expr = polyToCanonical(expr,coefficients);
          if (detailed) { 
            retRationalize.numerator = expr;
            retRationalize.denominator = null 
          }
      }
       // nVars

      if (! detailed) return expr;
      retRationalize.coefficients = coefficients;
      retRationalize.variables = polyRet.variables;
      retRationalize.expression = expr;
      return retRationalize;
    }  // ^^^^^^^ end of rationalize ^^^^^^^^
  });  // end of typed rationalize

  /**
   *  Function to simplify an expression using an optional scope and
   *  return it if the expression is a polynomial expression, i.e. 
   *  an expression with one or more variables and the operators
   *  +, -, *, and ^, where the exponent can only be a positive integer. 
   *
   * Syntax:
   *
   *     polynomial(expr,scope,extended)
   *
   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
   * @param  {object} scope           Optional scope for expression simplification
   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
   *
   *
   * @return {Object} 
   *            {Object} node:   node simplified expression
   *            {Array}  variables:  variable names
   */             
  function polynomial (expr, scope, extended) {
    var variables = [];
    var node = simplify(expr,scope);  // Resolves any variables and functions with all defined parameters   
    extended = !! extended

    var oper = '+-*' + (extended ? '/' : '');
    recPoly(node) 
    var retFunc ={};
    retFunc.expression = node;
    retFunc.variables = variables;
    return retFunc; 

    //-------------------------------------------------------------------------------------------------------

    /**
     *  Function to simplify an expression using an optional scope and
     *  return it if the expression is a polynomial expression, i.e. 
     *  an expression with one or more variables and the operators
     *  +, -, *, and ^, where the exponent can only be a positive integer. 
     *
     * Syntax:
     *
     *     recPoly(node)
     *
     *
     * @param  {Node} node               The current sub tree expression in recursion
     *
     * @return                           nothing, throw an exception if error
     */
    function recPoly(node) {
      var tp = node.type;  // node type
      if (tp==='FunctionNode') 
        throw new ArgumentsError('There is an unsolved function call')   // No function call in polynomial expression
      else if (tp==='OperatorNode')  {
        if (node.op==='^')  {
          if (node.args[1].type!=='ConstantNode' ||  ! number.isInteger(parseFloat(node.args[1].value)))
            throw new ArgumentsError('There is a non-integer exponent');
          else
            recPoly(node.args[0]);      
        } else  { 
            if (oper.indexOf(node.op) === -1) throw new ArgumentsError('Operator ' + node.op + ' invalid in polynomial expression');
            for (var i=0;i<node.args.length;i++) { 
              recPoly(node.args[i]);
            }
        } // type of operator

      } else if (tp==='SymbolNode')  {
         var name = node.name;   // variable name
         var pos = variables.indexOf(name); 
         if (pos===-1)    // new variable in expression
           variables.push(name);        

      } else if (tp==='ParenthesisNode') 
         recPoly(node.content);

      else if (tp!=='ConstantNode')   
         throw new ArgumentsError('type ' + tp + ' is not allowed in polynomial expression')
         
    }  // end of recPoly

  }  // end of polynomial 


  //---------------------------------------------------------------------------------------
  /**
   * Return a rule set to rationalize an polynomial expression in rationalize
   *
   * Syntax:
   *
   *     rulesRationalize()
   *
   * @return {array}        rule set to rationalize an polynomial expression 
   */
  function rulesRationalize() {
    var oldRules = [simplifyCore,  // sCore
                {l:"n+n",r:"2*n"},
                {l:"n+-n",r:"0"},
                simplifyConstant,  // sConstant
                {l:"n*(n1^-1)",r:"n/n1"},
                {l:"n*n1^-n2",r:"n/n1^n2"},
                {l:"n1^-1",r:"1/n1"},
                {l:"n*(n1/n2)",r:"(n*n1)/n2"},
                {l:"1*n",r:"n"}]

    var rulesFirst = [
       { l: '(-n1)/(-n2)', r: 'n1/n2' },  // Unary division
       { l: '(-n1)*(-n2)', r: 'n1*n2' },  // Unary multiplication
       { l: 'n1--n2', r:'n1+n2'},        // '--' elimination
       { l: 'n1-n2', r:'n1+(-n2)'} ,      // Subtraction turn into add with un�ry minus    
       { l:'(n1+n2)*n3', r:'(n1*n3 + n2*n3)' },     // Distributive 1 
       { l:'n1*(n2+n3)', r:'(n1*n2+n1*n3)' },       // Distributive 2 
       { l: 'c1*n + c2*n', r:'(c1+c2)*n'} ,       // Joining constants
       { l: '-v*-c', r:'c*v'} ,          // Inversion constant and variable 1
       { l: '-v*c', r:'-c*v'} ,          // Inversion constant and variable 2
       { l: 'v*-c', r:'-c*v'} ,          // Inversion constant and variable 3
       { l: 'v*c', r:'c*v'} ,            // Inversion constant and variable 4
       { l: '-(-n1*n2)', r:'(n1*n2)'} ,  // Unary propagation
       { l: '-(n1*n2)', r:'(-n1*n2)'} ,  // Unary propagation
       { l: '-(-n1+n2)', r:'(n1-n2)'} ,  // Unary propagation
       { l: '-(n1+n2)', r:'(-n1-n2)'} ,  // Unary propagation
       { l: '(n1^n2)^n3', r:'(n1^(n2*n3))'} ,  // Power to Power
       { l: '-(-n1/n2)', r:'(n1/n2)'} ,   // Division and Unary
       { l: '-(n1/n2)', r:'(-n1/n2)'} ];   // Divisao and Unary

    var rulesDistrDiv=[
       { l:'(n1/n2 + n3/n4)', r:'((n1*n4 + n3*n2)/(n2*n4))' },  // Sum of fractions
       { l:'(n1/n2 + n3)', r:'((n1 + n3*n2)/n2)' }, // Sum fraction with number 1
       { l:'(n1 + n2/n3)', r:'((n1*n3 + n2)/n3)' }  ];  // Sum fraction with number 1

    var rulesSucDiv=[
       { l:'(n1/(n2/n3))', r:'((n1*n3)/n2)'} , // Division simplification
       { l:'(n1/n2/n3)', r:'(n1/(n2*n3))' } ]

    var setRules={};   // rules set in 4 steps. 

        // All rules => infinite loop
        // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv);  

    setRules.firstRules =oldRules.concat(rulesFirst,rulesSucDiv);  // First rule set
    setRules.distrDivRules = rulesDistrDiv;                  // Just distr. div. rules  
    setRules.sucDivRules = rulesSucDiv;                      // Jus succ. div. rules
    setRules.firstRulesAgain = oldRules.concat(rulesFirst);  // Last rules set without succ. div. 

           // Division simplification
          
         // Second rule set. 
          // There is no aggregate expression with parentesis, but the only variable can be scattered. 
    setRules.finalRules=[ simplifyCore,                // simplify.rules[0]
       { l: 'n*-n', r: '-n^2' },                // Joining multiply with power 1
       { l: 'n*n', r: 'n^2' },                  // Joining multiply with power 2
        simplifyConstant,                              // simplify.rules[14] old 3rd index in oldRules
       { l: 'n*-n^n1', r: '-n^(n1+1)' },        // Joining multiply with power 3
       { l: 'n*n^n1', r: 'n^(n1+1)' },          // Joining multiply with power 4
       { l: 'n^n1*-n^n2', r: '-n^(n1+n2)' },    // Joining multiply with power 5
       { l: 'n^n1*n^n2', r: 'n^(n1+n2)' },      // Joining multiply with power 6
       { l: 'n^n1*-n', r: '-n^(n1+1)' },        // Joining multiply with power 7
       { l: 'n^n1*n', r: 'n^(n1+1)' },          // Joining multiply with power 8
       { l: 'n^n1/-n', r: '-n^(n1-1)' },        // Joining multiply with power 8
       { l: 'n^n1/n', r: 'n^(n1-1)' },          // Joining division with power 1
       { l: 'n/-n^n1', r: '-n^(1-n1)' },        // Joining division with power 2
       { l: 'n/n^n1', r: 'n^(1-n1)' },          // Joining division with power 3
       { l: 'n^n1/-n^n2', r: 'n^(n1-n2)' },     // Joining division with power 4
       { l: 'n^n1/n^n2', r: 'n^(n1-n2)' },      // Joining division with power 5
       { l: 'n1+(-n2*n3)', r: 'n1-n2*n3' },     // Solving useless parenthesis 1 
       { l: 'v*(-c)', r: '-c*v' },              // Solving useless unary 2 
       { l: 'n1+-n2', r: 'n1-n2' },             // Solving +- together (new!)
       { l: 'v*c', r: 'c*v' },                  // inversion constant with variable
       { l: '(n1^n2)^n3', r:'(n1^(n2*n3))'},    // Power to Power
       
    ];                    
    return setRules;
  } // End rulesRationalize

  //---------------------------------------------------------------------------------------
  /**
   *  Expand recursively a tree node for handling with expressions with exponents
   *  (it's not for constants, symbols or functions with exponents)
   *  PS: The other parameters are internal for recursion
   *
   * Syntax:
   *
   *     expandPower(node)
   *
   * @param  {Node} node         Current expression node
   * @param  {node} parent       Parent current node inside the recursion
   * @param  (int}               Parent number of chid inside the rercursion 
   *
   * @return {node}        node expression with all powers expanded. 
   */
  function expandPower(node,parent,indParent) {
    var tp = node.type; 
    var internal = (arguments.length>1)   // TRUE in internal calls

    if (tp==='OperatorNode') { 
      var does = false;
      if (node.op==='^')  {   // First operator: Parenthesis or UnaryMinus
        if ( ( node.args[0].type==='ParenthesisNode' ||  
            node.args[0].type==='OperatorNode' ) 
            && (node.args[1].type==='ConstantNode') )  {   // Second operator: Constant
          var val = parseFloat(node.args[1].value);
          does = (val>=2 && number.isInteger(val));  
        }
      } 

      if (does)  {  // Exponent >= 2 
          //Before:
          //            operator A --> Subtree
          // parent pow 
          //            constant
          //
        if (val>2)     {  // Exponent > 2, 
          //AFTER:  (exponent > 2)
          //             operator A --> Subtree
          // parent  * 
          //                 deep clone (operator A --> Subtree
          //             pow     
          //                 constant - 1
          //
           var nEsqTopo = node.args[0];  
           var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(),new ConstantNode(val-1)]);
           node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
        } else   // Expo = 2 - no power

            //AFTER:  (exponent =  2)
            //             operator A --> Subtree
            // parent   oper 
            //            deep clone (operator A --> Subtree)    
            //                            
           node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
        
        if (internal)       // Change parent references in internal recursive calls
          if (indParent==='content')
            parent.content = node;
          else
            parent.args[indParent] = node
      } // does
    } // Operator Node

    if (tp==='ParenthesisNode' )  // Recursion 
           expandPower(node.content,node,'content');  
    else if (tp!=='ConstantNode' && tp!=='SymbolNode')  
      for (var i=0;i<node.args.length;i++)  
         expandPower(node.args[i],node,i);
        
      
    if (! internal ) return node   // return the root node

  }  // End expandPower


  //---------------------------------------------------------------------------------------
  /**
   * Auxilary function for rationalize
   * Convert near canonical polynomial in one variable in a canonical polynomial
   * with one term for each exponent in decreasing order
   *
   * Syntax:
   *
   *     polyToCanonical(node [, coefficients])
   *
   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
   * 
   *        The string or tree expression needs to be at below syntax, with free spaces:
   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
   *       Where 'var' is one variable with any valid name
   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
   *
   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent 
   *
   *
   * @return {node}        new node tree with one variable polynomial or string error. 
   */
  function polyToCanonical(node,coefficients) {
    var i;

    if (coefficients===undefined)
       coefficients = []; // coefficients.

    coefficients[0] = 0;   // index is the exponent
    var o = {};
    o.cte=1; 
    o.oper='+'; 

     // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -. 
     //       It is used to deduce the exponent: 1 for *, 0 for "". 
    o.fire='';  

    var maxExpo=0;   // maximum exponent
    var varname='';  // var name 

    recurPol(node,null,o);    
    maxExpo = coefficients.length-1;
    var first=true;

    for (i=maxExpo;i>=0 ;i--)  {
      if (coefficients[i]===0)  continue;
      var n1  = new ConstantNode(
                      first ? coefficients[i] : Math.abs(coefficients[i]));
      var op = coefficients[i]<0  ? '-' : '+';

      if (i>0)   {  // Is not a constant without variable 
        var n2 = new SymbolNode(varname);    
        if (i>1)  {
          var n3 =  new ConstantNode(i);     
          n2 = new OperatorNode('^', 'pow', [n2, n3]); 
        }
        if (coefficients[i]===-1  && first) 
          n1 = new OperatorNode('-', 'unaryMinus', [n2]);          
        else if (Math.abs(coefficients[i])===1)  
          n1 = n2;
        else
          n1 = new OperatorNode('*', 'multiply', [n1, n2]); 
      }

      var no;
      if (first)   
        no = n1;
      else if (op==='+')
        no = new OperatorNode('+', 'add', [no, n1]);
      else
        no = new OperatorNode('-', 'subtract', [no, n1]);

      first = false;
    }  // for 

    if (first) 
      return new ConstantNode(0);
    else
      return no;

    /**
     * Recursive auxilary function inside polyToCanonical for
     * converting expression in canonical form
     *
     * Syntax:
     *
     *     recurPol(node, noPai, obj)
     *
     * @param  {Node} node        The current subpolynomial expression 
     * @param  {Node | Null}  noPai   The current parent node
     * @param  {object}    obj        Object with many internal flags
     *
     * @return {}                    No return. If error, throws an exception
     */
    function recurPol(node,noPai,o) {

      var tp = node.type; 
      if (tp==='FunctionNode')            // ***** FunctionName *****
                // No function call in polynomial expression
        throw new ArgumentsError('There is an unsolved function call')

      else if (tp==='OperatorNode')  {    // ***** OperatorName *****
        if ('+-*^'.indexOf(node.op) === -1) throw new ArgumentsError('Operator ' + node.op + ' invalid');

        if (noPai!==null)  {
            // -(unary),^  : children of *,+,-
          if ( (node.fn==='unaryMinus' || node.fn==='pow') && noPai.fn !=='add' &&  
                                noPai.fn!=='subtract'  &&  noPai.fn!=='multiply' )
            throw new ArgumentsError('Invalid ' + node.op +  ' placing')

            // -,+,* : children of +,- 
          if ((node.fn==='subtract' || node.fn==='add' || node.fn==='multiply')  && 
              noPai.fn!=='add' &&  noPai.fn!=='subtract' )
            throw new ArgumentsError('Invalid ' + node.op +  ' placing'); 
        
           // -,+ : first child
        if ((node.fn==='subtract' || node.fn==='add' ||                
            node.fn==='unaryMinus' )  && o.noFil!==0 )                  
            throw new ArgumentsError('Invalid ' + node.op +  ' placing')
         } // Has parent    

        // Firers: ^,*       Old:   ^,&,-(unary): firers
        if (node.op==='^' || node.op==='*') o.fire = node.op;

        for (var i=0;i<node.args.length;i++)  {
           // +,-: reset fire
          if (node.fn==='unaryMinus') o.oper='-';
          if (node.op==='+' || node.fn==='subtract' ) {    
            o.fire = '';  
            o.cte = 1;   // default if there is no constant
            o.oper = (i===0 ? '+' : node.op);
          }
          o.noFil = i;  // number of son
          recurPol(node.args[i],node,o);
        } // for in children

      } else if (tp==='SymbolNode') {      // ***** SymbolName *****
        if (node.name !== varname && varname!=='')
          throw new ArgumentsError('There is more than one variable')
        varname = node.name;   
        if (noPai === null)  {
            coefficients[1] = 1; 
            return;
        }   

          // ^: Symbol is First child
        if (noPai.op==='^' && o.noFil!==0 ) 
           throw new ArgumentsError('In power the variable should be the first parameter')

          // *: Symbol is Second child 
        if (noPai.op==='*' && o.noFil!==1 ) 
           throw new ArgumentsError('In multiply the variable should be the second parameter')

          // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var) 
        if (o.fire==='' || o.fire==='*' )   {
          if (maxExpo<1) coefficients[1]=0;
          coefficients[1] += o.cte* (o.oper==='+'  ? 1 : -1);
          maxExpo = Math.max(1,maxExpo);
        }

      } else if (tp==='ConstantNode') {
        var valor =  parseFloat(node.value);
        if (noPai === null)  {
          coefficients[0] = valor;
          return;
        }   
        if (noPai.op==='^')  {
           // cte: second  child of power
          if (o.noFil!==1) throw new ArgumentsError('Constant cannot be powered')

          if (! number.isInteger(valor) || valor<=0 )
            throw new ArgumentsError('Non-integer exponent is not allowed');

          for (var i=maxExpo+1;i<valor;i++) coefficients[i]=0;
          if (valor>maxExpo) coefficients[valor]=0;
          coefficients[valor] += o.cte * (o.oper==='+' ? 1 : -1) 
          maxExpo = Math.max(valor,maxExpo);
          return;
        }
        o.cte = valor;

        // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0. 
        if (o.fire==='')  
          coefficients[0] += o.cte * (o.oper==='+'? 1 : -1);


      } else 
         throw new ArgumentsError('Type ' + tp + ' is not allowed');
      return;
    } // End of recurPol
 
  } // End of polyToCanonical

  return rationalize;
} // end of factory

exports.name = 'rationalize';
exports.factory = factory;
},{"../../error/ArgumentsError":26,"../../expression/function/parse":231,"../../expression/node/ConstantNode":240,"../../expression/node/OperatorNode":246,"../../expression/node/SymbolNode":249,"../../utils/number":557,"./simplify":277,"./simplify/simplifyConstant":279,"./simplify/simplifyCore":280}],277:[function(require,module,exports){
'use strict';


function factory (type, config, load, typed, math) {
  var parse = load(require('../../expression/parse'));
  var ConstantNode = load(require('../../expression/node/ConstantNode'));
  var FunctionNode = load(require('../../expression/node/FunctionNode'));
  var OperatorNode = load(require('../../expression/node/OperatorNode'));
  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));
  var SymbolNode = load(require('../../expression/node/SymbolNode'));
  var Node = load(require('../../expression/node/Node'));
  var simplifyConstant = load(require('./simplify/simplifyConstant'));
  var simplifyCore = load(require('./simplify/simplifyCore'));
  var resolve = load(require('./simplify/resolve'));

  var util = load(require('./simplify/util'));
  var isCommutative = util.isCommutative;
  var isAssociative = util.isAssociative;
  var flatten = util.flatten;
  var unflattenr = util.unflattenr;
  var unflattenl = util.unflattenl;
  var createMakeNodeFunction = util.createMakeNodeFunction;

  /**
   * Simplify an expression tree.
   *
   * A list of rules are applied to an expression, repeating over the list until
   * no further changes are made.
   * It's possible to pass a custom set of rules to the function as second
   * argument. A rule can be specified as an object, string, or function:
   *
   *     var rules = [
   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
   *       function (node) {
   *         // ... return a new node or return the node unchanged
   *         return node
   *       }
   *     ]
   *
   * String and object rules consist of a left and right pattern. The left is
   * used to match against the expression and the right determines what matches
   * are replaced with. The main difference between a pattern and a normal
   * expression is that variables starting with the following characters are
   * interpreted as wildcards:
   *
   * - 'n' - matches any Node
   * - 'c' - matches any ConstantNode
   * - 'v' - matches any Node that is not a ConstantNode
   *
   * The default list of rules is exposed on the function as `simplify.rules`
   * and can be used as a basis to built a set of custom rules.
   *
   * For more details on the theory, see:
   *
   * - [Strategies for simplifying math expressions (Stackoverflow)](http://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
   *
   * Syntax:
   *
   *     simplify(expr)
   *     simplify(expr, rules)
   *     simplify(expr, rules, scope)
   *     simplify(expr, scope)
   *
   * Examples:
   *
   *     math.simplify('2 * 1 * x ^ (2 - 1)');      // Node {2 * x}
   *     math.simplify('2 * 3 * x', {x: 4});        // Node {24}
   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');
   *     math.simplify(f);                          // Node {2 * x}
   *
   * See also:
   *
   *     derivative, parse, eval
   *
   * @param {Node | string} expr
   *            The expression to be simplified
   * @param {Array<{l:string, r: string} | string | function>} [rules]
   *            Optional list with custom rules
   * @return {Node} Returns the simplified form of `expr`
   */
  var simplify = typed('simplify', {
    'string': function (expr) {
      return simplify(parse(expr), simplify.rules, {});
    },

    'string, Object': function (expr, scope) {
      return simplify(parse(expr), simplify.rules, scope);
    },

    'string, Array': function (expr, rules) {
      return simplify(parse(expr), rules, {});
    },

    'string, Array, Object': function (expr, rules, scope) {
      return simplify(parse(expr), rules, scope);
    },

    'Node, Object': function (expr, scope) {
      return simplify(expr, simplify.rules, scope);
    },

    'Node': function (expr) {
      return simplify(expr, simplify.rules, {});
    },

    'Node, Array': function (expr, rules) {
      return simplify(expr, rules, {});
    },

    'Node, Array, Object': function (expr, rules, scope) {
      rules = _buildRules(rules);

      var res = resolve(expr, scope);
      var res = removeParens(res);
      var visited = {};

      var str = res.toString({parenthesis: 'all'});
      while(!visited[str]) {
        visited[str] = true;
        _lastsym = 0; // counter for placeholder symbols
        for (var i=0; i<rules.length; i++) {
          if (typeof rules[i] === 'function') {
            res = rules[i](res);
          }
          else {
            flatten(res);
            res = applyRule(res, rules[i]);
          }
          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
        }
        str = res.toString({parenthesis: 'all'});
      }

      return res;
    }
  });
  simplify.simplifyCore = simplifyCore;
  simplify.resolve = resolve;

  function removeParens(node) {
    return node.transform(function(node, path, parent) {
      return type.isParenthesisNode(node)
          ? node.content
          : node;
    });
  }

  // All constants that are allowed in rules
  var SUPPORTED_CONSTANTS = {
    true: true,
    false: true,
    e: true,
    i: true,
    Infinity: true,
    LN2: true,
    LN10: true,
    LOG2E: true,
    LOG10E: true,
    NaN: true,
    phi: true,
    pi: true,
    SQRT1_2: true,
    SQRT2: true,
    tau: true,
    // null: false,
    // uninitialized: false,
    // version: false,
  };

  // Array of strings, used to build the ruleSet.
  // Each l (left side) and r (right side) are parsed by
  // the expression parser into a node tree.
  // Left hand sides are matched to subtrees within the
  // expression to be parsed and replaced with the right
  // hand side.
  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
  // It is possible to get into an infinite loop with conflicting rules
  simplify.rules = [
    simplifyCore,
    //{ l: 'n+0', r: 'n' },     // simplifyCore
    //{ l: 'n^0', r: '1' },     // simplifyCore
    //{ l: '0*n', r: '0' },     // simplifyCore
    //{ l: 'n/n', r: '1'},      // simplifyCore
    //{ l: 'n^1', r: 'n' },     // simplifyCore
    //{ l: '+n1', r:'n1' },     // simplifyCore
    //{ l: 'n--n1', r:'n+n1' }, // simplifyCore
    { l: 'log(e)', r:'1' },

    // temporary rules
    { l: 'n-n1', r:'n+-n1' }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
    { l: '-(c*v)', r: '(-c) * v' }, // make non-constant terms positive
    { l: '-v', r: '(-1) * v' },
    { l: 'n/n1^n2', r:'n*n1^-n2' }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
    { l: 'n/n1', r:'n*n1^-1' },

    // expand nested exponentiation
    { l: '(n ^ n1) ^ n2', r: 'n ^ (n1 * n2)'},

    // collect like factors
    { l: 'n*n', r: 'n^2' },
    { l: 'n * n^n1', r: 'n^(n1+1)' },
    { l: 'n^n1 * n^n2', r: 'n^(n1+n2)' },

    // collect like terms
    { l: 'n+n', r: '2*n' },
    { l: 'n+-n', r: '0' },
    { l: 'n1*n2 + n2', r: '(n1+1)*n2' },
    { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },

    simplifyConstant,

    { l: '(-n)*n1', r: '-(n*n1)' }, // make factors positive (and undo 'make non-constant terms positive')

    // ordering of constants
    { l: 'c+v', r: 'v+c', context: { 'add': { commutative:false } } },
    { l: 'v*c', r: 'c*v', context: { 'multiply': { commutative:false } } },

    // undo temporary rules
    //{ l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
    { l: 'n+-n1', r:'n-n1' },  // undo replace 'subtract'
    { l: 'n*(n1^-1)', r:'n/n1' },  // undo replace 'divide'
    { l: 'n*n1^-n2', r:'n/n1^n2' },
    { l: 'n1^-1', r:'1/n1' },

    { l: 'n*(n1/n2)', r:'(n*n1)/n2' }, // '*' before '/'
    { l: 'n-(n1+n2)', r:'n-n1-n2' }, // '-' before '+'
    // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' }, 
    // { l: '(n*n1)/(n*n2)', r: 'n1/n2' }, 

    { l: '1*n', r: 'n' } // this pattern can be produced by simplifyConstant

  ];

  /**
   * Parse the string array of rules into nodes
   *
   * Example syntax for rules:
   *
   * Position constants to the left in a product:
   * { l: 'n1 * c1', r: 'c1 * n1' }
   * n1 is any Node, and c1 is a ConstantNode.
   *
   * Apply difference of squares formula:
   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
   * n1, n2 mean any Node.
   *
   * Short hand notation:
   * 'n1 * c1 -> c1 * n1'
   */
  function _buildRules(rules) {
    // Array of rules to be used to simplify expressions
    var ruleSet = [];
    for(var i=0; i<rules.length; i++) {
      var rule = rules[i];
      var newRule;
      var ruleType = typeof rule;
      switch (ruleType) {
        case 'string':
          var lr = rule.split('->');
          if (lr.length !== 2) {
            throw SyntaxError('Could not parse rule: ' + rule);
          }
          rule = {l: lr[0], r: lr[1]};
          /* falls through */
        case 'object':
          newRule = {
            l: removeParens(parse(rule.l)),
            r: removeParens(parse(rule.r)),
          }
          if(rule.context) {
            newRule.evaluate = rule.context;
          }
          if(rule.evaluate) {
            newRule.evaluate = parse(rule.evaluate);
          }

          if (newRule.l.isOperatorNode && isAssociative(newRule.l)) {
            var makeNode = createMakeNodeFunction(newRule.l);
            var expandsym = _getExpandPlaceholderSymbol();
            newRule.expanded = {};
            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);
            // Push the expandsym into the deepest possible branch.
            // This helps to match the newRule against nodes returned from getSplits() later on.
            flatten(newRule.expanded.l);
            unflattenr(newRule.expanded.l);
            newRule.expanded.r = makeNode([newRule.r, expandsym]);
          }
          break;
        case 'function':
          newRule = rule;
          break;
        default:
          throw TypeError('Unsupported type of rule: ' + ruleType);
      }
     // console.log('Adding rule: ' + rules[i]);
     // console.log(newRule);
      ruleSet.push(newRule);
    }
    return ruleSet;
  }

  var _lastsym = 0;
  function _getExpandPlaceholderSymbol() {
    return new SymbolNode('_p' + _lastsym++);
  }

  /**
   * Returns a simplfied form of node, or the original node if no simplification was possible.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
   */
  var applyRule = typed('applyRule', {
    'Node, Object': function (node, rule) {

      //console.log('Entering applyRule(' + node.toString() + ')');

      // Do not clone node unless we find a match
      var res = node;

      // First replace our child nodes with their simplified versions
      // If a child could not be simplified, the assignments will have
      // no effect since the node is returned unchanged
      if (res instanceof OperatorNode || res instanceof FunctionNode) {
        if (res.args) {
          for(var i=0; i<res.args.length; i++) {
            res.args[i] = applyRule(res.args[i], rule);
          }
        }
      }
      else if(res instanceof ParenthesisNode) {
        if(res.content) {
          res.content = applyRule(res.content, rule);
        }
      }

      // Try to match a rule against this node
      var repl = rule.r;
      var matches = _ruleMatch(rule.l, res)[0];

      // If the rule is associative operator, we can try matching it while allowing additional terms.
      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.
      if (!matches && rule.expanded) {
        repl = rule.expanded.r;
        matches = _ruleMatch(rule.expanded.l, res)[0];
      }

      if (matches) {
        // var before = res.toString({parenthesis: 'all'});

        // Create a new node by cloning the rhs of the matched rule
        res = repl.clone();
     
        // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes
        var _transform = function(node) {
          if(node.isSymbolNode && matches.placeholders.hasOwnProperty(node.name)) {
            return matches.placeholders[node.name].clone();
          }
          else {
            return node.map(_transform);
          }
        }
        
        res = _transform(res);
        
        // var after = res.toString({parenthesis: 'all'});
        // console.log('Simplified ' + before + ' to ' + after);
      }

      return res;
    }
  });

  /**
   * Get (binary) combinations of a flattened binary node
   * e.g. +(node1, node2, node3) -> [
   *        +(node1,  +(node2, node3)),
   *        +(node2,  +(node1, node3)),
   *        +(node3,  +(node1, node2))]
   *
   */
  function getSplits(node, context) {
    var res = [];
    var right, rightArgs;
    var makeNode = createMakeNodeFunction(node);
    if (isCommutative(node, context)) {
      for (var i=0; i<node.args.length; i++) {
        rightArgs = node.args.slice(0);
        rightArgs.splice(i, 1);
        right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);
        res.push(makeNode([node.args[i], right]));
      }
    }
    else {
      rightArgs = node.args.slice(1);
      right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);
      res.push(makeNode([node.args[0], right]));
    }
    return res;
  }

  /**
   * Returns the set union of two match-placeholders or null if there is a conflict.
   */
  function mergeMatch(match1, match2) {
    var res = {placeholders:{}};

    // Some matches may not have placeholders; this is OK
    if (!match1.placeholders && !match2.placeholders) {
      return res;
    }
    else if (!match1.placeholders) {
      return match2;
    }
    else if (!match2.placeholders) {
      return match1;
    }

    // Placeholders with the same key must match exactly
    for (var key in match1.placeholders) {
      res.placeholders[key] = match1.placeholders[key];
      if (match2.placeholders.hasOwnProperty(key)) {
        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key] )) {
          return null;
        }
      }
    }

    for (var key in match2.placeholders) {
      res.placeholders[key] = match2.placeholders[key];
    }

    return res;
  }

  /**
   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   */
  function combineChildMatches(list1, list2) {
    var res = [];

    if (list1.length === 0 || list2.length === 0) {
      return res;
    }

    var merged;
    for (var i1 = 0; i1 < list1.length; i1++) {
      for (var i2 = 0; i2 < list2.length; i2++) {
        merged = mergeMatch(list1[i1], list2[i2]);
        if (merged) {
          res.push(merged);
        }
      }
    }
    return res;
  }

  /**
   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   * Returns a list of unique matches.
   */
  function mergeChildMatches(childMatches) {
    if (childMatches.length === 0) {
      return childMatches;
    }

    var sets = childMatches.reduce(combineChildMatches);
    var uniqueSets = [];
    var unique = {};
    for(var i = 0; i < sets.length; i++) {
      var s = JSON.stringify(sets[i]);
      if (!unique[s]) {
        unique[s] = true;
        uniqueSets.push(sets[i]);
      }
    }
    return uniqueSets;
  }

  /**
   * Determines whether node matches rule.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {Object} Information about the match, if it exists.
   */
  function _ruleMatch(rule, node, isSplit) {
//    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')');
//    console.log('rule = ' + rule);
//    console.log('node = ' + node);

//    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')');
    var res = [{placeholders:{}}];

    if (rule instanceof OperatorNode && node instanceof OperatorNode
     || rule instanceof FunctionNode && node instanceof FunctionNode) {

      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
      if (rule instanceof OperatorNode) {
        if (rule.op !== node.op || rule.fn !== node.fn) {
          return [];
        }
      }
      else if (rule instanceof FunctionNode) {
        if (rule.name !== node.name) {
          return [];
        }
      }

      // rule and node match. Search the children of rule and node.
      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
        // Expect non-associative operators to match exactly
        var childMatches = [];
        for (var i = 0; i < rule.args.length; i++) {
          var childMatch = _ruleMatch(rule.args[i], node.args[i]);
          if (childMatch.length === 0) {
            // Child did not match, so stop searching immediately
            return [];
          }
          // The child matched, so add the information returned from the child to our result
          childMatches.push(childMatch);
        }
        res = mergeChildMatches(childMatches);
      }
      else if (node.args.length >= 2 && rule.args.length === 2) { // node is flattened, rule is not
        // Associative operators/functions can be split in different ways so we check if the rule matches each
        // them and return their union.
        var splits = getSplits(node, rule.context);
        var splitMatches = [];
        for(var i = 0; i < splits.length; i++) {
          var matchSet = _ruleMatch(rule, splits[i], true); // recursing at the same tree depth here
          splitMatches = splitMatches.concat(matchSet);
        }
        return splitMatches;
      }
      else if (rule.args.length > 2) {
        throw Error('Unexpected non-binary associative function: ' + rule.toString());
      }
      else {
        // Incorrect number of arguments in rule and node, so no match
        return [];
      }
    }
    else if (rule instanceof SymbolNode) {
      // If the rule is a SymbolNode, then it carries a special meaning
      // according to the first character of the symbol node name.
      // c.* matches a ConstantNode
      // n.* matches any node
      if (rule.name.length === 0) {
        throw new Error('Symbol in rule has 0 length...!?');
      }
     if (math.hasOwnProperty(rule.name)) {
        if (!SUPPORTED_CONSTANTS[rule.name]) {
          throw new Error('Built in constant: ' + rule.name + ' is not supported by simplify.');
        }

        // built-in constant must match exactly
        if(rule.name !== node.name) {
          return [];
        }
      }
      else if (rule.name[0] === 'n' || rule.name.substring(0,2) === '_p') {
        // rule matches _anything_, so assign this node to the rule.name placeholder
        // Assign node to the rule.name placeholder.
        // Our parent will check for matches among placeholders.
        res[0].placeholders[rule.name] = node;
      }
      else if (rule.name[0] === 'v') {
        // rule matches any variable thing (not a ConstantNode)
        if(!type.isConstantNode(node)) {
          res[0].placeholders[rule.name] = node;
        }
        else {
          // Mis-match: rule was expecting something other than a ConstantNode
          return [];
        }
      }
      else if (rule.name[0] === 'c') {
        // rule matches any ConstantNode
        if(node instanceof ConstantNode) {
          res[0].placeholders[rule.name] = node;
        }
        else {
          // Mis-match: rule was expecting a ConstantNode
          return [];
        }
      }
      else {
        throw new Error('Invalid symbol in rule: ' + rule.name);
      }
    }
    else if (rule instanceof ConstantNode) {
      // Literal constant must match exactly
      if(rule.value !== node.value) {
        return [];
      }
    }
    else {
      // Some other node was encountered which we aren't prepared for, so no match
      return [];
    }

    // It's a match!

    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match');
    return res;
  }


  /**
   * Determines whether p and q (and all their children nodes) are identical.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
   * @return {Object} Information about the match, if it exists.
   */
  function _exactMatch(p, q) {
    if(p instanceof ConstantNode && q instanceof ConstantNode) {
      if(p.value !== q.value) {
        return false;
      }
    }
    else if(p instanceof SymbolNode && q instanceof SymbolNode) {
      if(p.name !== q.name) {
        return false;
      }
    }
    else if(p instanceof OperatorNode && q instanceof OperatorNode
         || p instanceof FunctionNode && q instanceof FunctionNode) {
      if (p instanceof OperatorNode) {
        if (p.op !== q.op || p.fn !== q.fn) {
          return false;
        }
      }
      else if (p instanceof FunctionNode) {
        if (p.name !== q.name) {
          return false;
        }
      }

      if(p.args.length !== q.args.length) {
        return false;
      }

      for(var i=0; i<p.args.length; i++) {
        if(!_exactMatch(p.args[i], q.args[i])) {
          return false;
        }
      }
    }
    else {
      return false;
    }

    return true;
  }

  return simplify;
}

exports.math = true;
exports.name = 'simplify';
exports.factory = factory;

},{"../../expression/node/ConstantNode":240,"../../expression/node/FunctionNode":242,"../../expression/node/Node":244,"../../expression/node/OperatorNode":246,"../../expression/node/ParenthesisNode":247,"../../expression/node/SymbolNode":249,"../../expression/parse":257,"./simplify/resolve":278,"./simplify/simplifyConstant":279,"./simplify/simplifyCore":280,"./simplify/util":281}],278:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed, math) {
  var Node = math.expression.node.Node;
  var OperatorNode = math.expression.node.OperatorNode;
  var FunctionNode = math.expression.node.FunctionNode;
  var ParenthesisNode = math.expression.node.ParenthesisNode;

  /**
   * resolve(expr, scope) replaces variable nodes with their scoped values
   *
   * Syntax:
   *
   *     simplify.resolve(expr, scope)
   *
   * Examples:
   *
   *     math.simplify.resolve('x + y', {x:1, y:2}) // Node {1 + 2}
   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
   *     math.simplify('x+y', {x:2, y:'x+x'}).toString(); // "6"
   *
   * @param {Node} node
   *     The expression tree to be simplified
   * @param {Object} scope with variables to be resolved
   */
  function resolve(node, scope) {
    if (!scope) {
        return node;
    }
    if (type.isSymbolNode(node)) {
        var value = scope[node.name];
        if (value instanceof Node) {
            return resolve(value, scope);
        } else if (typeof value === 'number') {
            return math.parse(String(value));
        }
    } else if (type.isOperatorNode(node)) {
        var args = node.args.map(function (arg) {
          return resolve(arg, scope)
        });
        return new OperatorNode(node.op, node.fn, args);
    } else if (type.isParenthesisNode(node)) {
        return new ParenthesisNode(resolve(node.content, scope));
    } else if (type.isFunctionNode(node)) {
        var args = node.args.map(function (arg) {
          return resolve(arg, scope)
        });
        return new FunctionNode(node.name, args);
    }
    return node;
  }

  return resolve;
}

exports.math = true;
exports.name = 'resolve';
exports.path = 'algebra.simplify';
exports.factory = factory;

},{}],279:[function(require,module,exports){
'use strict';

var digits = require('./../../../utils/number').digits;
// TODO this could be improved by simplifying seperated constants under associative and commutative operators
function factory(type, config, load, typed, math) {
  var util = load(require('./util'));
  var isCommutative = util.isCommutative;
  var isAssociative = util.isAssociative;
  var allChildren = util.allChildren;
  var createMakeNodeFunction = util.createMakeNodeFunction;
  var ConstantNode = math.expression.node.ConstantNode;
  var OperatorNode = math.expression.node.OperatorNode;

  function simplifyConstant(expr) {
    var res = foldFraction(expr);
    return type.isNode(res) ? res : _toNode(res);
  }

  function _eval(fnname, args) {
    try {
      return _toNumber(math[fnname].apply(null, args));
    }
    catch (ignore) {
      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
      args = args.map(function(x){
        if (type.isFraction(x)) {
          return x.valueOf();
        }
        return x;
      });
      return _toNumber(math[fnname].apply(null, args));
    }
  }

  var _toNode = typed({
    'Fraction': _fractionToNode,
    'number': function(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }
      return new ConstantNode(n);
    },
    'BigNumber': function(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(n.negated().toString(), 'number'));
      }
      return new ConstantNode(n.toString(), 'number');
    },
    'Complex': function(s) {
      throw 'Cannot convert Complex number to Node';
    }
  });

  // convert a number to a fraction only if it can be expressed exactly
  function _exactFraction(n) {
    if (isFinite(n)) {
      var f = math.fraction(n);
      if (f.valueOf() === n) {
        return f;
      }
    }
    return n;
  }

  // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
  // BigNumbers are left alone
  var _toNumber = typed({
    'string': function(s) {
      if (config.number === 'BigNumber') {
        return math.bignumber(s);
      }
      else if (config.number === 'Fraction') {
        return math.fraction(s);
      }
      else {
        return _exactFraction(parseFloat(s));
      }
    },

    'Fraction': function(s) { return s; },

    'BigNumber': function(s) { return s; },

    'number': function(s) {
      return _exactFraction(s);
    },

    'Complex': function(s) {
      if (s.im !== 0) {
        return s;
      }
      return _exactFraction(s.re);
    },
  });

  function unaryMinusNode(n) {
    return new OperatorNode('-', 'unaryMinus', [n]);
  }

  function _fractionToNode(f) {
    var n;
    var vn = f.s*f.n;
    if (vn < 0) {
      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)])
    }
    else {
      n = new ConstantNode(vn);
    }

    if (f.d === 1) {
      return n;
    }
    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
  }

  /*
   * Create a binary tree from a list of Fractions and Nodes.
   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
   * @param args - list of Fractions and Nodes
   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
   * if args.length is 1, returns args[0]
   * @return - Either a Node representing a binary expression or Fraction
   */
  function foldOp(fn, args, makeNode) {
    return args.reduce(function(a, b) {
      if (!type.isNode(a) && !type.isNode(b)) {
        try {
          return _eval(fn, [a,b]);
        }
        catch (ignoreandcontinue) {}
        a = _toNode(a);
        b = _toNode(b);
      }
      else if (!type.isNode(a)) {
        a = _toNode(a);
      }
      else if (!type.isNode(b)) {
        b = _toNode(b);
      }

      return makeNode([a, b]);
    });
  }

  // destroys the original node and returns a folded one
  function foldFraction(node) {
    switch(node.type) {
      case 'SymbolNode':
        return node;
      case 'ConstantNode':
        if (node.valueType === 'number') {
          return _toNumber(node.value);
        }
        return node;
      case 'FunctionNode':
        if (math[node.name] && math[node.name].rawArgs) {
          return node;
        }
        /* falls through */
      case 'OperatorNode':
        var fn = node.fn.toString();
        var args;
        var res;
        var makeNode = createMakeNodeFunction(node);
        if (node.args.length === 1) {
          args = [foldFraction(node.args[0])];
          if (!type.isNode(args[0])) {
            res = _eval(fn, args);
          }
          else {
            res = makeNode(args);
          }
        }
        else if (isAssociative(node)) {
          args = allChildren(node);
          args = args.map(foldFraction);

          if (isCommutative(fn)) {
            // commutative binary operator
            var consts = [], vars = [];

            for (var i=0; i < args.length; i++) {
              if (!type.isNode(args[i])) {
                consts.push(args[i]);
              }
              else {
                vars.push(args[i]);
              }
            }

            if (consts.length > 1) {
              res = foldOp(fn, consts, makeNode);
              vars.unshift(res);
              res = foldOp(fn, vars, makeNode);
            }
            else {
              // we won't change the children order since it's not neccessary
              res = foldOp(fn, args, makeNode);
            }
          }
          else {
            // non-commutative binary operator
            res = foldOp(fn, args, makeNode);
          }
        }
        else {
          // non-associative binary operator
          args = node.args.map(foldFraction);
          res = foldOp(fn, args, makeNode);
        }
        return res;
      case 'ParenthesisNode':
        // remove the uneccessary parenthesis
        return foldFraction(node.content);
      case 'AccessorNode':
        /* falls through */
      case 'ArrayNode':
        /* falls through */
      case 'AssignmentNode':
        /* falls through */
      case 'BlockNode':
        /* falls through */
      case 'FunctionAssignmentNode':
        /* falls through */
      case 'IndexNode':
        /* falls through */
      case 'ObjectNode':
        /* falls through */
      case 'RangeNode':
        /* falls through */
      case 'UpdateNode':
        /* falls through */
      case 'ConditionalNode':
        /* falls through */
      default:
        throw 'Unimplemented node type in simplifyConstant: '+node.type;
    }
  }

  return simplifyConstant;
}

exports.math = true;
exports.name = 'simplifyConstant';
exports.path = 'algebra.simplify';
exports.factory = factory;

},{"./../../../utils/number":557,"./util":281}],280:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed, math) {
  var ConstantNode = math.expression.node.ConstantNode;
  var OperatorNode = math.expression.node.OperatorNode;
  var FunctionNode = math.expression.node.FunctionNode;

  var node0 = new ConstantNode(0);
  var node1 = new ConstantNode(1);

  /**
   * simplifyCore() performs single pass simplification suitable for
   * applications requiring ultimate performance. In contrast, simplify()
   * extends simplifyCore() with additional passes to provide deeper
   * simplification.
   *
   * Syntax:
   *
   *     simplify.simpifyCore(expr)
   *
   * Examples:
   *
   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');
   *     math.simplify.simpifyCore(f);                          // Node {2 * x}
   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]); // Node {2 * x};
   *
   * See also:
   *
   *     derivative
   *
   * @param {Node} node
   *     The expression to be simplified
   */
  function simplifyCore(node) {
    if (type.isOperatorNode(node) && node.args.length <= 2) {
      var a0 = simplifyCore(node.args[0]);
      var a1 = node.args[1] && simplifyCore(node.args[1]);
      if (node.op === "+") {
          if (node.args.length === 1) {
            return node.args[0];
          }
          if (type.isConstantNode(a0)) {
              if (a0.value === "0") {
                  return a1;
              } else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 5) {
                  return new ConstantNode(Number(a0.value) + Number(a1.value));
              }
          }
          if (type.isConstantNode(a1) && a1.value === "0") {
              return a0;
          }
          if (node.args.length === 2 && type.isOperatorNode(a1) && a1.op === '-' && a1.fn === 'unaryMinus') {
              return new OperatorNode('-', 'subtract', [a0,a1.args[0]]);
          }
          return new OperatorNode(node.op, node.fn, a1 ? [a0,a1] : [a0]);
      } else if (node.op === "-") {
          if (type.isConstantNode(a0) && a1) {
              if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 5) {
                  return new ConstantNode(Number(a0.value) - Number(a1.value));
              } else if (a0.value === "0") {
                  return new OperatorNode("-", "unaryMinus", [a1]);
              }
          }
          if (node.fn === "subtract" && node.args.length === 2) {
              if (type.isConstantNode(a1) && a1.value === "0") {
                  return a0;
              }
              if (type.isOperatorNode(a1) && a1.fn === "unaryMinus") {
                  return simplifyCore(new OperatorNode("+", "add", [a0, a1.args[0]]));
              }
              return new OperatorNode(node.op, node.fn, [a0,a1]);
          } else if (node.fn === "unaryMinus") {
              if (type.isOperatorNode(a0)) {
                  if (a0.fn === 'unaryMinus') {
                      return a0.args[0];
                  }
              }
              return new OperatorNode(node.op, node.fn, [a0]);
          }
          throw new Error('never happens');
      } else if (node.op === "*") {
          if (type.isConstantNode(a0)) {
              if (a0.value === "0") {
                  return node0;
              } else if (a0.value === "1") {
                  return a1;
              } else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 5) {
                  return new ConstantNode(Number(a0.value) * Number(a1.value));
              }
          }
          if (type.isConstantNode(a1)) {
              if (a1.value === "0") {
                  return node0;
              } else if (a1.value === "1") {
                  return a0;
              } else if (type.isOperatorNode(a0) && a0.op === node.op) {
                  var a00 = a0.args[0];
                  if (type.isConstantNode(a00) && a1.value && a1.value.length < 5 && a00.value && a00.value.length < 5) {
                      var a00_a1 =  new ConstantNode(Number(a0.args[0].value) * Number(a1.value));
                      return new OperatorNode(node.op, node.fn, [a00_a1, a0.args[1]]); // constants on left
                  }
              }
              return new OperatorNode(node.op, node.fn, [a1, a0]); // constants on left
          }
          return new OperatorNode(node.op, node.fn, [a0, a1]);
      } else if (node.op === "/") {
          if (type.isConstantNode(a0)) {
              if (a0.value === "0") {
                  return node0;
              } else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && (a1.value === "1" || a1.value==="2" || a1.value==="4")) {
                  return new ConstantNode(Number(a0.value) / Number(a1.value));
              }
          }
          return new OperatorNode(node.op, node.fn, [a0, a1]);
      } else if (node.op === "^") {
          if (type.isConstantNode(a1)) {
              if (a1.value === "0") {
                  return node1;
              } else if (a1.value === "1") {
                  return a0;
              } else if (type.isConstantNode(a1) && a0.value && a0.value.length < 5 && a1.value && a1.value.length < 2) { // fold constant
                  return new ConstantNode(
                      math.pow(Number(a0.value), Number(a1.value)));
              }
          }
          return new OperatorNode(node.op, node.fn, [a0, a1]);
      }
    } else if (type.isParenthesisNode(node)) {
        var c = simplifyCore(node.content);
        if (type.isParenthesisNode(c) || type.isSymbolNode(c) || type.isConstantNode(c)) {
            return c;
        }
        return new ParenthesisNode(c);
    } else if (type.isFunctionNode(node)) {
          var args = node.args.map(simplifyCore);
          if (args.length === 1) {
              if (type.isParenthesisNode(args[0])) {
                  args[0] = args[0].content;
              }
          }
          return new FunctionNode(simplifyCore(node.fn), args);
    } else {
        // cannot simplify
    }
    return node;
  }

  return simplifyCore;
}

exports.math = true;
exports.name = 'simplifyCore';
exports.path = 'algebra.simplify';
exports.factory = factory;

},{}],281:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed, math) {
  var FunctionNode = math.expression.node.FunctionNode;
  var OperatorNode = math.expression.node.OperatorNode;
  var SymbolNode = math.expression.node.SymbolNode;

  // TODO commutative/associative properties rely on the arguments
  // e.g. multiply is not commutative for matrices
  // The properties should be calculated from an argument to simplify, or possibly something in math.config
  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
  var commutative = {
    'add': true,
    'multiply': true
  }
  var associative = {
    'add': true,
    'multiply': true
  }


  function isCommutative(node, context) {
    if (!node.args || node.args.length <=1) {
      return true;
    }
    var name = node.fn.toString();
    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {
      return context[name].commutative;
    }
    return commutative[name] || false;
  }

  function isAssociative(node, context) {
    if (!node.args || node.args.length <=1) {
      return true;
    }
    var name = node.fn.toString();
    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {
      return context[name].associative;
    }
    return associative[name] || false;
  }

  /**
   * Flatten all associative operators in an expression tree.
   * Assumes parentheses have already been removed.
   */
  function flatten(node) {
    if (!node.args || node.args.length === 0) {
      return node;
    }
    node.args = allChildren(node);
    for (var i=0; i<node.args.length; i++) {
      flatten(node.args[i]);
    }
  }

  /**
   * Get the children of a node as if it has been flattened.
   * TODO implement for FunctionNodes
   */
  function allChildren(node) {
    var op;
    var children = [];
    var findChildren = function(node) {
      for (var i = 0; i < node.args.length; i++) {
        var child = node.args[i];
        if (type.isOperatorNode(child) && op === child.op) {
          findChildren(child);
        }
        else {
          children.push(child);
        }
      }
    };

    if (type.isOperatorNode(node) && isAssociative(node)) {
      op = node.op;
      findChildren(node);
      return children;
    }
    else {
      return node.args;
    }
  }

  /**
   *  Unflatten all flattened operators to a right-heavy binary tree.
   */
  function unflattenr(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }
    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;
    for (var i = 0; i < l; i++) {
      unflattenr(node.args[i])
    }
    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.pop();
      while (node.args.length > 0) {
        curnode = makeNode([node.args.pop(), curnode]);
      }
      node.args = curnode.args;
    }
  }

  /**
   *  Unflatten all flattened operators to a left-heavy binary tree.
   */
  function unflattenl(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }
    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;
    for (var i = 0; i < l; i++) {
      unflattenl(node.args[i])
    }
    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.shift();
      while (node.args.length > 0) {
        curnode = makeNode([curnode, node.args.shift()]);
      }
      node.args = curnode.args;
    }
  }

  function createMakeNodeFunction(node) {
    if (type.isOperatorNode(node)) {
      return function(args){
        try{
          return new OperatorNode(node.op, node.fn, args);
        } catch(err){
          console.error(err);
          return [];
        }
      };
    }
    else {
      return function(args){
        return new FunctionNode(new SymbolNode(node.name), args);
      };
    }
  }
  return {
    createMakeNodeFunction: createMakeNodeFunction,
    isCommutative: isCommutative,
    isAssociative: isAssociative,
    flatten: flatten,
    allChildren: allChildren,
    unflattenr: unflattenr,
    unflattenl: unflattenl
  };
}

exports.factory = factory;
exports.math = true;
},{}],282:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../../type/matrix/function/matrix'));
  var divideScalar = load(require('../../arithmetic/divideScalar'));
  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));
  var subtract = load(require('../../arithmetic/subtract'));
  var equalScalar = load(require('../../relational/equalScalar'));

  var solveValidation = load(require('./utils/solveValidation'));

  var DenseMatrix = type.DenseMatrix;

  /** 
   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b);
   *
   * Examples:
   *
   *    var a = [[-2, 3], [2, 1]];
   *    var b = [11, 9];
   *    var x = lsolve(a, b);  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */
  var lsolve = typed('lsolve', {

    'SparseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _sparseForwardSubstitution(m, b);
    },
    
    'DenseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _denseForwardSubstitution(m, b);
    },
    
    'Array, Array | Matrix': function (a, b) {
      // create dense matrix from array
      var m = matrix(a);
      // use matrix implementation
      var r = _denseForwardSubstitution(m, b);
      // result
      return r.valueOf();
    }
  });

  var _denseForwardSubstitution = function (m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    // column vector data
    var bdata = b._data;
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1];
    // result
    var x = [];
    // data
    var data = m._data;
    // forward solve m * x = b, loop columns
    for (var j = 0; j < columns; j++) {
      // b[j]
      var bj = bdata[j][0] || 0;
      // x[j]
      var xj;
      // forward substitution (outer product) avoids inner looping when bj == 0
      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = data[j][j];
        // check vjj
        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        // calculate xj
        xj = divideScalar(bj, vjj);
        // loop rows
        for (var i = j + 1; i < rows; i++) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
        }
      }
      else {
        // zero @ j
        xj = 0;
      }
      // update x
      x[j] = [xj];
    }
    // return vector
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  };

  var _sparseForwardSubstitution = function (m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    // column vector data
    var bdata = b._data;
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1];
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    // vars
    var i, k;
    // result
    var x = [];
    // forward solve m * x = b, loop columns
    for (var j = 0; j < columns; j++) {
      // b[j]
      var bj = bdata[j][0] || 0;
      // forward substitution (outer product) avoids inner looping when bj == 0
      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = 0;
        // lower triangular matrix values & index (column j)
        var jvalues = [];
        var jindex = [];
        // last index in column
        var l = ptr[j + 1];
        // values in column, find value @ [j, j]
        for (k = ptr[j]; k < l; k++) {
          // row
          i = index[k];
          // check row (rows are not sorted!)
          if (i === j) {
            // update vjj
            vjj = values[k];
          }
          else if (i > j) {
            // store lower triangular
            jvalues.push(values[k]);
            jindex.push(i);
          }
        }
        // at this point we must have a value @ [j, j]
        if (equalScalar(vjj, 0)) {
          // system cannot be solved, there is no value @ [j, j]
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        // calculate xj
        var xj = divideScalar(bj, vjj);
        // loop lower triangular
        for (k = 0, l = jindex.length; k < l; k++) {
          // row
          i = jindex[k];
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
        }
        // update x
        x[j] = [xj];
      }
      else {
        // update x
        x[j] = [0];
      }
    }
    // return vector
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  };

  return lsolve;
}

exports.name = 'lsolve';
exports.factory = factory;

},{"../../../type/matrix/function/matrix":505,"../../arithmetic/divideScalar":311,"../../arithmetic/multiplyScalar":326,"../../arithmetic/subtract":334,"../../relational/equalScalar":406,"./utils/solveValidation":285}],283:[function(require,module,exports){
'use strict';

var isArray = Array.isArray;

function factory (type, config, load, typed) {
  
  var matrix = load(require('../../../type/matrix/function/matrix'));
  var lup = load(require('../decomposition/lup'));
  var slu = load(require('../decomposition/slu'));
  var cs_ipvec = load(require('../sparse/cs_ipvec'));

  var solveValidation = load(require('./utils/solveValidation'));

  var usolve = load(require('./usolve'));
  var lsolve = load(require('./lsolve'));

  /**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];
   *
   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    var f = math.lup(m);
   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    var a = [[-2, 3], [2, 1]];
   *    var b = [11, 9];
   *    var x = math.lusolve(a, b);  // [[2], [5]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */
  var lusolve = typed('lusolve', {
    
    'Array, Array | Matrix': function (a, b) {
      // convert a to matrix
      a = matrix(a);
      // matrix lup decomposition
      var d = lup(a);
      // solve
      var x = _lusolve(d.L, d.U, d.p, null, b);
      // convert result to array
      return x.valueOf();
    },
    
    'DenseMatrix, Array | Matrix': function (a, b) {
      // matrix lup decomposition
      var d = lup(a);
      // solve
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    
    'SparseMatrix, Array | Matrix': function (a, b) {
      // matrix lup decomposition
      var d = lup(a);
      // solve
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    
    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {
      // matrix lu decomposition
      var d = slu(a, order, threshold);
      // solve
      return _lusolve(d.L, d.U, d.p, d.q, b);
    },

    'Object, Array | Matrix': function (d, b) {
      // solve
      return _lusolve(d.L, d.U, d.p, d.q, b);
    }
  });
  
  var _toMatrix = function (a) {
    // check it is a matrix
    if (type.isMatrix(a))
      return a;
    // check array
    if (isArray(a))
      return matrix(a);
    // throw
    throw new TypeError('Invalid Matrix LU decomposition');
  };
  
  var _lusolve = function (l, u, p, q, b) {
    // verify L, U, P
    l = _toMatrix(l);
    u = _toMatrix(u);
    // validate matrix and vector
    b = solveValidation(l, b, false);
    // apply row permutations if needed (b is a DenseMatrix)
    if (p)
      b._data = cs_ipvec(p, b._data);
    // use forward substitution to resolve L * y = b
    var y = lsolve(l, b);
    // use backward substitution to resolve U * x = y
    var x = usolve(u, y);
    // apply column permutations if needed (x is a DenseMatrix)
    if (q)
      x._data = cs_ipvec(q, x._data);
    // return solution
    return x;
  };

  return lusolve;
}

exports.name = 'lusolve';
exports.factory = factory;

},{"../../../type/matrix/function/matrix":505,"../decomposition/lup":271,"../decomposition/slu":273,"../sparse/cs_ipvec":292,"./lsolve":282,"./usolve":284,"./utils/solveValidation":285}],284:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../../type/matrix/function/matrix'));
  var divideScalar = load(require('../../arithmetic/divideScalar'));
  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));
  var subtract = load(require('../../arithmetic/subtract'));
  var equalScalar = load(require('../../relational/equalScalar'));

  var solveValidation = load(require('./utils/solveValidation'));
  
  var DenseMatrix = type.DenseMatrix;

  /**
   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b);
   *
   * Examples:
   *
   *    var a = [[-2, 3], [2, 1]];
   *    var b = [11, 9];
   *    var x = usolve(a, b);  // [[8], [9]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */
  var usolve = typed('usolve', {
    
    'SparseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _sparseBackwardSubstitution(m, b);
    },

    'DenseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _denseBackwardSubstitution(m, b);
    },

    'Array, Array | Matrix': function (a, b) {
      // create dense matrix from array
      var m = matrix(a);
      // use matrix implementation
      var r = _denseBackwardSubstitution(m, b);
      // result
      return r.valueOf();
    }
  });

  var _denseBackwardSubstitution = function (m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    // column vector data
    var bdata = b._data;
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1];
    // result
    var x = [];
    // arrays
    var data = m._data;
    // backward solve m * x = b, loop columns (backwards)
    for (var j = columns - 1; j >= 0 ; j--) {
      // b[j]
      var bj = bdata[j][0] || 0;
      // x[j]
      var xj;
      // backward substitution (outer product) avoids inner looping when bj == 0
      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = data[j][j];
        // check vjj
        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        // calculate xj
        xj = divideScalar(bj, vjj);        
        // loop rows
        for (var i = j - 1; i >= 0; i--) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
        }
      }
      else {
        // zero value @ j
        xj = 0;
      }
      // update x
      x[j] = [xj];
    }
    // return column vector
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  };
  
  var _sparseBackwardSubstitution = function (m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    // column vector data
    var bdata = b._data;
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1];
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    // vars
    var i, k;
    // result
    var x = [];
    // backward solve m * x = b, loop columns (backwards)
    for (var j = columns - 1; j >= 0 ; j--) {
      // b[j]
      var bj = bdata[j][0] || 0;
      // backward substitution (outer product) avoids inner looping when bj == 0
      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        var vjj = 0;
        // upper triangular matrix values & index (column j)
        var jvalues = [];
        var jindex = [];
        // first & last indeces in column
        var f = ptr[j];
        var l = ptr[j + 1];
        // values in column, find value @ [j, j], loop backwards
        for (k = l - 1; k >= f; k--) {
          // row
          i = index[k];
          // check row
          if (i === j) {
            // update vjj
            vjj = values[k];
          }
          else if (i < j) {
            // store upper triangular
            jvalues.push(values[k]);
            jindex.push(i);
          }
        }
        // at this point we must have a value @ [j, j]
        if (equalScalar(vjj, 0)) {
          // system cannot be solved, there is no value @ [j, j]
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        // calculate xj
        var xj = divideScalar(bj, vjj);
        // loop upper triangular
        for (k = 0, l = jindex.length; k < l; k++) {
          // row
          i = jindex[k];
          // update copy of b
          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
        }
        // update x
        x[j] = [xj];
      }
      else {
        // update x
        x[j] = [0];
      }
    }
    // return vector
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  };
  
  return usolve;
}

exports.name = 'usolve';
exports.factory = factory;

},{"../../../type/matrix/function/matrix":505,"../../arithmetic/divideScalar":311,"../../arithmetic/multiplyScalar":326,"../../arithmetic/subtract":334,"../../relational/equalScalar":406,"./utils/solveValidation":285}],285:[function(require,module,exports){
'use strict';

var util = require('../../../../utils/index');

var string = util.string;
var array = util.array;

var isArray = Array.isArray;

function factory (type) {
  
  var DenseMatrix = type.DenseMatrix;

  /**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */
  var solveValidation = function (m, b, copy) {
    // matrix size
    var size = m.size();
    // validate matrix dimensions
    if (size.length !== 2)
      throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');
    // rows & columns
    var rows = size[0];
    var columns = size[1];    
    // validate rows & columns
    if (rows !== columns) 
      throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');
    // vars
    var data, i, bdata;
    // check b is matrix
    if (type.isMatrix(b)) {
      // matrix size
      var msize = b.size();
      // vector
      if (msize.length === 1) {
        // check vector length
        if (msize[0] !== rows)
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        // create data array
        data = [];
        // matrix data (DenseMatrix)
        bdata = b._data;
        // loop b data
        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [bdata[i]];
        }
        // return Dense Matrix
        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      }
      // two dimensions
      if (msize.length === 2) {
        // array must be a column vector
        if (msize[0] !== rows || msize[1] !== 1)
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        // check matrix type
        if (type.isDenseMatrix(b)) {
          // check a copy is needed
          if (copy) {
            // create data array
            data = [];
            // matrix data (DenseMatrix)
            bdata = b._data;
            // loop b data
            for (i = 0; i < rows; i++) {
              // row array
              data[i] = [bdata[i][0]];
            }
            // return Dense Matrix
            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          }
          // b is already a column vector
          return b;
        }
        // create data array
        data = [];
        for (i = 0; i < rows; i++)
          data[i] = [0];
        // sparse matrix arrays
        var values = b._values;
        var index = b._index;
        var ptr = b._ptr;
        // loop values in column 0
        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
          // row
          i = index[k];
          // add to data
          data[i][0] = values[k]; 
        }
        // return Dense Matrix
        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      }
      // throw error
      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
    }
    // check b is array
    if (isArray(b)) {
      // size
      var asize = array.size(b);
      // check matrix dimensions, vector
      if (asize.length === 1) {
        // check vector length
        if (asize[0] !== rows)
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');        
        // create data array
        data = [];
        // loop b
        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [b[i]];
        }
        // return Dense Matrix
        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }
      if (asize.length === 2) {
        // array must be a column vector
        if (asize[0] !== rows || asize[1] !== 1)
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        // create data array
        data = [];
        // loop b data
        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [b[i][0]];
        }
        // return Dense Matrix
        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }
      // throw error
      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');      
    }
  };
  
  return solveValidation;
}

exports.factory = factory;
},{"../../../../utils/index":555}],286:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var cs_flip = load(require('./cs_flip'));
  var cs_fkeep = load(require('./cs_fkeep'));
  var cs_tdfs = load(require('./cs_tdfs'));
  
  var add       = load(require('../../arithmetic/add'));
  var multiply  = load(require('../../arithmetic/multiply'));
  var transpose = load(require('../../matrix/transpose'));

  /**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used 
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_amd = function (order, a) {
    // check input parameters
    if (!a || order <= 0 || order > 3)
      return null;
    // a matrix arrays
    var asize = a._size;
    // rows and columns
    var m = asize[0];
    var n = asize[1];    
    // initialize vars
    var lemax = 0;
    // dense threshold
    var dense = Math.max(16, 10 * Math.sqrt(n));
    dense = Math.min(n - 2, dense);
    // create target matrix C
    var cm = _createTargetMatrix(order, a, m, n, dense);
    // drop diagonal entries
    cs_fkeep(cm, _diag, null);
    // C matrix arrays
    var cindex = cm._index;
    var cptr = cm._ptr;

    // number of nonzero elements in C
    var cnz = cptr[n];
    
    // allocate result (n+1)
    var P = [];
    
    // create workspace (8 * (n + 1))
    var W = [];
    var len = 0; // first n + 1 entries
    var nv = n + 1; // next n + 1 entries
    var next = 2 * (n + 1); // next n + 1 entries
    var head = 3 * (n + 1);  // next n + 1 entries
    var elen = 4 * (n + 1);  // next n + 1 entries
    var degree = 5 * (n + 1);  // next n + 1 entries
    var w = 6 * (n + 1);  // next n + 1 entries
    var hhead = 7 * (n + 1);  // last n + 1 entries    

    // use P as workspace for last
    var last = P;
    
    // initialize quotient graph
    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);
    
    // initialize degree lists
    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);
    
    // minimum degree node
    var mindeg = 0;
    
    // vars
    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;
    
    // while (selecting pivots) do
    while (nel < n) {
      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
      // many nodes have been eliminated.
      for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++);      
      if (W[next + k] != -1) 
        last[W[next + k]] = -1;
      // remove k from degree list
      W[head + mindeg] = W[next + k];
      // elenk = |Ek|
      var elenk = W[elen + k];
      // # of nodes k represents
      var nvk = W[nv + k];
      // W[nv + k] nodes of A eliminated
      nel += nvk;

      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is 
      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
      // degree lists. All elements e in Ek are absorved into element k.
      var dk = 0;
      // flag k as in Lk
      W[nv + k] = -nvk;
      var p = cptr[k];
      // do in place if W[elen + k] == 0
      var pk1 = (elenk === 0) ? p : cnz;
      var pk2 = pk1;
      for (k1 = 1; k1 <= elenk + 1; k1++) {
        if (k1 > elenk) {
          // search the nodes in k
          e = k;
          // list of nodes starts at cindex[pj]
          pj = p;
          // length of list of nodes in k
          ln = W[len + k] - elenk;
        }
        else {
          // search the nodes in e
          e = cindex[p++];
          pj = cptr[e];
          // length of list of nodes in e
          ln = W[len + e];
        }
        for (k2 = 1; k2 <= ln; k2++) {
          i = cindex[pj++];
          // check  node i dead, or seen
          if ((nvi = W[nv + i]) <= 0) 
            continue;
          // W[degree + Lk] += size of node i
          dk += nvi;
          // negate W[nv + i] to denote i in Lk
          W[nv + i] = -nvi;
          // place i in Lk
          cindex[pk2++] = i;
          if (W[next + i] != -1) 
            last[W[next + i]] = last[i];
          // check we need to remove i from degree list
          if (last[i] != -1) 
            W[next + last[i]] = W[next + i];
          else
            W[head + W[degree + i]] = W[next + i];
        }
        if (e != k) {
          // absorb e into k
          cptr[e] = cs_flip(k);
          // e is now a dead element
          W[w + e] = 0;
        }
      }
      // cindex[cnz...nzmax] is free
      if (elenk !== 0) 
        cnz = pk2;
      // external degree of k - |Lk\i|
      W[degree + k] = dk;
      // element k is in cindex[pk1..pk2-1]
      cptr[k] = pk1;
      W[len + k] = pk2 - pk1;
      // k is now an element
      W[elen + k] = -2;
            
      // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
      // scan, no entry in the w array is greater than or equal to mark.
      
      // clear w if necessary
      mark = _wclear(mark, lemax, W, w, n);
      // scan 1: find |Le\Lk|
      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk];
        // check if W[elen + i] empty, skip it
        if ((eln = W[elen + i]) <= 0) 
          continue;
        // W[nv + i] was negated
        nvi = -W[nv + i];
        var wnvi = mark - nvi;
        // scan Ei
        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
          e = cindex[p];
          if (W[w + e] >= mark) {
            // decrement |Le\Lk|
            W[w + e] -= nvi;
          }
          else if (W[w + e] !== 0) {
            // ensure e is a live element, 1st time e seen in scan 1
            W[w + e] = W[degree + e] + wnvi;
          }
        }
      }
      
      // degree update
      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
      // function h(i) for all nodes in Lk.
      
      // scan2: degree update
      for (pk = pk1; pk < pk2; pk++) {
        // consider node i in Lk
        i = cindex[pk];
        p1 = cptr[i];
        p2 = p1 + W[elen + i] - 1;
        pn = p1;
        // scan Ei
        for (h = 0, d = 0, p = p1; p <= p2; p++) {
          e = cindex[p];
          // check e is an unabsorbed element
          if (W[w + e] !== 0) {
            // dext = |Le\Lk|
            var dext = W[w + e] - mark;
            if (dext > 0) {
              // sum up the set differences
              d += dext;
              // keep e in Ei
              cindex[pn++] = e;
              // compute the hash of node i
              h += e;
            }
            else {
              // aggressive absorb. e->k
              cptr[e] = cs_flip(k);
              // e is a dead element
              W[w + e] = 0;
            }
          }
        }
        // W[elen + i] = |Ei|
        W[elen + i] = pn - p1 + 1;
        var p3 = pn;
        var p4 = p1 + W[len + i];
        // prune edges in Ai
        for (p = p2 + 1; p < p4; p++) {
          j = cindex[p];
          // check node j dead or in Lk
          var nvj = W[nv + j];
          if (nvj <= 0) 
            continue;
          // degree(i) += |j|
          d += nvj;
          // place j in node list of i
          cindex[pn++] = j;
          // compute hash for node i
          h += j;
        }
        // check for mass elimination
        if (d === 0) {
          // absorb i into k
          cptr[i] = cs_flip(k);
          nvi = -W[nv + i];
          // |Lk| -= |i|
          dk -= nvi;
          // |k| += W[nv + i]
          nvk += nvi;
          nel += nvi;
          W[nv + i] = 0;
          // node i is dead
          W[elen + i] = -1;
        }
        else {
          // update degree(i)
          W[degree + i] = Math.min(W[degree + i], d);
          // move first node to end
          cindex[pn] = cindex[p3];
          // move 1st el. to end of Ei
          cindex[p3] = cindex[p1];
          // add k as 1st element in of Ei
          cindex[p1] = k;
          // new len of adj. list of node i
          W[len + i] = pn - p1 + 1;
          // finalize hash of i
          h = (h < 0 ? -h : h) % n;
          // place i in hash bucket
          W[next + i] = W[hhead + h];
          W[hhead + h] = i;
          // save hash of i in last[i]
          last[i] = h;
        }
      }
      // finalize |Lk|
      W[degree + k] = dk;
      lemax = Math.max(lemax, dk);
      // clear w
      mark = _wclear(mark + lemax, lemax, W, w, n);
      
      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
      // If two nodes have identical adjacency lists, their hash functions wil be identical.
      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk];
        // check i is dead, skip it
        if (W[nv + i] >= 0) 
          continue;
        // scan hash bucket of node i
        h = last[i];
        i = W[hhead + h];
        // hash bucket will be empty
        W[hhead + h] = -1;
        for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
          ln = W[len + i];
          eln = W[elen + i];
          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) 
            W[w + cindex[p]] = mark;
          var jlast = i;
          // compare i with all j
          for (j = W[next + i]; j != -1; ) {
            var ok = W[len + j] === ln && W[elen + j] === eln;
            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
              // compare i and j
              if (W[w + cindex[p]] != mark) 
                ok = 0;
            }
            // check i and j are identical
            if (ok) {
              // absorb j into i
              cptr[j] = cs_flip(i);
              W[nv + i] += W[nv + j];
              W[nv + j] = 0;
              // node j is dead
              W[elen + j] = -1;
              // delete j from hash bucket
              j = W[next + j];
              W[next + jlast] = j;
            }
            else {
              // j and i are different
              jlast = j;
              j = W[next + j];
            }
          }
        }
      }
      
      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.
      for (p = pk1, pk = pk1; pk < pk2; pk++) {
        i = cindex[pk];
        // check  i is dead, skip it
        if ((nvi = -W[nv + i]) <= 0) 
          continue;
        // restore W[nv + i]
        W[nv + i] = nvi;
        // compute external degree(i)
        d = W[degree + i] + dk - nvi;
        d = Math.min(d, n - nel - nvi);
        if (W[head + d] != -1) 
          last[W[head + d]] = i;
        // put i back in degree list
        W[next + i] = W[head + d];
        last[i] = -1;
        W[head + d] = i;
        // find new minimum degree
        mindeg = Math.min(mindeg, d);
        W[degree + i] = d;
        // place i in Lk
        cindex[p++] = i;
      }
      // # nodes absorbed into k
      W[nv + k] = nvk;
      // length of adj list of element k
      if ((W[len + k] = p - pk1) === 0) {
        // k is a root of the tree
        cptr[k] = -1;
        // k is now a dead element
        W[w + k] = 0;
      }
      if (elenk !== 0) {
        // free unused space in Lk
        cnz = p;
      }
    }
    
    // Postordering. The elimination is complete, but no permutation has been computed. All that is left 
    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
    // is computed. The tree is restored by unflipping all of ptr.
    
    // fix assembly tree
    for (i = 0; i < n; i++) 
      cptr[i] = cs_flip(cptr[i]);
    for (j = 0; j <= n; j++) 
      W[head + j] = -1;
    // place unordered nodes in lists
    for (j = n; j >= 0; j--) {
      // skip if j is an element
      if (W[nv + j] > 0)
        continue;
      // place j in list of its parent
      W[next + j] = W[head + cptr[j]];
      W[head + cptr[j]] = j;
    }
    // place elements in lists
    for (e = n; e >= 0; e--) {
      // skip unless e is an element
      if (W[nv + e] <= 0)
        continue;
      if (cptr[e] != -1) {
        // place e in list of its parent
        W[next + e] = W[head + cptr[e]];
        W[head + cptr[e]] = e;
      }
    }
    // postorder the assembly tree
    for (k = 0, i = 0; i <= n; i++) {
      if (cptr[i] == -1) 
        k = cs_tdfs(i, k, W, head, next, P, w);
    }
    // remove last item in array
    P.splice(P.length - 1, 1);
    // return P
    return P;
  };
  
  /**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   * 
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */
  var _createTargetMatrix = function (order, a, m, n, dense) {
    // compute A'
    var at = transpose(a);

    // check order = 1, matrix must be square
    if (order === 1 && n === m) {
      // C = A + A'
      return add(a, at);
    }
    
    // check order = 2, drop dense columns from M'
    if (order == 2) {
      // transpose arrays
      var tindex = at._index;
      var tptr = at._ptr;
      // new column index
      var p2 = 0;
      // loop A' columns (rows)
      for (var j = 0; j < m; j++) {
        // column j of AT starts here
        var p = tptr[j];
        // new column j starts here
        tptr[j] = p2;
        // skip dense col j
        if (tptr[j + 1] - p > dense) 
          continue;
        // map rows in column j of A
        for (var p1 = tptr[j + 1]; p < p1; p++) 
          tindex[p2++] = tindex[p];
      }
      // finalize AT
      tptr[m] = p2;
      // recreate A from new transpose matrix
      a = transpose(at);
      // use A' * A
      return multiply(at, a);
    }
    
    // use A' * A, square or rectangular matrix
    return multiply(at, a);
  };

  /**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */
  var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
    // Initialize quotient graph
    for (var k = 0; k < n; k++) 
      W[len + k] = cptr[k + 1] - cptr[k];
    W[len + n] = 0;
    // initialize workspace
    for (var i = 0; i <= n; i++) {
      // degree list i is empty
      W[head + i] = -1;
      last[i] = -1;
      W[next + i] = -1;
      // hash list i is empty
      W[hhead + i] = -1;
      // node i is just one node
      W[nv + i] = 1;
      // node i is alive
      W[w + i] = 1;
      // Ek of node i is empty
      W[elen + i] = 0;
      // degree of node i
      W[degree + i] = W[len + i];
    }
    // clear w
    var mark = _wclear(0, 0, W, w, n);
    // n is a dead element
    W[elen + n] = -2;
    // n is a root of assembly tree
    cptr[n] = -1;
    // n is a dead element
    W[w + n] = 0;
    // return mark
    return mark;
  };

  /**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with 
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */
  var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
    // result
    var nel = 0;
    // loop columns
    for (var i = 0; i < n; i++) {
      // degree @ i
      var d = W[degree + i];
      // check node i is empty
      if (d === 0) {
        // element i is dead
        W[elen + i] = -2;
        nel++;
        // i is a root of assembly tree
        cptr[i] = -1;
        W[w + i] = 0;
      }
      else if (d > dense) {
        // absorb i into element n
        W[nv + i] = 0;
        // node i is dead
        W[elen + i] = -1;
        nel++;
        cptr[i] = cs_flip(n);
        W[nv + n]++;
      }
      else {
        var h = W[head + d];
        if (h != -1)
          last[h] = i;
        // put node i in degree list d
        W[next + i] = W[head + d];
        W[head + d] = i;
      }
    }
    return nel;
  };

  var _wclear = function(mark, lemax, W, w, n) {
    if (mark < 2 || (mark + lemax < 0)) {
      for (var k = 0; k < n; k++) {
        if (W[w + k] !== 0)
          W[w + k] = 1;
      }
      mark = 2 ;
    }
    // at this point, W [0..n-1] < mark holds
    return mark;
  };
  
  var _diag = function (i, j) { 
    return i != j;
  };
  
  return cs_amd;
}

exports.name = 'cs_amd';
exports.path = 'sparse';
exports.factory = factory;

},{"../../arithmetic/add":305,"../../arithmetic/multiply":325,"../../matrix/transpose":388,"./cs_fkeep":290,"./cs_flip":291,"./cs_tdfs":302}],287:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var transpose = load(require('../../matrix/transpose'));
  
  var cs_leaf = load(require('./cs_leaf'));

  /**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_counts = function (a, parent, post, ata) {
    // check inputs
    if (!a || !parent || !post) 
      return null;
    // a matrix arrays
    var asize = a._size;
    // rows and columns
    var m = asize[0];
    var n = asize[1];   
    // variables
    var i, j, k,  J,  p, p0, p1;
    
    // workspace size
    var s = 4 * n + (ata ? (n + m + 1) : 0);
    // allocate workspace
    var w = []; // (s)
    var ancestor = 0; // first n entries
    var maxfirst = n; // next n entries
    var prevleaf = 2 * n; // next n entries
    var first = 3 * n; // next n entries
    var head = 4 * n; // next n + 1 entries (used when ata is true)
    var next = 5 * n + 1; // last entries in workspace
    // clear workspace w[0..s-1]
    for (k = 0; k < s; k++) 
      w[k] = -1;
    
    // allocate result
    var colcount = []; // (n);
    
    // AT = A'
    var at = transpose(a);
    // at arrays
    var tindex = at._index;
    var tptr = at._ptr;

    // find w[first + j]
    for (k = 0; k < n; k++) {
      j = post[k];
      // colcount[j]=1 if j is a leaf
      colcount[j] = (w[first + j] == -1) ? 1 : 0;
      for (; j != -1 && w[first + j] == -1; j = parent[j]) 
        w[first + j] = k;
    }

    // initialize ata if needed
    if (ata) {
      // invert post
      for (k = 0; k < n; k++) 
        w[post[k]] = k;
      // loop rows (columns in AT)
      for (i = 0; i < m; i++) {
        // values in column i of AT
        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) 
          k = Math.min(k, w[tindex[p]]);
        // place row i in linked list k
        w[next + i] = w[head + k];
        w[head + k] = i;
      }
    }
    
    // each node in its own set
    for (i = 0; i < n; i++) 
      w[ancestor + i] = i;
    
    for (k = 0; k < n; k++) {
      // j is the kth node in postordered etree
      j = post[k];
      // check j is not a root
      if (parent[j] != -1) 
        colcount[parent[j]]--;
      
      // J=j for LL'=A case
      for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {
        for (p = tptr[J]; p < tptr[J+1]; p++) {
          i = tindex[p];
          var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
          // check A(i,j) is in skeleton
          if (r.jleaf >= 1) 
            colcount[j]++;
          // check account for overlap in q
          if (r.jleaf == 2) 
            colcount[r.q]--;
        }
      }
      if (parent[j] != -1) 
        w[ancestor + j] = parent[j];
    }
    // sum up colcount's of each child
    for (j = 0; j < n; j++) {
      if (parent[j] != -1) 
        colcount[parent[j]] += colcount[j];
    }
    return colcount;
  };

  return cs_counts;
}

exports.name = 'cs_counts';
exports.path = 'sparse';
exports.factory = factory;

},{"../../matrix/transpose":388,"./cs_leaf":293}],288:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var cs_marked = load(require('./cs_marked'));
  var cs_mark   = load(require('./cs_mark'));
  var cs_unflip = load(require('./cs_unflip'));

  /**
   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
   * at nodes in B (see cs_reach()).
   *
   * @param {Number}  j               The starting node for the DFS algorithm
   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
   * @param {Number}  top             Start index in stack xi[top..n-1]
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   *
   * @return {Number}                 New value of top
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_dfs = function (j, g, top, xi, pinv) {
    // g arrays
    var index = g._index;
    var ptr = g._ptr;
    var size = g._size;
    // columns
    var n = size[1];
    // vars
    var i, p, p2;
    // initialize head
    var head = 0;
    // initialize the recursion stack
    xi[0] = j;
    // loop
    while (head >= 0) {
      // get j from the top of the recursion stack
      j = xi[head];
      // apply permutation vector
      var jnew = pinv ? pinv[j] : j;
      // check node j is marked
      if (!cs_marked(ptr, j)) {
        // mark node j as visited
        cs_mark(ptr, j);
        // update stack (last n entries in xi)
        xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
      }
      // node j done if no unvisited neighbors
      var done = 1;
      // examine all neighbors of j, stack (last n entries in xi)
      for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew+1]); p < p2; p++) {
        // consider neighbor node i
        i = index[p];
        // check we have visited node i, skip it
        if (cs_marked(ptr, i)) 
          continue;
        // pause depth-first search of node j, update stack (last n entries in xi)
        xi[n + head] = p;
        // start dfs at node i
        xi[++head] = i;
        // node j is not done
        done = 0;
        // break, to start dfs(i)
        break;
      }
      // check depth-first search at node j is done
      if (done) {
        // remove j from the recursion stack
        head--;
        // and place in the output stack
        xi[--top] = j;
      }
    }
    return top;    
  };

  return cs_dfs;
}

exports.name = 'cs_dfs';
exports.path = 'sparse';
exports.factory = factory;

},{"./cs_mark":295,"./cs_marked":296,"./cs_unflip":303}],289:[function(require,module,exports){
'use strict';

function factory () {

  /**
   * Computes the elimination tree of Matrix A (using triu(A)) or the 
   * elimination tree of A'A without forming A'A.
   *
   * @param {Matrix}  a               The A Matrix
   * @param {boolean} ata             A value of true the function computes the etree of A'A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_etree = function (a, ata) {
    // check inputs
    if (!a)
      return null;
    // a arrays
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    // rows & columns
    var m = asize[0];
    var n = asize[1];
    
    // allocate result
    var parent = []; // (n)
    
    // allocate workspace
    var w = []; // (n + (ata ? m : 0))
    var ancestor = 0; // first n entries in w
    var prev = n; // last m entries (ata = true)
    
    var i, inext;
    
    // check we are calculating A'A
    if (ata) {
      // initialize workspace
      for (i = 0; i < m; i++) 
        w[prev + i] = -1;
    }
    // loop columns
    for (var k = 0; k < n; k++) {
      // node k has no parent yet
      parent[k] = -1;
      // nor does k have an ancestor
      w[ancestor + k] = -1;
      // values in column k
      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
        // row
        var r = aindex[p];
        // node
        i = ata ? (w[prev + r]) : r;
        // traverse from i to k 
        for (; i != -1 && i < k; i = inext) {
          // inext = ancestor of i
          inext = w[ancestor + i];
          // path compression
          w[ancestor + i] = k;
          // check no anc., parent is k
          if (inext == -1) 
            parent[i] = k;
        }
        if (ata) 
          w[prev + r] = k;
      }
    }
    return parent;
  };

  return cs_etree;
}

exports.name = 'cs_etree';
exports.path = 'sparse';
exports.factory = factory;

},{}],290:[function(require,module,exports){
'use strict';

function factory () {

  /**
   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
   *
   * @param {Matrix}   a              The sparse matrix
   * @param {function} callback       The callback function, function will be invoked with the following args:
   *                                    - The entry row
   *                                    - The entry column
   *                                    - The entry value
   *                                    - The state parameter
   * @param {any}      other          The state
   *
   * @return                          The number of nonzero elements in the matrix
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_fkeep = function (a, callback, other) {
    // a arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    // columns
    var n = asize[1];
    // nonzero items
    var nz = 0;
    // loop columns
    for (var j = 0; j < n; j++) {
      // get current location of col j
      var p = aptr[j];
      // record new location of col j
      aptr[j] = nz;
      for (; p < aptr[j+1]; p++) {
        // check we need to keep this item
        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
          // keep A(i,j)
          aindex[nz] = aindex[p];
          // check we need to process values (pattern only)
          if (avalues) 
            avalues[nz] = avalues[p];
          // increment nonzero items
          nz++;
        }
      }
    }
    // finalize A
    aptr[n] = nz;
    // trim arrays
    aindex.splice(nz, aindex.length - nz);
    // check we need to process values (pattern only)
    if (avalues)
      avalues.splice(nz, avalues.length - nz);    
    // return number of nonzero items
    return (nz);
  };
  
  return cs_fkeep;
}

exports.name = 'cs_fkeep';
exports.path = 'sparse';
exports.factory = factory;

},{}],291:[function(require,module,exports){
'use strict';

function factory () {

  /**
   * This function "flips" its input about the integer -1.
   *
   * @param {Number}  i               The value to flip
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_flip = function (i) {
    // flip the value
    return -i - 2;
  };

  return cs_flip;
}

exports.name = 'cs_flip';
exports.path = 'sparse';
exports.factory = factory;

},{}],292:[function(require,module,exports){
'use strict';

function factory () {

  /**
   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
   *
   * @param {Array} p           The permutation vector of length n. null value denotes identity
   * @param {Array} b           The input vector
   *
   * @return {Array}            The output vector x = P'b
   */
  var cs_ipvec = function (p, b, n) {
    // vars 
    var k;
    var n = b.length;
    var x = [];
    // check permutation vector was provided, p = null denotes identity
    if (p) {
      // loop vector
      for (k = 0; k < n; k++) {
        // apply permutation
        x[p[k]] = b[k];
      }
    }
    else {
      // loop vector
      for (k = 0; k < n; k++) {
        // x[i] = b[i]
        x[k] = b[k];
      }
    }
    return x;
  };

  return cs_ipvec;
}

exports.name = 'cs_ipvec';
exports.path = 'sparse';
exports.factory = factory;

},{}],293:[function(require,module,exports){
'use strict';

function factory () {

  /**
   * This function determines if j is a leaf of the ith row subtree.
   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
   *
   * @param {Number}  i               The ith row subtree
   * @param {Number}  j               The node to test
   * @param {Array}   w               The workspace array
   * @param {Number}  first           The index offset within the workspace for the first array
   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
   *
   * @return {Object}
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {
    
    var s, sparent, jprev;
    
    // our result
    var jleaf = 0;
    var q;
    
    // check j is a leaf
    if (i <= j || w[first + j] <= w[maxfirst + i]) 
      return (-1);
    // update max first[j] seen so far
    w[maxfirst + i] = w[first + j];
    // jprev = previous leaf of ith subtree
    jprev = w[prevleaf + i];
    w[prevleaf + i] = j;
    
    // check j is first or subsequent leaf
    if (jprev === -1) {
      // 1st leaf, q = root of ith subtree
      jleaf = 1;
      q = i;
    }
    else {
      // update jleaf
      jleaf = 2;
      // q = least common ancester (jprev,j)
      for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]);
      for (s = jprev; s != q; s = sparent) {
        // path compression
        sparent = w[ancestor + s];
        w[ancestor + s] = q;
      }      
    }
    return {
      jleaf: jleaf,
      q: q
    };
  };

  return cs_leaf;
}

exports.name = 'cs_leaf';
exports.path = 'sparse';
exports.factory = factory;

},{}],294:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var abs = load(require('../../arithmetic/abs'));
  var divideScalar = load(require('../../arithmetic/divideScalar'));
  var multiply = load(require('../../arithmetic/multiply'));
  
  var larger = load(require('../../relational/larger'));
  var largerEq = load(require('../../relational/largerEq'));
  
  var cs_spsolve = load(require('./cs_spsolve'));

  var SparseMatrix = type.SparseMatrix;

  /**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L 
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing 
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_lu = function (m, s, tol) {
    // validate input
    if (!m)
      return null;
    // m arrays
    var size = m._size;
    // columns
    var n = size[1];
    // symbolic analysis result
    var q;
    var lnz = 100;
    var unz = 100;
    // update symbolic analysis parameters
    if (s) {
      q = s.q;
      lnz = s.lnz || lnz;
      unz = s.unz || unz;
    }
    // L arrays
    var lvalues = []; // (lnz)
    var lindex = []; // (lnz);
    var lptr = []; // (n + 1);
    // L
    var L = new SparseMatrix({
      values: lvalues,
      index: lindex,
      ptr: lptr,
      size: [n, n]
    });
    // U arrays
    var uvalues = []; // (unz);
    var uindex = []; // (unz);
    var uptr = []; // (n + 1);
    // U
    var U = new SparseMatrix({
      values: uvalues,
      index: uindex,
      ptr: uptr,
      size: [n, n]
    });
    // inverse of permutation vector
    var pinv = []; // (n);
    // vars 
    var i, p;
    // allocate arrays
    var x = []; // (n);
    var xi = []; // (2 * n);
    // initialize variables
    for (i = 0; i < n; i++) {
      // clear workspace
      x[i] = 0;
      // no rows pivotal yet
      pinv[i] = -1;
      // no cols of L yet
      lptr[i + 1] = 0;
    }
    // reset number of nonzero elements in L and U
    lnz = 0;
    unz = 0;
    // compute L(:,k) and U(:,k)
    for (var k = 0; k < n; k++) {
      // update ptr
      lptr[k] = lnz;
      uptr[k] = unz;
      // apply column permutations if needed
      var col = q ? q[k] : k;
      // solve triangular system, x = L\A(:,col)
      var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
      // find pivot
      var ipiv = -1;
      var a = -1;
      // loop xi[] from top -> n
      for (p = top; p < n; p++) {
        // x[i] is nonzero
        i = xi[p];
        // check row i is not yet pivotal
        if (pinv[i] < 0) {
          // absolute value of x[i]          
          var xabs = abs(x[i]);
          // check absoulte value is greater than pivot value
          if (larger(xabs, a)) {
            // largest pivot candidate so far
            a = xabs;
            ipiv = i;
          }
        }
        else {
          // x(i) is the entry U(pinv[i],k)
          uindex[unz] = pinv[i];
          uvalues[unz++] = x[i];
        }
      }
      // validate we found a valid pivot
      if (ipiv == -1 || a <= 0) 
        return null;
      // update actual pivot column, give preference to diagonal value
      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))
        ipiv = col;
      // the chosen pivot
      var pivot = x[ipiv];
      // last entry in U(:,k) is U(k,k)
      uindex[unz] = k;
      uvalues[unz++] = pivot;
      // ipiv is the kth pivot row
      pinv[ipiv] = k;
      // first entry in L(:,k) is L(k,k) = 1
      lindex[lnz] = ipiv;
      lvalues[lnz++] = 1;
      // L(k+1:n,k) = x / pivot      
      for (p = top; p < n; p++) {
        // row
        i = xi[p];
        // check x(i) is an entry in L(:,k)
        if (pinv[i] < 0) {
          // save unpermuted row in L
          lindex[lnz] = i;
          // scale pivot column
          lvalues[lnz++] = divideScalar(x[i], pivot);
        }
        // x[0..n-1] = 0 for next k
        x[i] = 0;
      }
    }
    // update ptr
    lptr[n] = lnz;
    uptr[n] = unz;
    // fix row indices of L for final pinv
    for (p = 0; p < lnz; p++) 
      lindex[p] = pinv[lindex[p]];
    // trim arrays
    lvalues.splice(lnz, lvalues.length - lnz);
    lindex.splice(lnz, lindex.length - lnz);
    uvalues.splice(unz, uvalues.length - unz);
    uindex.splice(unz, uindex.length - unz);    
    // return LU factor
    return {
      L: L,
      U: U,
      pinv: pinv
    };
  };

  return cs_lu;
}

exports.name = 'cs_lu';
exports.path = 'sparse';
exports.factory = factory;

},{"../../arithmetic/abs":304,"../../arithmetic/divideScalar":311,"../../arithmetic/multiply":325,"../../relational/larger":408,"../../relational/largerEq":409,"./cs_spsolve":300}],295:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var cs_flip = load(require('./cs_flip'));

  /**
   * Marks the node at w[j]
   *
   * @param {Array}   w               The array
   * @param {Number}  j               The array index
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_mark = function (w, j) {
    // mark w[j]
    w[j] = cs_flip(w [j]);
  };

  return cs_mark;
}

exports.name = 'cs_mark';
exports.path = 'sparse';
exports.factory = factory;

},{"./cs_flip":291}],296:[function(require,module,exports){
'use strict';

function factory () {

  /**
   * Checks if the node at w[j] is marked
   *
   * @param {Array}   w               The array
   * @param {Number}  j               The array index
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_marked = function (w, j) {
    // check node is marked
    return w[j] < 0;
  };

  return cs_marked;
}

exports.name = 'cs_marked';
exports.path = 'sparse';
exports.factory = factory;

},{}],297:[function(require,module,exports){
'use strict';

function factory (type) {

  var SparseMatrix = type.SparseMatrix;

  /**
   * Permutes a sparse matrix C = P * A * Q
   *
   * @param {Matrix}  a               The Matrix A
   * @param {Array}   pinv            The row permutation vector
   * @param {Array}   q               The column permutation vector
   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
   *
   * @return {Matrix}                 C = P * A * Q, null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_permute = function (a, pinv, q, values) {
    // a arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype;
    // rows & columns
    var m = asize[0];
    var n = asize[1];
    // c arrays
    var cvalues = values && a._values ? [] : null;
    var cindex = []; // (aptr[n]);
    var cptr = []; // (n + 1);
    // initialize vars
    var nz = 0;
    // loop columns    
    for (var k = 0; k < n; k++) {
      // column k of C is column q[k] of A
      cptr[k] = nz;
      // apply column permutation
      var j = q ? (q[k]) : k;
      // loop values in column j of A
      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
        // row i of A is row pinv[i] of C
        var r = pinv ? pinv[aindex[t]] : aindex[t];
        // index
        cindex[nz] = r;
        // check we need to populate values
        if (cvalues) 
          cvalues[nz] = avalues[t];
        // increment number of nonzero elements
        nz++;
      }
    }
    // finalize the last column of C
    cptr[n] = nz;
    // return C matrix
    return new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [m, n],
      datatype: adt
    });
  };

  return cs_permute;
}

exports.name = 'cs_permute';
exports.path = 'sparse';
exports.factory = factory;

},{}],298:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var cs_tdfs = load(require('./cs_tdfs'));

  /**
   * Post order a tree of forest
   *
   * @param {Array}   parent          The tree or forest
   * @param {Number}  n               Number of columns
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_post = function (parent, n) {
    // check inputs
    if (!parent) 
      return null;
    // vars 
    var k = 0;
    var j;
    // allocate result
    var post = []; // (n);
    // workspace, head: first n entries, next: next n entries, stack: last n entries
    var w = []; // (3 * n);
    var head = 0; 
    var next = n; 
    var stack = 2 * n;
    // initialize workspace
    for (j = 0; j < n; j++) {
      // empty linked lists
      w[head + j] = -1;
    }
    // traverse nodes in reverse order
    for (j = n-1; j >= 0; j--) {
      // check j is a root
      if (parent[j] == -1) 
        continue;
      // add j to list of its parent
      w[next + j] = w[head + parent[j]];
      w[head + parent[j]] = j;
    }
    // loop nodes
    for (j = 0; j < n; j++) {
      // skip j if it is not a root
      if (parent[j] != -1) 
        continue;
      // depth-first search
      k = cs_tdfs(j, k, w, head, next, post, stack);
    }
    return post;
  };

  return cs_post;
}

exports.name = 'cs_post';
exports.path = 'sparse';
exports.factory = factory;

},{"./cs_tdfs":302}],299:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var cs_dfs = load(require('./cs_dfs'));
  var cs_marked = load(require('./cs_marked'));
  var cs_mark = load(require('./cs_mark'));

  /**
   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 
   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   pinv            The inverse row permutation vector
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_reach = function (g, b, k, xi, pinv) {
    // g arrays
    var gptr = g._ptr;
    var gsize = g._size;
    // b arrays
    var bindex = b._index;
    var bptr = b._ptr;
    // columns
    var n = gsize[1];
    // vars
    var p, p0, p1;
    // initialize top
    var top = n;
    // loop column indeces in B
    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
      // node i
      var i = bindex[p];
      // check node i is marked
      if (!cs_marked(gptr, i)) {
        // start a dfs at unmarked node i
        top = cs_dfs(i, g, top, xi, pinv);
      }
    }
    // loop columns from top -> n - 1
    for (p = top; p < n; p++) {
      // restore G
      cs_mark(gptr, xi[p]);
    }
    return top;
  };

  return cs_reach;
}

exports.name = 'cs_reach';
exports.path = 'sparse';
exports.factory = factory;

},{"./cs_dfs":288,"./cs_mark":295,"./cs_marked":296}],300:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var divideScalar = load(require('../../arithmetic/divideScalar'));
  var multiply = load(require('../../arithmetic/multiply'));
  var subtract = load(require('../../arithmetic/subtract'));

  var cs_reach = load(require('./cs_reach'));

  /**
   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U 
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {
    // g arrays
    var gvalues = g._values;
    var gindex = g._index;
    var gptr = g._ptr;
    var gsize = g._size;
    // columns
    var n = gsize[1];
    // b arrays
    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    // vars
    var p, p0, p1, q;
    // xi[top..n-1] = cs_reach(B(:,k))
    var top = cs_reach(g, b, k, xi, pinv);
    // clear x
    for (p = top; p < n; p++) 
      x[xi[p]] = 0;
    // scatter b
    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) 
      x[bindex[p]] = bvalues[p];
    // loop columns
    for (var px = top; px < n; px++) {
      // x array index for px
      var j = xi[px];
      // apply permutation vector (U x = b), j maps to column J of G
      var J = pinv ? pinv[j] : j;
      // check column J is empty
      if (J < 0)
        continue;
      // column value indeces in G, p0 <= p < p1
      p0 = gptr[J];
      p1 = gptr[J + 1];
      // x(j) /= G(j,j)
      x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);
      // first entry L(j,j)
      p = lo ? (p0 + 1) : p0;
      q = lo ? (p1) : (p1 - 1);
      // loop
      for ( ; p < q ; p++) {
        // row
        var i = gindex[p];
        // x(i) -= G(i,j) * x(j)
        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
      }
    }
    // return top of stack
    return top;
  };
  
  return cs_spsolve;
}

exports.name = 'cs_spsolve';
exports.path = 'sparse';
exports.factory = factory;

},{"../../arithmetic/divideScalar":311,"../../arithmetic/multiply":325,"../../arithmetic/subtract":334,"./cs_reach":299}],301:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var cs_amd = load(require('./cs_amd'));
  var cs_permute = load(require('./cs_permute'));
  var cs_etree = load(require('./cs_etree'));
  var cs_post = load(require('./cs_post'));
  var cs_counts = load(require('./cs_counts'));

  /**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see cs_amd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_sqr = function (order, a, qr) {
    // a arrays
    var aptr = a._ptr;
    var asize = a._size;
    // columns
    var n = asize[1];
    // vars
    var k;
    // symbolic analysis result
    var s = {};    
    // fill-reducing ordering
    s.q = cs_amd(order, a);
    // validate results
    if (order && !s.q) 
      return null;
    // QR symbolic analysis
    if (qr) {
      // apply permutations if needed
      var c = order ? cs_permute(a, null, s.q, 0) : a;
      // etree of C'*C, where C=A(:,q)
      s.parent = cs_etree(c, 1);
      // post order elimination tree
      var post = cs_post (s.parent, n);
      // col counts chol(C'*C)
      s.cp = cs_counts(c, s.parent, post, 1);
      // check we have everything needed to calculate number of nonzero elements
      if (c && s.parent && s.cp && _vcount(c, s)) {
        // calculate number of nonzero elements
        for (s.unz = 0, k = 0; k < n; k++) 
          s.unz += s.cp[k];
      }
    }
    else {
      // for LU factorization only, guess nnz(L) and nnz(U)
      s.unz = 4 * (aptr[n]) + n;
      s.lnz = s.unz;
    }
    // return result S
    return s;
  };
  
  /**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */
  var _vcount = function (a, s) {
    // a arrays
    var aptr = a._ptr;
    var aindex = a._index;
    var asize = a._size;
    // rows & columns
    var m = asize[0];
    var n = asize[1];
    // initialize s arrays
    s.pinv = []; // (m + n);
    s.leftmost = []; // (m);
    // vars
    var parent = s.parent;
    var pinv = s.pinv;
    var leftmost = s.leftmost;
    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries
    var w = []; // (m + 3 * n);
    var next = 0;
    var head = m;
    var tail = m + n;
    var nque = m + 2 * n;
    // vars
    var i, k, p, p0, p1;
    // initialize w
    for (k = 0; k < n; k++) {
      // queue k is empty
      w[head + k] = -1;
      w[tail + k] = -1;
      w[nque + k] = 0;
    }
    // initialize row arrays
    for (i = 0; i < m; i++) 
      leftmost[i] = -1;
    // loop columns backwards    
    for (k = n - 1; k >= 0; k--) {
      // values & index for column k
      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
        // leftmost[i] = min(find(A(i,:)))
        leftmost[aindex[p]] = k;
      }
    }
    // scan rows in reverse order
    for (i = m - 1; i >= 0; i--) {
      // row i is not yet ordered
      pinv[i] = -1;
      k = leftmost[i];
      // check row i is empty
      if (k == -1) 
        continue;
      // first row in queue k
      if (w[nque + k]++ === 0) 
        w[tail + k] = i;
      // put i at head of queue k
      w[next + i] = w[head + k];
      w[head + k] = i;
    }
    s.lnz = 0;
    s.m2 = m;
    // find row permutation and nnz(V)
    for (k = 0; k < n; k++) {
      // remove row i from queue k
      i = w[head + k];
      // count V(k,k) as nonzero
      s.lnz++;
      // add a fictitious row
      if (i < 0) 
        i = s.m2++;
      // associate row i with V(:,k)
      pinv[i] = k;
      // skip if V(k+1:m,k) is empty
      if (--nque[k] <= 0) 
        continue;
      // nque[k] is nnz (V(k+1:m,k))
      s.lnz += w[nque + k];
      // move all rows to parent of k
      var pa = parent[k];
      if (pa != -1) {
        if (w[nque + pa] === 0) 
          w[tail + pa] = w[tail + k];
        w[next + w[tail + k]] = w[head + pa];
        w[head + pa] = w[next + i];
        w[nque + pa] += w[nque + k];
      }
    }
    for (i = 0; i < m; i++) {
      if (pinv[i] < 0) 
        pinv[i] = k++;
    }
    return true;
  };

  return cs_sqr;
}

exports.name = 'cs_sqr';
exports.path = 'sparse';
exports.factory = factory;

},{"./cs_amd":286,"./cs_counts":287,"./cs_etree":289,"./cs_permute":297,"./cs_post":298}],302:[function(require,module,exports){
'use strict';

function factory () {

  /**
   * Depth-first search and postorder of a tree rooted at node j
   *
   * @param {Number}  j               The tree node
   * @param {Number}  k               
   * @param {Array}   w               The workspace array
   * @param {Number}  head            The index offset within the workspace for the head array
   * @param {Number}  next            The index offset within the workspace for the next array
   * @param {Array}   post            The post ordering array
   * @param {Number}  stack           The index offset within the workspace for the stack array
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_tdfs = function (j, k, w, head, next, post, stack) {
    // variables
    var top = 0;
    // place j on the stack
    w[stack] = j;
    // while (stack is not empty) 
    while (top >= 0) {
      // p = top of stack
      var p = w[stack + top];
      // i = youngest child of p
      var i = w[head + p];
      if (i == -1) {
        // p has no unordered children left
        top--;
        // node p is the kth postordered node
        post[k++] = p;
      }
      else {
        // remove i from children of p
        w[head + p] = w[next + i];
        // increment top
        ++top;
        // start dfs on child node i
        w[stack + top] = i;
      }
    }
    return k;
  };

  return cs_tdfs;
}

exports.name = 'cs_tdfs';
exports.path = 'sparse';
exports.factory = factory;

},{}],303:[function(require,module,exports){
'use strict';

function factory (type, config, load) {

  var cs_flip = load(require('./cs_flip'));
  
  /**
   * Flips the value if it is negative of returns the same value otherwise.
   *
   * @param {Number}  i               The value to flip
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  var cs_unflip = function (i) {
    // flip the value if it is negative
    return i < 0 ? cs_flip(i) : i;
  };

  return cs_unflip;
}

exports.name = 'cs_unflip';
exports.path = 'sparse';
exports.factory = factory;

},{"./cs_flip":291}],304:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5);                // returns number 3.5
   *    math.abs(-4.2);               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
  var abs = typed('abs', {
    'number': Math.abs,

    'Complex': function (x) {
      return x.abs();
    },

    'BigNumber': function (x) {
      return x.abs();
    },

    'Fraction': function (x) {
      return x.abs();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since abs(0) = 0
      return deepMap(x, abs, true);
    },

    'Unit': function(x) {
      return x.abs();
    }
  });

  abs.toTex = {1: '\\left|${args[0]}\\right|'};

  return abs;
}

exports.name = 'abs';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],305:[function(require,module,exports){
'use strict';

var extend = require('../../utils/object').extend;

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));
  var addScalar = load(require('./addScalar'));
  var latex = require('../../utils/latex.js');
  
  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3);               // returns number 5
   *    math.add(2, 3, 4);            // returns number 9
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(-4, 1);
   *    math.add(a, b);               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]
   *
   *    var c = math.unit('5 cm');
   *    var d = math.unit('2.1 mm');
   *    math.add(c, d);               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4");         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */
  var add = typed('add', extend({
    // we extend the signatures of addScalar with signatures dealing with matrices

    'Matrix, Matrix': function (x, y) {
      // result
      var c;
      
      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm04(x, y, addScalar);
              break;
            default:
              // sparse + dense
              c = algorithm01(y, x, addScalar, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm01(x, y, addScalar, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, addScalar);
              break;
          }
          break;
      }
      return c;
    },
    
    'Array, Array': function (x, y) {
      // use matrix implementation
      return add(matrix(x), matrix(y)).valueOf();
    },
    
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return add(matrix(x), y);
    },
    
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return add(x, matrix(y));
    },
    
    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm10(x, y, addScalar, false);
          break;
        default:
          c = algorithm14(x, y, addScalar, false);
          break;
      }
      return c;
    },
    
    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm10(y, x, addScalar, true);
          break;
        default:
          c = algorithm14(y, x, addScalar, true);
          break;
      }
      return c;
    },
    
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, addScalar, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, addScalar, true).valueOf();
    },

    'any, any': addScalar,

    'Array | Matrix | any, Array | Matrix | any, ...any': function (x, y, rest) {
      var result = add(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = add(result, rest[i]);
      }

      return result;
    }
  }, addScalar.signatures));

  add.toTex = {
    2: '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)'
  };
  
  return add;
}

exports.name = 'add';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm04":511,"../../type/matrix/utils/algorithm10":517,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex.js":556,"../../utils/object":558,"./addScalar":306}],306:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {

  /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
   * @private
   */
  var add = typed('add', {

    'number, number': function (x, y) {
      return x + y;
    },

    'Complex, Complex': function (x, y) {
      return x.add(y);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.plus(y);
    },

    'Fraction, Fraction': function (x, y) {
      return x.add(y);
    },

    'Unit, Unit': function (x, y) {
      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');
      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');
      if (!x.equalBase(y)) throw new Error('Units do not match');

      var res = x.clone();
      res.value = add(res.value, y.value);
      res.fixPrefix = false;
      return res;
    }
  });

  return add;
}

exports.factory = factory;

},{}],307:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var unaryMinus = load(require('./unaryMinus'));
  var isNegative = load(require('../utils/isNegative'));
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27);                  // returns 3
   *    math.cube(3);                   // returns 27
   *    math.cbrt(-64);                 // returns -4
   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m
   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]
   *
   *    var x = math.complex('8i');
   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true);             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */
  var cbrt = typed('cbrt', {
    'number': _cbrtNumber,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex

    'Complex': _cbrtComplex,

    'Complex, boolean': _cbrtComplex,

    'BigNumber': function (x) {
      return x.cbrt();
    },

    'Unit': _cbrtUnit,

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since cbrt(0) = 0
      return deepMap(x, cbrt, true);
    }
  });

  /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */
  function _cbrtComplex(x, allRoots) {
    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers

    var arg_3 = x.arg() / 3;
    var abs = x.abs();

    // principal root:
    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(
        new type.Complex(0, arg_3).exp());

    if (allRoots) {
      var all = [
          principal,
          new type.Complex(_cbrtNumber(abs), 0).mul(
            new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),
          new type.Complex(_cbrtNumber(abs), 0).mul(
            new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())
      ];

      return (config.matrix === 'Array') ? all : matrix(all);
    }
    else {
      return principal;
    }
  }

  /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */
  function _cbrtUnit(x) {
    if(x.value && type.isComplex(x.value)) {
      var result = x.clone();
      result.value = 1.0;
      result = result.pow(1.0/3);           // Compute the units
      result.value = _cbrtComplex(x.value); // Compute the value
      return result;
    }
    else {
      var negate = isNegative(x.value);
      if (negate) {
        x.value = unaryMinus(x.value);
      }

      // TODO: create a helper function for this
      var third;
      if (type.isBigNumber(x.value)) {
        third = new type.BigNumber(1).div(3);
      }
      else if (type.isFraction(x.value)) {
        third = new type.Fraction(1, 3);
      }
      else {
        third = 1/3;
      }

      var result = x.pow(third);

      if (negate) {
        result.value = unaryMinus(result.value);
      }

      return result;
    }
  }

  cbrt.toTex = {1: '\\sqrt[3]{${args[0]}}'};

  return cbrt;
}

/**
 * Calculate cbrt for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number | Complex} Returns the cubic root of x
 * @private
 */
var _cbrtNumber = Math.cbrt || function (x) {
  if (x === 0) {
    return x;
  }

  var negate = x < 0;
  var result;
  if (negate) {
    x = -x;
  }

  if (isFinite(x)) {
    result = Math.exp(Math.log(x) / 3);
    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods
    result = (x / (result * result) + (2 * result)) / 3;
  } else {
    result = x;
  }

  return negate ? -result : result;
};

exports.name = 'cbrt';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/collection/deepMap":547,"../utils/isNegative":473,"./unaryMinus":335}],308:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *
   * Examples:
   *
   *    math.ceil(3.2);               // returns number 4
   *    math.ceil(3.8);               // returns number 4
   *    math.ceil(-4.2);              // returns number -4
   *    math.ceil(-4.7);              // returns number -4
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.ceil(c);                 // returns Complex 4 - 2i
   *
   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  var ceil = typed('ceil', {
    'number': Math.ceil,

    'Complex': function (x) {
      return x.ceil();
    },

    'BigNumber': function (x) {
      return x.ceil();
    },

    'Fraction': function (x) {
      return x.ceil();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since ceil(0) = 0
      return deepMap(x, ceil, true);
    }
  });

  ceil.toTex = {1: '\\left\\lceil${args[0]}\\right\\rceil'};

  return ceil;
}

exports.name = 'ceil';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],309:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2);            // returns number 8
   *    math.pow(2, 3);          // returns number 8
   *    math.cube(4);            // returns number 64
   *    4 * 4 * 4;               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
  var cube = typed('cube', {
    'number': function (x) {
      return x * x * x;
    },

    'Complex': function (x) {
      return x.mul(x).mul(x); // Is faster than pow(x, 3)
    },

    'BigNumber': function (x) {
      return x.times(x).times(x);
    },

    'Fraction': function (x) {
      return x.pow(3); // Is faster than mul()mul()mul()
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since cube(0) = 0
      return deepMap(x, cube, true);
    },

    'Unit': function(x) {
      return x.pow(3);
    }
  });

  cube.toTex = {1: '\\left(${args[0]}\\right)^3'};

  return cube;
}

exports.name = 'cube';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],310:[function(require,module,exports){
'use strict';

var extend = require('../../utils/object').extend;

function factory (type, config, load, typed) {

  var divideScalar = load(require('./divideScalar'));
  var multiply     = load(require('./multiply'));
  var inv          = load(require('../matrix/inv'));
  var matrix       = load(require('../../type/matrix/function/matrix'));

  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3);            // returns number 0.6666666666666666
   *
   *    var a = math.complex(5, 14);
   *    var b = math.complex(4, 1);
   *    math.divide(a, b);            // returns Complex 2 + 3i
   *
   *    var c = [[7, -6], [13, -4]];
   *    var d = [[1, 2], [4, 3]];
   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]
   *
   *    var e = math.unit('18 km');
   *    math.divide(e, 4.5);          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */
  var divide = typed('divide', extend({
    // we extend the signatures of divideScalar with signatures dealing with matrices

    'Array | Matrix, Array | Matrix': function (x, y) {
      // TODO: implement matrix right division using pseudo inverse
      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html
      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
      return multiply(x, inv(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;

      // process storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, divideScalar, false);
          break;
        case 'dense':
          c = algorithm14(x, y, divideScalar, false);
          break;
      }
      return c;
    },
    
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },

    'any, Array | Matrix': function (x, y) {
      return multiply(x, inv(y));
    }
  }, divideScalar.signatures));

  divide.toTex = {2: '\\frac{${args[0]}}{${args[1]}}'};

  return divide;
}

exports.name = 'divide';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm14":521,"../../utils/object":558,"../matrix/inv":375,"./divideScalar":311,"./multiply":325}],311:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var multiplyScalar = load(require('./multiplyScalar'));

  /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
   * @private
   */
  var divideScalar = typed('divide', {
    'number, number': function (x, y) {
      return x / y;
    },

    'Complex, Complex': function (x, y) {
      return x.div(y);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.div(y);
    },

    'Fraction, Fraction': function (x, y) {
      return x.div(y);
    },

    'Unit, number | Fraction | BigNumber': function (x, y) {
      var res = x.clone();
      // TODO: move the divide function to Unit.js, it uses internals of Unit
      res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);
      return res;
    },

    'number | Fraction | BigNumber, Unit': function (x, y) {
      var res = y.pow(-1);
      // TODO: move the divide function to Unit.js, it uses internals of Unit
      res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);
      return res;
    },

    'Unit, Unit': function (x, y) {
      return x.divide(y);
    }

  });

  return divideScalar;
}

exports.factory = factory;

},{"./multiplyScalar":326}],312:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));
  var divideScalar = load(require('./divideScalar'));
  var latex = require('../../utils/latex');
  
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4);   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]];
   *    b = [[3, 2], [5, 2]];
   *
   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */
  var dotDivide = typed('dotDivide', {
    
    'any, any': divideScalar,
    
    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse ./ sparse
              c = algorithm07(x, y, divideScalar, false);
              break;
            default:
              // sparse ./ dense
              c = algorithm02(y, x, divideScalar, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense ./ sparse
              c = algorithm03(x, y, divideScalar, false);
              break;
            default:
              // dense ./ dense
              c = algorithm13(x, y, divideScalar);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return dotDivide(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, divideScalar, false);
          break;
        default:
          c = algorithm14(x, y, divideScalar, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, divideScalar, true);
          break;
        default:
          c = algorithm14(y, x, divideScalar, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
    }
  });

  dotDivide.toTex = {
    2: '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)'
  };
  
  return dotDivide;
}

exports.name = 'dotDivide';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556,"./divideScalar":311}],313:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));
  var multiplyScalar = load(require('./multiplyScalar'));
  var latex = require('../../utils/latex');

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4); // returns 8
   *
   *    a = [[9, 5], [6, 1]];
   *    b = [[3, 2], [5, 2]];
   *
   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */
  var dotMultiply = typed('dotMultiply', {
    
    'any, any': multiplyScalar,
    
    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse .* sparse
              c = algorithm09(x, y, multiplyScalar, false);
              break;
            default:
              // sparse .* dense
              c = algorithm02(y, x, multiplyScalar, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense .* sparse
              c = algorithm02(x, y, multiplyScalar, false);
              break;
            default:
              // dense .* dense
              c = algorithm13(x, y, multiplyScalar);
              break;
          }
          break;
      }
      return c;
    },
    
    'Array, Array': function (x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), matrix(y)).valueOf();
    },
    
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return dotMultiply(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, multiplyScalar, false);
          break;
        default:
          c = algorithm14(x, y, multiplyScalar, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, multiplyScalar, true);
          break;
        default:
          c = algorithm14(y, x, multiplyScalar, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    }
  });

  dotMultiply.toTex = {
    2: '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)'
  };
  
  return dotMultiply;
}

exports.name = 'dotMultiply';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm09":516,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556,"./multiplyScalar":326}],314:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));
  var pow = load(require('./pow'));
  var latex = require('../../utils/latex');

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3);            // returns number 8
   *
   *    var a = [[1, 2], [4, 3]];
   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */
  var dotPow = typed('dotPow', {
    
    'any, any': pow,
    
    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse .^ sparse
              c = algorithm07(x, y, pow, false);
              break;
            default:
              // sparse .^ dense
              c = algorithm03(y, x, pow, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense .^ sparse
              c = algorithm03(x, y, pow, false);
              break;
            default:
              // dense .^ dense
              c = algorithm13(x, y, pow);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return dotPow(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return dotPow(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return dotPow(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, dotPow, false);
          break;
        default:
          c = algorithm14(x, y, dotPow, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, dotPow, true);
          break;
        default:
          c = algorithm14(y, x, dotPow, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, dotPow, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, dotPow, true).valueOf();
    }
  });

  dotPow.toTex = {
    2: '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)'
  };
  
  return dotPow;
}

exports.name = 'dotPow';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556,"./pow":329}],315:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2);                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2);          // returns number 7.3890560989306495
   *    math.log(math.exp(2));        // returns number 2
   *
   *    math.exp([1, 2, 3]);
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  var exp = typed('exp', {
    'number': Math.exp,

    'Complex': function (x) {
      return x.exp();
    },

    'BigNumber': function (x) {
      return x.exp();
    },

    'Array | Matrix': function (x) {
      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
      return deepMap(x, exp);
    }
  });

  exp.toTex = {1: '\\exp\\left(${args[0]}\\right)'};

  return exp;
}

exports.name = 'exp';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],316:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2);                // returns number 3
   *    math.fix(3.8);                // returns number 3
   *    math.fix(-4.2);               // returns number -4
   *    math.fix(-4.7);               // returns number -4
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.fix(c);                  // returns Complex 3 - 2i
   *
   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
   */
  var fix = typed('fix', {
    'number': function (x) {
      return (x > 0) ? Math.floor(x) : Math.ceil(x);
    },

    'Complex': function (x) {
      return new type.Complex(
          (x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),
          (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)
      );
    },

    'BigNumber': function (x) {
      return x.isNegative() ? x.ceil() : x.floor();
    },

    'Fraction': function (x) {
      return x.s < 0 ? x.ceil() : x.floor();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since fix(0) = 0
      return deepMap(x, fix, true);
    }
  });

  fix.toTex = {1: '\\mathrm{${name}}\\left(${args[0]}\\right)'};

  return fix;
}

exports.name = 'fix';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],317:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *
   * Examples:
   *
   *    math.floor(3.2);              // returns number 3
   *    math.floor(3.8);              // returns number 3
   *    math.floor(-4.2);             // returns number -5
   *    math.floor(-4.7);             // returns number -5
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.floor(c);                // returns Complex 3 - 3i
   *
   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  var floor = typed('floor', {
    'number': Math.floor,

    'Complex': function (x) {
      return x.floor();
    },

    'BigNumber': function (x) {
      return x.floor();
    },

    'Fraction': function (x) {
      return x.floor();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since floor(0) = 0
      return deepMap(x, floor, true);
    }
  });

  floor.toTex = {1: '\\left\\lfloor${args[0]}\\right\\rfloor'};

  return floor;
}

exports.name = 'floor';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],318:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12);              // returns 4
   *    math.gcd(-4, 6);              // returns 2
   *    math.gcd(25, 15, -10);        // returns 5
   *
   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */
  var gcd = typed('gcd', {

    'number, number': _gcd,

    'BigNumber, BigNumber': _gcdBigNumber,

    'Fraction, Fraction': function (x, y) {
      return x.gcd(y);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm04(x, y, gcd);
              break;
            default:
              // sparse + dense
              c = algorithm01(y, x, gcd, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm01(x, y, gcd, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, gcd);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return gcd(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return gcd(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return gcd(x, matrix(y));
    },
    
    'Matrix, number | BigNumber': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm10(x, y, gcd, false);
          break;
        default:
          c = algorithm14(x, y, gcd, false);
          break;
      }
      return c;
    },

    'number | BigNumber, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm10(y, x, gcd, true);
          break;
        default:
          c = algorithm14(y, x, gcd, true);
          break;
      }
      return c;
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, gcd, false).valueOf();
    },

    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, gcd, true).valueOf();
    },

    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
      var res = gcd(a, b);
      for (var i = 0; i < args.length; i++) {
        res = gcd(res, args[i]);
      }
      return res;
    }
  });

  gcd.toTex = '\\gcd\\left(${args}\\right)';

  return gcd;

  /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */
  function _gcdBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function gcd must be integer numbers');
    }

    // http://en.wikipedia.org/wiki/Euclidean_algorithm
    var zero = new type.BigNumber(0);
    while (!b.isZero()) {
      var r = a.mod(b);
      a = b;
      b = r;
    }
    return a.lt(zero) ? a.neg() : a;
  }
}

/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 * @private
 */
function _gcd(a, b) {
  if (!isInteger(a) || !isInteger(b)) {
    throw new Error('Parameters in function gcd must be integer numbers');
  }

  // http://en.wikipedia.org/wiki/Euclidean_algorithm
  var r;
  while (b != 0) {
    r = a % b;
    a = b;
    b = r;
  }
  return (a < 0) ? -a : a;
}

exports.name = 'gcd';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm04":511,"../../type/matrix/utils/algorithm10":517,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/number":557}],319:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var abs = load(require('./abs'));
  var add = load(require('./addScalar'));
  var divide = load(require('./divideScalar'));
  var multiply = load(require('./multiplyScalar'));
  var sqrt = load(require('./sqrt'));
  var smaller = load(require('../relational/smaller'));
  var isPositive = load(require('../utils/isPositive'));

  /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4);      // 5
   *     math.hypot(3, 4, 5);   // 7.0710678118654755
   *     math.hypot([3, 4, 5]); // 7.0710678118654755
   *     math.hypot(-2);        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber} args
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */
  var hypot = typed('hypot', {
    '... number | BigNumber': _hypot,

    'Array': function (x) {
      return hypot.apply(hypot, flatten(x));
    },

    'Matrix': function (x) {
      return hypot.apply(hypot, flatten(x.toArray()));
    }
  });

  /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */
  function _hypot (args) {
    // code based on `hypot` from es6-shim:
    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
    var result = 0;
    var largest = 0;

    for (var i = 0; i < args.length; i++) {
      var value = abs(args[i]);
      if (smaller(largest, value)) {
        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
        result = add(result, 1);
        largest = value;
      } else {
        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
      }
    }

    return multiply(largest, sqrt(result));
  }

  hypot.toTex = '\\hypot\\left(${args}\\right)';

  return hypot;
}

exports.name = 'hypot';
exports.factory = factory;

},{"../../utils/array":532,"../relational/smaller":410,"../utils/isPositive":475,"./abs":304,"./addScalar":306,"./divideScalar":311,"./multiplyScalar":326,"./sqrt":332}],320:[function(require,module,exports){
module.exports = [
  require('./abs'),
  require('./add'),
  require('./addScalar'),
  require('./cbrt'),
  require('./ceil'),
  require('./cube'),
  require('./divide'),
  require('./dotDivide'),
  require('./dotMultiply'),
  require('./dotPow'),
  require('./exp'),
  require('./fix'),
  require('./floor'),
  require('./gcd'),
  require('./hypot'),
  require('./lcm'),
  require('./log'),
  require('./log10'),
  require('./mod'),
  require('./multiply'),
  require('./norm'),
  require('./nthRoot'),
  require('./pow'),
  require('./round'),
  require('./sign'),
  require('./sqrt'),
  require('./square'),
  require('./subtract'),
  require('./unaryMinus'),
  require('./unaryPlus'),
  require('./xgcd')
];

},{"./abs":304,"./add":305,"./addScalar":306,"./cbrt":307,"./ceil":308,"./cube":309,"./divide":310,"./dotDivide":312,"./dotMultiply":313,"./dotPow":314,"./exp":315,"./fix":316,"./floor":317,"./gcd":318,"./hypot":319,"./lcm":321,"./log":322,"./log10":323,"./mod":324,"./multiply":325,"./norm":327,"./nthRoot":328,"./pow":329,"./round":330,"./sign":331,"./sqrt":332,"./square":333,"./subtract":334,"./unaryMinus":335,"./unaryPlus":336,"./xgcd":337}],321:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  
  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6);               // returns 12
   *    math.lcm(6, 21);              // returns 42
   *    math.lcm(6, 21, 5);           // returns 210
   *
   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */
  var lcm = typed('lcm', {
    'number, number': _lcm,

    'BigNumber, BigNumber': _lcmBigNumber,

    'Fraction, Fraction': function (x, y) {

      return x.lcm(y);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm06(x, y, lcm);
              break;
            default:
              // sparse + dense
              c = algorithm02(y, x, lcm, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm02(x, y, lcm, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, lcm);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return lcm(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return lcm(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return lcm(x, matrix(y));
    },

    'Matrix, number | BigNumber': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, lcm, false);
          break;
        default:
          c = algorithm14(x, y, lcm, false);
          break;
      }
      return c;
    },

    'number | BigNumber, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, lcm, true);
          break;
        default:
          c = algorithm14(y, x, lcm, true);
          break;
      }
      return c;
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, lcm, false).valueOf();
    },

    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, lcm, true).valueOf();
    },

    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
      var res = lcm(a, b);
      for (var i = 0; i < args.length; i++) {
        res = lcm(res, args[i]);
      }
      return res;
    }
  });

  lcm.toTex = undefined;  // use default template

  return lcm;

  /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */
  function _lcmBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }

    if (a.isZero() || b.isZero()) {
      return new type.BigNumber(0);
    }

    // http://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead
    var prod = a.times(b);
    while (!b.isZero()) {
      var t = b;
      b = a.mod(t);
      a = t;
    }
    return prod.div(a).abs();
  }
}

/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 * @private
 */
function _lcm (a, b) {
  if (!isInteger(a) || !isInteger(b)) {
    throw new Error('Parameters in function lcm must be integer numbers');
  }

  if (a == 0 || b == 0) {
    return 0;
  }

  // http://en.wikipedia.org/wiki/Euclidean_algorithm
  // evaluate lcm here inline to reduce overhead
  var t;
  var prod = a * b;
  while (b != 0) {
    t = b;
    b = a % t;
    a = t;
  }
  return Math.abs(prod / a);
}

exports.name = 'lcm';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm06":513,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/number":557}],322:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var divideScalar = load(require('./divideScalar'));

  /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5);                  // returns 1.252762968495368
   *    math.exp(math.log(2.4));        // returns 2.4
   *
   *    math.pow(10, 4);                // returns 10000
   *    math.log(10000, 10);            // returns 4
   *    math.log(10000) / math.log(10); // returns 4
   *
   *    math.log(1024, 2);              // returns 10
   *    math.pow(2, 10);                // returns 1024
   *
   * See also:
   *
   *    exp, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */
  var log = typed('log', {
    'number': function (x) {
      if (x >= 0 || config.predictable) {
        return Math.log(x);
      }
      else {
        // negative value -> complex value computation
        return new type.Complex(x, 0).log();
      }
    },

    'Complex': function (x) {
      return x.log();
    },

    'BigNumber': function (x) {
      if (!x.isNegative() || config.predictable) {
        return x.ln();
      }
      else {
        // downgrade to number, return Complex valued result
        return new type.Complex(x.toNumber(), 0).log();
      }
    },

    'Array | Matrix': function (x) {
      return deepMap(x, log);
    },

    'any, any': function (x, base) {
      // calculate logarithm for a specified base, log(x, base)
      return divideScalar(log(x), log(base));
    }
  });

  log.toTex = {
    1: '\\ln\\left(${args[0]}\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
  };

  return log;
}

exports.name = 'log';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"./divideScalar":311}],323:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001);            // returns -5
   *    math.log10(10000);              // returns 4
   *    math.log(10000) / math.log(10); // returns 4
   *    math.pow(10, 4);                // returns 10000
   *
   * See also:
   *
   *    exp, log
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
  var log10 = typed('log10', {
    'number': function (x) {
      if (x >= 0 || config.predictable) {
        return _log10(x);
      }
      else {
        // negative value -> complex value computation
        return new type.Complex(x, 0).log().div(Math.LN10);
      }
    },

    'Complex': function (x) {
      return new type.Complex(x).log().div(Math.LN10);
    },

    'BigNumber': function (x) {
      if (!x.isNegative() || config.predictable) {
        return x.log();
      }
      else {
        // downgrade to number, return Complex valued result
        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
      }
    },

    'Array | Matrix': function (x) {
      return deepMap(x, log10);
    }
  });

  log10.toTex = {1: '\\log_{10}\\left(${args[0]}\\right)'};

  return log10;
}

/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 * @private
 */
var _log10 = Math.log10 || function (x) {
  return Math.log(x) / Math.LN10;
};

exports.name = 'log10';
exports.factory = factory;


},{"../../utils/collection/deepMap":547}],324:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));
  var latex = require('../../utils/latex');

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See http://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3);                // returns 2
   *    math.mod(11, 2);               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0;
   *    }
   *
   *    isOdd(2);                      // returns false
   *    isOdd(3);                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */
  var mod = typed('mod', {

    'number, number': _mod,

    'BigNumber, BigNumber': function (x, y) {
      return y.isZero() ? x : x.mod(y);
    },

    'Fraction, Fraction': function (x, y) {
      return x.mod(y);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // mod(sparse, sparse)
              c = algorithm05(x, y, mod, false);
              break;
            default:
              // mod(sparse, dense)
              c = algorithm02(y, x, mod, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // mod(dense, sparse)
              c = algorithm03(x, y, mod, false);
              break;
            default:
              // mod(dense, dense)
              c = algorithm13(x, y, mod);
              break;
          }
          break;
      }
      return c;
    },
    
    'Array, Array': function (x, y) {
      // use matrix implementation
      return mod(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return mod(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return mod(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, mod, false);
          break;
        default:
          c = algorithm14(x, y, mod, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, mod, true);
          break;
        default:
          c = algorithm14(y, x, mod, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, mod, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, mod, true).valueOf();
    }
  });

  mod.toTex = {
    2: '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)'
  };

  return mod;

  /**
   * Calculate the modulus of two numbers
   * @param {number} x
   * @param {number} y
   * @returns {number} res
   * @private
   */
  function _mod(x, y) {
    if (y > 0) {
      // We don't use JavaScript's % operator here as this doesn't work
      // correctly for x < 0 and x == 0
      // see http://en.wikipedia.org/wiki/Modulo_operation
      return x - y * Math.floor(x / y);
    }
    else if (y === 0) {
      return x;
    }
    else { // y < 0
      // TODO: implement mod for a negative divisor
      throw new Error('Cannot calculate mod for a negative divisor');
    }
  }
}

exports.name = 'mod';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm05":512,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556}],325:[function(require,module,exports){
'use strict';

var extend = require('../../utils/object').extend;
var array = require('../../utils/array');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var addScalar = load(require('./addScalar'));
  var multiplyScalar = load(require('./multiplyScalar'));
  var equalScalar = load(require('../relational/equalScalar'));

  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  var DenseMatrix = type.DenseMatrix;
  var SparseMatrix = type.SparseMatrix;

  /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2);        // returns number 20.8
   *    math.multiply(2, 3, 4);       // returns number 24
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(4, 1);
   *    math.multiply(a, b);          // returns Complex 5 + 14i
   *
   *    var c = [[1, 2], [4, 3]];
   *    var d = [[1, 2, 3], [3, -4, 7]];
   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    var e = math.unit('2.1 km');
   *    math.multiply(3, e);          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */
  var multiply = typed('multiply', extend({
    // we extend the signatures of multiplyScalar with signatures dealing with matrices

    'Array, Array': function (x, y) {
      // check dimensions
      _validateMatrixDimensions(array.size(x), array.size(y));

      // use dense matrix implementation
      var m = multiply(matrix(x), matrix(y));
      // return array or scalar
      return type.isMatrix(m) ? m.valueOf() : m;
    },

    'Matrix, Matrix': function (x, y) {
      // dimensions
      var xsize = x.size();
      var ysize = y.size();

      // check dimensions
      _validateMatrixDimensions(xsize, ysize);

      // process dimensions
      if (xsize.length === 1) {
        // process y dimensions
        if (ysize.length === 1) {
          // Vector * Vector
          return _multiplyVectorVector(x, y, xsize[0]);
        }
        // Vector * Matrix
        return _multiplyVectorMatrix(x, y);
      }
      // process y dimensions
      if (ysize.length === 1) {
        // Matrix * Vector
        return _multiplyMatrixVector(x, y);
      }
      // Matrix * Matrix
      return _multiplyMatrixMatrix(x, y);
    },

    'Matrix, Array': function (x, y) {
      // use Matrix * Matrix implementation
      return multiply(x, matrix(y));
    },

    'Array, Matrix': function (x, y) {
      // use Matrix * Matrix implementation
      return multiply(matrix(x, y.storage()), y);
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      
      // process storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, multiplyScalar, false);
          break;
        case 'dense':
          c = algorithm14(x, y, multiplyScalar, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, multiplyScalar, true);
          break;
        case 'dense':
          c = algorithm14(y, x, multiplyScalar, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    },

    'any, any': multiplyScalar,

    'Array | Matrix | any, Array | Matrix | any, ...any': function (x, y, rest) {
      var result = multiply(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = multiply(result, rest[i]);
      }
      
      return result;
    }
  }, multiplyScalar.signatures));

  var _validateMatrixDimensions = function (size1, size2) {
    // check left operand dimensions
    switch (size1.length) {
      case 1:
        // check size2
        switch (size2.length) {
          case 1:
            // Vector x Vector
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
            }
            break;
          case 2:
            // Vector x Matrix
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
            }
            break;
          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }
        break;
      case 2:
        // check size2
        switch (size2.length) {
          case 1:
            // Matrix x Vector
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
            }
            break;
          case 2:
            // Matrix x Matrix
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
            }
            break;
          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }
        break;
      default:
        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
    }
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */
  var _multiplyVectorVector = function (a, b, n) {
    // check empty vector
    if (n === 0)
      throw new Error('Cannot multiply two empty vectors');

    // a dense
    var adata = a._data;
    var adt = a._datatype;
    // b dense
    var bdata = b._data;
    var bdt = b._datatype;

    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    }
    
    // result (do not initialize it with zero)
    var c = mf(adata[0], bdata[0]);
    // loop data
    for (var i = 1; i < n; i++) {
      // multiply and accumulate
      c = af(c, mf(adata[i], bdata[i]));
    }
    return c;
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */
  var _multiplyVectorMatrix = function (a, b) {
    // process storage
    switch (b.storage()) {
      case 'dense':
        return _multiplyVectorDenseMatrix(a, b);
    }
    throw new Error('Not implemented');
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */
  var _multiplyVectorDenseMatrix = function (a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype;
    // b dense
    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype;
    // rows & columns
    var alength = asize[0];
    var bcolumns = bsize[1];

    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    }

    // result
    var c = [];

    // loop matrix columns
    for (var j = 0; j < bcolumns; j++) {
      // sum (do not initialize it with zero)
      var sum = mf(adata[0], bdata[0][j]);      
      // loop vector
      for (var i = 1; i < alength; i++) {
        // multiply & accumulate
        sum = af(sum, mf(adata[i], bdata[i][j]));
      }
      c[j] = sum;
    }

    // return matrix
    return new DenseMatrix({
      data: c,
      size: [bcolumns],
      datatype: dt
    });
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */
  var _multiplyMatrixVector = function (a, b) {
    // process storage
    switch (a.storage()) {
      case 'dense':
        return _multiplyDenseMatrixVector(a, b);
      case 'sparse':
        return _multiplySparseMatrixVector(a, b);
    }
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */
  var _multiplyMatrixMatrix = function (a, b) {
    // process storage
    switch (a.storage()) {
      case 'dense':
        // process storage
        switch (b.storage()) {
          case 'dense':
            return _multiplyDenseMatrixDenseMatrix(a, b);
          case 'sparse':
            return _multiplyDenseMatrixSparseMatrix(a, b);
        }
        break;
      case 'sparse':
        // process storage
        switch (b.storage()) {
          case 'dense':
            return _multiplySparseMatrixDenseMatrix(a, b);
          case 'sparse':
            return _multiplySparseMatrixSparseMatrix(a, b);
        }
        break;
    }
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M) 
   */ 
  var _multiplyDenseMatrixVector = function (a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype;
    // b dense
    var bdata = b._data;
    var bdt = b._datatype;
    // rows & columns
    var arows = asize[0];
    var acolumns = asize[1];

    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    }

    // result
    var c = [];

    // loop matrix a rows
    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i];
      // sum (do not initialize it with zero)
      var sum = mf(row[0], bdata[0]);
      // loop matrix a columns
      for (var j = 1; j < acolumns; j++) {
        // multiply & accumulate
        sum = af(sum, mf(row[j], bdata[j]));
      }
      c[i] = sum;
    }

    // return matrix
    return new DenseMatrix({
      data: c,
      size: [arows],
      datatype: dt
    });
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */
  var _multiplyDenseMatrixDenseMatrix = function (a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype;
    // b dense
    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype;
    // rows & columns
    var arows = asize[0];
    var acolumns = asize[1];
    var bcolumns = bsize[1];

    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    }
    
    // result
    var c = [];

    // loop matrix a rows
    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i];
      // initialize row array
      c[i] = [];
      // loop matrix b columns
      for (var j = 0; j < bcolumns; j++) {
        // sum (avoid initializing sum to zero)
        var sum = mf(row[0], bdata[0][j]);
        // loop matrix a columns
        for (var x = 1; x < acolumns; x++) {
          // multiply & accumulate
          sum = af(sum, mf(row[x], bdata[x][j]));
        }
        c[i][j] = sum;
      }
    }

    // return matrix
    return new DenseMatrix({
      data: c,
      size: [arows, bcolumns],
      datatype: dt
    });
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */
  var _multiplyDenseMatrixSparseMatrix = function (a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype;
    // b sparse
    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype;
    // validate b matrix
    if (!bvalues)
      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
    // rows & columns
    var arows = asize[0];
    var bcolumns = bsize[1];
    
    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;
    // equalScalar signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
    }

    // result
    var cvalues = [];
    var cindex = [];
    var cptr = [];
    // c matrix
    var c = new SparseMatrix({
      values : cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    });

    // loop b columns
    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length;
      // indeces in column jb
      var kb0 = bptr[jb];
      var kb1 = bptr[jb + 1];
      // do not process column jb if no data exists
      if (kb1 > kb0) {
        // last row mark processed
        var last = 0;
        // loop a rows
        for (var i = 0; i < arows; i++) {
          // column mark
          var mark = i + 1;
          // C[i, jb]
          var cij;
          // values in b column j
          for (var kb = kb0; kb < kb1; kb++) {
            // row
            var ib = bindex[kb];
            // check value has been initialized
            if (last !== mark) {
              // first value in column jb
              cij = mf(adata[i][ib], bvalues[kb]);
              // update mark
              last = mark;
            }
            else {
              // accumulate value
              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
            }
          }
          // check column has been processed and value != 0
          if (last === mark && !eq(cij, zero)) {
            // push row & value
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
    }
    // update ptr
    cptr[bcolumns] = cindex.length;

    // return sparse matrix
    return c;
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1) 
   */
  var _multiplySparseMatrixVector = function (a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype;
    // validate a matrix
    if (!avalues)
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    // b dense
    var bdata = b._data;
    var bdt = b._datatype;
    // rows & columns
    var arows = a._size[0];
    var brows = b._size[0];
    // result
    var cvalues = [];
    var cindex = [];
    var cptr = [];
    
    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;
    // equalScalar signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
    }

    // workspace
    var x = [];
    // vector with marks indicating a value x[i] exists in a given column
    var w = [];

    // update ptr
    cptr[0] = 0;
    // rows in b
    for (var ib = 0; ib < brows; ib++) {
      // b[ib]
      var vbi = bdata[ib];
      // check b[ib] != 0, avoid loops
      if (!eq(vbi, zero)) {
        // A values & index in ib column
        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
          // a row
          var ia = aindex[ka];
          // check value exists in current j
          if (!w[ia]) {
            // ia is new entry in j
            w[ia] = true;
            // add i to pattern of C
            cindex.push(ia);
            // x(ia) = A
            x[ia] = mf(vbi, avalues[ka]);
          }
          else {
            // i exists in C already
            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
          }
        }
      }
    }
    // copy values from x to column jb of c
    for (var p1 = cindex.length, p = 0; p < p1; p++) {
      // row
      var ic = cindex[p];
      // copy value
      cvalues[p] = x[ic];
    }
    // update ptr
    cptr[1] = cindex.length;

    // return sparse matrix
    return new SparseMatrix({
      values : cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, 1],
      datatype: dt
    });
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */
  var _multiplySparseMatrixDenseMatrix = function (a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype;
    // validate a matrix
    if (!avalues)
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    // b dense
    var bdata = b._data;
    var bdt = b._datatype;
    // rows & columns
    var arows = a._size[0];
    var brows = b._size[0];
    var bcolumns = b._size[1];

    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;
    // equalScalar signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
    }

    // result
    var cvalues = [];
    var cindex = [];
    var cptr = [];
    // c matrix
    var c = new SparseMatrix({
      values : cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    });

    // workspace
    var x = [];
    // vector with marks indicating a value x[i] exists in a given column
    var w = [];

    // loop b columns
    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length;
      // mark in workspace for current column
      var mark = jb + 1;
      // rows in jb
      for (var ib = 0; ib < brows; ib++) {
        // b[ib, jb]
        var vbij = bdata[ib][jb];
        // check b[ib, jb] != 0, avoid loops
        if (!eq(vbij, zero)) {
          // A values & index in ib column
          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // a row
            var ia = aindex[ka];
            // check value exists in current j
            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark;
              // add i to pattern of C
              cindex.push(ia);
              // x(ia) = A
              x[ia] = mf(vbij, avalues[ka]);
            }
            else {
              // i exists in C already
              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
            }
          }
        }
      }
      // copy values from x to column jb of c
      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
        // row
        var ic = cindex[p];
        // copy value
        cvalues[p] = x[ic];
      }
    }
    // update ptr
    cptr[bcolumns] = cindex.length;

    // return sparse matrix
    return c;
  };

  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */
  var _multiplySparseMatrixSparseMatrix = function (a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype;
    // b sparse
    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bdt = b._datatype;
    
    // rows & columns
    var arows = a._size[0];
    var bcolumns = b._size[1];
    // flag indicating both matrices (a & b) contain data
    var values = avalues && bvalues;

    // datatype
    var dt;
    // addScalar signature to use
    var af = addScalar;
    // multiplyScalar signature to use
    var mf = multiplyScalar;

    // process data types
    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signatures that matches (dt, dt)
      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    }
    
    // result
    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = [];
    // c matrix
    var c = new SparseMatrix({
      values : cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    });

    // workspace
    var x = values ? [] : undefined;
    // vector with marks indicating a value x[i] exists in a given column
    var w = [];
    // variables
    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
    // loop b columns
    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length;
      // mark in workspace for current column
      var mark = jb + 1;
      // B values & index in j
      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
        // b row
        ib = bindex[kb];
        // check we need to process values
        if (values) {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka];
            // check value exists in current j
            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark;
              // add i to pattern of C
              cindex.push(ia);
              // x(ia) = A
              x[ia] = mf(bvalues[kb], avalues[ka]);
            }
            else {
              // i exists in C already
              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
            }
          }
        }
        else {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka];
            // check value exists in current j
            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark;
              // add i to pattern of C
              cindex.push(ia);
            }
          }
        }
      }
      // check we need to process matrix values (pattern matrix)
      if (values) {
        // copy values from x to column jb of c
        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
          // row
          var ic = cindex[p];
          // copy value
          cvalues[p] = x[ic];
        }
      }
    }
    // update ptr
    cptr[bcolumns] = cindex.length;

    // return sparse matrix
    return c;
  };

  multiply.toTex = {
    2: '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)'
  };

  return multiply;
}

exports.name = 'multiply';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm14":521,"../../utils/array":532,"../../utils/latex":556,"../../utils/object":558,"../relational/equalScalar":406,"./addScalar":306,"./multiplyScalar":326}],326:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  
  /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
   * @private
   */
  var multiplyScalar = typed('multiplyScalar', {

    'number, number': function (x, y) {
      return x * y;
    },

    'Complex, Complex': function (x, y) {
      return x.mul(y);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.times(y);
    },

    'Fraction, Fraction': function (x, y) {
      return x.mul(y);
    },

    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {
      var res = y.clone();
      res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);
      return res;
    },

    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {
      var res = x.clone();
      res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);
      return res;
    },

    'Unit, Unit': function (x, y) {
      return x.multiply(y);
    }

  });

  return multiplyScalar;
}

exports.factory = factory;

},{}],327:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  
  var abs         = load(require('../arithmetic/abs'));
  var add         = load(require('../arithmetic/add'));
  var pow         = load(require('../arithmetic/pow'));
  var sqrt        = load(require('../arithmetic/sqrt'));
  var multiply    = load(require('../arithmetic/multiply'));
  var equalScalar = load(require('../relational/equalScalar'));
  var larger      = load(require('../relational/larger'));
  var smaller     = load(require('../relational/smaller'));
  var matrix      = load(require('../../type/matrix/function/matrix'));
  var trace       = load(require('../matrix/trace'));
  var transpose   = load(require('../matrix/transpose'));


  /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5);                         // returns 3.5
   *    math.norm(-3.5);                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4));         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity);        // returns 3
   *    math.norm([1, 2, -3], -Infinity);       // returns 1
   *
   *    math.norm([3, 4], 2);                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */
  var norm = typed('norm', {
    'number': Math.abs,

    'Complex': function (x) {
      return x.abs();
    },

    'BigNumber': function (x) {
      // norm(x) = abs(x)
      return x.abs();
    },
    
    'boolean | null' : function (x) {
      // norm(x) = abs(x)
      return Math.abs(x);
    },

    'Array': function (x) {
      return _norm(matrix(x), 2);
    },
    
    'Matrix': function (x) {
      return _norm(x, 2);
    },

    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {
      // ignore second parameter, TODO: remove the option of second parameter for these types
      return norm(x);
    },

    'Array, number | BigNumber | string': function (x, p) {
      return _norm(matrix(x), p);
    },
    
    'Matrix, number | BigNumber | string': function (x, p) {
      return _norm(x, p);
    }
  });

  /**
   * Calculate the norm for an array
   * @param {Array} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */
  function _norm (x, p) {
    // size
    var sizeX = x.size();
    
    // check if it is a vector
    if (sizeX.length == 1) {
      // check p
      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x, Infinity) = max(abs(x))
        var pinf = 0;
        // skip zeros since abs(0) == 0
        x.forEach(
          function (value) {
            var v = abs(value);
            if (larger(v, pinf))
              pinf = v;
          },
          true);
        return pinf;
      }
      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
        // norm(x, -Infinity) = min(abs(x))
        var ninf;
        // skip zeros since abs(0) == 0
        x.forEach(
          function (value) {
            var v = abs(value);
            if (!ninf || smaller(v, ninf))
              ninf = v;
          },
          true);
        return ninf || 0;
      }
      if (p === 'fro') {
        return _norm(x, 2);
      }
      if (typeof p === 'number' && !isNaN(p)) {
        // check p != 0
        if (!equalScalar(p, 0)) {
          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
          var n = 0;
          // skip zeros since abs(0) == 0
          x.forEach(
            function (value) {
              n = add(pow(abs(value), p), n);
            },
            true);
          return pow(n, 1 / p);
        }
        return Number.POSITIVE_INFINITY;
      }
      // invalid parameter value
      throw new Error('Unsupported parameter value');
    }
    // MxN matrix
    if (sizeX.length == 2) {
      // check p
      if (p === 1) {
        // norm(x) = the largest column sum
        var c = [];
        // result
        var maxc = 0;
        // skip zeros since abs(0) == 0
        x.forEach(
          function (value, index) {
            var j = index[1];
            var cj = add(c[j] || 0, abs(value));
            if (larger(cj, maxc))
              maxc = cj;
            c[j] = cj;
          },
          true);
        return maxc;
      }
      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x) = the largest row sum
        var r = [];
        // result
        var maxr = 0;
        // skip zeros since abs(0) == 0
        x.forEach(
          function (value, index) {
            var i = index[0];
            var ri = add(r[i] || 0, abs(value));
            if (larger(ri, maxr))
              maxr = ri;
            r[i] = ri;
          },
          true);
        return maxr;
      }
      if (p === 'fro') {
        // norm(x) = sqrt(sum(diag(x'x)))
        return sqrt(trace(multiply(transpose(x), x)));
      }
      if (p === 2) {
        // not implemented
        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
      }
      // invalid parameter value
      throw new Error('Unsupported parameter value');
    }
  }

  norm.toTex = {
    1: '\\left\\|${args[0]}\\right\\|',
    2: undefined  // use default template
  };

  return norm;
}

exports.name = 'norm';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../arithmetic/abs":304,"../arithmetic/add":305,"../arithmetic/multiply":325,"../arithmetic/pow":329,"../arithmetic/sqrt":332,"../matrix/trace":387,"../matrix/transpose":388,"../relational/equalScalar":406,"../relational/larger":408,"../relational/smaller":410}],328:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9
   *     math.sqrt(9);          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */
  var nthRoot = typed('nthRoot', {
    
    'number': function (x) {
      return _nthRoot(x, 2);
    },
    'number, number': _nthRoot,

    'BigNumber': function (x) {
      return _bigNthRoot(x, new type.BigNumber(2));
    },
    'Complex' : function(x) {
      return _nthComplexRoot(x, 2);
    }, 
    'Complex, number' : _nthComplexRoot,
    'BigNumber, BigNumber': _bigNthRoot,

    'Array | Matrix': function (x) {
      return nthRoot(x, 2);
    },
    
    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // density must be one (no zeros in matrix)
              if (y.density() === 1) {
                // sparse + sparse
                c = algorithm06(x, y, nthRoot);
              }
              else {
                // throw exception
                throw new Error('Root must be non-zero');
              }
              break;
            default:
              // sparse + dense
              c = algorithm02(y, x, nthRoot, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // density must be one (no zeros in matrix)
              if (y.density() === 1) {
                // dense + sparse
                c = algorithm01(x, y, nthRoot, false);
              }
              else {
                // throw exception
                throw new Error('Root must be non-zero');
              }
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, nthRoot);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y));
    },
    
    'Matrix, number | BigNumber': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, nthRoot, false);
          break;
        default:
          c = algorithm14(x, y, nthRoot, false);
          break;
      }
      return c;
    },

    'number | BigNumber, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // sparse - scalar
            c = algorithm11(y, x, nthRoot, true);
          }
          else {
            // throw exception
            throw new Error('Root must be non-zero');
          }
          break;
        default:
          c = algorithm14(y, x, nthRoot, true);
          break;
      }
      return c;
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y).valueOf();
    },

    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y)).valueOf();
    }
  });

  nthRoot.toTex = {2: '\\sqrt[${args[1]}]{${args[0]}}'};

  return nthRoot;

  /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * http://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */
  function _bigNthRoot(a, root) {
    var precision = type.BigNumber.precision;
    var Big = type.BigNumber.clone({precision: precision + 2});
    var zero = new type.BigNumber(0);

    var one = new Big(1);
    var inv = root.isNegative();
    if (inv) {
      root = root.neg();
    }

    if (root.isZero()) {
      throw new Error('Root must be non-zero');
    }
    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
      throw new Error('Root must be odd when a is negative.');
    }

    // edge cases zero and infinity
    if (a.isZero()) {
      return inv ? new Big(Infinity) : 0;
    }
    if (!a.isFinite()) {
      return inv ? zero : a;
    }

    var x = a.abs().pow(one.div(root));
    // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1
    x = a.isNeg() ? x.neg() : x;
    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
  }
}

/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */
function _nthRoot(a, root) {
  var inv = root < 0;
  if (inv) {
    root = -root;
  }

  if (root === 0) {
    throw new Error('Root must be non-zero');
  }
  if (a < 0 && (Math.abs(root) % 2 != 1)) {
    throw new Error('Root must be odd when a is negative.');
  }

  // edge cases zero and infinity
  if (a == 0) {
    return inv ? Infinity : 0;
  }
  if (!isFinite(a)) {
    return inv ? 0 : a;
  }

  var x = Math.pow(Math.abs(a), 1/root);
  // If a < 0, we require that root is an odd integer,
  // so (-1) ^ (1/root) = -1
  x = a < 0 ? -x : x;
  return inv ? 1 / x : x;

  // Very nice algorithm, but fails with nthRoot(-2, 3).
  // Newton's method has some well-known problems at times:
  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis
  /*
  var x = 1; // Initial guess
  var xPrev = 1;
  var i = 0;
  var iMax = 10000;
  do {
    var delta = (a / Math.pow(x, root - 1) - x) / root;
    xPrev = x;
    x = x + delta;
    i++;
  }
  while (xPrev !== x && i < iMax);

  if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge');
  }

  return inv ? 1 / x : x;
  */
}

/**
 * Calculate the nth root of a Complex Number a using De Moviers Theorem.
 * @param  {Complex} a
 * @param  {number} root
 * @return {Array} array or n Complex Roots in Polar Form.
 */
function _nthComplexRoot(a, root) {
  if (root < 0) throw new Error('Root must be greater than zero');
  if (root === 0) throw new Error('Root must be non-zero');
  if (root % 1 !== 0) throw new Error('Root must be an integer');  
  var arg = a.arg();
  var abs = a.abs();
  var roots = [];
  var r = Math.pow(abs, 1/root);
  for(var k = 0; k < root; k++) {
    roots.push({r: r, phi: (arg + 2 * Math.PI * k)/root});
  }
  return roots;
}

exports.name = 'nthRoot';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm06":513,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521}],329:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var size = require('../../utils/array').size;

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');
  var eye = load(require('../matrix/eye'));
  var multiply = load(require('./multiply'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var fraction = load(require('../../type/fraction/function/fraction'));
  var number = load(require('../../type/number'));

  /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3);               // returns number 8
   *
   *    var a = math.complex(2, 3);
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    var b = [[1, 2], [4, 3]];
   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                   The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */
  var pow = typed('pow', {
    'number, number': _pow,

    'Complex, Complex': function (x, y) {
      return x.pow(y);
    },

    'BigNumber, BigNumber': function (x, y) {
      if (y.isInteger() || x >= 0 || config.predictable) {
        return x.pow(y);
      }
      else {
        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
      }
    },

    'Fraction, Fraction': function (x, y) {
      if (y.d !== 1) {
        if (config.predictable) {
          throw new Error('Function pow does not support non-integer exponents for fractions.');
        }
        else {
          return _pow(x.valueOf(), y.valueOf());
        }
      }
      else {
        return x.pow(y);
     }
    },

    'Array, number': _powArray,

    'Array, BigNumber': function (x, y) {
      return _powArray(x, y.toNumber());
    },

    'Matrix, number': _powMatrix,

    'Matrix, BigNumber': function (x, y) {
      return _powMatrix(x, y.toNumber());
    },

    'Unit, number': function (x, y) {
      return x.pow(y);
    }

  });

  /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */
  function _pow(x, y) {

    // Alternatively could define a 'realmode' config option or something, but
    // 'predictable' will work for now
    if (config.predictable && !isInteger(y) && x < 0) {
      // Check to see if y can be represented as a fraction
      try {
        var yFrac = fraction(y);
        var yNum = number(yFrac);
        if(y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
          if(yFrac.d % 2 === 1) {
            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
          }
        }
      }
      catch (ex) {
        // fraction() throws an error if y is Infinity, etc.
      }

      // Unable to express y as a fraction, so continue on
    }


    // x^Infinity === 0 if -1 < x < 1
    // A real number 0 is returned instead of complex(0)
    if ((x*x < 1 && y ===  Infinity) ||
        (x*x > 1 && y === -Infinity)) {
      return 0;
    }

    // **for predictable mode** x^Infinity === NaN if x < -1
    // N.B. this behavour is different from `Math.pow` which gives
    // (-2)^Infinity === Infinity
    if (config.predictable &&
        ((x < -1 &&          y ===  Infinity) ||
         (x > -1 && x < 0 && y === -Infinity))) {
      return NaN;
    }

    if (isInteger(y) || x >= 0 || config.predictable) {
      return Math.pow(x, y);
    }
    else {
      return new type.Complex(x, 0).pow(y, 0);
    }
  }

  /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */
  function _powArray(x, y) {
    if (!isInteger(y) || y < 0) {
      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
    }
    // verify that A is a 2 dimensional square matrix
    var s = size(x);
    if (s.length != 2) {
      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
    }
    if (s[0] != s[1]) {
      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
    }

    var res = eye(s[0]).valueOf();
    var px = x;
    while (y >= 1) {
      if ((y & 1) == 1) {
        res = multiply(px, res);
      }
      y >>= 1;
      px = multiply(px, px);
    }
    return res;
  }

  /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */
  function _powMatrix (x, y) {
    return matrix(_powArray(x.valueOf(), y));
  }



  pow.toTex = {
    2: '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}'
  };

  return pow;
}

exports.name = 'pow';
exports.factory = factory;

},{"../../type/fraction/function/fraction":493,"../../type/matrix/function/matrix":505,"../../type/number":522,"../../utils/array":532,"../../utils/latex":556,"../../utils/number":557,"../matrix/eye":370,"./multiply":325}],330:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var toFixed = require('../../utils/number').toFixed;
var deepMap = require('../../utils/collection/deepMap');

var NO_INT = 'Number of decimals in function round must be an integer';

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var equalScalar = load(require('../relational/equalScalar'));
  var zeros = load(require('../matrix/zeros'));

  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.2);              // returns number 3
   *    math.round(3.8);              // returns number 4
   *    math.round(-4.2);             // returns number -4
   *    math.round(-4.7);             // returns number -5
   *    math.round(math.pi, 3);       // returns number 3.142
   *    math.round(123.45678, 2);     // returns number 123.46
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.round(c);                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  var round = typed('round', {

    'number': Math.round,

    'number, number': function (x, n) {
      if (!isInteger(n))   {throw new TypeError(NO_INT);}
      if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}

      return _round(x, n);
    },

    'Complex': function (x) {
      return x.round();
    },

    'Complex, number': function (x, n) {
      if (n % 1) {throw new TypeError(NO_INT);}
      
      return x.round(n);
    },

    'Complex, BigNumber': function (x, n) {
      if (!n.isInteger()) {throw new TypeError(NO_INT);}

      var _n = n.toNumber();
      return x.round(_n);
    },

    'number, BigNumber': function (x, n) {
      if (!n.isInteger()) {throw new TypeError(NO_INT);}

      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
    },

    'BigNumber': function (x) {
      return x.toDecimalPlaces(0);
    },

    'BigNumber, BigNumber': function (x, n) {
      if (!n.isInteger()) {throw new TypeError(NO_INT);}

      return x.toDecimalPlaces(n.toNumber());
    },

    'Fraction': function (x) {
      return x.round();
    },

    'Fraction, number': function (x, n) {
      if (n % 1) {throw new TypeError(NO_INT);}
      return x.round(n);
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since round(0) = 0
      return deepMap(x, round, true);
    },

    'Matrix, number | BigNumber': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, round, false);
          break;
        default:
          c = algorithm14(x, y, round, false);
          break;
      }
      return c;
    },

    'number | Complex | BigNumber, Matrix': function (x, y) {
      // check scalar is zero
      if (!equalScalar(x, 0)) {
        // result
        var c;
        // check storage format
        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, round, true);
            break;
          default:
            c = algorithm14(y, x, round, true);
            break;
        }
        return c;
      }
      // do not execute algorithm, result will be a zero matrix
      return zeros(y.size(), y.storage());
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, round, false).valueOf();
    },

    'number | Complex | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, round, true).valueOf();
    }
  });

  round.toTex = {
    1: '\\left\\lfloor${args[0]}\\right\\rceil',
    2: undefined  // use default template
  };

  return round;
}

/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 * @private
 */
function _round (value, decimals) {
  return parseFloat(toFixed(value, decimals));
}

exports.name = 'round';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm14":521,"../../utils/collection/deepMap":547,"../../utils/number":557,"../matrix/zeros":389,"../relational/equalScalar":406}],331:[function(require,module,exports){
'use strict';

var number = require('../../utils/number');
var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 1
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5);               // returns 1
   *    math.sign(-4.2);              // returns -1
   *    math.sign(0);                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
  var sign = typed('sign', {
    'number': number.sign,

    'Complex': function (x) {
      return x.sign();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(x.cmp(0));
    },

    'Fraction': function (x) {
      return new type.Fraction(x.s, 1);
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sign(0) = 0
      return deepMap(x, sign, true);
    },

    'Unit': function(x) {
      return sign(x.value);
    }
  });

  sign.toTex = {1: '\\mathrm{${name}}\\left(${args[0]}\\right)'};

  return sign;
}

exports.name = 'sign';
exports.factory = factory;


},{"../../utils/collection/deepMap":547,"../../utils/number":557}],332:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25);                // returns 5
   *    math.square(5);               // returns 25
   *    math.sqrt(-4);                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
  var sqrt = typed('sqrt', {
    'number': _sqrtNumber,

    'Complex': function (x) {
        return x.sqrt();
    },

    'BigNumber': function (x) {
      if (!x.isNegative() || config.predictable) {
        return x.sqrt();
      }
      else {
        // negative value -> downgrade to number to do complex value computation
        return _sqrtNumber(x.toNumber());
      }
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sqrt(0) = 0
      return deepMap(x, sqrt, true);
    },

    'Unit': function (x) {
      // Someday will work for complex units when they are implemented
      return x.pow(0.5);
    }

  });

  /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */
  function _sqrtNumber(x) {
    if (x >= 0 || config.predictable) {
      return Math.sqrt(x);
    }
    else {
      return new type.Complex(x, 0).sqrt();
    }
  }

  sqrt.toTex = {1: '\\sqrt{${args[0]}}'};

  return sqrt;
}

exports.name = 'sqrt';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],333:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2);           // returns number 4
   *    math.square(3);           // returns number 9
   *    math.pow(3, 2);           // returns number 9
   *    math.multiply(3, 3);      // returns number 9
   *
   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
  var square = typed('square', {
    'number': function (x) {
      return x * x;
    },

    'Complex': function (x) {
      return x.mul(x);
    },

    'BigNumber': function (x) {
      return x.times(x);
    },

    'Fraction': function (x) {
      return x.mul(x);
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since square(0) = 0
      return deepMap(x, square, true);
    },

    'Unit': function(x) {
      return x.pow(2);
    }
  });

  square.toTex = {1: '\\left(${args[0]}\\right)^2'};

  return square;
}

exports.name = 'square';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],334:[function(require,module,exports){
'use strict';

var DimensionError = require('../../error/DimensionError');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var addScalar = load(require('./addScalar'));
  var unaryMinus = load(require('./unaryMinus'));

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  // TODO: split function subtract in two: subtract and subtractScalar

  /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2);        // returns number 3.3
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(4, 1);
   *    math.subtract(a, b);          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]
   *
   *    var c = math.unit('2.1 km');
   *    var d = math.unit('500m');
   *    math.subtract(c, d);          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */
  var subtract = typed('subtract', {

    'number, number': function (x, y) {
      return x - y;
    },

    'Complex, Complex': function (x, y) {
      return x.sub(y);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.minus(y);
    },

    'Fraction, Fraction': function (x, y) {
      return x.sub(y);
    },

    'Unit, Unit': function (x, y) {
      if (x.value == null) {
        throw new Error('Parameter x contains a unit with undefined value');
      }

      if (y.value == null) {
        throw new Error('Parameter y contains a unit with undefined value');
      }

      if (!x.equalBase(y)) {
        throw new Error('Units do not match');
      }

      var res = x.clone();
      res.value = subtract(res.value, y.value);
      res.fixPrefix = false;

      return res;
    },
    
    'Matrix, Matrix': function (x, y) {
      // matrix sizes
      var xsize = x.size();
      var ysize = y.size();

      // check dimensions
      if (xsize.length !== ysize.length)
        throw new DimensionError(xsize.length, ysize.length);

      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse - sparse
              c = algorithm05(x, y, subtract);
              break;
            default:
              // sparse - dense
              c = algorithm03(y, x, subtract, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense - sparse
              c = algorithm01(x, y, subtract, false);
              break;
            default:
              // dense - dense
              c = algorithm13(x, y, subtract);
              break;
          }
          break;
      }
      return c;
    },
    
    'Array, Array': function (x, y) {
      // use matrix implementation
      return subtract(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return subtract(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return subtract(x, matrix(y));
    },
    
    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!
          c = algorithm10(x, unaryMinus(y), addScalar);
          break;
        default:
          c = algorithm14(x, y, subtract);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm10(y, x, subtract, true);
          break;
        default:
          c = algorithm14(y, x, subtract, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, subtract, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, subtract, true).valueOf();
    }
  });

  subtract.toTex = {
    2: '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)'
  };

  return subtract;
}

exports.name = 'subtract';
exports.factory = factory;

},{"../../error/DimensionError":27,"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm05":512,"../../type/matrix/utils/algorithm10":517,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556,"./addScalar":306,"./unaryMinus":335}],335:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5);      // returns -3.5
   *    math.unaryMinus(-4.2);     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */
  var unaryMinus = typed('unaryMinus', {
    'number': function (x) {
      return -x;
    },

    'Complex': function (x) {
      return x.neg();
    },

    'BigNumber': function (x) {
      return x.neg();
    },

    'Fraction': function (x) {
      return x.neg();
    },

    'Unit': function (x) {
      var res = x.clone();
      res.value = unaryMinus(x.value);
      return res;
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since unaryMinus(0) = 0
      return deepMap(x, unaryMinus, true);
    }

    // TODO: add support for string
  });

  unaryMinus.toTex = {
    1: latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)'
  };

  return unaryMinus;
}

exports.name = 'unaryMinus';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/latex":556}],336:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5);      // returns 3.5
   *    math.unaryPlus(1);     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */
  var unaryPlus = typed('unaryPlus', {
    'number': function (x) {
      return x;
    },

    'Complex': function (x) {
      return x; // complex numbers are immutable
    },

    'BigNumber': function (x) {
      return x; // bignumbers are immutable
    },

    'Fraction': function (x) {
      return x; // fractions are immutable
    },

    'Unit': function (x) {
      return x.clone();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since unaryPlus(0) = 0
      return deepMap(x, unaryPlus, true);
    },

    'boolean | string | null': function (x) {
      // convert to a number or bignumber
      return (config.number == 'BigNumber') ? new type.BigNumber(+x): +x;
    }
  });

  unaryPlus.toTex = {
    1: latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)'
  };

  return unaryPlus;
}

exports.name = 'unaryPlus';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/latex":556}],337:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Calculate the extended greatest common divisor for two values.
   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12);             // returns [4, -1, 1]
   *    math.gcd(8, 12);              // returns 4
   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */
  var xgcd = typed('xgcd', {
    'number, number': _xgcd,
    'BigNumber, BigNumber': _xgcdBigNumber
    // TODO: implement support for Fraction
  });

  xgcd.toTex = undefined; // use default template

  return xgcd;

  /**
   * Calculate xgcd for two numbers
   * @param {number} a
   * @param {number} b
   * @return {number} result
   * @private
   */
  function _xgcd (a, b) {
    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var t, // used to swap two variables
        q, // quotient
        r, // remainder
        x = 0, lastx = 1,
        y = 1, lasty = 0;

    if (!isInteger(a) || !isInteger(b)) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (b) {
      q = Math.floor(a / b);
      r = a - q*b;

      t = x;
      x = lastx - q * x;
      lastx = t;

      t = y;
      y = lasty - q * y;
      lasty = t;

      a = b;
      b = r;
    }

    var res;
    if (a < 0) {
      res = [-a, -lastx, -lasty];
    }
    else {
      res = [a, a ? lastx : 0, lasty];
    }
    return (config.matrix === 'Array') ? res : matrix(res);
  }

  /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */
  function _xgcdBigNumber(a, b) {
    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var t, // used to swap two variables
        q, // quotient
        r, // remainder
        zero = new type.BigNumber(0),
        one = new type.BigNumber(1),
        x = zero,
        lastx = one,
        y = one,
        lasty = zero;

    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (!b.isZero()) {
      q = a.div(b).floor();
      r = a.mod(b);

      t = x;
      x = lastx.minus(q.times(x));
      lastx = t;

      t = y;
      y = lasty.minus(q.times(y));
      lasty = t;

      a = b;
      b = r;
    }

    var res;
    if (a.lt(zero)) {
      res = [a.neg(), lastx.neg(), lasty.neg()];
    }
    else {
      res = [a, !a.isZero() ? lastx : 0, lasty];
    }
    return (config.matrix === 'Array') ? res : matrix(res);
  }
}

exports.name = 'xgcd';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/number":557}],338:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var bigBitAnd = require('../../utils/bignumber/bitAnd');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131);               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */
  var bitAnd = typed('bitAnd', {

    'number, number': function (x, y) {
      if (!isInteger(x) || !isInteger(y)) {
        throw new Error('Integers expected in function bitAnd');
      }

      return x & y;
    },

    'BigNumber, BigNumber': bigBitAnd,

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse & sparse
              c = algorithm06(x, y, bitAnd, false);
              break;
            default:
              // sparse & dense
              c = algorithm02(y, x, bitAnd, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense & sparse
              c = algorithm02(x, y, bitAnd, false);
              break;
            default:
              // dense & dense
              c = algorithm13(x, y, bitAnd);
              break;
          }
          break;
      }
      return c;
    },
    
    'Array, Array': function (x, y) {
      // use matrix implementation
      return bitAnd(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return bitAnd(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return bitAnd(x, matrix(y));
    },
    
    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, bitAnd, false);
          break;
        default:
          c = algorithm14(x, y, bitAnd, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, bitAnd, true);
          break;
        default:
          c = algorithm14(y, x, bitAnd, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitAnd, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitAnd, true).valueOf();
    }
  });

  bitAnd.toTex = {
    2: '\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\right)'
  };

  return bitAnd;
}

exports.name = 'bitAnd';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm06":513,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/bitAnd":533,"../../utils/latex":556,"../../utils/number":557}],339:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var bigBitNot = require('../../utils/bignumber/bitNot');
var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1);               // returns number -2
   *
   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */
  var bitNot = typed('bitNot', {
    'number': function (x) {
      if (!isInteger(x)) {
        throw new Error('Integer expected in function bitNot');
      }

      return ~x;
    },

    'BigNumber': bigBitNot,

    'Array | Matrix': function (x) {
      return deepMap(x, bitNot);
    }
  });

  bitNot.toTex = {
    1: latex.operators['bitNot'] + '\\left(${args[0]}\\right)'
  };

  return bitNot;
}

exports.name = 'bitNot';
exports.factory = factory;

},{"../../utils/bignumber/bitNot":534,"../../utils/collection/deepMap":547,"../../utils/latex":556,"../../utils/number":557}],340:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var bigBitOr = require('../../utils/bignumber/bitOr');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2);               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */
  var bitOr = typed('bitOr', {

    'number, number': function (x, y) {
      if (!isInteger(x) || !isInteger(y)) {
        throw new Error('Integers expected in function bitOr');
      }

      return x | y;
    },

    'BigNumber, BigNumber': bigBitOr,

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm04(x, y, bitOr);
              break;
            default:
              // sparse + dense
              c = algorithm01(y, x, bitOr, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm01(x, y, bitOr, false);
              break;
            default:
              c = algorithm13(x, y, bitOr);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return bitOr(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return bitOr(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return bitOr(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm10(x, y, bitOr, false);
          break;
        default:
          c = algorithm14(x, y, bitOr, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm10(y, x, bitOr, true);
          break;
        default:
          c = algorithm14(y, x, bitOr, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitOr, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitOr, true).valueOf();
    }
  });

  bitOr.toTex = {
    2: '\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\right)'
  };

  return bitOr;
}

exports.name = 'bitOr';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm04":511,"../../type/matrix/utils/algorithm10":517,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/bitOr":535,"../../utils/latex":556,"../../utils/number":557}],341:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var bigBitXor = require('../../utils/bignumber/bitXor');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2);               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */
  var bitXor = typed('bitXor', {

    'number, number': function (x, y) {
      if (!isInteger(x) || !isInteger(y)) {
        throw new Error('Integers expected in function bitXor');
      }

      return x ^ y;
    },

    'BigNumber, BigNumber': bigBitXor,

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, bitXor);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, bitXor, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, bitXor, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, bitXor);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return bitXor(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return bitXor(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return bitXor(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, bitXor, false);
          break;
        default:
          c = algorithm14(x, y, bitXor, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, bitXor, true);
          break;
        default:
          c = algorithm14(y, x, bitXor, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitXor, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitXor, true).valueOf();
    }
  });

  bitXor.toTex = {
    2: '\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\right)'
  };

  return bitXor;
}

exports.name = 'bitXor';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/bitXor":536,"../../utils/latex":556,"../../utils/number":557}],342:[function(require,module,exports){
module.exports = [
  require('./bitAnd'),
  require('./bitNot'),
  require('./bitOr'),
  require('./bitXor'),
  require('./leftShift'),
  require('./rightArithShift'),
  require('./rightLogShift')
];

},{"./bitAnd":338,"./bitNot":339,"./bitOr":340,"./bitXor":341,"./leftShift":343,"./rightArithShift":344,"./rightLogShift":345}],343:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var bigLeftShift = require('../../utils/bignumber/leftShift');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var equalScalar = load(require('../relational/equalScalar'));
  var zeros = load(require('../matrix/zeros'));

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2);               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */
  var leftShift = typed('leftShift', {
    
    'number, number': function (x, y) {
      if (!isInteger(x) || !isInteger(y)) {
        throw new Error('Integers expected in function leftShift');
      }

      return x << y;
    },

    'BigNumber, BigNumber': bigLeftShift,

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse & sparse
              c = algorithm08(x, y, leftShift, false);
              break;
            default:
              // sparse & dense
              c = algorithm02(y, x, leftShift, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense & sparse
              c = algorithm01(x, y, leftShift, false);
              break;
            default:
              // dense & dense
              c = algorithm13(x, y, leftShift);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return leftShift(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return leftShift(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return leftShift(x, matrix(y));
    },

    'Matrix, number | BigNumber': function (x, y) {
      // check scalar
      if (!equalScalar(y, 0)) {
        // result
        var c;
        // check storage format
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, leftShift, false);
            break;
          default:
            c = algorithm14(x, y, leftShift, false);
            break;
        }
        return c;
      }
      return x.clone();
    },

    'number | BigNumber, Matrix': function (x, y) {
      // check scalar
      if (!equalScalar(x, 0)) {
        // result
        var c;
        // check storage format
        switch (y.storage()) {
          case 'sparse':
            c = algorithm10(y, x, leftShift, true);
            break;
          default:
            c = algorithm14(y, x, leftShift, true);
            break;
        }
        return c;
      }
      return zeros(y.size(), y.storage());
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return leftShift(matrix(x), y).valueOf();
    },

    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return leftShift(x, matrix(y)).valueOf();
    }
  });

  leftShift.toTex = {
    2: '\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\right)'
  };

  return leftShift;
}

exports.name = 'leftShift';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm08":515,"../../type/matrix/utils/algorithm10":517,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/leftShift":541,"../../utils/latex":556,"../../utils/number":557,"../matrix/zeros":389,"../relational/equalScalar":406}],344:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var bigRightArithShift = require('../../utils/bignumber/rightArithShift');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');
  
  var matrix = load(require('../../type/matrix/function/matrix'));
  var equalScalar = load(require('../relational/equalScalar'));
  var zeros = load(require('../matrix/zeros'));

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2);               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */
  var rightArithShift = typed('rightArithShift', {

    'number, number': function (x, y) {
      if (!isInteger(x) || !isInteger(y)) {
        throw new Error('Integers expected in function rightArithShift');
      }

      return x >> y;
    },

    'BigNumber, BigNumber': bigRightArithShift,

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse & sparse
              c = algorithm08(x, y, rightArithShift, false);
              break;
            default:
              // sparse & dense
              c = algorithm02(y, x, rightArithShift, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense & sparse
              c = algorithm01(x, y, rightArithShift, false);
              break;
            default:
              // dense & dense
              c = algorithm13(x, y, rightArithShift);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return rightArithShift(x, matrix(y));
    },

    'Matrix, number | BigNumber': function (x, y) {
      // check scalar
      if (!equalScalar(y, 0)) {
        // result
        var c;
        // check storage format
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, rightArithShift, false);
            break;
          default:
            c = algorithm14(x, y, rightArithShift, false);
            break;
        }
        return c;
      }
      return x.clone();
    },

    'number | BigNumber, Matrix': function (x, y) {
      // check scalar
      if (!equalScalar(x, 0)) {
        // result
        var c;
        // check storage format
        switch (y.storage()) {
          case 'sparse':
            c = algorithm10(y, x, rightArithShift, true);
            break;
          default:
            c = algorithm14(y, x, rightArithShift, true);
            break;
        }
        return c;
      }
      return zeros(y.size(), y.storage());
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), y).valueOf();
    },

    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return rightArithShift(x, matrix(y)).valueOf();
    }
  });

  rightArithShift.toTex = {
    2: '\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\right)'
  };

  return rightArithShift;
}

exports.name = 'rightArithShift';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm08":515,"../../type/matrix/utils/algorithm10":517,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/rightArithShift":543,"../../utils/latex":556,"../../utils/number":557,"../matrix/zeros":389,"../relational/equalScalar":406}],345:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var equalScalar = load(require('../relational/equalScalar'));
  var zeros = load(require('../matrix/zeros'));

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2);               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */

  var rightLogShift = typed('rightLogShift', {

    'number, number': function (x, y) {
      if (!isInteger(x) || !isInteger(y)) {
        throw new Error('Integers expected in function rightLogShift');
      }

      return x >>> y;
    },

    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse & sparse
              c = algorithm08(x, y, rightLogShift, false);
              break;
            default:
              // sparse & dense
              c = algorithm02(y, x, rightLogShift, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense & sparse
              c = algorithm01(x, y, rightLogShift, false);
              break;
            default:
              // dense & dense
              c = algorithm13(x, y, rightLogShift);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return rightLogShift(x, matrix(y));
    },

    'Matrix, number | BigNumber': function (x, y) {
      // check scalar
      if (!equalScalar(y, 0)) {
        // result
        var c;
        // check storage format
        switch (x.storage()) {
          case 'sparse':
            c = algorithm11(x, y, rightLogShift, false);
            break;
          default:
            c = algorithm14(x, y, rightLogShift, false);
            break;
        }
        return c;
      }
      return x.clone();
    },

    'number | BigNumber, Matrix': function (x, y) {
      // check scalar
      if (!equalScalar(x, 0)) {
        // result
        var c;
        // check storage format
        switch (y.storage()) {
          case 'sparse':
            c = algorithm10(y, x, rightLogShift, true);
            break;
          default:
            c = algorithm14(y, x, rightLogShift, true);
            break;
        }
        return c;
      }
      return zeros(y.size(), y.storage());
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), y).valueOf();
    },

    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return rightLogShift(x, matrix(y)).valueOf();
    }
  });

  rightLogShift.toTex = {
    2: '\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\right)'
  };

  return rightLogShift;
}

exports.name = 'rightLogShift';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm01":508,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm08":515,"../../type/matrix/utils/algorithm10":517,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556,"../../utils/number":557,"../matrix/zeros":389,"../relational/equalScalar":406}],346:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var stirlingS2 = load(require('./stirlingS2'));
  var isNegative = load(require('../utils/isNegative'));
  var isInteger = load(require('../utils/isInteger'));

  /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3); // returns 5;
   *    math.bellNumbers(8); // returns 4140;
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */
  var bellNumbers = typed('bellNumbers', {
    'number | BigNumber': function (n) {

      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function bellNumbers');
      }

      // Sum (k=0, n) S(n,k).
      var result = 0;
      for(var i = 0; i <= n; i++) {
        result = add(result, stirlingS2(n, i));
      }

      return result;
    }
  });

  bellNumbers.toTex = {1: '\\mathrm{B}_{${args[0]}}'};

  return bellNumbers;
}

exports.name = 'bellNumbers';
exports.factory = factory;

},{"../arithmetic/add":305,"../utils/isInteger":471,"../utils/isNegative":473,"./stirlingS2":350}],347:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var divide = load(require('../arithmetic/divide'));
  var multiply = load(require('../arithmetic/multiply'));
  var combinations = load(require('../probability/combinations'));
  var isNegative = load(require('../utils/isNegative'));
  var isInteger = load(require('../utils/isInteger'));


  /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3); // returns 5;
   *    math.catalan(8); // returns 1430;
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */
  var catalan = typed('catalan', {
    'number | BigNumber': function (n) {

      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function catalan');
      }
       
      return divide(combinations(multiply(n,2), n), add(n,1));

    }
  });

  catalan.toTex = {1: '\\mathrm{C}_{${args[0]}}'};

  return catalan;
}

exports.name = 'catalan';
exports.factory = factory;

},{"../arithmetic/add":305,"../arithmetic/divide":310,"../arithmetic/multiply":325,"../probability/combinations":390,"../utils/isInteger":471,"../utils/isNegative":473}],348:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var combinations = load(require('../probability/combinations'));
  var add = load(require('../arithmetic/addScalar'));
  var isPositive = load(require('../utils/isPositive'));
  var isInteger = load(require('../utils/isInteger'));
  var larger = load(require('../relational/larger'));

  /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3); // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */
  var composition =  typed('composition', {
    'number | BigNumber, number | BigNumber': function (n, k) {
      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
        throw new TypeError('Positive integer value expected in function composition');
      }
      else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function composition');
      }

      return combinations(add(n, -1), add(k, -1));
    }
  });

  composition.toTex = undefined; // use default template

  return composition;
}

exports.name = 'composition';
exports.factory = factory;

},{"../arithmetic/addScalar":306,"../probability/combinations":390,"../relational/larger":408,"../utils/isInteger":471,"../utils/isPositive":475}],349:[function(require,module,exports){
module.exports = [
  require('./bellNumbers'),
  require('./composition'),
  require('./stirlingS2'),
  require('./catalan')
];

},{"./bellNumbers":346,"./catalan":347,"./composition":348,"./stirlingS2":350}],350:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var subtract = load(require('../arithmetic/subtract'));
  var multiply = load(require('../arithmetic/multiply'));
  var divide = load(require('../arithmetic/divide'));
  var pow = load(require('../arithmetic/pow'));
  var factorial = load(require('../probability/factorial'));
  var combinations = load(require('../probability/combinations'));
  var isNegative = load(require('../utils/isNegative'));
  var isInteger = load(require('../utils/isInteger'));
  var larger = load(require('../relational/larger'));

  /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3); //returns 25
   *
   * See also:
   *
   *    Bell numbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */
  var stirlingS2 = typed('stirlingS2', {
    'number | BigNumber, number | BigNumber': function (n, k) {
      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
        throw new TypeError('Non-negative integer value expected in function stirlingS2');
      }
      else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function stirlingS2');
      }

      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]
      var kFactorial = factorial(k);
      var result = 0;
      for(var i = 0; i <= k; i++) {
        var negativeOne = pow(-1, subtract(k,i));
        var kChooseI = combinations(k,i);
        var iPower = pow(i,n);

        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
      }

      return divide(result, kFactorial);
    }
  });

  stirlingS2.toTex = {2: '\\mathrm{S}\\left(${args}\\right)'};

  return stirlingS2;
}

exports.name = 'stirlingS2';
exports.factory = factory;

},{"../arithmetic/add":305,"../arithmetic/divide":310,"../arithmetic/multiply":325,"../arithmetic/pow":329,"../arithmetic/subtract":334,"../probability/combinations":390,"../probability/factorial":392,"../relational/larger":408,"../utils/isInteger":471,"../utils/isNegative":473}],351:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    var a = math.complex(2, 2);
   *    math.arg(a) / math.pi;          // returns number 0.25
   *
   *    var b = math.complex('2 + 3i');
   *    math.arg(b);                    // returns number 0.982793723247329
   *    math.atan2(3, 2);               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */
  var arg = typed('arg', {
    'number': function (x) {
      return Math.atan2(0, x);
    },

    'BigNumber': function (x) {
      return type.BigNumber.atan2(0, x);
    },

    'Complex': function (x) {
      return x.arg();
    },

    // TODO: implement BigNumber support for function arg

    'Array | Matrix': function (x) {
      return deepMap(x, arg);
    }
  });

  arg.toTex = {1: '\\arg\\left(${args[0]}\\right)'};

  return arg;
}

exports.name = 'arg';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],352:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */
  var conj = typed('conj', {
    'number': function (x) {
      return x;
    },

    'BigNumber': function (x) {
      return x;
    },

    'Complex': function (x) {
      return x.conjugate();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, conj);
    }
  });

  conj.toTex = {1: '\\left(${args[0]}\\right)^*'};

  return conj;
}

exports.name = 'conj';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],353:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    var a = math.complex(2, 3);
   *    math.re(a);                     // returns number 2
   *    math.im(a);                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')); // returns number -5.2
   *    math.re(math.complex(2.4));     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */
  var im = typed('im', {
    'number': function (x) {
      return 0;
    },

    'BigNumber': function (x) {
      return new type.BigNumber(0);
    },

    'Complex': function (x) {
      return x.im;
    },

    'Array | Matrix': function (x) {
      return deepMap(x, im);
    }
  });

  im.toTex = {1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'};

  return im;
}

exports.name = 'im';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],354:[function(require,module,exports){
module.exports = [
  require('./arg'),
  require('./conj'),
  require('./im'),
  require('./re')
];

},{"./arg":351,"./conj":352,"./im":353,"./re":355}],355:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    var a = math.complex(2, 3);
   *    math.re(a);                     // returns number 2
   *    math.im(a);                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')); // returns number 0
   *    math.re(math.complex(2.4));     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */
  var re = typed('re', {
    'number': function (x) {
      return x;
    },

    'BigNumber': function (x) {
      return x;
    },

    'Complex': function (x) {
      return x.re;
    },

    'Array | Matrix': function (x) {
      return deepMap(x, re);
    }
  });

  re.toTex = {1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'};

  return re;
}

exports.name = 're';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],356:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
    * Calculates:
    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */

  var distance = typed('distance', {
    'Array, Array, Array': function(x, y, z){
      // Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)
      if (x.length == 2 && y.length == 2 && z.length == 2){
        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for third argument'); }
        var m = (z[1]-z[0])/(y[1]-y[0]);
        var xCoeff = m*m*y[0];
        var yCoeff = -1*(m*y[0]);
        var constant = x[1];

        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
      }
      else{
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object, Object': function(x, y, z){
      if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2){
        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }
        if (!_2d(y)) { throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers'); }
        if (!_2d(z)) { throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers'); }
        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&
          y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')){
          var m = (z.lineTwoPtY-z.lineTwoPtX)/(y.lineOnePtY-y.lineOnePtX);
          var xCoeff = m*m*y.lineOnePtX;
          var yCoeff = -1*(m*y.lineOnePtX);
          var constant = x.pointX;

          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
        }
        else{
          throw new TypeError('Key names do not match');
        }
      }
      else{
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array, Array': function(x, y){
      // Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
      if (x.length == 2 && y.length == 3){
        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }

        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
      }
      // Point to Line 3D
      else if (x.length == 3 && y.length == 6){
        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
        if (!_parametricLine(y)) { throw new TypeError('Array with 6 numbers expected for second argument'); }

        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
      }
      // Point to Point 2D
      else if (x.length == 2 && y.length == 2){
        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }

        return _distance2d(x[0], x[1], y[0], y[1]);
      }
      // Point to Point 3D
      else if(x.length == 3 && y.length == 3){
        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }

        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
      }
      else{
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object': function(x, y){
      if (Object.keys(x).length == 2 && Object.keys(y).length == 3){
        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }
        if (!_3d(y)) { throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers'); }
        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&
          y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')){

          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
        }
        else{
          throw new TypeError('Key names do not match');
        }
      }
      // Point to Line 3D
      else if (Object.keys(x).length == 3 && Object.keys(y).length == 6){
        if (!_3d(x)) { throw new TypeError('Values of pointX, pointY and pointZ should be numbers'); }
        if (!_parametricLine(y)) { throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers'); }
        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&
          y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&
          y.hasOwnProperty('b') && y.hasOwnProperty('c')){

          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
        }
        else{
          throw new TypeError('Key names do not match');
        }
      }
      // Point to Point 2D
      else if (Object.keys(x).length == 2 && Object.keys(y).length == 2){
        if (!_2d(x)) { throw new TypeError('Values of pointOneX and pointOneY should be numbers'); }
        if (!_2d(y)) { throw new TypeError('Values of pointTwoX and pointTwoY should be numbers'); }
        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&
          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')){

          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
        }
        else{
          throw new TypeError('Key names do not match');
        }
      }
      // Point to Point 3D
      else if(Object.keys(x).length == 3 && Object.keys(y).length == 3){
        if (!_3d(x)) { throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers'); }
        if (!_3d(y)) { throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers'); }
        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&
          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')){

          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
        }
        else {
          throw new TypeError('Key names do not match');
        }
      }
      else{
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array': function(arr){
      if (!_pairwise(arr)) { throw new TypeError('Incorrect array format entered for pairwise distance calculation'); }

      return _distancePairwise(arr);
    }
  });
  return distance;
}

function _2d(a){
  // checks if the number of arguments are correct in count and are valid (should be numbers)
  if (a.constructor !== Array){
    a = _objectToArray(a);
  }
  return typeof a[0] === 'number' && typeof a[1] === 'number';
}

function _3d(a){
  // checks if the number of arguments are correct in count and are valid (should be numbers)
  if (a.constructor !== Array){
    a = _objectToArray(a);
  }
  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';
}

function _parametricLine(a){
  if (a.constructor !== Array){
    a = _objectToArray(a);
  }
  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&
    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';

}

function _objectToArray(o){
  var keys = Object.keys(o);
  var a = [];
  for (var i = 0; i < keys.length; i++) {
    a.push(o[keys[i]]);
  }
  return a;
}

function _pairwise(a){
  //checks for valid arguments passed to _distancePairwise(Array)
  if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number'){
    for(var i in a){
      if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number'){
        return false;
      }
    }
  }
  else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number'){
    for(var i in a){
      if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number'){
        return false;
      }
    }
  }
  else{
    return false;
  }
  return true;
}

function _distancePointLine2D(x, y, a, b, c){
  var num =  Math.abs(a*x + b*y + c);
  var den = Math.pow((a*a + b*b), 0.5);
  var result = (num/den);
  return result;
}

function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c){
  var num = [((y0-y)*(c))-((z0-z)*(b)), ((z0-z)*(a))-((x0-x)*(c)), ((x0-x)*(b))-((y0-y)*(a))]
  num = Math.pow(num[0]*num[0] + num[1]*num[1] + num[2]*num[2], 0.5);
  var den = Math.pow(a*a + b*b + c*c, 0.5);
  var result = num/den;
  return result;
}

function _distance2d(x1, y1, x2, y2){
  var yDiff = y2 - y1;
  var xDiff = x2 - x1;
  var radicant = yDiff * yDiff + xDiff * xDiff;
  var result = Math.pow(radicant, 0.5);
  return result;
}

function _distance3d(x1, y1, z1, x2, y2, z2){
  var zDiff = z2 - z1;
  var yDiff = y2 - y1;
  var xDiff = x2 - x1;
  var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;
  var result = Math.pow(radicant, 0.5);
  return result;
}

function _distancePairwise(a){
  var result = [];
  for(var i = 0; i < a.length-1; i++){
    for(var j = i+1; j < a.length; j++){
      if (a[0].length == 2){
        result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
      }
      else if (a[0].length == 3){
        result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
      }
    }
  }
  return result;
}

exports.name = 'distance';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505}],357:[function(require,module,exports){
module.exports = [
  require('./intersect'),
  require('./distance')
];

},{"./distance":356,"./intersect":358}],358:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var abs = load(require('../arithmetic/abs'));
  var add = load(require('../arithmetic/add'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var multiply = load(require('../arithmetic/multiply'));
  var subtract = load(require('../arithmetic/subtract'));

  /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR null if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */
  var intersect = typed('intersect', {
    'Array, Array, Array': function (x, y, plane) {
      if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
      if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
      if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }

      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
    },

    'Array, Array, Array, Array': function (w, x, y, z) {
      if (w.length === 2) {
        if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }
        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }

        return _intersect2d(w, x, y, z);
      }
      else if (w.length === 3) {
        if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }
        if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }

        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
      }
      else {
        throw new TypeError('Arrays with two or thee dimensional points expected');
      }
    },

    'Matrix, Matrix, Matrix': function (x, y, plane) {
      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
    },

    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {
      // TODO: output matrix type should match input matrix type
      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
    }
  });

  function _2d(x) {
    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';
  }

  function _3d(x) {
    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';
  }

  function _4d(x) {
    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';
  }

  function _intersect2d(p1a, p1b, p2a, p2b){
    var o1 = p1a;
    var o2 = p2a;
    var d1 = subtract(o1, p1b);
    var d2 = subtract(o2, p2b);
    var det = d1[0]*d2[1] - d2[0]*d1[1];
    if (abs(det) < config.epsilon) {
      return null;
    }
    var t = (d2[0]*o1[1] - d2[1]*o1[0] - d2[0]*o2[1] + d2[1]*o2[0]) / det;
    return add(multiply(d1, t), o1); 
  }

  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){
    var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);
    var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);
    var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);
    var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);
    var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);
    var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );
    var tb = ( d1343 + ta * d4321 ) / (d4343);

    var pax = x1 + ta * (x2 - x1);
    var pay = y1 + ta * (y2 - y1);
    var paz = z1 + ta * (z2 - z1);
    var pbx = x3 + tb * (x4 - x3);
    var pby = y3 + tb * (y4 - y3);
    var pbz = z3 + tb * (z4 - z3);
    if (pax === pbx && pay === pby && paz === pbz){
      return [pax, pay, paz];
    }
    else{
      return null;
    }
  }

  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){
    var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1*x - y1*y - z1*z);
    var px = x1 + t * (x2 - x1);
    var py = y1 + t * (y2 - y1);
    var pz = z1 + t * (z2 - z1);
    return [px, py, pz];
    // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
  }

  return intersect;
}

exports.name = 'intersect';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../arithmetic/abs":304,"../arithmetic/add":305,"../arithmetic/multiply":325,"../arithmetic/subtract":334}],359:[function(require,module,exports){
module.exports = [
  require('./algebra'),
  require('./arithmetic'),
  require('./bitwise'),
  require('./combinatorics'),
  require('./complex'),
  require('./geometry'),
  require('./logical'),
  require('./matrix'),
  require('./probability'),
  require('./relational'),
  require('./set'),
  require('./special'),
  require('./statistics'),
  require('./string'),
  require('./trigonometry'),
  require('./unit'),
  require('./utils')
];

},{"./algebra":275,"./arithmetic":320,"./bitwise":342,"./combinatorics":349,"./complex":354,"./geometry":357,"./logical":361,"./matrix":374,"./probability":394,"./relational":407,"./set":413,"./special":425,"./statistics":426,"./string":439,"./trigonometry":460,"./unit":467,"./utils":470}],360:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var zeros = load(require('../matrix/zeros'));
  var not = load(require('./not'));
  var isZero = load(require('../utils/isZero'));

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4);   // returns true
   *
   *    a = [2, 0, 0];
   *    b = [3, 7, 0];
   *    c = 0;
   *
   *    math.and(a, b);   // returns [true, false, false]
   *    math.and(a, c);   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */
  var and = typed('and', {

    'number, number': function (x, y) {
      return !!(x && y);
    },

    'Complex, Complex': function (x, y) {
      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
    },

    'BigNumber, BigNumber': function (x, y) {
      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
    },

    'Unit, Unit': function (x, y) {
      return and(x.value, y.value);
    },
    
    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse & sparse
              c = algorithm06(x, y, and, false);
              break;
            default:
              // sparse & dense
              c = algorithm02(y, x, and, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense & sparse
              c = algorithm02(x, y, and, false);
              break;
            default:
              // dense & dense
              c = algorithm13(x, y, and);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return and(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return and(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return and(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, and, false);
          break;
        default:
          c = algorithm14(x, y, and, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, and, true);
          break;
        default:
          c = algorithm14(y, x, and, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return and(matrix(x), y).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return and(x, matrix(y)).valueOf();
    }
  });

  and.toTex = {
    2: '\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\right)'
  };

  return and;
}

exports.name = 'and';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm06":513,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556,"../matrix/zeros":389,"../utils/isZero":477,"./not":362}],361:[function(require,module,exports){
module.exports = [
  require('./and'),
  require('./not'),
  require('./or'),
  require('./xor')
];

},{"./and":360,"./not":362,"./or":363,"./xor":364}],362:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2);      // returns false
   *    math.not(0);      // returns true
   *    math.not(true);   // returns false
   *
   *    a = [2, -7, 0];
   *    math.not(a);      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */
  var not = typed('not', {
    'number': function (x) {
      return !x;
    },

    'Complex': function (x) {
      return x.re === 0 && x.im === 0;
    },

    'BigNumber': function (x) {
      return x.isZero() || x.isNaN();
    },

    'Unit': function (x) {
      return not(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, not);
    }
  });

  not.toTex = {
    1: latex.operators['not'] + '\\left(${args[0]}\\right)'
  };

  return not;
}

exports.name = 'not';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/latex":556}],363:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4);   // returns true
   *
   *    a = [2, 5, 0];
   *    b = [0, 22, 0];
   *    c = 0;
   *
   *    math.or(a, b);   // returns [true, true, false]
   *    math.or(b, c);   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */
  var or = typed('or', {

    'number, number': function (x, y) {
      return !!(x || y);
    },

    'Complex, Complex': function (x, y) {
      return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);
    },

    'BigNumber, BigNumber': function (x, y) {
      return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());
    },

    'Unit, Unit': function (x, y) {
      return or(x.value, y.value);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm05(x, y, or);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, or, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, or, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, or);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return or(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return or(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return or(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, or, false);
          break;
        default:
          c = algorithm14(x, y, or, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, or, true);
          break;
        default:
          c = algorithm14(y, x, or, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, or, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, or, true).valueOf();
    }
  });

  or.toTex = {
    2: '\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\right)'
  };

  return or;
}

exports.name = 'or';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm05":512,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556}],364:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4);   // returns false
   *
   *    a = [2, 0, 0];
   *    b = [2, 7, 0];
   *    c = 0;
   *
   *    math.xor(a, b);   // returns [false, true, false]
   *    math.xor(a, c);   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */
  var xor = typed('xor', {
 
    'number, number': function (x, y) {
      return !!x !== !!y;
    },

    'Complex, Complex': function (x, y) {
      return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));
    },

    'BigNumber, BigNumber': function (x, y) {
      return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));
    },

    'Unit, Unit': function (x, y) {
      return xor(x.value, y.value);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, xor);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, xor, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, xor, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, xor);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return xor(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return xor(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return xor(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, xor, false);
          break;
        default:
          c = algorithm14(x, y, xor, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, xor, true);
          break;
        default:
          c = algorithm14(y, x, xor, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, xor, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, xor, true).valueOf();
    }
  });

  xor.toTex = {
    2: '\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\right)'
  };

  return xor;
}

exports.name = 'xor';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556}],365:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;
var isInteger = require('../../utils/number').isInteger;
var array = require('../../utils/array');
var IndexError = require('../../error/IndexError');
var DimensionError = require('../../error/DimensionError');

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    var A = [[1, 2], [5, 6]];
   *    var B = [[3, 4], [7, 8]];
   *
   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world'); // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */
  var concat = typed('concat', {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    '...Array | Matrix | number | BigNumber': function (args) {
      var i;
      var len = args.length;
      var dim = -1;  // zero-based dimension
      var prevDim;
      var asMatrix = false;
      var matrices = [];  // contains multi dimensional arrays

      for (i = 0; i < len; i++) {
        var arg = args[i];

        // test whether we need to return a Matrix (if not we return an Array)
        if (type.isMatrix(arg)) {
          asMatrix = true;
        }

        if (type.isNumber(arg) || type.isBigNumber(arg)) {
          if (i !== len - 1) {
            throw new Error('Dimension must be specified as last argument');
          }

          // last argument contains the dimension on which to concatenate
          prevDim = dim;
          dim = arg.valueOf(); // change BigNumber to number

          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          if (dim < 0 || (i > 0 && dim > prevDim)) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new IndexError(dim, prevDim + 1);
          }
        }
        else {
          // this is a matrix or array
          var m = clone(arg).valueOf();
          var size = array.size(m);
          matrices[i] = m;
          prevDim = dim;
          dim = size.length - 1;

          // verify whether each of the matrices has the same number of dimensions
          if (i > 0 && dim != prevDim) {
            throw new DimensionError(prevDim + 1, dim + 1);
          }
        }
      }

      if (matrices.length == 0) {
        throw new SyntaxError('At least one matrix expected');
      }

      var res = matrices.shift();
      while (matrices.length) {
        res = _concat(res, matrices.shift(), dim, 0);
      }

      return asMatrix ? matrix(res) : res;
    },

    '...string': function (args) {
      return args.join('');
    }
  });

  concat.toTex = undefined; // use default template

  return concat;
}

/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */
function _concat(a, b, concatDim, dim) {
  if (dim < concatDim) {
    // recurse into next dimension
    if (a.length != b.length) {
      throw new DimensionError(a.length, b.length);
    }

    var c = [];
    for (var i = 0; i < a.length; i++) {
      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
    }
    return c;
  }
  else {
    // concatenate this dimension
    return a.concat(b);
  }
}

exports.name = 'concat';
exports.factory = factory;

},{"../../error/DimensionError":27,"../../error/IndexError":28,"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/number":557,"../../utils/object":558}],366:[function(require,module,exports){
'use strict';

var array = require('../../utils/array');

function factory (type, config, load, typed) {
  var matrix   = load(require('../../type/matrix/function/matrix'));
  var subtract = load(require('../arithmetic/subtract'));
  var multiply = load(require('../arithmetic/multiply'));

  /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */
  var cross = typed('cross', {
    'Matrix, Matrix': function (x, y) {
      return matrix(_cross(x.toArray(), y.toArray()));
    },

    'Matrix, Array': function (x, y) {
      return matrix(_cross(x.toArray(), y));
    },

    'Array, Matrix': function (x, y) {
      return matrix(_cross(x, y.toArray()));
    },

    'Array, Array': _cross
  });

  cross.toTex = {
    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
  };

  return cross;

  /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */
  function _cross(x, y) {
    var highestDimension = Math.max(array.size(x).length, array.size(y).length);

    x = array.squeeze(x);
    y = array.squeeze(y);

    var xSize = array.size(x);
    var ySize = array.size(y);

    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
      throw new RangeError('Vectors with length 3 expected ' +
      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
    }

    var product = [
      subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),
      subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),
      subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))
    ];

    if (highestDimension > 1) {
      return [product];
    } else {
      return product;
    }
  }
}

exports.name = 'cross';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../arithmetic/multiply":325,"../arithmetic/subtract":334}],367:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');
var object = util.object;
var string = util.string;

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var add = load(require('../arithmetic/add'));
  var subtract = load(require('../arithmetic/subtract'));
  var multiply = load(require('../arithmetic/multiply'));
  var unaryMinus = load(require('../arithmetic/unaryMinus'));

  /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]); // returns -2
   *
   *    var A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A); // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */
  var det = typed('det', {
    'any': function (x) {
      return object.clone(x);
    },

    'Array | Matrix': function det (x) {
      var size;
      if (type.isMatrix(x)) {
        size = x.size();
      }
      else if (Array.isArray(x)) {
        x = matrix(x);
        size = x.size();
      }
      else {
        // a scalar
        size = [];
      }

      switch (size.length) {
        case 0:
          // scalar
          return object.clone(x);

        case 1:
          // vector
          if (size[0] == 1) {
            return object.clone(x.valueOf()[0]);
          }
          else {
            throw new RangeError('Matrix must be square ' +
            '(size: ' + string.format(size) + ')');
          }

        case 2:
          // two dimensional array
          var rows = size[0];
          var cols = size[1];
          if (rows == cols) {
            return _det(x.clone().valueOf(), rows, cols);
          }
          else {
            throw new RangeError('Matrix must be square ' +
            '(size: ' + string.format(size) + ')');
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' +
          '(size: ' + string.format(size) + ')');
      }
    }
  });

  det.toTex = {1: '\\det\\left(${args[0]}\\right)'};

  return det;

  /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */
  function _det (matrix, rows, cols) {
    if (rows == 1) {
      // this is a 1 x 1 matrix
      return object.clone(matrix[0][0]);
    }
    else if (rows == 2) {
      // this is a 2 x 2 matrix
      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
      return subtract(
          multiply(matrix[0][0], matrix[1][1]),
          multiply(matrix[1][0], matrix[0][1])
      );
    }
    else {
      // this is an n x n matrix
      var compute_mu = function (matrix) {
        var i, j;

        // Compute the matrix with zero lower triangle, same upper triangle,
        // and diagonals given by the negated sum of the below diagonal
        // elements.
        var mu = new Array(matrix.length);
        var sum = 0;
        for (i = 1; i < matrix.length; i++) {
          sum = add(sum, matrix[i][i]);
        }

        for (i = 0; i < matrix.length; i++) {
          mu[i] = new Array(matrix.length);
          mu[i][i] = unaryMinus(sum);

          for (j = 0; j < i; j++) {
            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation
          }

          for (j = i + 1; j < matrix.length; j++) {
            mu[i][j] = matrix[i][j];
          }

          if (i+1 < matrix.length) {
            sum = subtract(sum, matrix[i + 1][i + 1]);
          }
        }

        return mu;
      };

      var fa = matrix;
      for (var i = 0; i < rows - 1; i++) {
        fa = multiply(compute_mu(fa), matrix);
      }

      if (rows % 2 == 0) {
        return unaryMinus(fa[0][0]);
      } else {
        return fa[0][0];
      }
    }
  }
}

exports.name = 'det';
exports.factory = factory;


},{"../../type/matrix/function/matrix":505,"../../utils/index":555,"../arithmetic/add":305,"../arithmetic/multiply":325,"../arithmetic/subtract":334,"../arithmetic/unaryMinus":335}],368:[function(require,module,exports){
'use strict';

var array     = require('../../utils/array');
var clone     = require('../../utils/object').clone;
var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));
  
  /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
   *    math.diag(a);   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, eye
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */
  var diag = typed('diag', {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments

    'Array': function (x) {
      return _diag(x, 0, array.size(x), null);
    },

    'Array, number': function (x, k) {
      return _diag(x, k, array.size(x), null);
    },
    
    'Array, BigNumber': function (x, k) {
      return _diag(x, k.toNumber(), array.size(x), null);
    },

    'Array, string': function (x, format) {
      return _diag(x, 0, array.size(x), format);
    },

    'Array, number, string': function (x, k, format) {
      return _diag(x, k, array.size(x), format);
    },

    'Array, BigNumber, string': function (x, k, format) {
      return _diag(x, k.toNumber(), array.size(x), format);
    },

    'Matrix': function (x) {
      return _diag(x, 0, x.size(), x.storage());
    },

    'Matrix, number': function (x, k) {
      return _diag(x, k, x.size(), x.storage());
    },

    'Matrix, BigNumber': function (x, k) {
      return _diag(x, k.toNumber(), x.size(), x.storage());
    },

    'Matrix, string': function (x, format) {
      return _diag(x, 0, x.size(), format);
    },

    'Matrix, number, string': function (x, k, format) {
      return _diag(x, k, x.size(), format);
    },

    'Matrix, BigNumber, string': function (x, k, format) {
      return _diag(x, k.toNumber(), x.size(), format);
    }
  });

  diag.toTex = undefined; // use default template

  return diag;

  /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */
  function _diag (x, k, size, format) {
    if (!isInteger(k)) {
      throw new TypeError ('Second parameter in function diag must be an integer');
    }
    
    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0;

    // check dimensions
    switch (size.length) {
      case 1:
        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
      case 2:
        return _getDiagonal(x, k, format, size, kSub, kSuper);
    }
    throw new RangeError('Matrix for function diag must be 2 dimensional');
  }
  
  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
    // matrix size
    var ms = [l + kSub, l + kSuper];
    // get matrix constructor
    var F = type.Matrix.storage(format || 'dense');
    // create diagonal matrix
    var m = F.diagonal(ms, x, k);
    // check we need to return a matrix
    return format !== null ? m : m.valueOf();
  }
  
  function _getDiagonal(x, k, format, s, kSub, kSuper) {
    // check x is a Matrix
    if (type.isMatrix(x)) {
      // get diagonal matrix
      var dm = x.diagonal(k);
      // check we need to return a matrix
      if (format !== null) {
        // check we need to change matrix format
        if (format !== dm.storage())
          return matrix(dm, format);
        return dm;
      }
      return dm.valueOf();
    }
    // vector size
    var n = Math.min(s[0] - kSub, s[1] - kSuper);
    // diagonal values
    var vector = [];
    // loop diagonal
    for (var i = 0; i < n; i++) {
      vector[i] = x[i + kSub][i + kSuper];
    }
    // check we need to return a matrix
    return format !== null ? matrix(vector) : vector;
  }
}

exports.name = 'diag';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/number":557,"../../utils/object":558}],369:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;

function factory (type, config, load, typed) {
  var add      = load(require('../arithmetic/add'));
  var multiply = load(require('../arithmetic/multiply'));

  /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
   *
   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */
  var dot = typed('dot', {
    'Matrix, Matrix': function (x, y) {
      return _dot(x.toArray(), y.toArray());
    },

    'Matrix, Array': function (x, y) {
      return _dot(x.toArray(), y);
    },

    'Array, Matrix': function (x, y) {
      return _dot(x, y.toArray());
    },

    'Array, Array': _dot
  });
  
  dot.toTex = {2: '\\left(${args[0]}\\cdot${args[1]}\\right)'};

  return dot;

  /**
   * Calculate the dot product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {number} Returns the dot product of x and y
   * @private
   */
  // TODO: double code with math.multiply
  function _dot(x, y) {
    var xSize= size(x);
    var ySize = size(y);
    var len = xSize[0];

    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message
    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');

    var prod = 0;
    for (var i = 0; i < len; i++) {
      prod = add(prod, multiply(x[i], y[i]));
    }

    return prod;
  }
}

exports.name = 'dot';
exports.factory = factory;

},{"../../utils/array":532,"../arithmetic/add":305,"../arithmetic/multiply":325}],370:[function(require,module,exports){
'use strict';

var array = require('../../utils/array');
var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  
  var matrix = load(require('../../type/matrix/function/matrix'));
  
  /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.eye(n)
   *    math.eye(n, format)
   *    math.eye(m, n)
   *    math.eye(m, n, format)
   *    math.eye([m, n])
   *    math.eye([m, n], format)
   *
   * Examples:
   *
   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */
  var eye = typed('eye', {
    '': function () {
      return (config.matrix === 'Matrix') ? matrix([]) : [];
    },

    'string': function (format) {
      return matrix(format);
    },

    'number | BigNumber': function (rows) {
      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
    },
    
    'number | BigNumber, string': function (rows, format) {
      return _eye(rows, rows, format);
    },

    'number | BigNumber, number | BigNumber': function (rows, cols) {
      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
    },
    
    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {
      return _eye(rows, cols, format);
    },

    'Array':  function (size) {
      return _eyeVector(size);
    },
    
    'Array, string':  function (size, format) {
      return _eyeVector(size, format);
    },

    'Matrix': function (size) {
      return _eyeVector(size.valueOf(), size.storage());
    },
    
    'Matrix, string': function (size, format) {
      return _eyeVector(size.valueOf(), format);
    }
  });

  eye.toTex = undefined; // use default template

  return eye;

  function _eyeVector (size, format) {
    switch (size.length) {
      case 0: return format ? matrix(format) : [];
      case 1: return _eye(size[0], size[0], format);
      case 2: return _eye(size[0], size[1], format);
      default: throw new Error('Vector containing two values expected');
    }
  }

  /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */
  function _eye (rows, cols, format) {
    // BigNumber constructor with the right precision
    var Big = (type.isBigNumber(rows) || type.isBigNumber(cols))
            ? type.BigNumber
            : null;

    if (type.isBigNumber(rows)) rows = rows.toNumber();
    if (type.isBigNumber(cols)) cols = cols.toNumber();

    if (!isInteger(rows) || rows < 1) {
      throw new Error('Parameters in function eye must be positive integers');
    }
    if (!isInteger(cols) || cols < 1) {
      throw new Error('Parameters in function eye must be positive integers');
    }
    
    var one = Big ? new type.BigNumber(1) : 1;
    var defaultValue = Big ? new Big(0) : 0;
    var size = [rows, cols];
    
    // check we need to return a matrix
    if (format) {
      // get matrix storage constructor
      var F = type.Matrix.storage(format);
      // create diagonal matrix (use optimized implementation for storage format)
      return F.diagonal(size, one, 0, defaultValue);
    }
    
    // create and resize array
    var res = array.resize([], size, defaultValue);
    // fill in ones on the diagonal
    var minimum = rows < cols ? rows : cols;
    // fill diagonal
    for (var d = 0; d < minimum; d++) {
      res[d][d] = one;
    }
    return res;
  }
}

exports.name = 'eye';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/number":557}],371:[function(require,module,exports){
'use strict';

var filter = require('../../utils/array').filter;
var filterRegExp = require('../../utils/array').filterRegExp;
var maxArgumentCount = require('../../utils/function').maxArgumentCount;

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  
  /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0;
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/); // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */
  var filter = typed('filter', {
    'Array, function': _filterCallback,

    'Matrix, function': function (x, test) {
      return matrix(_filterCallback(x.toArray(), test));
    },

    'Array, RegExp': filterRegExp,

    'Matrix, RegExp': function (x, test) {
      return matrix(filterRegExp(x.toArray(), test));
    }
  });

  filter.toTex = undefined; // use default template

  return filter;
}

/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */
function _filterCallback (x, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  return filter(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    }
    else if (args === 2) {
      return callback(value, [index]);
    }
    else { // 3 or -1
      return callback(value, [index], array);
    }
  });
}

exports.name = 'filter';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/function":554}],372:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;
var _flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */
  var flatten = typed('flatten', {
    'Array': function (x) {
      return _flatten(clone(x));
    },

    'Matrix': function (x) {
      var flat = _flatten(clone(x.toArray()));
      // TODO: return the same matrix type as x
      return matrix(flat);
    }
  });

  flatten.toTex = undefined; // use default template

  return flatten;
}

exports.name = 'flatten';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/object":558}],373:[function(require,module,exports){
'use strict';

var maxArgumentCount = require('../../utils/function').maxArgumentCount;
var forEach = require('../../utils/array').forEach;

function factory (type, config, load, typed) {
  /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value);
   *    });
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
  var forEach = typed('forEach', {
    'Array, function': _forEach,

    'Matrix, function': function (x, callback) {
      return x.forEach(callback);
    }
  });

  forEach.toTex = undefined; // use default template

  return forEach;
}

/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */
function _forEach (array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  var recurse = function (value, index) {
    if (Array.isArray(value)) {
      forEach(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        recurse(child, index.concat(i));
      });
    }
    else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        callback(value);
      }
      else if (args === 2) {
        callback(value, index);
      }
      else { // 3 or -1
        callback(value, index, array);
      }
    }
  };
  recurse(array, []);
}

exports.name = 'forEach';
exports.factory = factory;

},{"../../utils/array":532,"../../utils/function":554}],374:[function(require,module,exports){
module.exports = [
  require('./concat'),
  require('./cross'),
  require('./det'),
  require('./diag'),
  require('./dot'),
  require('./eye'),
  require('./filter'),
  require('./flatten'),
  require('./forEach'),
  require('./inv'),
  require('./kron'),
  require('./map'),
  require('./ones'),
  require('./partitionSelect'),
  require('./range'),
  require('./reshape'),
  require('./resize'),
  require('./size'),
  require('./sort'),
  require('./squeeze'),
  require('./subset'),
  require('./trace'),
  require('./transpose'),
  require('./zeros')
];

},{"./concat":365,"./cross":366,"./det":367,"./diag":368,"./dot":369,"./eye":370,"./filter":371,"./flatten":372,"./forEach":373,"./inv":375,"./kron":376,"./map":377,"./ones":378,"./partitionSelect":379,"./range":380,"./reshape":381,"./resize":382,"./size":383,"./sort":384,"./squeeze":385,"./subset":386,"./trace":387,"./transpose":388,"./zeros":389}],375:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

function factory (type, config, load, typed) {
  var matrix       = load(require('../../type/matrix/function/matrix'));
  var divideScalar = load(require('../arithmetic/divideScalar'));
  var addScalar    = load(require('../arithmetic/addScalar'));
  var multiply     = load(require('../arithmetic/multiply'));
  var unaryMinus   = load(require('../arithmetic/unaryMinus'));
  var det          = load(require('../matrix/det'));
  var eye          = load(require('./eye'));

  /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4);                 // returns 0.25
   *     1 / 4;                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */
  var inv = typed('inv', {
    'Array | Matrix': function (x) {
      var size = type.isMatrix(x) ? x.size() : util.array.size(x);
      switch (size.length) {
        case 1:
          // vector
          if (size[0] == 1) {
            if (type.isMatrix(x)) {
              return matrix([
                divideScalar(1, x.valueOf()[0])
              ]);
            }
            else {
              return [
                divideScalar(1, x[0])
              ];
            }
          }
          else {
            throw new RangeError('Matrix must be square ' +
            '(size: ' + util.string.format(size) + ')');
          }

        case 2:
          // two dimensional array
          var rows = size[0];
          var cols = size[1];
          if (rows == cols) {
            if (type.isMatrix(x)) {
              return matrix(
                  _inv(x.valueOf(), rows, cols),
                  x.storage()
              );
            }
            else {
              // return an Array
              return _inv(x, rows, cols);
            }
          }
          else {
            throw new RangeError('Matrix must be square ' +
            '(size: ' + util.string.format(size) + ')');
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' +
          '(size: ' + util.string.format(size) + ')');
      }
    },

    'any': function (x) {
      // scalar
      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
    }
  });

  /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */
  function _inv (mat, rows, cols){
    var r, s, f, value, temp;

    if (rows == 1) {
      // this is a 1 x 1 matrix
      value = mat[0][0];
      if (value == 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }
      return [[
        divideScalar(1, value)
      ]];
    }
    else if (rows == 2) {
      // this is a 2 x 2 matrix
      var d = det(mat);
      if (d == 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }
      return [
        [
          divideScalar(mat[1][1], d),
          divideScalar(unaryMinus(mat[0][1]), d)
        ],
        [
          divideScalar(unaryMinus(mat[1][0]), d),
          divideScalar(mat[0][0], d)
        ]
      ];
    }
    else {
      // this is a matrix of 3 x 3 or larger
      // calculate inverse using gauss-jordan elimination
      //      http://en.wikipedia.org/wiki/Gaussian_elimination
      //      http://mathworld.wolfram.com/MatrixInverse.html
      //      http://math.uww.edu/~mcfarlat/inverse.htm

      // make a copy of the matrix (only the arrays, not of the elements)
      var A = mat.concat();
      for (r = 0; r < rows; r++) {
        A[r] = A[r].concat();
      }

      // create an identity matrix which in the end will contain the
      // matrix inverse
      var B = eye(rows).valueOf();

      // loop over all columns, and perform row reductions
      for (var c = 0; c < cols; c++) {
        // element Acc should be non zero. if not, swap content
        // with one of the lower rows
        r = c;
        while (r < rows && A[r][c] == 0) {
          r++;
        }
        if (r == rows || A[r][c] == 0) {
          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)
          throw Error('Cannot calculate inverse, determinant is zero');
        }
        if (r != c) {
          temp = A[c]; A[c] = A[r]; A[r] = temp;
          temp = B[c]; B[c] = B[r]; B[r] = temp;
        }

        // eliminate non-zero values on the other rows at column c
        var Ac = A[c],
            Bc = B[c];
        for (r = 0; r < rows; r++) {
          var Ar = A[r],
              Br = B[r];
          if(r != c) {
            // eliminate value at column c and row r
            if (Ar[c] != 0) {
              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);

              // add (f * row c) to row r to eliminate the value
              // at column c
              for (s = c; s < cols; s++) {
                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
              }
              for (s = 0; s < cols; s++) {
                Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));
              }
            }
          }
          else {
            // normalize value at Acc to 1,
            // divide each value on row r with the value at Acc
            f = Ac[c];
            for (s = c; s < cols; s++) {
              Ar[s] = divideScalar(Ar[s], f);
            }
            for (s = 0; s < cols; s++) {
              Br[s] = divideScalar(Br[s], f);
            }
          }
        }
      }
      return B;
    }
  }

  inv.toTex = {1: '\\left(${args[0]}\\right)^{-1}'};

  return inv;
}

exports.name = 'inv';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/index":555,"../arithmetic/addScalar":306,"../arithmetic/divideScalar":311,"../arithmetic/multiply":325,"../arithmetic/unaryMinus":335,"../matrix/det":367,"./eye":370}],376:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var multiplyScalar = load(require('../arithmetic/multiplyScalar'))
    /**
     * Calculates the kronecker product of 2 matrices or vectors.
     *
     * NOTE: If a one dimensional vector / matrix is given, it will be
     * wrapped so its two dimensions.
     * See the examples.
     *
     * Syntax:
     *
     *    math.kron(x, y)
     *
     * Examples:
     *
     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]]);
     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
     *
     *    math.kron([1,1], [2,3,4]);
     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
     *
     * See also:
     *
     *    multiply, dot, cross
     *
     * @param  {Array | Matrix} x     First vector
     * @param  {Array | Matrix} y     Second vector
     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
     */
    var kron = typed('kron', {
        'Matrix, Matrix': function(x, y) {
            return matrix(_kron(x.toArray(), y.toArray()));
        },

        'Matrix, Array': function(x, y) {
            return matrix(_kron(x.toArray(), y));
        },

        'Array, Matrix': function(x, y) {
            return matrix(_kron(x, y.toArray()));
        },

        'Array, Array': _kron
    });

    return kron;

    /**
     * Calculate the kronecker product of two matrices / vectors
     * @param {Array} a  First vector
     * @param {Array} b  Second vector
     * @returns {Array} Returns the kronecker product of x and y
     * @private
     */
    function _kron(a, b) {
        // Deal with the dimensions of the matricies.
        if (size(a).length === 1) {
          // Wrap it in a 2D Matrix
          a = [a];
        }
        if (size(b).length === 1) {
          // Wrap it in a 2D Matrix
          b = [b]
        }
        if (size(a).length > 2 || size(b).length > 2) {
            throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' +
            '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
        }
        var t = [];
        var r = [];

        return a.map(function(a) {
            return b.map(function(b) {
                return a.map(function(y) {
                    return b.map(function(x) {
                        return r.push(multiplyScalar(y, x));
                    });
                }, t.push(r = []));
            });
        }, t = []) && t;
    }
}

exports.name = 'kron';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../arithmetic/multiplyScalar":326}],377:[function(require,module,exports){
'use strict';

var maxArgumentCount = require('../../utils/function').maxArgumentCount;

function factory (type, config, load, typed) {
  /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value;
   *    });  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
  var map = typed('map', {
    'Array, function': _map,

    'Matrix, function': function (x, callback) {
      return x.map(callback);
    }
  });

  map.toTex = undefined; // use default template

  return map;
}

/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */
function _map (array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  var recurse = function (value, index) {
    if (Array.isArray(value)) {
      return value.map(function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i));
      });
    }
    else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        return callback(value);
      }
      else if (args === 2) {
        return callback(value, index);
      }
      else { // 3 or -1
        return callback(value, index, array);
      }
    }
  };

  return recurse(array, []);
}

exports.name = 'map';
exports.factory = factory;

},{"../../utils/function":554}],378:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var resize = require('../../utils/array').resize;

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3);                   // returns [1, 1, 1]
   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, eye, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */
  var ones = typed('ones', {
    '': function () {
      return (config.matrix === 'Array')
          ? _ones([])
          : _ones([], 'default');
    },

    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function (size) {
      var last = size[size.length - 1];
      if (typeof last === 'string') {
        var format = size.pop();
        return _ones(size, format);
      }
      else if (config.matrix === 'Array') {
        return _ones(size);
      }
      else {
        return _ones(size, 'default');
      }
    },

    'Array': _ones,

    'Matrix': function (size) {
      var format = size.storage();
      return _ones(size.valueOf(), format);
    },

    'Array | Matrix, string': function (size, format) {
      return _ones (size.valueOf(), format);
    }
  });

  ones.toTex = undefined; // use default template

  return ones;

  /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */
  function _ones(size, format) {
    var hasBigNumbers = _normalize(size);
    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);
      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }
      return m;
    }
    else {
      // return an Array
      var arr = [];
      if (size.length > 0) {
        return resize(arr, size, defaultValue);
      }
      return arr;
    }
  }

  // replace BigNumbers with numbers, returns true if size contained BigNumbers
  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (type.isBigNumber(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  }

  // validate arguments
  function _validate (size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
        throw new Error('Parameters in function ones must be positive integers');
      }
    });
  }
}

exports.name = 'ones';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/number":557}],379:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  var asc = load(require('../relational/compare'));
  function desc(a, b) {
    return -asc(a, b);
  }

  /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2);           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length;
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved; zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */
  return typed('partitionSelect', {
    'Array | Matrix, number': function (x, k) {
      return _partitionSelect(x, k, asc);
    },

    'Array | Matrix, number, string': function (x, k, compare) {
      if (compare === 'asc') {
        return _partitionSelect(x, k, asc);
      }
      else if (compare === 'desc') {
        return _partitionSelect(x, k, desc);
      }
      else {
        throw new Error('Compare string must be "asc" or "desc"');
      }
    },

    'Array | Matrix, number, function': _partitionSelect
  });

  function _partitionSelect(x, k, compare) {
    if (!isInteger(k) || k < 0) {
      throw new Error('k must be a non-negative integer');
    }

    if (type.isMatrix(x)) {
      var size = x.size();
      if (size.length > 1) {
        throw new Error('Only one dimensional matrices supported');
      }
      return quickSelect(x.valueOf(), k, compare);
    }

    if (Array.isArray(x)) {
      return quickSelect(x, k, compare);
    }
  }

  /**
   * Quickselect algorithm.
   * Code adapted from:
   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */
  function quickSelect(arr, k, compare) {
    if (k >= arr.length) {
      throw new Error('k out of bounds');
    }

    var from = 0;
    var to = arr.length - 1;

    // if from == to we reached the kth element
    while (from < to) {
      var r = from;
      var w = to;
      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];

      // stop if the reader and writer meets
      while (r < w) {
        // arr[r] >= pivot
        if (compare(arr[r], pivot) >= 0) { // put the large values at the end
          var tmp = arr[w];
          arr[w] = arr[r];
          arr[r] = tmp;
          --w;
        } else { // the value is smaller than the pivot, skip
          ++r;
        }
      }

      // if we stepped up (r++) we need to step one down (arr[r] > pivot)
      if (compare(arr[r], pivot) > 0) {
        --r;
      }

      // the r pointer is on the end of the first k elements
      if (k <= r) {
        to = r;
      } else {
        from = r + 1;
      }
    }

    return arr[k];
  }
}

exports.name = 'partitionSelect';
exports.factory = factory;

},{"../../utils/number":557,"../relational/compare":402}],380:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  var ZERO = new type.BigNumber(0);
  var ONE = new type.BigNumber(1);

  /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6);        // [2, 3, 4, 5]
   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6');     // [2, 3, 4, 5]
   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */
  var range = typed('range', {
    // TODO: simplify signatures when typed-function supports default values and optional arguments

    // TODO: a number or boolean should not be converted to string here
    'string': _strRange,
    'string, boolean': _strRange,

    'number, number':  function (start, end) {
      return _out(_rangeEx(start, end, 1));
    },
    'number, number, number': function (start, end, step) {
      return _out(_rangeEx(start, end, step));
    },
    'number, number, boolean': function (start, end, includeEnd) {
      return includeEnd
          ? _out(_rangeInc(start, end, 1))
          : _out(_rangeEx(start, end, 1));
    },
    'number, number, number, boolean': function (start, end, step, includeEnd) {
      return includeEnd
          ? _out(_rangeInc(start, end, step))
          : _out(_rangeEx(start, end, step));
    },

    'BigNumber, BigNumber':  function (start, end) {
      return _out(_bigRangeEx(start, end, ONE));
    },
    'BigNumber, BigNumber, BigNumber': function (start, end, step) {
      return _out(_bigRangeEx(start, end, step));
    },
    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {
      return includeEnd
          ? _out(_bigRangeInc(start, end, ONE))
          : _out(_bigRangeEx(start, end, ONE));
    },
    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {
      return includeEnd
          ? _out(_bigRangeInc(start, end, step))
          : _out(_bigRangeEx(start, end, step));
    }

  });

  range.toTex = undefined; // use default template

  return range;

  function _out(arr) {
    return config.matrix === 'Array' ? arr : matrix(arr);
  }

  function _strRange (str, includeEnd) {
    var r = _parse(str);
    if (!r){
      throw new SyntaxError('String "' + str + '" is no valid range');
    }

    var fn;
    if (config.number === 'BigNumber') {
      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
      return _out(fn(
          new type.BigNumber(r.start),
          new type.BigNumber(r.end),
          new type.BigNumber(r.step)));
    }
    else {
      fn = includeEnd ? _rangeInc : _rangeEx;
      return _out(fn(r.start, r.end, r.step));
    }
  }

  /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */
  function _rangeEx (start, end, step) {
    var array = [],
        x = start;
    if (step > 0) {
      while (x < end) {
        array.push(x);
        x += step;
      }
    }
    else if (step < 0) {
      while (x > end) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }

  /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */
  function _rangeInc (start, end, step) {
    var array = [],
        x = start;
    if (step > 0) {
      while (x <= end) {
        array.push(x);
        x += step;
      }
    }
    else if (step < 0) {
      while (x >= end) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }

  /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */
  function _bigRangeEx (start, end, step) {
    var array = [],
        x = start;
    if (step.gt(ZERO)) {
      while (x.lt(end)) {
        array.push(x);
        x = x.plus(step);
      }
    }
    else if (step.lt(ZERO)) {
      while (x.gt(end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }

  /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */
  function _bigRangeInc (start, end, step) {
    var array = [],
        x = start;
    if (step.gt(ZERO)) {
      while (x.lte(end)) {
        array.push(x);
        x = x.plus(step);
      }
    }
    else if (step.lt(ZERO)) {
      while (x.gte(end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }

  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */
  function _parse (str) {
    var args = str.split(':');

    // number
    var nums = args.map(function (arg) {
      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
      return Number(arg);
    });

    var invalid = nums.some(function (num) {
      return isNaN(num);
    });
    if(invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return {
          start: nums[0],
          end: nums[1],
          step: 1
        };

      case 3:
        return {
          start: nums[0],
          end: nums[2],
          step: nums[1]
        };

      default:
        return null;
    }
  }

}

exports.name = 'range';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505}],381:[function(require,module,exports){
'use strict';

var DimensionError = require('../../error/DimensionError');

var isInteger = require('../../utils/number').isInteger;
var array = require('../../utils/array');

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3]);
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4]);
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4]);
   *     // returns Array [1, 2, 3, 4]
   *
   *     var x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8]);
   *     math.reshape(x, [2, 2, 2]);
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */
  var reshape = typed('reshape', {

    'Matrix, Array': function (x, sizes) {
      if(x.reshape) {
        return x.reshape(sizes);
      } else {
        return matrix(array.reshape(x.valueOf(), sizes));
      }
    },

    'Array, Array': function (x, sizes) {
      sizes.forEach(function (size) {
        if (!isInteger(size)) {
          throw new TypeError('Invalid size for dimension: ' + size);
        }
      });
      return array.reshape(x, sizes);
    }

  });

  reshape.toTex = undefined; // use default template

  return reshape;
}

exports.name = 'reshape';
exports.factory = factory;

},{"../../error/DimensionError":27,"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/number":557}],382:[function(require,module,exports){
'use strict';

var DimensionError = require('../../error/DimensionError');
var ArgumentsError = require('../../error/ArgumentsError');

var isInteger = require('../../utils/number').isInteger;
var format = require('../../utils/string').format;
var clone = require('../../utils/object').clone;
var array = require('../../utils/array');

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!");    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
  // TODO: rework resize to a typed-function
  var resize = function resize (x, size, defaultValue) {
    if (arguments.length != 2 && arguments.length != 3) {
      throw new ArgumentsError('resize', arguments.length, 2, 3);
    }

    if (type.isMatrix(size)) {
      size = size.valueOf(); // get Array
    }

    if (type.isBigNumber(size[0])) {
      // convert bignumbers to numbers
      size = size.map(function (value) {
        return type.isBigNumber(value) ? value.toNumber() : value;
      });
    }
    
    // check x is a Matrix
    if (type.isMatrix(x)) {
      // use optimized matrix implementation, return copy
      return x.resize(size, defaultValue, true);
    }
    
    if (typeof x === 'string') {
      // resize string
      return _resizeString(x, size, defaultValue);
    }
    
    // check result should be a matrix
    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');

    if (size.length == 0) {
      // output a scalar
      while (Array.isArray(x)) {
        x = x[0];
      }

      return clone(x);
    }
    else {
      // output an array/matrix
      if (!Array.isArray(x)) {
        x = [x];
      }
      x = clone(x);

      var res = array.resize(x, size, defaultValue);
      return asMatrix ? matrix(res) : res;
    }
  };

  resize.toTex = undefined; // use default template

  return resize;

  /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */
  function _resizeString(str, size, defaultChar) {
    if (defaultChar !== undefined) {
      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    }
    else {
      defaultChar = ' ';
    }

    if (size.length !== 1) {
      throw new DimensionError(size.length, 1);
    }
    var len = size[0];
    if (typeof len !== 'number' || !isInteger(len)) {
      throw new TypeError('Invalid size, must contain positive integers ' +
          '(size: ' + format(size) + ')');
    }

    if (str.length > len) {
      return str.substring(0, len);
    }
    else if (str.length < len) {
      var res = str;
      for (var i = 0, ii = len - str.length; i < ii; i++) {
        res += defaultChar;
      }
      return res;
    }
    else {
      return str;
    }
  }
}

exports.name = 'resize';
exports.factory = factory;

},{"../../error/ArgumentsError":26,"../../error/DimensionError":27,"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/number":557,"../../utils/object":558,"../../utils/string":559}],383:[function(require,module,exports){
'use strict';

var array = require('../../utils/array');

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3);                  // returns []
   *     math.size('hello world');        // returns [11]
   *
   *     var A = [[1, 2, 3], [4, 5, 6]];
   *     math.size(A);                    // returns [2, 3]
   *     math.size(math.range(1,6));      // returns [5]
   *
   * See also:
   *
   *     resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */
  var size = typed('size', {
    'Matrix': function (x) {
      // TODO: return the same matrix type as the input
      return matrix(x.size());
    },

    'Array': array.size,

    'string': function (x) {
      return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);
    },

    'number | Complex | BigNumber | Unit | boolean | null': function (x) {
      // scalar
      return (config.matrix === 'Array') ? [] : matrix([]);
    }
  });

  size.toTex = undefined; // use default template

  return size;
}

exports.name = 'size';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532}],384:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var compareAsc = load(require('../relational/compare'));
  var compareDesc = function (a, b) {
    return -compareAsc(a, b);
  };
  var compareNatural = load(require('../relational/compareNatural'));

  /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]); // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length;
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */
  var sort = typed('sort', {
    'Array': function (x) {
      _arrayIsVector(x);
      return x.sort(compareAsc);
    },

    'Matrix': function (x) {
      _matrixIsVector(x);
      return matrix(x.toArray().sort(compareAsc), x.storage());
    },

    'Array, function': function (x, _comparator) {
      _arrayIsVector(x);
      return x.sort(_comparator);
    },

    'Matrix, function': function (x, _comparator) {
      _matrixIsVector(x);
      return matrix(x.toArray().sort(_comparator), x.storage());
    },

    'Array, string': function (x, order) {
      _arrayIsVector(x);
      return x.sort(_comparator(order));
    },

    'Matrix, string': function (x, order) {
      _matrixIsVector(x);
      return matrix(x.toArray().sort(_comparator(order)), x.storage());
    }
  });

  sort.toTex = undefined; // use default template

  /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */
  function _comparator (order) {
    if (order === 'asc') {
      return compareAsc;
    }
    else if (order === 'desc') {
      return compareDesc;
    }
    else if (order === 'natural') {
      return compareNatural;
    }
    else {
      throw new Error('String "asc", "desc", or "natural" expected');
    }
  }

  /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */
  function _arrayIsVector (array) {
    if (size(array).length !== 1) {
      throw new Error('One dimensional array expected');
    }
  }

  /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */
  function _matrixIsVector (matrix) {
    if (matrix.size().length !== 1) {
      throw new Error('One dimensional matrix expected');
    }
  }

  return sort;
}

exports.name = 'sort';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../relational/compare":402,"../relational/compareNatural":403}],385:[function(require,module,exports){
'use strict';

var object = require('../../utils/object');
var array = require('../../utils/array');

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3]);           // returns 3
   *     math.squeeze([[3]]);         // returns 3
   *
   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)
   *
   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */
  var squeeze = typed('squeeze', {
    'Array': function (x) {
      return array.squeeze(object.clone(x));
    },

    'Matrix': function (x) {
      var res = array.squeeze(x.toArray());
      // FIXME: return the same type of matrix as the input
      return Array.isArray(res) ? matrix(res) : res;
    },

    'any': function (x) {
      // scalar
      return object.clone(x);
    }
  });

  squeeze.toTex = undefined; // use default template

  return squeeze;
}

exports.name = 'squeeze';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/object":558}],386:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;
var validateIndex = require('../../utils/array').validateIndex;
var getSafeProperty = require('../../utils/customs').getSafeProperty;
var setSafeProperty = require('../../utils/customs').setSafeProperty;
var DimensionError = require('../../error/DimensionError');

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     var d = [[1, 2], [3, 4]];
   *     math.subset(d, math.index(1, 0));        // returns 3
   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]
   *
   *     // replace a subset
   *     var e = [];
   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]
   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */
  var subset = typed('subset', {
    // get subset
    'Array, Index': function (value, index) {
      var m = matrix(value);
      var subset = m.subset(index);       // returns a Matrix
      return index.isScalar()
          ? subset
          : subset.valueOf();  // return an Array (like the input)
    },

    'Matrix, Index': function (value, index) {
      return value.subset(index);
    },

    'Object, Index': _getObjectProperty,

    'string, Index': _getSubstring,

    // set subset
    'Array, Index, any': function (value, index, replacement) {
      return matrix(clone(value))
          .subset(index, replacement, undefined)
          .valueOf();
    },

    'Array, Index, any, any': function (value, index, replacement, defaultValue) {
      return matrix(clone(value))
          .subset(index, replacement, defaultValue)
          .valueOf();
    },

    'Matrix, Index, any': function (value, index, replacement) {
      return value.clone().subset(index, replacement);
    },

    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {
      return value.clone().subset(index, replacement, defaultValue);
    },

    'string, Index, string': _setSubstring,
    'string, Index, string, string': _setSubstring,
    'Object, Index, any': _setObjectProperty
  });

  subset.toTex = undefined; // use default template

  return subset;

  /**
   * Retrieve a subset of a string
   * @param {string} str            string from which to get a substring
   * @param {Index} index           An index containing ranges for each dimension
   * @returns {string} substring
   * @private
   */
  function _getSubstring(str, index) {
    if (!type.isIndex(index)) {
      // TODO: better error message
      throw new TypeError('Index expected');
    }
    if (index.size().length != 1) {
      throw new DimensionError(index.size().length, 1);
    }

    // validate whether the range is out of range
    var strLen = str.length;
    validateIndex(index.min()[0], strLen);
    validateIndex(index.max()[0], strLen);

    var range = index.dimension(0);

    var substr = '';
    range.forEach(function (v) {
      substr += str.charAt(v);
    });

    return substr;
  }

  /**
   * Replace a substring in a string
   * @param {string} str            string to be replaced
   * @param {Index} index           An index containing ranges for each dimension
   * @param {string} replacement    Replacement string
   * @param {string} [defaultValue] Default value to be uses when resizing
   *                                the string. is ' ' by default
   * @returns {string} result
   * @private
   */
  function _setSubstring(str, index, replacement, defaultValue) {
    if (!index || index.isIndex !== true) {
      // TODO: better error message
      throw new TypeError('Index expected');
    }
    if (index.size().length != 1) {
      throw new DimensionError(index.size().length, 1);
    }
    if (defaultValue !== undefined) {
      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    }
    else {
      defaultValue = ' ';
    }

    var range = index.dimension(0);
    var len = range.size()[0];

    if (len != replacement.length) {
      throw new DimensionError(range.size()[0], replacement.length);
    }

    // validate whether the range is out of range
    var strLen = str.length;
    validateIndex(index.min()[0]);
    validateIndex(index.max()[0]);

    // copy the string into an array with characters
    var chars = [];
    for (var i = 0; i < strLen; i++) {
      chars[i] = str.charAt(i);
    }

    range.forEach(function (v, i) {
      chars[v] = replacement.charAt(i[0]);
    });

    // initialize undefined characters with a space
    if (chars.length > strLen) {
      for (i = strLen - 1, len = chars.length; i < len; i++) {
        if (!chars[i]) {
          chars[i] = defaultValue;
        }
      }
    }

    return chars.join('');
  }
}

/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */
function _getObjectProperty (object, index) {
  if (index.size().length !== 1) {
    throw new DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);
  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }

  return getSafeProperty(object, key);
}

/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */
function _setObjectProperty (object, index, replacement) {
  if (index.size().length !== 1) {
    throw new DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);
  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }

  // clone the object, and apply the property to the clone
  var updated = clone(object);
  setSafeProperty(updated, key, replacement);

  return updated;
}

exports.name = 'subset';
exports.factory = factory;

},{"../../error/DimensionError":27,"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/customs":552,"../../utils/object":558}],387:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;
var format = require('../../utils/string').format;

function factory (type, config, load, typed) {
  
  var matrix = load(require('../../type/matrix/function/matrix'));
  var add = load(require('../arithmetic/add'));

  /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]); // returns 5
   *
   *    var A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A); // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */
  var trace = typed('trace', {
    
    'Array': function (x) {
      // use dense matrix implementation
      return trace(matrix(x));
    },

    'Matrix': function (x) {
      // result
      var c;
      // process storage format
      switch (x.storage()) {
        case 'dense':
          c = _denseTrace(x);
          break;
        case 'sparse':
          c = _sparseTrace(x);
          break;
      }
      return c;
    },
    
    'any': clone
  });
  
  var _denseTrace = function (m) {
    // matrix size & data
    var size = m._size;
    var data = m._data;
    
    // process dimensions
    switch (size.length) {
      case 1:
        // vector
        if (size[0] == 1) {
          // return data[0]
          return clone(data[0]);
        }
        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
      case 2:
        // two dimensional
        var rows = size[0];
        var cols = size[1];
        if (rows === cols) {
          // calulate sum
          var sum = 0;
          // loop diagonal
          for (var i = 0; i < rows; i++)
            sum = add(sum, data[i][i]);
          // return trace
          return sum;
        }
        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        
      default:
        // multi dimensional
        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
    }
  };
  
  var _sparseTrace = function (m) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    var size = m._size;
    // check dimensions
    var rows = size[0];
    var columns = size[1];
    // matrix must be square
    if (rows === columns) {
      // calulate sum
      var sum = 0;
      // check we have data (avoid looping columns)
      if (values.length > 0) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1];
          // loop k within [k0, k1[
          for (var k = k0; k < k1; k++) {
            // row index
            var i = index[k];
            // check row
            if (i === j) {
              // accumulate value
              sum = add(sum, values[k]);
              // exit loop
              break;
            }
            if (i > j) {
              // exit loop, no value on the diagonal for column j
              break;
            }
          }
        }
      }
      // return trace
      return sum;
    }
    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   
  };

  trace.toTex = {1: '\\mathrm{tr}\\left(${args[0]}\\right)'};
  
  return trace;
}

exports.name = 'trace';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/object":558,"../../utils/string":559,"../arithmetic/add":305}],388:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;
var format = require('../../utils/string').format;

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));

  var DenseMatrix = type.DenseMatrix,
      SparseMatrix = type.SparseMatrix;

  /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     var A = [[1, 2, 3], [4, 5, 6]];
   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */
  var transpose = typed('transpose', {

    'Array': function (x) {
      // use dense matrix implementation
      return transpose(matrix(x)).valueOf();
    },

    'Matrix': function (x) {
      // matrix size
      var size = x.size();

      // result
      var c;
      
      // process dimensions
      switch (size.length) {
        case 1:
          // vector
          c = x.clone();
          break;

        case 2:
          // rows and columns
          var rows = size[0];
          var columns = size[1];

          // check columns
          if (columns === 0) {
            // throw exception
            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
          }

          // process storage format
          switch (x.storage()) {
            case 'dense':
              c = _denseTranspose(x, rows, columns);
              break;
            case 'sparse':
              c = _sparseTranspose(x, rows, columns);
              break;
          }
          break;
          
        default:
          // multi dimensional
          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
      }
      return c;
    },

    // scalars
    'any': function (x) {
      return clone(x);
    }
  });

  var _denseTranspose = function (m, rows, columns) {
    // matrix array
    var data = m._data;
    // transposed matrix data
    var transposed = [];
    var transposedRow;
    // loop columns
    for (var j = 0; j < columns; j++) {
      // initialize row
      transposedRow = transposed[j] = [];
      // loop rows
      for (var i = 0; i < rows; i++) {
        // set data
        transposedRow[i] = clone(data[i][j]);
      }
    }
    // return matrix
    return new DenseMatrix({
      data: transposed,
      size: [columns, rows],
      datatype: m._datatype
    });
  };

  var _sparseTranspose = function (m, rows, columns) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    // result matrices
    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = [];
    // row counts
    var w = [];
    for (var x = 0; x < rows; x++)
      w[x] = 0;
    // vars
    var p, l, j;
    // loop values in matrix
    for (p = 0, l = index.length; p < l; p++) {
      // number of values in row
      w[index[p]]++;
    }
    // cumulative sum
    var sum = 0;
    // initialize cptr with the cummulative sum of row counts
    for (var i = 0; i < rows; i++) {
      // update cptr
      cptr.push(sum);
      // update sum
      sum += w[i];
      // update w
      w[i] = cptr[i];
    }
    // update cptr
    cptr.push(sum);
    // loop columns
    for (j = 0; j < columns; j++) {
      // values & index in column
      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
        // C values & index
        var q = w[index[k]]++;
        // C[j, i] = A[i, j]
        cindex[q] = j;
        // check we need to process values (pattern matrix)
        if (values)
          cvalues[q] = clone(values[k]);
      }
    }
    // return matrix
    return new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [columns, rows],
      datatype: m._datatype
    });
  };

  transpose.toTex = {1: '\\left(${args[0]}\\right)' + latex.operators['transpose']};

  return transpose;
}

exports.name = 'transpose';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/latex":556,"../../utils/object":558,"../../utils/string":559}],389:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var resize = require('../../utils/array').resize;

function factory (type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3);                  // returns [0, 0, 0]
   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense');         // returns [0, 0, 0]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, eye, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */
  var zeros = typed('zeros', {
    '': function () {
      return (config.matrix === 'Array')
          ? _zeros([])
          : _zeros([], 'default');
    },

    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function (size) {
      var last = size[size.length - 1];
      if (typeof last === 'string') {
        var format = size.pop();
        return _zeros(size, format);
      }
      else if (config.matrix === 'Array') {
        return _zeros(size);
      }
      else {
        return _zeros(size, 'default');
      }
    },

    'Array': _zeros,

    'Matrix': function (size) {
      var format = size.storage();
      return _zeros(size.valueOf(), format);
    },

    'Array | Matrix, string': function (size, format) {
      return _zeros (size.valueOf(), format);
    }
  });

  zeros.toTex = undefined; // use default template

  return zeros;

  /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */
  function _zeros(size, format) {
    var hasBigNumbers = _normalize(size);
    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);
      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }
      return m;
    }
    else {
      // return an Array
      var arr = [];
      if (size.length > 0) {
        return resize(arr, size, defaultValue);
      }
      return arr;
    }
  }

  // replace BigNumbers with numbers, returns true if size contained BigNumbers
  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (type.isBigNumber(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  }

  // validate arguments
  function _validate (size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
        throw new Error('Parameters in function zeros must be positive integers');
      }
    });
  }
}

// TODO: zeros contains almost the same code as ones. Reuse this?

exports.name = 'zeros';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/number":557}],390:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5); // returns 21
   *
   * See also:
   *
   *    permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
  var combinations = typed('combinations', {
    'number, number': function (n, k) {
      var max, result, i;

      if (!isInteger(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }
      if (!isInteger(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }
      if (k > n) {
        throw new TypeError('k must be less than or equal to n');
      }

      max = Math.max(k, n - k);
      result = 1;
      for (i = 1; i <= n - max; i++) {
        result = result * (max + i) / i;
      }

      return result;
    },

    'BigNumber, BigNumber': function (n, k) {
      var max, result, i, ii;
      var one = new type.BigNumber(1);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinations');
      }
      if (k.gt(n)) {
        throw new TypeError('k must be less than n in function combinations');
      }

      max = n.minus(k);
      if (k.lt(max)) max = k;
      result = one;
      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
        result = result.times(max.plus(i)).dividedBy(i);
      }

      return result;
    }

    // TODO: implement support for collection in combinations
  });

  combinations.toTex = {2: '\\binom{${args[0]}}{${args[1]}}'};

  return combinations;
}

/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */
function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

exports.name = 'combinations';
exports.factory = factory;

},{"../../utils/number":557}],391:[function(require,module,exports){
'use strict';

var ArgumentsError = require('../../error/ArgumentsError');
var isCollection = require('../../utils/collection/isCollection');
var isNumber = require('../../utils/number').isNumber;

// TODO: rethink math.distribution
// TODO: rework to a typed function
function factory (type, config, load, typed, math) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var array = require('../../utils/array');

  // seeded pseudo random number generator
  var rng = load(require('./seededRNG'));

  /**
   * Create a distribution object with a set of random functions for given
   * random distribution.
   *
   * Syntax:
   *
   *     math.distribution(name)
   *
   * Examples:
   *
   *     var normalDist = math.distribution('normal'); // create a normal distribution
   *     normalDist.random(0, 10);                     // get a random value between 0 and 10
   *
   * See also:
   *
   *     random, randomInt, pickRandom
   *
   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
   * @return {Object}       Returns a distribution object containing functions:
   *                        `random([size] [, min] [, max])`,
   *                        `randomInt([min] [, max])`,
   *                        `pickRandom(array)`
   */
  function distribution(name) {
    if (!distributions.hasOwnProperty(name))
      throw new Error('Unknown distribution ' + name);

    var args = Array.prototype.slice.call(arguments, 1),
        distribution = distributions[name].apply(this, args);

    return (function(distribution) {

      // This is the public API for all distributions
      var randFunctions = {

        random: function(arg1, arg2, arg3) {
          var size, min, max;

          if (arguments.length > 3) {
            throw new ArgumentsError('random', arguments.length, 0, 3);
          } else if (arguments.length === 1) {
            // `random(max)` or `random(size)`
            if (isCollection(arg1)) {
              size = arg1;
            } else {
              max = arg1;
            }
          } else if (arguments.length === 2) {
            // `random(min, max)` or `random(size, max)`
            if (isCollection(arg1)) {
              size = arg1;
              max = arg2;
            } else {
              min = arg1;
              max = arg2;
            }
          } else {
            // `random(size, min, max)`
            size = arg1;
            min = arg2;
            max = arg3;
          }

          // TODO: validate type of size
          if ((min !== undefined && !isNumber(min)) || (max !== undefined && !isNumber(max))) {
            throw new TypeError('Invalid argument in function random');
          }

          if (max === undefined) max = 1;
          if (min === undefined) min = 0;
          if (size !== undefined) {
            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
            return type.isMatrix(size) ? matrix(res) : res;
          }
          return _random(min, max);
        },

        randomInt: typed({
          'number | Array': function(arg) {
            var min = 0;

            if (isCollection(arg)) {
              var size = arg;
              var max = 1;
              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
              return type.isMatrix(size) ? matrix(res) : res;
            } else {
              var max = arg;
              return _randomInt(min, max);
            }
          },
          'number | Array, number': function(arg1, arg2) {
            if (isCollection(arg1)) {
              var size = arg1;
              var max = arg2;
              var min = 0;
              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
              return type.isMatrix(size) ? matrix(res) : res;
            }
            else {
              var min = arg1;
              var max = arg2;
              return _randomInt(min, max);
            }
          },
          'Array, number, number': function(size, min, max) {
            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
            return (size && size.isMatrix === true) ? matrix(res) : res;
          }
        }),

        pickRandom: typed({
          'Array': function(possibles) {
            return _pickRandom(possibles);
          },
          'Array, number | Array': function(possibles, arg2) {
            var number, weights;

            if (Array.isArray(arg2)) {
              weights = arg2;
            } else if (isNumber(arg2)) {
              number = arg2;
            } else {
              throw new TypeError('Invalid argument in function pickRandom')
            }

            return _pickRandom(possibles, number, weights);
          },
          'Array, number | Array, Array | number': function(possibles, arg2, arg3) {
            var number, weights;

            if (Array.isArray(arg2)) {
              weights = arg2;
              number = arg3;
            } else {
              weights = arg3;
              number = arg2;
            }

            if (!Array.isArray(weights) || !isNumber(number)) {
              throw new TypeError('Invalid argument in function pickRandom');
            }

            return _pickRandom(possibles, number, weights);
          }
        })
      }

      var _pickRandom = function(possibles, number, weights) {
        var single = (typeof number === 'undefined');

        if (single) {
          number = 1;
        }

        if (type.isMatrix(possibles)) {
          possibles = possibles.valueOf(); // get Array
        } else if (!Array.isArray(possibles)) {
          throw new TypeError('Unsupported type of value in function pickRandom');
        }

        if (array.size(possibles).length > 1) {
          throw new Error('Only one dimensional vectors supported');
        }

        if (typeof weights !== 'undefined') {
          if (weights.length != possibles.length) {
            throw new Error('Weights must have the same length as possibles');
          }

          var totalWeights = 0;

          for (var i = 0, len = weights.length; i < len; i++) {
            if (!isNumber(weights[i]) || weights[i] < 0) {
              throw new Error('Weights must be an array of positive numbers');
            }

            totalWeights += weights[i];
          }
        }

        var length = possibles.length;

        if (length == 0) {
          return [];
        } else if (number >= length) {
          return number > 1 ? possibles : possibles[0];
        }

        var result = [];
        var pick;

        while (result.length < number) {
          if (typeof weights === 'undefined') {
            pick = possibles[Math.floor(rng() * length)];
          } else {
            var randKey = rng() * totalWeights;

            for (var i = 0, len = possibles.length; i < len; i++) {
              randKey -= weights[i];

              if (randKey < 0) {
                pick = possibles[i];
                break;
              }
            }
          }

          if (result.indexOf(pick) == -1) {
            result.push(pick);
          }
        }

        return single ? result[0] : result;

        // TODO: add support for multi dimensional matrices
      }

      var _random = function(min, max) {
        return min + distribution() * (max - min);
      };

      var _randomInt = function(min, max) {
        return Math.floor(min + distribution() * (max - min));
      };

      // This is a function for generating a random matrix recursively.
      var _randomDataForMatrix = function(size, min, max, randFunc) {
        var data = [], length, i;
        size = size.slice(0);

        if (size.length > 1) {
          for (var i = 0, length = size.shift(); i < length; i++) {
            data.push(_randomDataForMatrix(size, min, max, randFunc));
          }
        } else {
          for (var i = 0, length = size.shift(); i < length; i++) {
            data.push(randFunc(min, max));
          }
        }

        return data;
      };

      return randFunctions;

    })(distribution);
  }

  // Each distribution is a function that takes no argument and when called returns
  // a number between 0 and 1.
  var distributions = {

    uniform: function() {
      return rng;
    },

    // Implementation of normal distribution using Box-Muller transform
    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
    // We take : mean = 0.5, standard deviation = 1/6
    // so that 99.7% values are in [0, 1].
    normal: function() {
      return function() {
        var u1, u2,
            picked = -1;
        // We reject values outside of the interval [0, 1]
        // TODO: check if it is ok to do that?
        while (picked < 0 || picked > 1) {
          u1 = rng();
          u2 = rng();
          picked = 1/6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
        }
        return picked;
      }
    }
  };

  distribution.toTex = undefined; // use default template

  return distribution;
}

exports.name = 'distribution';
exports.factory = factory;

},{"../../error/ArgumentsError":26,"../../type/matrix/function/matrix":505,"../../utils/array":532,"../../utils/collection/isCollection":548,"../../utils/number":557,"./seededRNG":401}],392:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var gamma = load(require('./gamma'));
  var latex = require('../../utils/latex');

  /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5);    // returns 120
   *    math.factorial(3);    // returns 6
   *
   * See also:
   *
   *    combinations, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */
  var factorial = typed('factorial', {
    'number': function (n) {
      if (n < 0) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n + 1);
    },

    'BigNumber': function (n) {
      if (n.isNegative()) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n.plus(1));
    },

    'Array | Matrix': function (n) {
      return deepMap(n, factorial);
    }
  });

  factorial.toTex = {
    1: '\\left(${args[0]}\\right)' + latex.operators['factorial']
  };

  return factorial;
}

exports.name = 'factorial';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/latex":556,"./gamma":393}],393:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  var multiply = load(require('../arithmetic/multiply'));
  var pow = load(require('../arithmetic/pow'));

  /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5);       // returns 24
   *    math.gamma(-0.5);    // returns -3.5449077018110335
   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */
  var gamma = typed('gamma', {
    'number': function (n) {
      var t, x;

      if (isInteger(n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;                  // Will overflow
        }

        var value = n - 2;
        var res = n - 1;
        while (value > 1) {
          res *= value;
          value--;
        }

        if (res == 0) {
          res = 1;                          // 0! is per definition 1
        }

        return res;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));
      }

      if (n >= 171.35) {
        return Infinity;                    // will overflow
      }

      if (n > 85.0) {                       // Extended Stirling Approx
        var twoN = n*n;
        var threeN = twoN*n;
        var fourN = threeN*n;
        var fiveN = fourN*n;
        return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *
            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -
            571/(2488320*fourN) + 163879/(209018880*fiveN) +
            5246819/(75246796800*fiveN*n));
      }

      --n;
      x = p[0];
      for (var i = 1; i < p.length; ++i) {
        x += p[i] / (n+i);
      }

      t = n + g + 0.5;
      return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;
    },

    'Complex': function (n) {
      var t, x;

      if (n.im == 0) {
        return gamma(n.re);
      }

      n = new type.Complex(n.re - 1, n.im);
      x = new type.Complex(p[0], 0);
      for (var i = 1; i < p.length; ++i) {
        var real = n.re + i;                // x += p[i]/(n+i)
        var den = real*real + n.im*n.im;
        if (den != 0) {
          x.re += p[i] * real / den;
          x.im += -(p[i] * n.im) / den;
        } else {
          x.re = p[i] < 0
              ? -Infinity
              :  Infinity;
        }
      }

      t = new type.Complex(n.re + g + 0.5, n.im);
      var twoPiSqrt = Math.sqrt(2*Math.PI);

      n.re += 0.5;
      var result = pow(t, n);
      if (result.im == 0) {                 // sqrt(2*PI)*result
        result.re *= twoPiSqrt;
      } else if (result.re == 0) {
        result.im *= twoPiSqrt;
      } else {
        result.re *= twoPiSqrt;
        result.im *= twoPiSqrt;
      }

      var r = Math.exp(-t.re);              // exp(-t)
      t.re = r * Math.cos(-t.im);
      t.im = r * Math.sin(-t.im);

      return multiply(multiply(result, t), x);
    },

    'BigNumber': function (n) {
      if (n.isInteger()) {
        return (n.isNegative() || n.isZero())
            ? new type.BigNumber(Infinity)
            : bigFactorial(n.minus(1));
      }

      if (!n.isFinite()) {
        return new type.BigNumber(n.isNegative() ? NaN : Infinity);
      }

      throw new Error('Integer BigNumber expected');
    },

    'Array | Matrix': function (n) {
      return deepMap(n, gamma);
    }
  });

  /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */
  function bigFactorial(n) {
    if (n.isZero()) {
      return new type.BigNumber(1); // 0! is per definition 1
    }

    var precision = config.precision + (Math.log(n.toNumber()) | 0);
    var Big = type.BigNumber.clone({precision: precision});

    var res = new Big(n);
    var value = n.toNumber() - 1; // number
    while (value > 1) {
      res = res.times(value);
      value--;
    }

    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
  }

  gamma.toTex = {1: '\\Gamma\\left(${args[0]}\\right)'};

  return gamma;
}

// TODO: comment on the variables g and p

var g = 4.7421875;

var p = [
  0.99999999999999709182,
  57.156235665862923517,
  -59.597960355475491248,
  14.136097974741747174,
  -0.49191381609762019978,
  0.33994649984811888699e-4,
  0.46523628927048575665e-4,
  -0.98374475304879564677e-4,
  0.15808870322491248884e-3,
  -0.21026444172410488319e-3,
  0.21743961811521264320e-3,
  -0.16431810653676389022e-3,
  0.84418223983852743293e-4,
  -0.26190838401581408670e-4,
  0.36899182659531622704e-5
];

exports.name = 'gamma';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557,"../arithmetic/multiply":325,"../arithmetic/pow":329}],394:[function(require,module,exports){
module.exports = [
  //require('./distribution'), // TODO: rethink math.distribution
  require('./combinations'),
  require('./factorial'),
  require('./gamma'),
  require('./kldivergence'),
  require('./multinomial'),
  require('./permutations'),
  require('./pickRandom'),
  require('./random'),
  require('./randomInt')
];

},{"./combinations":390,"./factorial":392,"./gamma":393,"./kldivergence":395,"./multinomial":396,"./permutations":397,"./pickRandom":398,"./random":399,"./randomInt":400}],395:[function(require,module,exports){
'use strict';


function factory(type, config, load, typed) {
    var matrix = load(require('../../type/matrix/function/matrix'));
    var divide = load(require('../arithmetic/divide'));
    var sum = load(require('../statistics/sum'));
    var multiply = load(require('../arithmetic/multiply'));
    var dotDivide = load(require('../arithmetic/dotDivide'));
    var log = load(require('../arithmetic/log'));
    var isNumeric = load(require('../utils/isNumeric'));

    /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */
    var kldivergence = typed('kldivergence', {
        'Array, Array': function(q, p) {
            return _kldiv(matrix(q), matrix(p));
        },

        'Matrix, Array': function(q, p) {
            return _kldiv(q, matrix(p));
        },

        'Array, Matrix': function(q, p){
            return _kldiv(matrix(q), p);
        },

        'Matrix, Matrix': function(q, p){
            return _kldiv(q, p);
        }

    });

    function _kldiv(q, p) {
        var plength = p.size().length;
        var qlength = q.size().length;
        if (plength > 1) {
            throw new Error('first object must be one dimensional');
        }
        
        if (qlength > 1) {
            throw new Error('second object must be one dimensional');
        }
        
        if(plength !== qlength){
            throw new Error("Length of two vectors must be equal");
        }
        
        //Before calculation, apply normalization
        var sumq = sum(q);
        if (sumq === 0) {
            throw new Error("Sum of elements in first object must be non zero");
        }

        var sump = sum(p);
        if (sump === 0) {
            throw new Error("Sum of elements in second object must be non zero");
        }
        var qnorm = divide(q, sum(q));
        var pnorm = divide(p, sum(p));

        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
        if (isNumeric(result)) {
            return result;
        }
        else {
            return Number.NaN;
        }
    }

    return kldivergence;
}


exports.name = 'kldivergence';
exports.factory = factory;
 

},{"../../type/matrix/function/matrix":505,"../arithmetic/divide":310,"../arithmetic/dotDivide":312,"../arithmetic/log":322,"../arithmetic/multiply":325,"../statistics/sum":436,"../utils/isNumeric":474}],396:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var multiply = load(require('../arithmetic/multiply'));
  var divide = load(require('../arithmetic/divide'));
  var factorial = load(require('../probability/factorial'));
  var isInteger = load(require('../utils/isInteger'));
  var isPositive = load(require('../utils/isPositive'));

  /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]); // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */
  return typed('multinomial', {
    'Array | Matrix': function (a) {
      var sum = 0;
      var denom = 1;

      deepForEach(a, function(ai) {
        if(!isInteger(ai) || !isPositive(ai)) {
          throw new TypeError('Positive integer value expected in function multinomial');
        }
        sum = add(sum, ai);
        denom = multiply(denom, factorial(ai));
      });

      return divide(factorial(sum), denom);
    }
  });
}

exports.name = 'multinomial';
exports.factory = factory;

},{"../../utils/collection/deepForEach":546,"../arithmetic/add":305,"../arithmetic/divide":310,"../arithmetic/multiply":325,"../probability/factorial":392,"../utils/isInteger":471,"../utils/isPositive":475}],397:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory (type, config, load, typed) {
  var factorial = load(require('./factorial'));

  /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5);     // 120
   *    math.permutations(5, 3);  // 60
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */
  var permutations = typed('permutations', {
    'number | BigNumber': factorial,

    'number, number': function (n, k) {
      var result, i;

      if (!isInteger(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }
      if (!isInteger(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }
      if (k > n) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }

      // Permute n objects, k at a time
      result = 1;
      for (i = n - k + 1; i <= n; i++) {
        result = result * i;
      }

      return result;
    },

    'BigNumber, BigNumber': function (n, k) {
      var result, i;

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function permutations');
      }
      if (k.gt(n)) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }

      result = new type.BigNumber(1);
      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
        result = result.times(i);
      }

      return result;
    }

    // TODO: implement support for collection in permutations
  });

  permutations.toTex = undefined; // use default template

  return permutations;
}

/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */
function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

exports.name = 'permutations';
exports.factory = factory;

},{"../../utils/number":557,"./factorial":392}],398:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var distribution = load(require('./distribution'));

  /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array} array     A one dimensional array
   * @param {Int} number      An int or float
   * @param {Array} weights   An array of ints or floats
   * @return {number | Array} Returns a single random value from array when number is 1 or undefined.
   *                          Returns an array with the configured number of elements when number is > 1.
   */
  // TODO: rework pickRandom to a typed-function
  var pickRandom =  distribution('uniform').pickRandom;

  pickRandom.toTex = undefined; // use default template

  return pickRandom;
}

exports.name = 'pickRandom';
exports.factory = factory;

},{"./distribution":391}],399:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var distribution = load(require('./distribution'));

  /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random();       // returns a random number between 0 and 1
   *     math.random(100);    // returns a random number between 0 and 100
   *     math.random(30, 40); // returns a random number between 30 and 40
   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */
  // TODO: rework random to a typed-function
  var random = distribution('uniform').random;

  random.toTex = undefined; // use default template

  return random;
}

exports.name = 'random';
exports.factory = factory;

},{"./distribution":391}],400:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var distribution = load(require('./distribution'));

  /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100);    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40); // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */
  // TODO: rework randomInt to a typed-function
  var randomInt = distribution('uniform').randomInt;

  randomInt.toTex = undefined; // use default template

  return randomInt;
}

exports.name = 'randomInt';
exports.factory = factory;

},{"./distribution":391}],401:[function(require,module,exports){
'use strict';

var seedrandom = require('seed-random');

// create a random seed here to prevent an infinite loop from seed-random
// inside the factory. Reason is that math.random is defined as a getter/setter
// and seed-random generates a seed from the local entropy by reading every
// defined object including `math` itself. That means that whilst getting
// math.random, it tries to get math.random, etc... an infinite loop.
// See https://github.com/ForbesLindesay/seed-random/issues/6
var singletonRandom = seedrandom();

function factory (type, config, load, typed, math) {
  var random;

  // create a new random generator with given seed
  function setSeed (seed) {
    random = seed === null ? singletonRandom : seedrandom(String(seed));
  }

  // initialize a seeded pseudo random number generator with config's random seed
  setSeed(config.randomSeed)

  // wrapper function so the rng can be updated via generator
  function rng() {
      return random();
  }

  // updates generator with a new instance of a seeded pseudo random number generator
  math.on('config', function (curr, prev, changes) {
    // if the user specified a randomSeed
    if(changes.randomSeed !== undefined) {
      // update generator with a new instance of a seeded pseudo random number generator
      setSeed(curr.randomSeed)
    }
  });

  return rng;
}

exports.factory = factory;
exports.math = true;

},{"seed-random":614}],402:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;
var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  
  /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1);           // returns 1
   *    math.compare(2, 3);           // returns -1
   *    math.compare(7, 7);           // returns 0
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('40 mm');
   *    math.compare(a, b);           // returns 1
   *
   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.
   */
  var compare = typed('compare', {

    'boolean, boolean': function (x, y) {
      return x === y ? 0 : (x > y ? 1 : -1);
    },

    'number, number': function (x, y) {
      return (x === y || nearlyEqual(x, y, config.epsilon))
          ? 0
          : (x > y ? 1 : -1);
    },

    'BigNumber, BigNumber': function (x, y) {
      return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))
          ? new type.BigNumber(0)
          : new type.BigNumber(x.cmp(y));
    },

    'Fraction, Fraction': function (x, y) {
      return new type.Fraction(x.compare(y));
    },

    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },

    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return compare(x.value, y.value);
    },

    'string, string': function (x, y) {
      return x === y ? 0 : (x > y ? 1 : -1);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm05(x, y, compare);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, compare, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, compare, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, compare);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return compare(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return compare(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return compare(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, compare, false);
          break;
        default:
          c = algorithm14(x, y, compare, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, compare, true);
          break;
        default:
          c = algorithm14(y, x, compare, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, compare, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, compare, true).valueOf();
    }
  });

  compare.toTex = undefined; // use default template

  return compare;
}

exports.name = 'compare';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm05":512,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/nearlyEqual":542,"../../utils/number":557}],403:[function(require,module,exports){
'use strict';

var naturalSort = require('javascript-natural-sort');

function factory (type, config, load, typed) {
  var getTypeOf = load(require('../utils/typeof'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var compare = load(require('./compare'));

  var compareBooleans = compare.signatures['boolean,boolean']

  /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1);              // returns 1
   *    math.compareNatural(2, 3);              // returns -1
   *    math.compareNatural(7, 7);              // returns 0
   *
   *    math.compareNatural('10', '2');         // returns 1
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('40 mm');
   *    math.compareNatural(a, b);              // returns 1
   *
   *    var c = math.complex('2 + 3i');
   *    var d = math.complex('2 + 4i');
   *    math.compareNatural(c, d);              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]); // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2]);    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3]);    // returns 1
   *    math.compareNatural([1, 2], [1, 2]);       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4});       // returns -1
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison: 1, 0 or -1.
   */
  var compareNatural = typed('compareNatural', {
    'any, any': function (x, y) {
      var typeX = getTypeOf(x);
      var typeY = getTypeOf(y);
      var c;

      // numeric types
      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') &&
          (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
        c = compare(x, y);
        if (c.toString() !== '0') {
          // c can be number, BigNumber, or Fraction
          return c > 0 ? 1 : -1; // return a number
        }
        else {
          return naturalSort(typeX, typeY);
        }
      }

      // matrix types
      if (typeX === 'Array' || typeX === 'Matrix' ||
          typeY === 'Array' || typeY === 'Matrix') {
        c = compareMatricesAndArrays (x, y);
        if (c !== 0) {
          return c;
        }
        else {
          return naturalSort(typeX, typeY);
        }
      }

      // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'
      if (typeX !== typeY) {
        return naturalSort(typeX, typeY);
      }

      if (typeX === 'Complex') {
        return compareComplexNumbers(x, y);
      }

      if (typeX === 'Unit') {
        if (x.equalBase(y)) {
          return compareNatural(x.value, y.value);
        }

        // compare by units
        return compareArrays(x.formatUnits(), y.formatUnits());
      }

      if (typeX === 'boolean') {
        return compareBooleans(x, y);
      }

      if (typeX === 'string') {
        return naturalSort(x, y);
      }

      if (typeX === 'Object') {
        return compareObjects(x, y);
      }

      if (typeX === 'null') {
        return 0;
      }

      if (typeX === 'undefined') {
        return 0;
      }

      // this should not occur...
      throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
  });

  compareNatural.toTex = undefined; // use default template

  /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */
  function compareMatricesAndArrays (x, y) {
    if (type.isSparseMatrix(x) && type.isSparseMatrix(y)) {
      return compareArrays(x.toJSON().values, y.toJSON().values);
    }
    if (type.isSparseMatrix(x)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x.toArray(), y);
    }
    if (type.isSparseMatrix(y)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x, y.toArray());
    }

    // convert DenseArray into Array
    if (type.isDenseMatrix(x)) {
      return compareMatricesAndArrays(x.toJSON().data, y);
    }
    if (type.isDenseMatrix(y)) {
      return compareMatricesAndArrays(x, y.toJSON().data);
    }

    // convert scalars to array
    if (!Array.isArray(x)) {
      return compareMatricesAndArrays([x], y);
    }
    if (!Array.isArray(y)) {
      return compareMatricesAndArrays(x, [y]);
    }

    return compareArrays(x, y);
  }

  /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */
  function compareArrays (x, y) {
    // compare each value
    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
      var v = compareNatural(x[i], y[i]);
      if (v !== 0) {
        return v;
      }
    }

    // compare the size of the arrays
    if (x.length > y.length) { return 1; }
    if (x.length < y.length) { return -1; }

    // both Arrays have equal size and content
    return 0;
  }

  /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */
  function compareObjects (x, y) {
    var keysX = Object.keys(x);
    var keysY = Object.keys(y);

    // compare keys
    keysX.sort(naturalSort)
    keysY.sort(naturalSort)
    var c = compareArrays(keysX, keysY);
    if (c !== 0) {
      return c;
    }

    // compare values
    for (var i = 0; i < keysX.length; i++) {
      var v = compareNatural(x[keysX[i]], y[keysY[i]]);
      if (v !== 0) {
        return v;
      }
    }

    return 0;
  }

  return compareNatural;
}

/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 * 
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */
function compareComplexNumbers (x, y) {
  if (x.re > y.re) { return 1; }
  if (x.re < y.re) { return -1; }

  if (x.im > y.im) { return 1; }
  if (x.im < y.im) { return -1; }

  return 0;
}

exports.name = 'compareNatural';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../utils/typeof":478,"./compare":402,"javascript-natural-sort":18}],404:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var equal = load(require('./equal'));

  /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4);   // returns false
   *
   *    a = [2, 5, 1];
   *    b = [2, 7, 1];
   *
   *    math.deepEqual(a, b);   // returns false
   *    math.equal(a, b);       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */
  var deepEqual = typed('deepEqual', {
    'any, any': function (x, y) {
      return _deepEqual(x.valueOf(), y.valueOf());
    }
  });

  deepEqual.toTex = undefined; // use default template

  return deepEqual;

  /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */
  function _deepEqual(x, y) {
    if (Array.isArray(x)) {
      if (Array.isArray(y)) {
        var len = x.length;
        if (len !== y.length) {
          return false;
        }

        for (var i = 0; i < len; i++) {
          if (!_deepEqual(x[i], y[i])) {
            return false;
          }
        }

        return true;
      }
      else {
        return false;
      }
    }
    else {
      if (Array.isArray(y)) {
        return false;
      }
      else {
        return equal(x, y);
      }
    }
  }
}

exports.name = 'deepEqual';
exports.factory = factory;

},{"./equal":405}],405:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  
  var matrix = load(require('../../type/matrix/function/matrix'));
  var equalScalar = load(require('./equalScalar'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');

  /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3);         // returns false
   *    math.equal(2 + 2, 4);         // returns true
   *
   *    var a = math.unit('50 cm');
   *    var b = math.unit('5 m');
   *    math.equal(a, b);             // returns true
   *
   *    var c = [2, 5, 1];
   *    var d = [2, 7, 1];
   *
   *    math.equal(c, d);             // returns [true, false, true]
   *    math.deepEqual(c, d);         // returns false
   *
   *    math.equal(0, null);          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */
  var equal = typed('equal', {
    
    'any, any': function (x, y) {
      // strict equality for null and undefined?
      if (x === null) { return y === null; }
      if (y === null) { return x === null; }
      if (x === undefined) { return y === undefined; }
      if (y === undefined) { return x === undefined; }

      return equalScalar(x, y);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, equalScalar);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, equalScalar, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, equalScalar, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, equalScalar);
              break;
          }
          break;
      }
      return c;
    },
    
    'Array, Array': function (x, y) {
      // use matrix implementation
      return equal(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return equal(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return equal(x, matrix(y));
    },
    
    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, equalScalar, false);
          break;
        default:
          c = algorithm14(x, y, equalScalar, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, equalScalar, true);
          break;
        default:
          c = algorithm14(y, x, equalScalar, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
    }
  });

  equal.toTex = {
    2: '\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\right)'
  };

  return equal;
}

exports.name = 'equal';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556,"./equalScalar":406}],406:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;
var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory (type, config, load, typed) {
  
  /**
   * Test whether two values are equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
  var equalScalar = typed('equalScalar', {

    'boolean, boolean': function (x, y) {
      return x === y;
    },

    'number, number': function (x, y) {
      return x === y || nearlyEqual(x, y, config.epsilon);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
    },

    'Fraction, Fraction': function (x, y) {
      return x.equals(y);
    },

    'Complex, Complex': function (x, y) {
      return x.equals(y);
    },

    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return equalScalar(x.value, y.value);
    },

    'string, string': function (x, y) {
      return x === y;
    }
  });
  
  return equalScalar;
}

exports.factory = factory;

},{"../../utils/bignumber/nearlyEqual":542,"../../utils/number":557}],407:[function(require,module,exports){
module.exports = [
  require('./compare'),
  require('./compareNatural'),
  require('./deepEqual'),
  require('./equal'),
  require('./larger'),
  require('./largerEq'),
  require('./smaller'),
  require('./smallerEq'),
  require('./unequal')
];

},{"./compare":402,"./compareNatural":403,"./deepEqual":404,"./equal":405,"./larger":408,"./largerEq":409,"./smaller":410,"./smallerEq":411,"./unequal":412}],408:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;
var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory (type, config, load, typed) {
  
  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');

  /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3);             // returns false
   *    math.larger(5, 2 + 2);         // returns true
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('2 inch');
   *    math.larger(a, b);             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */
  var larger = typed('larger', {

    'boolean, boolean': function (x, y) {
      return x > y;
    },

    'number, number': function (x, y) {
      return x > y && !nearlyEqual(x, y, config.epsilon);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
    },

    'Fraction, Fraction': function (x, y) {
      return x.compare(y) === 1;
    },

    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },

    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return larger(x.value, y.value);
    },

    'string, string': function (x, y) {
      return x > y;
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, larger);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, larger, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, larger, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, larger);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return larger(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return larger(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return larger(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, larger, false);
          break;
        default:
          c = algorithm14(x, y, larger, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, larger, true);
          break;
        default:
          c = algorithm14(y, x, larger, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, larger, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, larger, true).valueOf();
    }
  });

  larger.toTex = {
    2: '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)'
  };

  return larger;
}

exports.name = 'larger';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/nearlyEqual":542,"../../utils/latex":556,"../../utils/number":557}],409:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;
var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory (type, config, load, typed) {
  
  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');

  /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1);         // returns false
   *    math.largerEq(2, 1 + 1);       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */
  var largerEq = typed('largerEq', {

    'boolean, boolean': function (x, y) {
      return x >= y;
    },

    'number, number': function (x, y) {
      return x >= y || nearlyEqual(x, y, config.epsilon);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);
    },

    'Fraction, Fraction': function (x, y) {
      return x.compare(y) !== -1;
    },

    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },

    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return largerEq(x.value, y.value);
    },

    'string, string': function (x, y) {
      return x >= y;
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, largerEq);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, largerEq, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, largerEq, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, largerEq);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return largerEq(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return largerEq(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return largerEq(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, largerEq, false);
          break;
        default:
          c = algorithm14(x, y, largerEq, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, largerEq, true);
          break;
        default:
          c = algorithm14(y, x, largerEq, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, largerEq, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, largerEq, true).valueOf();
    }
  });

  largerEq.toTex = {
    2: '\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\right)'
  };

  return largerEq;
}

exports.name = 'largerEq';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/nearlyEqual":542,"../../utils/latex":556,"../../utils/number":557}],410:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;
var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');

  /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3);            // returns true
   *    math.smaller(5, 2 * 2);        // returns false
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('2 inch');
   *    math.smaller(a, b);            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */
  var smaller = typed('smaller', {

    'boolean, boolean': function (x, y) {
      return x < y;
    },

    'number, number': function (x, y) {
      return x < y && !nearlyEqual(x, y, config.epsilon);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
    },

    'Fraction, Fraction': function (x, y) {
      return x.compare(y) === -1;
    },

    'Complex, Complex': function (x, y) {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },

    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return smaller(x.value, y.value);
    },

    'string, string': function (x, y) {
      return x < y;
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, smaller);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, smaller, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, smaller, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, smaller);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return smaller(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return smaller(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return smaller(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, smaller, false);
          break;
        default:
          c = algorithm14(x, y, smaller, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, smaller, true);
          break;
        default:
          c = algorithm14(y, x, smaller, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, smaller, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, smaller, true).valueOf();
    }
  });

  smaller.toTex = {
    2: '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)'
  };

  return smaller;
}

exports.name = 'smaller';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/nearlyEqual":542,"../../utils/latex":556,"../../utils/number":557}],411:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;
var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');

  /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3);        // returns false
   *    math.smallerEq(1 + 2, 3);      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */
  var smallerEq = typed('smallerEq', {

    'boolean, boolean': function (x, y) {
      return x <= y;
    },

    'number, number': function (x, y) {
      return x <= y || nearlyEqual(x, y, config.epsilon);
    },

    'BigNumber, BigNumber': function (x, y) {
      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);
    },

    'Fraction, Fraction': function (x, y) {
      return x.compare(y) !== 1;
    },

    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },

    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return smallerEq(x.value, y.value);
    },

    'string, string': function (x, y) {
      return x <= y;
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, smallerEq);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, smallerEq, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, smallerEq, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, smallerEq);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return smallerEq(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return smallerEq(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return smallerEq(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, smallerEq, false);
          break;
        default:
          c = algorithm14(x, y, smallerEq, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, smallerEq, true);
          break;
        default:
          c = algorithm14(y, x, smallerEq, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, smallerEq, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, smallerEq, true).valueOf();
    }
  });

  smallerEq.toTex = {
    2: '\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\right)'
  };

  return smallerEq;
}

exports.name = 'smallerEq';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/nearlyEqual":542,"../../utils/latex":556,"../../utils/number":557}],412:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;
var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');

  /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everying
   * except. `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3);       // returns true
   *    math.unequal(2 + 2, 4);       // returns false
   *
   *    var a = math.unit('50 cm');
   *    var b = math.unit('5 m');
   *    math.unequal(a, b);           // returns false
   *
   *    var c = [2, 5, 1];
   *    var d = [2, 7, 1];
   *
   *    math.unequal(c, d);           // returns [false, true, false]
   *    math.deepEqual(c, d);         // returns false
   *
   *    math.unequal(0, null);        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */
  var unequal = typed('unequal', {
    
    'any, any': function (x, y) {
      // strict equality for null and undefined?
      if (x === null) { return y !== null; }
      if (y === null) { return x !== null; }
      if (x === undefined) { return y !== undefined; }
      if (y === undefined) { return x !== undefined; }

      return _unequal(x, y);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, _unequal);
              break;
            default:
              // sparse + dense
              c = algorithm03(y, x, _unequal, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, _unequal, false);
              break;
            default:
              // dense + dense
              c = algorithm13(x, y, _unequal);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return unequal(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return unequal(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return unequal(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, _unequal, false);
          break;
        default:
          c = algorithm14(x, y, _unequal, false);
          break;
      }
      return c;
    },

    'any, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, _unequal, true);
          break;
        default:
          c = algorithm14(y, x, _unequal, true);
          break;
      }
      return c;
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _unequal, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _unequal, true).valueOf();
    }
  });

  var _unequal = typed('_unequal', {

    'boolean, boolean': function (x, y) {
      return x !== y;
    },

    'number, number': function (x, y) {
      return !nearlyEqual(x, y, config.epsilon);
    },

    'BigNumber, BigNumber': function (x, y) {
      return !bigNearlyEqual(x, y, config.epsilon);
    },

    'Fraction, Fraction': function (x, y) {
      return !x.equals(y);
    },

    'Complex, Complex': function (x, y) {
      return !x.equals(y);
    },

    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return unequal(x.value, y.value);
    },

    'string, string': function (x, y) {
      return x !== y;
    }
  });

  unequal.toTex = {
    2: '\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\right)'
  };

  return unequal;
}

exports.name = 'unequal';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm07":514,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/bignumber/nearlyEqual":542,"../../utils/latex":556,"../../utils/number":557}],413:[function(require,module,exports){
module.exports = [
  require('./setCartesian'),
  require('./setDifference'),
  require('./setDistinct'),
  require('./setIntersect'),
  require('./setIsSubset'),
  require('./setMultiplicity'),
  require('./setPowerset'),
  require('./setSize'),
  require('./setSymDifference'),
  require('./setUnion')
];

},{"./setCartesian":414,"./setDifference":415,"./setDistinct":416,"./setIntersect":417,"./setIsSubset":418,"./setMultiplicity":419,"./setPowerset":420,"./setSize":421,"./setSymDifference":422,"./setUnion":423}],414:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var index = load(require('../../type/matrix/MatrixIndex'));
  var matrix = load(require('../../type/matrix/DenseMatrix'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  var compareNatural = load(require('../relational/compareNatural'));
  
  /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4]);        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */
  var setCartesian = typed('setCartesian', {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) { // if any of them is empty, return empty
        var result = [];
      }
      else {
        var b1 = flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
        var b2 = flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
        var result = [];
        for (var i=0; i<b1.length; i++) {
          for (var j=0; j<b2.length; j++) {
            result.push([b1[i], b2[j]]);
          }
        }
      }
      // return an array, if both inputs were arrays
      if (Array.isArray(a1) && Array.isArray(a2)) {
        return result;
      }
      // return a matrix otherwise
      return new matrix(result);
    }
  });

  return setCartesian;
}

exports.name = 'setCartesian';
exports.factory = factory;

},{"../../type/matrix/DenseMatrix":496,"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/size":383,"../matrix/subset":386,"../relational/compareNatural":403}],415:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;
var identify = require('../../utils/array').identify;
var generalize = require('../../utils/array').generalize;

function factory (type, config, load, typed) {
  var equal = load(require('../relational/equal'));
  var index = load(require('../../type/matrix/MatrixIndex'));
  var matrix = load(require('../../type/matrix/DenseMatrix'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  var compareNatural = load(require('../relational/compareNatural'));
  
  /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */
  var setDifference = typed('setDifference', {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new index(0)) === 0) { // empty-anything=empty
        var result = [];
      }
      else if (subset(size(a2), new index(0)) === 0) { // anything-empty=anything
        return flatten(a1.toArray());
      }
      else {
        var b1 = identify(flatten(Array.isArray(a1) ? a1: a1.toArray()).sort(compareNatural));
        var b2 = identify(flatten(Array.isArray(a2) ? a2: a2.toArray()).sort(compareNatural));
        var result = [];
        var inb2;
        for (var i=0; i<b1.length; i++) {
          inb2 = false;
          for (var j=0; j<b2.length; j++) {
            if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int
              inb2 = true;
              break;
            }
          }
          if (!inb2) {
            result.push(b1[i]);
          }
        }
      }
      // return an array, if both inputs were arrays
      if (Array.isArray(a1) && Array.isArray(a2)) {
        return generalize(result);
      }
      // return a matrix otherwise
      return new matrix(generalize(result));
    }
  });

  return setDifference;
}

exports.name = 'setDifference';
exports.factory = factory;

},{"../../type/matrix/DenseMatrix":496,"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/size":383,"../matrix/subset":386,"../relational/compareNatural":403,"../relational/equal":405}],416:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var equal = load(require('../relational/equal'));
  var index = load(require('../../type/matrix/MatrixIndex'));
  var matrix = load(require('../../type/matrix/DenseMatrix'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  var compareNatural = load(require('../relational/compareNatural'));
  
  /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3]);        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */
  var setDistinct = typed('setDistinct', {
    'Array | Matrix': function (a) {
      if (subset(size(a), new index(0)) === 0) { // if empty, return empty
        var result = [];
      }
      else {
        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        var result = [];
        result.push(b[0]);
        for (var i=1; i<b.length; i++) {
          if (!equal(b[i], b[i-1])) {
            result.push(b[i]);
          }
        }
      }
      // return an array, if the input was an array
      if (Array.isArray(a)) {
        return result;
      }
      // return a matrix otherwise
      return new matrix(result);
    }
  });

  return setDistinct;
}

exports.name = 'setDistinct';
exports.factory = factory;

},{"../../type/matrix/DenseMatrix":496,"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/size":383,"../matrix/subset":386,"../relational/compareNatural":403,"../relational/equal":405}],417:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;
var identify = require('../../utils/array').identify;
var generalize = require('../../utils/array').generalize;

function factory (type, config, load, typed) {
  var equal = load(require('../relational/equal'));
  var index = load(require('../../type/matrix/MatrixIndex'));
  var matrix = load(require('../../type/matrix/DenseMatrix'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  var compareNatural = load(require('../relational/compareNatural'));
  
  /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */
  var setIntersect = typed('setIntersect', {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new index(0)) === 0 || subset(size(a2), new index(0)) === 0) { // of any of them is empty, return empty
        var result = [];
      }
      else {
        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        var result = [];
        for (var i=0; i<b1.length; i++) {
          for (var j=0; j<b2.length; j++) {
              if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int
                result.push(b1[i]);
                break;
              }
          }
        }
      }
      // return an array, if both inputs were arrays
      if (Array.isArray(a1) && Array.isArray(a2)) {
        return generalize(result);
      }
      // return a matrix otherwise
      return new matrix(generalize(result));
    }
  });

  return setIntersect;
}

exports.name = 'setIntersect';
exports.factory = factory;

},{"../../type/matrix/DenseMatrix":496,"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/size":383,"../matrix/subset":386,"../relational/compareNatural":403,"../relational/equal":405}],418:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;
var identify = require('../../utils/array').identify;

function factory (type, config, load, typed) {
  var equal = load(require('../relational/equal'));
  var index = load(require('../../type/matrix/MatrixIndex'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  var compareNatural = load(require('../relational/compareNatural'));
  
  /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6]);        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6]);        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean}            true | false
   */
  var setIsSubset = typed('setIsSubset', {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new index(0)) === 0) { // empty is a subset of anything
        return true;
      }
      else if (subset(size(a2), new index(0)) === 0) { // anything is not a subset of empty
        return false;
      }
      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
      var inb2;
      for (var i=0; i<b1.length; i++) {
        inb2 = false;
        for (var j=0; j<b2.length; j++) {
          if (equal(b1[i].value, b2[j].value) && b1[i].identifier === b2[j].identifier) { // the identifier is always a decimal int
            inb2 = true;
            break;
          }
        }
        if (inb2 === false) {
          return false;
        }
      }
      return true;
    }
  });

  return setIsSubset;
}

exports.name = 'setIsSubset';
exports.factory = factory;

},{"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/size":383,"../matrix/subset":386,"../relational/compareNatural":403,"../relational/equal":405}],419:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var equal = load(require('../relational/equal'));
  var index = load(require('../../type/matrix/MatrixIndex'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  
  /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4]);    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4]);    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */
  var setMultiplicity = typed('setMultiplicity', {
    'number | BigNumber | Fraction | Complex, Array | Matrix': function (e, a) {
      if (subset(size(a), new index(0)) === 0) { // if empty, return 0
        return 0;
      }
      var b = flatten(Array.isArray(a) ? a : a.toArray());
      var count = 0;
      for (var i=0; i<b.length; i++) {
        if (equal(b[i], e)) {
          count++;
        }
      }
      return count;
    }
  });

  return setMultiplicity;
}

exports.name = 'setMultiplicity';
exports.factory = factory;

},{"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/size":383,"../matrix/subset":386,"../relational/equal":405}],420:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var index = load(require('../../type/matrix/MatrixIndex'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  var compareNatural = load(require('../relational/compareNatural'));
  
  /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3]);        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */
  var setPowerset = typed('setPowerset', {
    'Array | Matrix': function (a) {
      if (subset(size(a), new index(0)) === 0) { // if empty, return empty
        return [];
      }
      var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
      var result = [];
      var number = 0;
      while (number.toString(2).length <= b.length) {
        result.push(_subset(b, number.toString(2).split("").reverse()));
        number++;
      }
      // can not return a matrix, because of the different size of the subarrays
      return _sort(result);
    }
  });

  return setPowerset;
  
  // create subset
  function _subset(array, bitarray) {
    var result = [];
    for (var i=0; i<bitarray.length; i++) {
      if (bitarray[i] === "1") {
        result.push(array[i]);
      }
    }
    return result;
  }
  
  // sort subsests by length
  function _sort(array) {
    var temp = [];
    for (var i=array.length-1; i>0; i--) {
      for (var j=0; j<i; j++) {
        if (array[j].length > array[j+1].length) {
          temp = array[j];
          array[j] = array[j+1];
          array[j+1] = temp;
        }
      }
    }
    return array;
  }
}

exports.name = 'setPowerset';
exports.factory = factory;

},{"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/size":383,"../matrix/subset":386,"../relational/compareNatural":403}],421:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var equal = load(require('../relational/equal'));
  var compareNatural = load(require('../relational/compareNatural'));
  
  /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4]);          // returns 4
   *    math.setSize([1, 2, 2, 4], true);    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {number}            The number of elements of the (multi)set
   */
  var setSize = typed('setSize', {
    'Array | Matrix': function (a) {
      return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;
    },
    'Array | Matrix, boolean': function (a, unique) {
      if (unique === false || a.length === 0) {
        return Array.isArray(a) ? flatten(a).length : flatten(a.toArray()).length;
      }
      else {
        var b = flatten(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        var count = 1;
        for (var i=1; i<b.length; i++) {
          if (!equal(b[i], b[i-1])) {
            count++;
          }
        }
        return count;
      }
    }
  });

  return setSize;
}

exports.name = 'setSize';
exports.factory = factory;

},{"../../utils/array":532,"../relational/compareNatural":403,"../relational/equal":405}],422:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var index = load(require('../../type/matrix/MatrixIndex'));
  var concat = load(require('../matrix/concat'));
  var size = load(require('../matrix/size'));
  var sort = load(require('../matrix/sort'));
  var subset = load(require('../matrix/subset'));
  var setDifference = load(require('../set/setDifference'));
  
  /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */
  var setSymDifference = typed('setSymDifference', {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new index(0)) === 0) { // if any of them is empty, return the other one
        return flatten(a2);
      }
      else if (subset(size(a2), new index(0)) === 0) {
        return flatten(a1);
      }
      var b1 = flatten(a1);
      var b2 = flatten(a2);
      return concat(setDifference(b1, b2), setDifference(b2, b1));
    }
  });

  return setSymDifference;
}

exports.name = 'setSymDifference';
exports.factory = factory;

},{"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/concat":365,"../matrix/size":383,"../matrix/sort":384,"../matrix/subset":386,"../set/setDifference":415}],423:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var index = load(require('../../type/matrix/MatrixIndex'));
  var concat = load(require('../matrix/concat'));
  var size = load(require('../matrix/size'));
  var subset = load(require('../matrix/subset'));
  var setIntersect = load(require('../set/setIntersect'));
  var setSymDifference = load(require('../set/setSymDifference'));
  
  /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6]);            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]]);    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */
  var setUnion = typed('setUnion', {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new index(0)) === 0) { // if any of them is empty, return the other one
        return flatten(a2);
      }
      else if (subset(size(a2), new index(0)) === 0) {
        return flatten(a1);
      }
      var b1 = flatten(a1);
      var b2 = flatten(a2);
      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
    }
  });

  return setUnion;
}

exports.name = 'setUnion';
exports.factory = factory;

},{"../../type/matrix/MatrixIndex":500,"../../utils/array":532,"../matrix/concat":365,"../matrix/size":383,"../matrix/subset":386,"../set/setIntersect":417,"../set/setSymDifference":422}],424:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var sign = require('../../utils/number').sign;


function factory (type, config, load, typed) {
  /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( http://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2);    // returns 0.22270258921047847
   *    math.erf(-0.5);   // returns -0.5204998778130465
   *    math.erf(4);      // returns 0.9999999845827421
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */
  var erf = typed('erf', {
    'number': function (x) {
      var y = Math.abs(x);

      if (y >= MAX_NUM) {
        return sign(x);
      }
      if (y <= THRESH) {
        return sign(x) * erf1(y);
      }
      if (y <= 4.0) {
        return sign(x) * (1 - erfc2(y));
      }
      return sign(x) * (1 - erfc3(y));
    },

    // TODO: Not sure if there's a way to guarantee some degree of accuracy here.
    //  Perhaps it would be best to set the precision of the number to that which
    //  is guaranteed by erf()
    'BigNumber': function (n) {
      return new type.BigNumber(erf(n.toNumber()));
    },

    'Array | Matrix': function (n) {
      return deepMap(n, erf);
    }

    // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)

  });

  /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */
  function erf1(y) {
    var ysq = y * y;
    var xnum = P[0][4]*ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 3; i += 1) {
      xnum = (xnum + P[0][i]) * ysq;
      xden = (xden + Q[0][i]) * ysq;
    }
    return y * (xnum + P[0][3]) / (xden + Q[0][3]);
  }

  /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */
  function erfc2(y) {
    var xnum = P[1][8] * y;
    var xden = y;
    var i;

    for (i = 0; i < 7; i += 1) {
      xnum = (xnum + P[1][i]) * y;
      xden = (xden + Q[1][i]) * y;
    }
    var result = (xnum + P[1][7]) / (xden + Q[1][7]);
    var ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;
  }

  /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */
  function erfc3(y) {
    var ysq = 1 / (y * y);
    var xnum = P[2][5] * ysq;
    var xden = ysq;
    var i;

    for (i = 0; i < 4; i += 1) {
      xnum = (xnum + P[2][i]) * ysq;
      xden = (xden + Q[2][i]) * ysq;
    }
    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
    result = (SQRPI - result) / y;
    ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;
  }

  erf.toTex = {1: 'erf\\left(${args[0]}\\right)'};

  return erf;
}

/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */
var THRESH = 0.46875;

/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */
var SQRPI = 5.6418958354775628695e-1;

/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */
var P = [[
  3.16112374387056560e00, 1.13864154151050156e02,
  3.77485237685302021e02, 3.20937758913846947e03,
  1.85777706184603153e-1
], [
  5.64188496988670089e-1, 8.88314979438837594e00,
  6.61191906371416295e01, 2.98635138197400131e02,
  8.81952221241769090e02, 1.71204761263407058e03,
  2.05107837782607147e03, 1.23033935479799725e03,
  2.15311535474403846e-8
], [
  3.05326634961232344e-1, 3.60344899949804439e-1,
  1.25781726111229246e-1, 1.60837851487422766e-2,
  6.58749161529837803e-4, 1.63153871373020978e-2
]];

/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */
var Q = [[
  2.36012909523441209e01, 2.44024637934444173e02,
  1.28261652607737228e03, 2.84423683343917062e03
], [
  1.57449261107098347e01, 1.17693950891312499e02,
  5.37181101862009858e02, 1.62138957456669019e03,
  3.29079923573345963e03, 4.36261909014324716e03,
  3.43936767414372164e03, 1.23033935480374942e03
], [
  2.56852019228982242e00, 1.87295284992346047e00,
  5.27905102951428412e-1, 6.05183413124413191e-2,
  2.33520497626869185e-3
]];

/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */
var MAX_NUM = Math.pow(2, 53);


exports.name = 'erf';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],425:[function(require,module,exports){
module.exports = [
  require('./erf')
];

},{"./erf":424}],426:[function(require,module,exports){
module.exports = [
  require('./mad'),
  require('./max'),
  require('./mean'),
  require('./median'),
  require('./min'),
  require('./mode'),
  require('./prod'),
  require('./quantileSeq'),
  require('./std'),
  require('./sum'),
  require('./var')
];

},{"./mad":427,"./max":428,"./mean":429,"./median":430,"./min":431,"./mode":432,"./prod":433,"./quantileSeq":434,"./std":435,"./sum":436,"./var":437}],427:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {
  var abs      = load(require('../arithmetic/abs'));
  var map      = load(require('../matrix/map'));
  var median   = load(require('../statistics/median'));
  var subtract = load(require('../arithmetic/subtract'));

  /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30);             // returns 10
   *     math.mad([1, 2, 3]);              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]); // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */
  var mad = typed('mad', {
    // mad([a, b, c, d, ...])
    'Array | Matrix': _mad,

    // mad(a, b, c, d, ...)
    '...': function (args) {
      return _mad(args);
    }
  });

  mad.toTex = undefined; // use default template

  return mad;

  function _mad(array) {
    array = flatten(array.valueOf());

    if (array.length === 0) {
      throw new Error('Cannot calculate median absolute deviation of an empty array');
    }

    var med = median(array);
    return median(map(array, function (value) {
      return abs(subtract(value, med));
    }));
  }
}

exports.name = 'mad';
exports.factory = factory;

},{"../../utils/array":532,"../arithmetic/abs":304,"../arithmetic/subtract":334,"../matrix/map":377,"../statistics/median":430}],428:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');
var reduce = require('../../utils/collection/reduce');
var containsCollections = require('../../utils/collection/containsCollections');

function factory (type, config, load, typed) {
  var larger = load(require('../relational/larger'));

  /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3);                  // returns 4
   *     math.max([2, 1, 4, 3]);                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */
  var max = typed('max', {
    // max([a, b, c, d, ...])
    'Array | Matrix': _max,

    // max([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      return reduce(array, dim.valueOf(), _largest);
    },

    // max(a, b, c, d, ...)
    '...': function (args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function max');
      }

      return _max(args);
    }
  });

  max.toTex = '\\max\\left(${args}\\right)';

  return max;

  /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */
  function _largest(x, y){
    return larger(x, y) ? x : y;
  }

  /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */
  function _max(array) {
    var max = undefined;

    deepForEach(array, function (value) {
      if (max === undefined || larger(value, max)) {
        max = value;
      }
    });

    if (max === undefined) {
      throw new Error('Cannot calculate max of an empty array');
    }

    return max;
  }
}

exports.name = 'max';
exports.factory = factory;

},{"../../utils/collection/containsCollections":545,"../../utils/collection/deepForEach":546,"../../utils/collection/reduce":550,"../relational/larger":408}],429:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;
var deepForEach = require('../../utils/collection/deepForEach');
var reduce = require('../../utils/collection/reduce');
var containsCollections = require('../../utils/collection/containsCollections');

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var divide = load(require('../arithmetic/divide'));

  /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3);                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */
  var mean = typed('mean', {
      // mean([a, b, c, d, ...])
    'Array | Matrix': _mean,

      // mean([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nmean,

    // mean(a, b, c, d, ...)
    '...': function (args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function mean');
      }

      return _mean(args);
    }
  });

  mean.toTex = undefined; // use default template

  return mean;

  /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */
  function _nmean(array, dim){
    var sum = reduce(array, dim, add);
    var s = Array.isArray(array) ? size(array) : array.size();
    return divide(sum, s[dim]);
  }

  /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */
  function _mean(array) {
    var sum = 0;
    var num = 0;

    deepForEach(array, function (value) {
      sum = add(sum, value);
      num++;
    });

    if (num === 0) {
      throw new Error('Cannot calculate mean of an empty array');
    }

    return divide(sum, num);
  }
}

exports.name = 'mean';
exports.factory = factory;

},{"../../utils/array":532,"../../utils/collection/containsCollections":545,"../../utils/collection/deepForEach":546,"../../utils/collection/reduce":550,"../arithmetic/add":305,"../arithmetic/divide":310}],430:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;
var reduce = require('../../utils/collection/reduce');
var containsCollections = require('../../utils/collection/containsCollections');

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/addScalar'));
  var divide = load(require('../arithmetic/divideScalar'));
  var compare = load(require('../relational/compare'));
  var partitionSelect = load(require('../matrix/partitionSelect'));

  /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7);        // returns 5
   *     math.median([3, -1, 5, 7]);  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, var, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */
  var median = typed('median', {
    // median([a, b, c, d, ...])
    'Array | Matrix': _median,

    // median([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      // TODO: implement median(A, dim)
      throw new Error('median(A, dim) is not yet supported');
      //return reduce(arguments[0], arguments[1], ...);
    },

    // median(a, b, c, d, ...)
    '...': function (args) {
      if (containsCollections(args)) {
          throw new TypeError('Scalar values expected in function median');
      }

      return _median(args);
    }
  });


  /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */
  function _median(array) {
    array = flatten(array.valueOf());

    var num = array.length;
    if (num == 0) {
      throw new Error('Cannot calculate median of an empty array');
    }

    if (num % 2 == 0) {
      // even: return the average of the two middle values
      var mid = num / 2 - 1;
      var right = partitionSelect(array, mid + 1);

      // array now partitioned at mid + 1, take max of left part
      var left = array[mid];
      for (var i = 0; i < mid; ++i) {
        if (compare(array[i], left) > 0) {
          left = array[i];
        }
      }

      return middle2(left, right);
    }
    else {
      // odd: return the middle value
      var m = partitionSelect(array, (num - 1) / 2);

      return middle(m);
    }
  }

  // helper function to type check the middle value of the array
  var middle = typed({
    'number | BigNumber | Complex | Unit': function (value) {
      return value;
    }
  });

  // helper function to type check the two middle value of the array
  var middle2 = typed({
    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function (left, right) {
      return divide(add(left, right), 2);
    }
  });

  median.toTex = undefined; // use default template

  return median;
}

exports.name = 'median';
exports.factory = factory;

},{"../../utils/array":532,"../../utils/collection/containsCollections":545,"../../utils/collection/reduce":550,"../arithmetic/addScalar":306,"../arithmetic/divideScalar":311,"../matrix/partitionSelect":379,"../relational/compare":402}],431:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');
var reduce = require('../../utils/collection/reduce');
var containsCollections = require('../../utils/collection/containsCollections');

function factory (type, config, load, typed) {
  var smaller = load(require('../relational/smaller'));
  
  /**
   * Compute the maximum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3);                  // returns 1
   *     math.min([2, 1, 4, 3]);                // returns 1
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */
  var min = typed('min', {
    // min([a, b, c, d, ...])
    'Array | Matrix': _min,

    // min([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      return reduce(array, dim.valueOf(), _smallest);
    },

    // min(a, b, c, d, ...)
    '...': function (args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function min');
      }

      return _min(args);
    }
  });

  min.toTex = '\\min\\left(${args}\\right)';

  return min;

  /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */
  function _smallest(x, y) {
    return smaller(x, y) ? x : y;
  }

  /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */
  function _min(array) {
    var min = undefined;

    deepForEach(array, function (value) {
      if (min === undefined || smaller(value, min)) {
        min = value;
      }
    });

    if (min === undefined) {
      throw new Error('Cannot calculate min of an empty array');
    }

    return min;
  }
}

exports.name = 'min';
exports.factory = factory;

},{"../../utils/collection/containsCollections":545,"../../utils/collection/deepForEach":546,"../../utils/collection/reduce":550,"../relational/smaller":410}],432:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory (type, config, load, typed) {

  /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */

  var mode = typed('mode', {
    'Array | Matrix' : _mode,
    
    '...': function (args) {
      return _mode(args);
    }
  });
  
  return mode;

  /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {number} mode
   * @private
   */
  function _mode(values) {
    values = flatten(values.valueOf());
    var num = values.length;
    if (num == 0) {
      throw new Error('Cannot calculate mode of an empty array');
    }
    
    var count = {},
        mode = [],
        max = 0;
    for (var i in values) {
      if (!(values[i] in count)){
        count[values[i]] = 0;
      }
      count[values[i]]++;
      if (count[values[i]] == max){
        mode.push(values[i]);
      }
      else if (count[values[i]] > max) {
        max = count[values[i]];
        mode = [values[i]];
      }
    }
    return mode; 
  };
}

exports.name = 'mode';
exports.factory = factory;
},{"../../utils/array":532}],433:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

function factory (type, config, load, typed) {
  var multiply = load(require('../arithmetic/multiplyScalar'));

  /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3);           // returns 6
   *     math.prod(2, 3);               // returns 6
   *     math.prod(2, 3, 4);            // returns 24
   *     math.prod([2, 3, 4]);          // returns 24
   *     math.prod([[2, 5], [4, 3]]);   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */
  var prod = typed('prod', {
    // prod([a, b, c, d, ...])
    'Array | Matrix': _prod,

    // prod([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      // TODO: implement prod(A, dim)
      throw new Error('prod(A, dim) is not yet supported');
      //return reduce(arguments[0], arguments[1], math.prod);
    },

    // prod(a, b, c, d, ...)
    '...': function (args) {
      return _prod(args);
    }
  });

  prod.toTex = undefined; // use default template

  return prod;

  /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */
  function _prod(array) {
    var prod = undefined;

    deepForEach(array, function (value) {
      prod = (prod === undefined) ? value : multiply(prod, value);
    });

    if (prod === undefined) {
      throw new Error('Cannot calculate prod of an empty array');
    }

    return prod;
  }
}

exports.name = 'prod';
exports.factory = factory;

},{"../../utils/collection/deepForEach":546,"../arithmetic/multiplyScalar":326}],434:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;
var isNumber = require('../../utils/number').isNumber;
var flatten = require('../../utils/array').flatten;
var isCollection = require('../../utils/collection/isCollection');

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var multiply = load(require('../arithmetic/multiply'));
  var partitionSelect = load(require('../matrix/partitionSelect'));
  var compare = load(require('../relational/compare'));

  /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, var
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */
  function quantileSeq(data, probOrN, sorted) {
    var probArr, dataArr, one;

    if (arguments.length < 2 || arguments.length > 3) {
      throw new SyntaxError('Function quantileSeq requires two or three parameters');
    }

    if (isCollection(data)) {
      sorted = sorted || false;
      if (typeof sorted === 'boolean') {
        dataArr = data.valueOf();
        if (isNumber(probOrN)) {
          if (probOrN < 0) {
            throw new Error('N/prob must be non-negative');
          }

          if (probOrN <= 1) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN > 1) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!isInteger(probOrN)) {
              throw new Error('N must be a positive integer');
            }

            var nPlusOne = probOrN + 1;
            probArr = new Array(probOrN);
            for (var i = 0; i < probOrN;) {
              probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);
            }
            return probArr;
          }
        }

        if (type.isBigNumber(probOrN)) {
          if (probOrN.isNegative()) {
            throw new Error('N/prob must be non-negative');
          }

          one = new probOrN.constructor(1);

          if (probOrN.lte(one)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN.gt(one)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!probOrN.isInteger()) {
              throw new Error('N must be a positive integer');
            }

            // largest possible Array length is 2^32-1;
            // 2^32 < 10^15, thus safe conversion guaranteed
            var intN = probOrN.toNumber();
            if (intN > 4294967295) {
              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }

            var nPlusOne = new type.BigNumber(intN + 1);
            probArr = new Array(intN);
            for (var i = 0; i < intN;) {
              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
            }
            return probArr;
          }
        }

        if (Array.isArray(probOrN)) {
          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
          probArr = new Array(probOrN.length);
          for (var i = 0; i < probArr.length; ++i) {
            var currProb = probOrN[i];
            if (isNumber(currProb)) {
              if (currProb < 0 || currProb > 1) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else if (type.isBigNumber(currProb)) {
              one = new currProb.constructor(1);
              if (currProb.isNegative() || currProb.gt(one)) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else {
              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }

            probArr[i] = _quantileSeq(dataArr, currProb, sorted);
          }
          return probArr;
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }

      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }

    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
  }

  /**
   * Calculate the prob order quantile of an n-dimensional array.
   * 
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */
  function _quantileSeq(array, prob, sorted) {
    var flat = flatten(array);
    var len = flat.length;
    if (len === 0) {
      throw new Error('Cannot calculate quantile of an empty sequence');
    }

    if (isNumber(prob)) {
      var index = prob * (len-1);
      var fracPart = index % 1;
      if (fracPart === 0) {
        var value = sorted ? flat[index] : partitionSelect(flat, index);

        validate(value);

        return value;
      }

      var integerPart = Math.floor(index);

      var left, right;
      if (sorted) {
        left = flat[integerPart];
        right = flat[integerPart+1];
      } else {
        right = partitionSelect(flat, integerPart+1);

        // max of partition is kth largest
        left = flat[integerPart];
        for (var i = 0; i < integerPart; ++i) {
          if (compare(flat[i], left) > 0) {
            left = flat[i];
          }
        }
      }

      validate(left);
      validate(right);

      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
    }

    // If prob is a BigNumber
    var index = prob.times(len-1);
    if (index.isInteger()) {
      index = index.toNumber();
      var value = sorted ? flat[index] : partitionSelect(flat, index);

      validate(value);

      return value;
    }

    var integerPart = index.floor();
    var fracPart = index.minus(integerPart);
    var integerPartNumber = integerPart.toNumber();

    var left, right;
    if (sorted) {
      left = flat[integerPartNumber];
      right = flat[integerPartNumber+1];
    } else {
      right = partitionSelect(flat, integerPartNumber+1);

      // max of partition is kth largest
      left = flat[integerPartNumber];
      for (var i = 0; i < integerPartNumber; ++i) {
        if (compare(flat[i], left) > 0) {
          left = flat[i];
        }
      }
    }

    validate(left);
    validate(right);

    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
    var one = new fracPart.constructor(1);
    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
  }

  /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */
  var validate = typed({
    'number | BigNumber | Unit': function (x) {
      return x;
    }
  });

  return quantileSeq;
}

exports.name = 'quantileSeq';
exports.factory = factory;

},{"../../utils/array":532,"../../utils/collection/isCollection":548,"../../utils/number":557,"../arithmetic/add":305,"../arithmetic/multiply":325,"../matrix/partitionSelect":379,"../relational/compare":402}],435:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var sqrt       = load(require('../arithmetic/sqrt'));
  var variance   = load(require('../statistics/var'));

  /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(var(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated.
   *
   * Optionally, the type of normalization can be specified as second
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6);                     // returns 2
   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased');      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, var
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @return {*} The standard deviation
   */
  var std = typed('std', {
    // std([a, b, c, d, ...])
    'Array | Matrix': _std,

    // std([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _std,

    // std(a, b, c, d, ...)
    '...': function (args) {
      return _std(args);
    }
  });
  
  std.toTex = undefined; // use default template

  return std;

  function _std(array, normalization) {
    if (array.length == 0) {
      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
    }

    return sqrt(variance.apply(null, arguments));
  }
}

exports.name = 'std';
exports.factory = factory;

},{"../arithmetic/sqrt":332,"../statistics/var":437}],436:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/addScalar'));

  /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3);               // returns 10
   *     math.sum([2, 1, 4, 3]);             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */
  var sum = typed('sum', {
    'Array | Matrix': function (args) {
      // sum([a, b, c, d, ...])
      return _sum(args);
    },

    'Array | Matrix, number | BigNumber': function () {
      // sum([a, b, c, d, ...], dim)
      // TODO: implement sum(A, dim)
      throw new Error('sum(A, dim) is not yet supported');
    },

    '...': function (args) {
      // sum(a, b, c, d, ...)
      return _sum(args);
    }
  });

  sum.toTex = undefined; // use default template

  return sum;

  /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array} array
   * @return {number} sum
   * @private
   */
  function _sum(array) {
    var sum = undefined;

    deepForEach(array, function (value) {
      sum = (sum === undefined) ? value : add(sum, value);
    });

    if (sum === undefined) {
      switch (config.number) {
        case 'number':
          return 0;
        case 'BigNumber':
          return new type.BigNumber(0);
        case 'Fraction':
          return new type.Fraction(0);
        default:
          return 0;
      }
    }

    return sum;
  }
}

exports.name = 'sum';
exports.factory = factory;

},{"../../utils/collection/deepForEach":546,"../arithmetic/addScalar":306}],437:[function(require,module,exports){
'use strict';

var DEFAULT_NORMALIZATION = 'unbiased';

var deepForEach = require('../../utils/collection/deepForEach');

function factory (type, config, load, typed) {
  var add = load(require('../arithmetic/addScalar'));
  var subtract = load(require('../arithmetic/subtract'));
  var multiply = load(require('../arithmetic/multiplyScalar'));
  var divide = load(require('../arithmetic/divideScalar'));

  /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Optionally, the type of normalization can be specified as second
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.var(a, b, c, ...)
   *     math.var(A)
   *     math.var(A, normalization)
   *
   * Examples:
   *
   *     math.var(2, 4, 6);                     // returns 4
   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667
   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5
   *     math.var([2, 4, 6, 8], 'biased');      // returns 4
   *
   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @return {*} The variance
   */
  var variance = typed('variance', {
    // var([a, b, c, d, ...])
    'Array | Matrix': function (array) {
      return _var(array, DEFAULT_NORMALIZATION);
    },

    // var([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _var,

    // var(a, b, c, d, ...)
    '...': function (args) {
      return _var(args, DEFAULT_NORMALIZATION);
    }
  });

  variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';

  return variance;

  /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */
  function _var(array, normalization) {
    var sum = 0;
    var num = 0;

    if (array.length == 0) {
      throw new SyntaxError('Function var requires one or more parameters (0 provided)');
    }

    // calculate the mean and number of elements
    deepForEach(array, function (value) {
      sum = add(sum, value);
      num++;
    });
    if (num === 0) throw new Error('Cannot calculate var of an empty array');

    var mean = divide(sum, num);

    // calculate the variance
    sum = 0;
    deepForEach(array, function (value) {
      var diff = subtract(value, mean);
      sum = add(sum, multiply(diff, diff));
    });

    switch (normalization) {
      case 'uncorrected':
        return divide(sum, num);

      case 'biased':
        return divide(sum, num + 1);

      case 'unbiased':
        var zero = type.isBigNumber(sum) ? new type.BigNumber(0) : 0;
        return (num == 1) ? zero : divide(sum, num - 1);

      default:
        throw new Error('Unknown normalization "' + normalization + '". ' +
        'Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }
}

exports.name = 'var';
exports.factory = factory;

},{"../../utils/collection/deepForEach":546,"../arithmetic/addScalar":306,"../arithmetic/divideScalar":311,"../arithmetic/multiplyScalar":326,"../arithmetic/subtract":334}],438:[function(require,module,exports){
'use strict';

var string = require('../../utils/string');

function factory (type, config, load, typed) {
  /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *    - `precision: number`
   *      A number between 0 and 16 to round the digits of the number. In case
   *      of notations 'exponential' and 'auto', `precision` defines the total
   *      number of significant digits returned and is undefined by default.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point, and is 0 by default.
   *    - `exponential: Object`
   *      An object containing two parameters, {number} lower and {number} upper,
   *      used by notation 'auto' to determine when to return exponential
   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only
   *      applicable for notation `auto`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4);                                        // returns '6.4'
   *    math.format(1240000);                                    // returns '1.24e6'
   *    math.format(1/3);                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3);                                     // returns '0.333'
   *    math.format(21385, 2);                                   // returns '21000'
   *    math.format(12.071, {notation: 'fixed'});                // returns '12'
   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'
   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'
   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2);
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */
  var format = typed('format', {
    'any': string.format,
    'any, Object | function | number': string.format
  });

  format.toTex = undefined; // use default template

  return format;
}

exports.name = 'format';
exports.factory = factory;

},{"../../utils/string":559}],439:[function(require,module,exports){
module.exports = [
  require('./format'),
  require('./print')
];

},{"./format":438,"./print":440}],440:[function(require,module,exports){
'use strict';

var isString = require('../../utils/string').isString;
var format = require('../../utils/string').format;

function factory (type, config, load, typed) {
  /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5});
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     });
   *
   * See also:
   *
   *     format
   *
   * @param {string} template     A string containing variable placeholders.
   * @param {Object} values       An object containing variables which will
   *                              be filled in in the template.
   * @param {number | Object} [options]  Formatting options,
   *                              or the number of digits to format numbers.
   *                              See function math.format for a description
   *                              of all options.
   * @return {string} Interpolated string
   */
  var print = typed ('print', {
    'string, Object': _print,
    'string, Object, number | Object': _print
  });

  print.toTex = undefined; // use default template

  return print;
}

/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */
function _print(template, values, options) {
  return template.replace(/\$([\w\.]+)/g, function (original, key) {
        var keys = key.split('.');
        var value = values[keys.shift()];
        while (keys.length && value !== undefined) {
          var k = keys.shift();
          value = k ? value[k] : value + '.';
        }

        if (value !== undefined) {
          if (!isString(value)) {
            return format(value, options);
          }
          else {
            return value;
          }
        }

        return original;
      }
  );
}

exports.name = 'print';
exports.factory = factory;

},{"../../utils/string":559}],441:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5);           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)); // returns number 1.5
   *
   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
  var acos = typed('acos', {
    'number': function (x) {
      if ((x >= -1 && x <= 1) || config.predictable) {
        return Math.acos(x);
      }
      else {
        return new type.Complex(x, 0).acos();
      }
    },

    'Complex': function (x) {
      return x.acos();
    },

    'BigNumber': function (x) {
      return x.acos();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, acos);
    }
  });

  acos.toTex = {1: '\\cos^{-1}\\left(${args[0]}\\right)'};

  return acos;
}

exports.name = 'acos';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],442:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5);       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
  var acosh = typed('acosh', {
    'number': function (x) {
      if (x >= 1 || config.predictable) {
        return _acosh(x);
      }
      if (x <= -1) {
        return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);
      }
      return new type.Complex(x, 0).acosh();
    },

    'Complex': function (x) {
      return x.acosh();
    },

    'BigNumber': function (x) {
      return x.acosh();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, acosh);
    }
  });

  acosh.toTex = {1: '\\cosh^{-1}\\left(${args[0]}\\right)'};

  return acosh;
}

/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 * @private
 */
var _acosh = Math.acosh || function (x) {
  return Math.log(Math.sqrt(x*x - 1) + x)
};

exports.name = 'acosh';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],443:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5);           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)); // returns number 1.5
   *
   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
  var acot = typed('acot', {
    'number': function (x) {
      return Math.atan(1 / x);
    },

    'Complex': function (x) {
      return x.acot();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x).atan();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, acot);
    }
  });

  acot.toTex = {1: '\\cot^{-1}\\left(${args[0]}\\right)'};

  return acot;
}

exports.name = 'acot';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],444:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5);       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
  var acoth = typed('acoth', {
    'number': function (x) {
      if (x >= 1 || x <= -1 || config.predictable) {
        return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;
      }
      return new type.Complex(x, 0).acoth();
    },

    'Complex': function (x) {
      return x.acoth();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x).atanh();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, acoth);
    }
  });

  acoth.toTex = {1: '\\coth^{-1}\\left(${args[0]}\\right)'};

  return acoth;
}

exports.name = 'acoth';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],445:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');


function factory (type, config, load, typed) {

  /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5);           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)); // returns number ~1.5
   *
   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
  var acsc = typed('acsc', {
    'number': function (x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return Math.asin(1 / x);
      }
      return new type.Complex(x, 0).acsc();
    },

    'Complex': function (x) {
      return x.acsc();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x).asin();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, acsc);
    }
  });

  acsc.toTex = {1: '\\csc^{-1}\\left(${args[0]}\\right)'};

  return acsc;
}

exports.name = 'acsc';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],446:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5);       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
  var acsch = typed('acsch', {
    'number': function (x) {
      x = 1 / x;
      return Math.log(x + Math.sqrt(x*x + 1));
    },

    'Complex': function (x) {
      return x.acsch();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x).asinh();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, acsch);
    }
  });

  acsch.toTex = {1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'};

  return acsch;
}

exports.name = 'acsch';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],447:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5);           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)); // returns 1.5
   *
   *    math.asec(2);             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
  var asec = typed('asec', {
    'number': function (x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return Math.acos(1 / x);
      }
      return new type.Complex(x, 0).asec();
    },

    'Complex': function (x) {
      return x.asec();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x).acos();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, asec);
    }
  });

  asec.toTex = {1: '\\sec^{-1}\\left(${args[0]}\\right)'};

  return asec;
}

exports.name = 'asec';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],448:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var acosh = typed.find(load(require('./acosh')), ['Complex']);

  /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5);       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */
  var asech = typed('asech', {
    'number': function (x) {
      if ((x <= 1 && x >= -1) || config.predictable) {
        x = 1 / x;

        var ret = Math.sqrt(x*x - 1);
        if (x > 0 || config.predictable) {
          return Math.log(ret + x);
        }

        return new type.Complex(Math.log(ret - x), Math.PI);
      }

      return new type.Complex(x, 0).asech();
    },

    'Complex': function (x) {
      return x.asech()
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x).acosh();
    },

    'Array | Matrix': function (x) {
      return deepMap(x, asech);
    }
  });

  asech.toTex = {1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'};

  return asech;
}

exports.name = 'asech';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"./acosh":442}],449:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5);           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)); // returns number ~1.5
   *
   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
  var asin = typed('asin', {
    'number': function (x) {
      if ((x >= -1 && x <= 1) || config.predictable) {
        return Math.asin(x);
      }
      else {
        return new type.Complex(x, 0).asin();
      }
    },

    'Complex': function (x) {
      return x.asin();
    },

    'BigNumber': function (x) {
      return x.asin();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since asin(0) = 0
      return deepMap(x, asin, true);
    }
  });

  asin.toTex = {1: '\\sin^{-1}\\left(${args[0]}\\right)'};

  return asin;
}

exports.name = 'asin';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],450:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5);       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
  var asinh = typed('asinh', {
    'number': Math.asinh || function (x) {
      return Math.log(Math.sqrt(x*x + 1) + x);
    },

    'Complex': function (x) {
        return x.asinh();
    },

    'BigNumber': function (x) {
      return x.asinh();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since asinh(0) = 0
      return deepMap(x, asinh, true);
    }
  });

  asinh.toTex = {1: '\\sinh^{-1}\\left(${args[0]}\\right)'};

  return asinh;
}

exports.name = 'asinh';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],451:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5);           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)); // returns number 1.5
   *
   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
  var atan = typed('atan', {
    'number': function (x) {
      return Math.atan(x);
    },

    'Complex': function (x) {
      return x.atan();
    },

    'BigNumber': function (x) {
      return x.atan();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since atan(0) = 0
      return deepMap(x, atan, true);
    }
  });

  atan.toTex = {1: '\\tan^{-1}\\left(${args[0]}\\right)'};

  return atan;
}

exports.name = 'atan';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],452:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi;       // returns number 0.25
   *
   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg
   *    var x = math.cos(angle);
   *    var y = math.sin(angle);
   *
   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */
  var atan2 = typed('atan2', {

    'number, number': Math.atan2,

    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored the imaginary.

    'BigNumber, BigNumber': function (y, x) {
      return type.BigNumber.atan2(y, x);
    },

    'Matrix, Matrix': function (x, y) {
      // result
      var c;

      // process matrix storage
      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse .* sparse
              c = algorithm09(x, y, atan2, false);
              break;
            default:
              // sparse .* dense
              c = algorithm02(y, x, atan2, true);
              break;
          }
          break;
        default:
          switch (y.storage()) {
            case 'sparse':
              // dense .* sparse
              c = algorithm03(x, y, atan2, false);
              break;
            default:
              // dense .* dense
              c = algorithm13(x, y, atan2);
              break;
          }
          break;
      }
      return c;
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return atan2(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return atan2(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return atan2(x, matrix(y));
    },

    'Matrix, number | BigNumber': function (x, y) {
      // result
      var c;
      // check storage format
      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, atan2, false);
          break;
        default:
          c = algorithm14(x, y, atan2, false);
          break;
      }
      return c;
    },

    'number | BigNumber, Matrix': function (x, y) {
      // result
      var c;
      // check storage format
      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, atan2, true);
          break;
        default:
          c = algorithm14(y, x, atan2, true);
          break;
      }
      return c;
    },

    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, atan2, false).valueOf();
    },

    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, atan2, true).valueOf();
    }
  });

  atan2.toTex = {2: '\\mathrm{atan2}\\left(${args}\\right)'};

  return atan2;
}

exports.name = 'atan2';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm02":509,"../../type/matrix/utils/algorithm03":510,"../../type/matrix/utils/algorithm09":516,"../../type/matrix/utils/algorithm11":518,"../../type/matrix/utils/algorithm12":519,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521}],453:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5);       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
  var atanh = typed('atanh', {
    'number': function (x) {
      if ((x <= 1 && x >= -1) || config.predictable) {
        return _atanh(x);
      }
      return new type.Complex(x, 0).atanh();
    },

    'Complex': function (x) {
      return x.atanh();
    },

    'BigNumber': function (x) {
      return x.atanh();
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since atanh(0) = 0
      return deepMap(x, atanh, true);
    }
  });

  atanh.toTex = {1: '\\tanh^{-1}\\left(${args[0]}\\right)'};

  return atanh;
}

/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 * @private
 */
var _atanh = Math.atanh || function (x) {
  return Math.log((1 + x)/(1 - x)) / 2
};

exports.name = 'atanh';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],454:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2);                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'));  // returns number -1
   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5
   *
   *    var angle = 0.2;
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
  var cos = typed('cos', {
    'number': Math.cos,

    'Complex': function (x) {
      return x.cos();
    },

    'BigNumber': function (x) {
      return x.cos();
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function cos is no angle');
      }
      return cos(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, cos);
    }
  });

  cos.toTex = {1: '\\cos\\left(${args[0]}\\right)'};

  return cos;
}

exports.name = 'cos';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],455:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5);       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
  var cosh = typed('cosh', {
    'number': _cosh,

    'Complex': function (x) {
      return x.cosh();
    },

    'BigNumber': function (x) {
      return x.cosh();
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function cosh is no angle');
      }
      return cosh(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, cosh);
    }
  });

  cosh.toTex = {1: '\\cosh\\left(${args[0]}\\right)'};

  return cosh;
}

/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
var _cosh = Math.cosh || function (x) {
  return (Math.exp(x) + Math.exp(-x)) / 2;
};

exports.name = 'cosh';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],456:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2);      // returns number -0.45765755436028577
   *    1 / math.tan(2);  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
  var cot = typed('cot', {
    'number': function (x) {
      return 1 / Math.tan(x);
    },

    'Complex': function (x) {
      return x.cot();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x.tan());
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function cot is no angle');
      }
      return cot(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, cot);
    }
  });

  cot.toTex = {1: '\\cot\\left(${args[0]}\\right)'};

  return cot;
}

exports.name = 'cot';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],457:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2);         // returns 1.0373147207275482
   *    1 / math.tanh(2);     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
  var coth = typed('coth', {
    'number': _coth,

    'Complex': function (x) {
      return x.coth();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x.tanh());
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function coth is no angle');
      }
      return coth(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, coth);
    }
  });

  coth.toTex = {1: '\\coth\\left(${args[0]}\\right)'};

  return coth;
}

/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
function _coth(x) {
  var e = Math.exp(2 * x);
  return (e + 1) / (e - 1);
}

exports.name = 'coth';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],458:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2);      // returns number 1.099750170294617
   *    1 / math.sin(2);  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
  var csc = typed('csc', {
    'number': function (x) {
      return 1 / Math.sin(x);
    },

    'Complex': function (x) {
      return x.csc();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x.sin());
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function csc is no angle');
      }
      return csc(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, csc);
    }
  });

  csc.toTex = {1: '\\csc\\left(${args[0]}\\right)'};

  return csc;
}

exports.name = 'csc';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],459:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var sign = require('../../utils/number').sign;

function factory (type, config, load, typed) {
  /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5);       // returns 1.9190347513349437
   *    1 / math.sinh(0.5);   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
  var csch = typed('csch', {
    'number': _csch,

    'Complex': function (x) {
      return x.csch();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x.sinh());
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function csch is no angle');
      }
      return csch(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, csch);
    }
  });

  csch.toTex = {1: '\\mathrm{csch}\\left(${args[0]}\\right)'};

  return csch;
}

/**
 * Calculate the hyperbolic cosecant of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
function _csch(x) {
  // consider values close to zero (+/-)
  if (x == 0) {
    return Number.POSITIVE_INFINITY;
  }
  else {
    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
  }
}

exports.name = 'csch';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],460:[function(require,module,exports){
module.exports = [
  require('./acos'),
  require('./acosh'),
  require('./acot'),
  require('./acoth'),
  require('./acsc'),
  require('./acsch'),
  require('./asec'),
  require('./asech'),
  require('./asin'),
  require('./asinh'),
  require('./atan'),
  require('./atan2'),
  require('./atanh'),
  require('./cos'),
  require('./cosh'),
  require('./cot'),
  require('./coth'),
  require('./csc'),
  require('./csch'),
  require('./sec'),
  require('./sech'),
  require('./sin'),
  require('./sinh'),
  require('./tan'),
  require('./tanh')
];

},{"./acos":441,"./acosh":442,"./acot":443,"./acoth":444,"./acsc":445,"./acsch":446,"./asec":447,"./asech":448,"./asin":449,"./asinh":450,"./atan":451,"./atan2":452,"./atanh":453,"./cos":454,"./cosh":455,"./cot":456,"./coth":457,"./csc":458,"./csch":459,"./sec":461,"./sech":462,"./sin":463,"./sinh":464,"./tan":465,"./tanh":466}],461:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2);      // returns number -2.4029979617223822
   *    1 / math.cos(2);  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
  var sec = typed('sec', {
    'number': function (x) {
      return 1 / Math.cos(x);
    },

    'Complex': function (x) {
      return x.sec();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x.cos());
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function sec is no angle');
      }
      return sec(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, sec);
    }
  });

  sec.toTex = {1: '\\sec\\left(${args[0]}\\right)'};

  return sec;
}

exports.name = 'sec';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],462:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5);       // returns 0.886818883970074
   *    1 / math.cosh(0.5);   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
  var sech = typed('sech', {
    'number': _sech,

    'Complex': function (x) {
      return x.sech();
    },

    'BigNumber': function (x) {
      return new type.BigNumber(1).div(x.cosh());
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function sech is no angle');
      }
      return sech(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, sech);
    }
  });

  sech.toTex = {1: '\\mathrm{sech}\\left(${args[0]}\\right)'};

  return sech;
}

/**
 * Calculate the hyperbolic secant of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
function _sech(x) {
  return 2 / (Math.exp(x) + Math.exp(-x));
}

exports.name = 'sech';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],463:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2);                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'));   // returns number 1
   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5
   *
   *    var angle = 0.2;
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
  var sin = typed('sin', {
    'number': Math.sin,

    'Complex': function (x) {
      return x.sin();
    },

    'BigNumber': function (x) {
      return x.sin();
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function sin is no angle');
      }
      return sin(x.value);
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sin(0) = 0
      return deepMap(x, sin, true);
    }
  });

  sin.toTex = {1: '\\sin\\left(${args[0]}\\right)'};

  return sin;
}

exports.name = 'sin';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],464:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5);       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
  var sinh = typed('sinh', {
    'number': _sinh,

    'Complex': function (x) {
      return x.sinh();
    },

    'BigNumber': function (x) {
      return x.sinh();
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function sinh is no angle');
      }
      return sinh(x.value);
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sinh(0) = 0
      return deepMap(x, sinh, true);
    }
  });

  sinh.toTex = {1: '\\sinh\\left(${args[0]}\\right)'};

  return sinh;
}

/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
var _sinh = Math.sinh || function (x) {
  return (Math.exp(x) - Math.exp(-x)) / 2;
};

exports.name = 'sinh';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],465:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5);                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4);            // returns number 1
   *    math.tan(math.unit(45, 'deg'));   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
  var tan = typed('tan', {
    'number': Math.tan,

    'Complex': function (x) {
        return x.tan();
    },

    'BigNumber': function (x) {
      return x.tan();
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function tan is no angle');
      }
      return tan(x.value);
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since tan(0) = 0
      return deepMap(x, tan, true);
    }
  });

  tan.toTex = {1: '\\tan\\left(${args[0]}\\right)'};

  return tan;
}

exports.name = 'tan';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],466:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5);                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974
   *    1 / math.coth(0.5);               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
  var tanh = typed('tanh', {
    'number': _tanh,

    'Complex': function (x) {
        return x.tanh();
    },

    'BigNumber': function (x) {
      return x.tanh();
    },

    'Unit': function (x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError ('Unit in function tanh is no angle');
      }
      return tanh(x.value);
    },

    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since tanh(0) = 0
      return deepMap(x, tanh, true);
    }
  });

  tanh.toTex = {1: '\\tanh\\left(${args[0]}\\right)'};

  return tanh;
}

/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 * @private
 */
var _tanh = Math.tanh || function (x) {
  var e = Math.exp(2 * x);
  return (e - 1) / (e + 1);
};

exports.name = 'tanh';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],467:[function(require,module,exports){
module.exports = [
  require('./to')
];
},{"./to":468}],468:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));

  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */
  var to = typed('to', {

    'Unit, Unit | string': function (x, unit) {
      return x.to(unit);
    },

    'Matrix, Matrix': function (x, y) {
      // SparseMatrix does not support Units
      return algorithm13(x, y, to);
    },

    'Array, Array': function (x, y) {
      // use matrix implementation
      return to(matrix(x), matrix(y)).valueOf();
    },

    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return to(matrix(x), y);
    },

    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return to(x, matrix(y));
    },

    'Matrix, any': function (x, y) {
      // SparseMatrix does not support Units
      return algorithm14(x, y, to, false);
    },

    'any, Matrix': function (x, y) {
      // SparseMatrix does not support Units
      return algorithm14(y, x, to, true);
    },

    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, to, false).valueOf();
    },

    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, to, true).valueOf();
    }
  });

  to.toTex = {
    2: '\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\right)'
  };

  return to;
}

exports.name = 'to';
exports.factory = factory;

},{"../../type/matrix/function/matrix":505,"../../type/matrix/utils/algorithm13":520,"../../type/matrix/utils/algorithm14":521,"../../utils/latex":556}],469:[function(require,module,exports){
'use strict';

var object= require('../../utils/object');

function factory (type, config, load, typed) {
  /**
   * Clone an object.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5);                   // returns number 3.5
   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world");         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
  var clone = typed('clone', {
    'any': object.clone
  });

  clone.toTex = undefined; // use default template

  return clone;
}

exports.name = 'clone';
exports.factory = factory;

},{"../../utils/object":558}],470:[function(require,module,exports){
module.exports = [
  require('./clone'),
  require('./isInteger'),
  require('./isNegative'),
  require('./isNumeric'),
  require('./isPositive'),
  require('./isPrime'),
  require('./isZero'),
  require('./isNaN'),
  require('./typeof')
];

},{"./clone":469,"./isInteger":471,"./isNaN":472,"./isNegative":473,"./isNumeric":474,"./isPositive":475,"./isPrime":476,"./isZero":477,"./typeof":478}],471:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var number = require('../../utils/number');

function factory (type, config, load, typed) {
  /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2);                     // returns true
   *    math.isInteger(0);                     // returns true
   *    math.isInteger(0.5);                   // returns false
   *    math.isInteger(math.bignumber(500));   // returns true
   *    math.isInteger(math.fraction(4));      // returns true
   *    math.isInteger('3');                   // returns true
   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i');   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
  var isInteger = typed('isInteger', {
    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?

    'BigNumber': function (x) {
      return x.isInt();
    },

    'Fraction': function (x) {
      return x.d === 1 && isFinite(x.n);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, isInteger);
    }
  });

  return isInteger;
}

exports.name = 'isInteger';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],472:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var number = require('../../utils/number');

function factory (type, config, load, typed) {
  /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3);                     // returns false
   *    math.isNaN(NaN);                   // returns true
   *    math.isNaN(0);                     // returns false
   *    math.isNaN(math.bignumber(NaN));   // returns true
   *    math.isNaN(math.bignumber(0));     // returns false
   *    math.isNaN(math.fraction(-2, 5));  // returns false
   *    math.isNaN('-2');                  // returns false
   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
  var isNaN = typed('isNaN', {
    'number': function (x) {
      return Number.isNaN(x);
    },

    'BigNumber': function (x) {
      return x.isNaN();
    },

    'Fraction': function (x) {
      return false;
    },

    'Complex': function (x) {
      return x.isNaN();
    },

    'Unit': function (x) {
      return Number.isNaN(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, Number.isNaN);
    }
  });

  return isNaN;
}

exports.name = 'isNaN';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],473:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var number = require('../../utils/number');

function factory (type, config, load, typed) {
  /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3);                     // returns false
   *    math.isNegative(-2);                    // returns true
   *    math.isNegative(0);                     // returns false
   *    math.isNegative(-0);                    // returns false
   *    math.isNegative(math.bignumber(2));     // returns false
   *    math.isNegative(math.fraction(-2, 5));  // returns true
   *    math.isNegative('-2');                  // returns true
   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isNegative = typed('isNegative', {
    'number': function (x) {
      return x < 0;
    },

    'BigNumber': function (x) {
      return x.isNeg() && !x.isZero() && !x.isNaN();
    },

    'Fraction': function (x) {
      return x.s < 0; // It's enough to decide on the sign
    },

    'Unit': function (x) {
      return isNegative(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, isNegative);
    }
  });

  return isNegative;
}

exports.name = 'isNegative';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],474:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var number = require('../../utils/number');

function factory (type, config, load, typed) {
  /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2);                     // returns true
   *    math.isNumeric(0);                     // returns true
   *    math.isNumeric(math.bignumber(500));   // returns true
   *    math.isNumeric(math.fraction(4));      // returns true
   *    math.isNumeric(math.complex('2-4i');   // returns false
   *    math.isNumeric('3');                   // returns false
   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  var isNumeric = typed('isNumeric', {
    'number | BigNumber | Fraction | boolean': function () {
      return true;
    },

    'Complex | Unit | string': function () {
      return false;
    },

    'Array | Matrix': function (x) {
      return deepMap(x, isNumeric);
    }
  });

  return isNumeric;
}

exports.name = 'isNumeric';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],475:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var number = require('../../utils/number');

function factory (type, config, load, typed) {
  /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3);                     // returns true
   *    math.isPositive(-2);                    // returns false
   *    math.isPositive(0);                     // returns false
   *    math.isPositive(-0);                    // returns false
   *    math.isPositive(0.5);                   // returns true
   *    math.isPositive(math.bignumber(2));     // returns true
   *    math.isPositive(math.fraction(-2, 5));  // returns false
   *    math.isPositive(math.fraction(1,3));    // returns false
   *    math.isPositive('2');                   // returns true
   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isPositive = typed('isPositive', {
    'number': function (x) {
      return x > 0;
    },

    'BigNumber': function (x) {
      return !x.isNeg() && !x.isZero() && !x.isNaN();
    },

    'Fraction': function (x) {
      return x.s > 0 && x.n > 0;
    },

    'Unit': function (x) {
      return isPositive(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, isPositive);
    }
  });

  return isPositive;
}

exports.name = 'isPositive';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],476:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');


function factory (type, config, load, typed) {
  /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3);                     // returns true
   *    math.isPrime(-2);                    // returns false
   *    math.isPrime(0);                     // returns false
   *    math.isPrime(-0);                    // returns false
   *    math.isPrime(0.5);                   // returns false
   *    math.isPrime('2');                   // returns true
   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isPrime = typed('isPrime', {
    'number': function (x) {
      if (x < 2){
        return false;
      }
      if (x == 2){
        return true;
      }
      if (x % 2 == 0){ 
        return false;
      }
      for (var i = 3; i * i <= x; i += 2){
        if (x % i == 0){
          return false;
        }
      }
      return true;
    },

    'BigNumber': function (x) {
      if (x.lt(2)){
        return false;
      }
      if (x.equals(2)){
        return true;
      }
      if (x.mod(2).isZero()){
        return false;
      }
      for(var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)){
        if (x.mod(i).isZero()){
          return false;
        }
      }
      return true;
    },

    'Array | Matrix': function (x) {
      return deepMap(x, isPrime);
    }
  });

  return isPrime;
}

exports.name = 'isPrime';
exports.factory = factory;

},{"../../utils/collection/deepMap":547}],477:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');
var number = require('../../utils/number');

function factory (type, config, load, typed) {
  /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0);                     // returns true
   *    math.isZero(2);                     // returns false
   *    math.isZero(0.5);                   // returns false
   *    math.isZero(math.bignumber(0));     // returns true
   *    math.isZero(math.fraction(0));      // returns true
   *    math.isZero(math.fraction(1,3));    // returns false
   *    math.isZero(math.complex('2 - 4i'); // returns false
   *    math.isZero(math.complex('0i');     // returns true
   *    math.isZero('0');                   // returns true
   *    math.isZero('2');                   // returns false
   *    math.isZero([2, 0, -3]');           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isZero = typed('isZero', {
    'number': function (x) {
      return x === 0;
    },

    'BigNumber': function (x) {
      return x.isZero();
    },

    'Complex': function (x) {
      return x.re === 0 && x.im === 0;
    },

    'Fraction': function (x) {
      return x.d === 1 && x.n === 0;
    },

    'Unit': function (x) {
      return isZero(x.value);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, isZero);
    }
  });

  return isZero;
}

exports.name = 'isZero';
exports.factory = factory;

},{"../../utils/collection/deepMap":547,"../../utils/number":557}],478:[function(require,module,exports){
'use strict';

var types = require('../../utils/types');

function factory (type, config, load, typed) {
  /**
   * Determine the type of a variable.
   *
   * Function `typeof` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeof(null)`
   * number                 | `'number'`    | `math.typeof(3.5)`
   * boolean                | `'boolean'`   | `math.typeof (true)`
   * string                 | `'string'`    | `math.typeof ('hello world')`
   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeof (new Date())`
   * Function               | `'Function'`  | `math.typeof (function () {})`
   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`
   * undefined              | `'undefined'` | `math.typeof(undefined)`
   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`
   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`
   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`
   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`
   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`
   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`
   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`
   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`
   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`
   *
   * Syntax:
   *
   *    math.typeof(x)
   *
   * Examples:
   *
   *    math.typeof(3.5);                     // returns 'number'
   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'
   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'
   *    math.typeof('hello world');           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
  var _typeof = typed('_typeof', {
    'any': function (x) {
      // JavaScript types
      var t = types.type(x);

      // math.js types
      if (t === 'Object') {
        if (type.isBigNumber(x)) return 'BigNumber';
        if (type.isComplex(x))   return 'Complex';
        if (type.isFraction(x))  return 'Fraction';
        if (type.isMatrix(x))    return 'Matrix';
        if (type.isUnit(x))      return 'Unit';
        if (type.isIndex(x))     return 'Index';
        if (type.isRange(x))     return 'Range';
        if (type.isChain(x))     return 'Chain';
        if (type.isHelp(x))      return 'Help';
      }

      return t;
    }
  });

  _typeof.toTex = undefined; // use default template

  return _typeof;
}

exports.name = 'typeof';
exports.factory = factory;

},{"../../utils/types":560}],479:[function(require,module,exports){
module.exports = [
  require('./type'),        // data types (Matrix, Complex, Unit, ...)
  require('./constants'),   // constants
  require('./expression'),  // expression parsing
  require('./function'),    // functions
  require('./json'),        // serialization utility (math.json.reviver)
  require('./error')        // errors
];

},{"./constants":21,"./error":29,"./expression":233,"./function":359,"./json":480,"./type":495}],480:[function(require,module,exports){
module.exports = [
  require('./reviver')
];

},{"./reviver":481}],481:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  /**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */
  return function reviver(key, value) {
    var constructor = type[value && value.mathjs];
    if (constructor && typeof constructor.fromJSON === 'function') {
      return constructor.fromJSON(value);
    }

    return value;
  }
}

exports.name = 'reviver';
exports.path = 'json';
exports.factory = factory;

},{}],482:[function(require,module,exports){
var Decimal = require('decimal.js/decimal.js'); // make sure to pick the es5 version

function factory (type, config, load, typed, math) {
  var BigNumber = Decimal.clone({precision: config.precision});

  /**
   * Attach type information
   */
  BigNumber.prototype.type = 'BigNumber';
  BigNumber.prototype.isBigNumber = true;

  /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */
  BigNumber.prototype.toJSON = function () {
    return {
      mathjs: 'BigNumber',
      value: this.toString()
    };
  };

  /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */
  BigNumber.fromJSON = function (json) {
    return new BigNumber(json.value);
  };

  // listen for changed in the configuration, automatically apply changed precision
  math.on('config', function (curr, prev) {
    if (curr.precision !== prev.precision) {
      BigNumber.config({ precision: curr.precision });
    }
  });

  return BigNumber;
}

exports.name = 'BigNumber';
exports.path = 'type';
exports.factory = factory;
exports.math = true; // request access to the math namespace
},{"decimal.js/decimal.js":6}],483:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2;                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3
   *
   *
   *    7.2e500;                                    // returns number Infinity
   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
  var bignumber = typed('bignumber', {
    '': function () {
      return new type.BigNumber(0);
    },

    'number': function (x) {
      // convert to string to prevent errors in case of >15 digits
      return new type.BigNumber(x + '');
    },

    'string': function (x) {
      return new type.BigNumber(x);
    },

    'BigNumber': function (x) {
      // we assume a BigNumber is immutable
      return x;
    },

    'Fraction': function (x) {
      return new type.BigNumber(x.n).div(x.d);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, bignumber);
    }
  });

  bignumber.toTex = {
    0: '0',
    1: '\\left(${args[0]}\\right)'
  };

  return bignumber;
}

exports.name = 'bignumber';
exports.factory = factory;

},{"../../../utils/collection/deepMap":547}],484:[function(require,module,exports){
module.exports = [
  // type
  require('./BigNumber'),

  // construction function
  require('./function/bignumber')
];

},{"./BigNumber":482,"./function/bignumber":483}],485:[function(require,module,exports){
'use strict';

var deepMap = require('./../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0);     // returns false
   *    math.boolean(1);     // returns true
   *    math.boolean(-3);     // returns true
   *    math.boolean('true');     // returns true
   *    math.boolean('false');     // returns false
   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */
  var bool = typed('bool', {
    '': function () {
      return false;
    },

    'boolean': function (x) {
      return x;
    },

    'number': function (x) {
      return !!x;
    },

    'BigNumber': function (x) {
      return !x.isZero();
    },

    'string': function (x) {
      // try case insensitive
      var lcase = x.toLowerCase();
      if (lcase === 'true') {
        return true;
      }
      else if (lcase === 'false') {
        return false;
      }

      // test whether value is a valid number
      var num = Number(x);
      if (x != '' && !isNaN(num)) {
        return !!num;
      }

      throw new Error('Cannot convert "' + x + '" to a boolean');
    },

    'Array | Matrix': function (x) {
      return deepMap(x, bool);
    }
  });

  return bool;
}

exports.name = 'boolean';
exports.factory = factory;

},{"./../utils/collection/deepMap":547}],486:[function(require,module,exports){
'use strict';

var format = require('../../utils/string').format;
var lazy = require('../../utils/object').lazy;

function factory (type, config, load, typed, math) {
  /**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */
  function Chain (value) {
    if (!(this instanceof Chain)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (type.isChain(value)) {
      this.value = value.value;
    }
    else {
      this.value = value;
    }
  }

  /**
   * Attach type information
   */
  Chain.prototype.type = 'Chain';
  Chain.prototype.isChain = true;

  /**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */
  Chain.prototype.done = function () {
    return this.value;
  };

  /**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */
  Chain.prototype.valueOf = function () {
    return this.value;
  };

  /**
   * Get a string representation of the value in the chain
   * @returns {string}
   */
  Chain.prototype.toString = function () {
    return format(this.value);
  };

  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */
  function createProxy(name, fn) {
    if (typeof fn === 'function') {
      Chain.prototype[name] = chainify(fn);
    }
  }

  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */
  function createLazyProxy(name, resolver) {
    lazy(Chain.prototype, name, function outerResolver() {
      var fn = resolver();
      if (typeof fn === 'function') {
        return chainify(fn);
      }

      return undefined; // if not a function, ignore
    });
  }

  /**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */
  function chainify (fn) {
    return function () {
      var args = [this.value];  // `this` will be the context of a Chain instance
      for (var i = 0; i < arguments.length; i++) {
        args[i + 1] = arguments[i];
      }

      return new Chain(fn.apply(fn, args));
    }
  }

  /**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...});
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */
  Chain.createProxy = function (arg0, arg1) {
    if (typeof arg0 === 'string') {
      // createProxy(name, value)
      createProxy(arg0, arg1);
    }
    else {
      // createProxy(values)
      for (var prop in arg0) {
        if (arg0.hasOwnProperty(prop)) {
          createProxy(prop, arg0[prop]);
        }
      }
    }
  };

  // create proxy for everything that is in math.js
  Chain.createProxy(math);

  // register on the import event, automatically add a proxy for every imported function.
  math.on('import', function (name, resolver, path) {
    if (path === undefined) {
      // an imported function (not a data type or something special)
      createLazyProxy(name, resolver);
    }
  });

  return Chain;
}

exports.name = 'Chain';
exports.path = 'type';
exports.factory = factory;
exports.math = true;  // require providing the math namespace as 5th argument
exports.lazy = false; // we need to register a listener on the import events, so no lazy loading

},{"../../utils/object":558,"../../utils/string":559}],487:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  /**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done();     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done();     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.type.Chain} The created chain
   */
  return typed('chain', {
    '': function() {
      return new type.Chain();
    },

    'any': function(value) {
      return new type.Chain(value);
    }
  });
}

exports.name = 'chain';
exports.factory = factory;

},{}],488:[function(require,module,exports){
module.exports = [
  // type
  require('./Chain'),

  // construction function
  require('./function/chain')
];

},{"./Chain":486,"./function/chain":487}],489:[function(require,module,exports){
var Complex = require('complex.js');
var format = require('../../utils/number').format;
var isNumber = require('../../utils/number').isNumber;

function factory (type, config, load, typed, math) {

  /**
   * Attach type information
   */
  Complex.prototype.type = 'Complex';
  Complex.prototype.isComplex = true;


  /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */
  Complex.prototype.toJSON = function () {
    return {
      mathjs: 'Complex',
      re: this.re,
      im: this.im
    };
  };

  /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */
  Complex.prototype.toPolar = function () {
    return {
      r: this.abs(),
      phi: this.arg()
    };
  };

  /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */
  Complex.prototype.format = function (options) {
    var str = '';
    var im = this.im;
    var re = this.re;
    var strRe = format(this.re, options);
    var strIm = format(this.im, options);

    // round either re or im when smaller than the configured precision
    var precision = isNumber(options) ? options : options ? options.precision : null;
    if (precision !== null) {
      var epsilon = Math.pow(10, -precision);
      if (Math.abs(re / im) < epsilon) {
        re = 0;
      }
      if (Math.abs(im / re) < epsilon) {
        im = 0;
      }
    }

    if (im == 0) {
      // real value
      str = strRe;
    } else if (re == 0) {
      // purely complex value
      if (im == 1) {
        str = 'i';
      } else if (im == -1) {
        str = '-i';
      } else {
        str = strIm + 'i';
      }
    } else {
      // complex value
      if (im < 0) {
        if (im == -1) {
          str = strRe + ' - i';
        } else {
          str = strRe + ' - ' + strIm.substring(1) + 'i';
        }
      } else {
        if (im == 1) {
          str = strRe + ' + i';
        } else {
          str = strRe + ' + ' + strIm + 'i';
        }
      }
    }
    return str;
  };

  /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */
  Complex.fromPolar = function (args) {
    switch (arguments.length) {
      case 1:
        var arg = arguments[0];
        if (typeof arg === 'object') {
          return Complex(arg);
        }
        throw new TypeError('Input has to be an object with r and phi keys.');

      case 2:
        var r = arguments[0],
            phi = arguments[1];
        if (isNumber(r)) {
          if (type.isUnit(phi) && phi.hasBase('ANGLE')) {
            // convert unit to a number in radians
            phi = phi.toNumber('rad');
          }

          if (isNumber(phi)) {
            return new Complex({r: r, phi: phi});
          }

          throw new TypeError('Phi is not a number nor an angle unit.');
        } else {
          throw new TypeError('Radius r is not a number.');
        }

      default:
        throw new SyntaxError('Wrong number of arguments in function fromPolar');
    }
  };


  Complex.prototype.valueOf = Complex.prototype.toString;

  /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */
  Complex.fromJSON = function (json) {
    return new Complex(json);
  };

  // apply the current epsilon
  Complex.EPSILON = config.epsilon;

  // listen for changed in the configuration, automatically apply changed epsilon
  math.on('config', function (curr, prev) {
    if (curr.epsilon !== prev.epsilon) {
      Complex.EPSILON = curr.epsilon;
    }
  });

  /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */
  Complex.compare = function (a, b) {
    if (a.re > b.re) { return 1; }
    if (a.re < b.re) { return -1; }

    if (a.im > b.im) { return 1; }
    if (a.im < b.im) { return -1; }

    return 0;
  }

  return Complex;
}

exports.name = 'Complex';
exports.path = 'type';
exports.factory = factory;
exports.math = true; // request access to the math namespace

},{"../../utils/number":557,"complex.js":4}],490:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  var latex = require('../../../utils/latex');

  /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i
   *    a.re = 5;                        // a = Complex 5 - 4i
   *    var i = a.im;                    // Number -4;
   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i
   *    var c = math.complex();          // Complex 0 + 0i
   *    var d = math.add(a, b);          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */
  var complex = typed('complex', {
    '': function () {
      return type.Complex.ZERO;
    },

    'number': function (x) {
      return new type.Complex(x, 0);
    },

    'number, number': function (re, im) {
      return new type.Complex(re, im);
    },

    // TODO: this signature should be redundant
    'BigNumber, BigNumber': function (re, im) {
      return new type.Complex(re.toNumber(), im.toNumber());
    },

    'Complex': function (x) {
      return x.clone();
    },

    'string': function (x) {
      return type.Complex(x); // for example '2 + 3i'
    },

    'Object': function (x) {
      if('re' in x && 'im' in x) {
        return new type.Complex(x.re, x.im);
      }

      if ('r' in x && 'phi' in x) {
        return new type.Complex(x);
      }

      throw new Error('Expected object with either properties re and im, or properties r and phi.');
    },

    'Array | Matrix': function (x) {
      return deepMap(x, complex);
    }
  });

  complex.toTex = {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)+'
      + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
  };

  return complex;
}

exports.name = 'complex';
exports.factory = factory;

},{"../../../utils/collection/deepMap":547,"../../../utils/latex":556}],491:[function(require,module,exports){
module.exports = [
  // type
  require('./Complex'),

  // construction function
  require('./function/complex')
];

},{"./Complex":489,"./function/complex":490}],492:[function(require,module,exports){
var Fraction = require('fraction.js');

/**
 * Attach type information
 */
Fraction.prototype.type = 'Fraction';
Fraction.prototype.isFraction = true;

/**
 * Get a JSON representation of a Fraction containing type information
 * @returns {Object} Returns a JSON object structured as:
 *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
 */
Fraction.prototype.toJSON = function () {
  return {
    mathjs: 'Fraction',
    n: this.s * this.n,
    d: this.d
  };
};

/**
 * Instantiate a Fraction from a JSON object
 * @param {Object} json  a JSON object structured as:
 *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
 * @return {BigNumber}
 */
Fraction.fromJSON = function (json) {
  return new Fraction(json);
};


function factory (type, config, load, typed) {
  return Fraction;
}

exports.name = 'Fraction';
exports.path = 'type';
exports.factory = factory;

},{"fraction.js":12}],493:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3);
   *     math.fraction('2/3');
   *     math.fraction({n: 2, d: 3});
   *     math.fraction([0.2, 0.25, 1.25]);
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
  var fraction = typed('fraction', {
    'number': function (x) {
      if (!isFinite(x) || isNaN(x)) {
        throw new Error(x + ' cannot be represented as a fraction');
      }

      return new type.Fraction(x);
    },

    'string': function (x) {
      return new type.Fraction(x);
    },

    'number, number': function (numerator, denominator) {
      return new type.Fraction(numerator, denominator);
    },

    'BigNumber': function (x) {
      return new type.Fraction(x.toString());
    },

    'Fraction': function (x) {
      return x; // fractions are immutable
    },

    'Object': function (x) {
      return new type.Fraction(x);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, fraction);
    }
  });

  return fraction;
}

exports.name = 'fraction';
exports.factory = factory;

},{"../../../utils/collection/deepMap":547}],494:[function(require,module,exports){
module.exports = [
  // type
  require('./Fraction'),

  // construction function
  require('./function/fraction')
];

},{"./Fraction":492,"./function/fraction":493}],495:[function(require,module,exports){
module.exports = [
  require('./bignumber'),
  require('./boolean'),
  require('./chain'),
  require('./complex'),
  require('./fraction'),
  require('./matrix'),
  require('./number'),
  require('./resultset'),
  require('./string'),
  require('./unit')
];

},{"./bignumber":484,"./boolean":485,"./chain":488,"./complex":491,"./fraction":494,"./matrix":507,"./number":522,"./resultset":524,"./string":525,"./unit":530}],496:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');
var DimensionError = require('../../error/DimensionError');
var getSafeProperty = require('../../utils/customs').getSafeProperty;
var setSafeProperty = require('../../utils/customs').setSafeProperty;

var string = util.string;
var array = util.array;
var object = util.object;
var number = util.number;

var isArray = Array.isArray;
var isNumber = number.isNumber;
var isInteger = number.isInteger;
var isString = string.isString;

var validateIndex = array.validateIndex;

function factory (type, config, load, typed) {
  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)

  /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   */
  function DenseMatrix(data, datatype) {
    if (!(this instanceof DenseMatrix))
      throw new SyntaxError('Constructor must be called with the new operator');
    if (datatype && !isString(datatype))
      throw new Error('Invalid datatype: ' + datatype);

    if (type.isMatrix(data)) {
      // check data is a DenseMatrix
      if (data.type === 'DenseMatrix') {
        // clone data & size
        this._data = object.clone(data._data);
        this._size = object.clone(data._size);
        this._datatype = datatype || data._datatype;
      }
      else {
        // build data from existing matrix
        this._data = data.toArray();
        this._size = data.size();
        this._datatype = datatype || data._datatype;
      }
    }
    else if (data && isArray(data.data) && isArray(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    }
    else if (isArray(data)) {
      // replace nested Matrices with Arrays
      this._data = preprocess(data);
      // get the dimensions of the array
      this._size = array.size(this._data);
      // verify the dimensions of the array, TODO: compute size while processing array
      array.validate(this._data, this._size);
      // data type unknown
      this._datatype = datatype;
    }
    else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
    }
    else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
    }
  }
  
  DenseMatrix.prototype = new Matrix();

  /**
   * Attach type information
   */
  DenseMatrix.prototype.type = 'DenseMatrix';
  DenseMatrix.prototype.isDenseMatrix = true;

  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */
  DenseMatrix.prototype.storage = function () {
    return 'dense';
  };

  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */
  DenseMatrix.prototype.datatype = function () {
    return this._datatype;
  };

  /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */
  DenseMatrix.prototype.create = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };

  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | DenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    switch (arguments.length) {
      case 1:
        return _get(this, index);

        // intentional fall through
      case 2:
      case 3:
        return _set(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  
  /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */
  DenseMatrix.prototype.get = function (index) {
    if (!isArray(index))
      throw new TypeError('Array expected');
    if (index.length != this._size.length)
      throw new DimensionError(index.length, this._size.length);

    // check index
    for (var x = 0; x < index.length; x++)
      validateIndex(index[x], this._size[x]);

    var data = this._data;
    for (var i = 0, ii = index.length; i < ii; i++) {
      var index_i = index[i];
      validateIndex(index_i, data.length);
      data = data[index_i];
    }

    return data;
  };
  
  /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */
  DenseMatrix.prototype.set = function (index, value, defaultValue) {
    if (!isArray(index))
      throw new TypeError('Array expected');
    if (index.length < this._size.length)
      throw new DimensionError(index.length, this._size.length, '<');

    var i, ii, index_i;

    // enlarge matrix when needed
    var size = index.map(function (i) {
      return i + 1;
    });
    _fit(this, size, defaultValue);

    // traverse over the dimensions
    var data = this._data;
    for (i = 0, ii = index.length - 1; i < ii; i++) {
      index_i = index[i];
      validateIndex(index_i, data.length);
      data = data[index_i];
    }

    // set new value
    index_i = index[index.length - 1];
    validateIndex(index_i, data.length);
    data[index_i] = value;

    return this;
  };
  
  /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */
  function _get (matrix, index) {
    if (!type.isIndex(index)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = index.isScalar();
    if (isScalar) {
      // return a scalar
      return matrix.get(index.min());
    }
    else {
      // validate dimensions
      var size = index.size();
      if (size.length != matrix._size.length) {
        throw new DimensionError(size.length, matrix._size.length);
      }

      // validate if any of the ranges in the index is out of range
      var min = index.min();
      var max = index.max();
      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
        validateIndex(min[i], matrix._size[i]);
        validateIndex(max[i], matrix._size[i]);
      }

      // retrieve submatrix
      // TODO: more efficient when creating an empty matrix and setting _data and _size manually
      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
    }
  }
  
  /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */
  function _getSubmatrix (data, index, dims, dim) {
    var last = (dim === dims - 1);
    var range = index.dimension(dim);

    if (last) {
      return range.map(function (i) {
        validateIndex(i, data.length);
        return data[i];
      }).valueOf();
    }
    else {
      return range.map(function (i) {
        validateIndex(i, data.length);
        var child = data[i];
        return _getSubmatrix(child, index, dims, dim + 1);
      }).valueOf();
    }
  }
  
  /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */
  function _set (matrix, index, submatrix, defaultValue) {
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    }

    // get index size and check whether the index contains a single value
    var iSize = index.size(),
        isScalar = index.isScalar();

    // calculate the size of the submatrix, and convert it into an Array if needed
    var sSize;
    if (type.isMatrix(submatrix)) {
      sSize = submatrix.size();
      submatrix = submatrix.valueOf();
    }
    else {
      sSize = array.size(submatrix);
    }

    if (isScalar) {
      // set a scalar

      // check whether submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }

      matrix.set(index.min(), submatrix, defaultValue);
    }
    else {
      // set a submatrix

      // validate dimensions
      if (iSize.length < matrix._size.length) {
        throw new DimensionError(iSize.length, matrix._size.length, '<');
      }

      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;
        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }
        while (iSize[i] === 1) {
          outer++;
          i++;
        }

        // unsqueeze both outer and inner dimensions
        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
      }

      // check whether the size of the submatrix matches the index size
      if (!object.deepEqual(iSize, sSize)) {
        throw new DimensionError(iSize, sSize, '>');
      }

      // enlarge matrix when needed
      var size = index.max().map(function (i) {
        return i + 1;
      });
      _fit(matrix, size, defaultValue);

      // insert the sub matrix
      var dims = iSize.length,
          dim = 0;
      _setSubmatrix (matrix._data, index, submatrix, dims, dim);
    }

    return matrix;
  }
  
  /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */
  function _setSubmatrix (data, index, submatrix, dims, dim) {
    var last = (dim === dims - 1),
        range = index.dimension(dim);

    if (last) {
      range.forEach(function (dataIndex, subIndex) {
        validateIndex(dataIndex);
        data[dataIndex] = submatrix[subIndex[0]];
      });
    }
    else {
      range.forEach(function (dataIndex, subIndex) {
        validateIndex(dataIndex);
        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
      });
    }
  }
  
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!isArray(size))
      throw new TypeError('Array expected');

    // matrix to resize
    var m = copy ? this.clone() : this;
    // resize matrix
    return _resize(m, size, defaultValue);
  };
  
  var _resize = function (matrix, size, defaultValue) {
    // check size
    if (size.length === 0) {
      // first value in matrix
      var v = matrix._data;
      // go deep
      while (isArray(v)) {
        v = v[0];
      }
      return v;
    }
    // resize matrix
    matrix._size = size.slice(0); // copy the array
    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
    // return matrix
    return matrix;
  };

  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */
  DenseMatrix.prototype.reshape = function (size, copy) {
    var m = copy ? this.clone() : this;

    m._data = array.reshape(m._data, size);
    m._size = size.slice(0);
    return m;
  };
  
  /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */
  function _fit(matrix, size, defaultValue) {
    var newSize = matrix._size.slice(0), // copy the array
        changed = false;

    // add dimensions when needed
    while (newSize.length < size.length) {
      newSize.push(0);
      changed = true;
    }

    // enlarge size when needed
    for (var i = 0, ii = size.length; i < ii; i++) {
      if (size[i] > newSize[i]) {
        newSize[i] = size[i];
        changed = true;
      }
    }

    if (changed) {
      // resize only when size is changed
      _resize(matrix, newSize, defaultValue);
    }
  }
  
  /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */
  DenseMatrix.prototype.clone = function () {
    var m = new DenseMatrix({
      data: object.clone(this._data),
      size: object.clone(this._size),
      datatype: this._datatype
    });
    return m;
  };
  
  /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */
  DenseMatrix.prototype.size = function() {
    return this._size.slice(0); // return a clone of _size
  };
  
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */
  DenseMatrix.prototype.map = function (callback) {
    // matrix instance
    var me = this;
    var recurse = function (value, index) {
      if (isArray(value)) {
        return value.map(function (child, i) {
          return recurse(child, index.concat(i));
        });
      }
      else {
        return callback(value, index, me);
      }
    };
    // return dense format
    return new DenseMatrix({
      data: recurse(this._data, []),
      size: object.clone(this._size),
      datatype: this._datatype
    });
  };
  
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */
  DenseMatrix.prototype.forEach = function (callback) {
    // matrix instance
    var me = this;
    var recurse = function (value, index) {
      if (isArray(value)) {
        value.forEach(function (child, i) {
          recurse(child, index.concat(i));
        });
      }
      else {
        callback(value, index, me);
      }
    };
    recurse(this._data, []);
  };
  
  /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */
  DenseMatrix.prototype.toArray = function () {
    return object.clone(this._data);
  };
  
  /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */
  DenseMatrix.prototype.valueOf = function () {
    return this._data;
  };
  
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
  DenseMatrix.prototype.format = function (options) {
    return string.format(this._data, options);
  };
  
  /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */
  DenseMatrix.prototype.toString = function () {
    return string.format(this._data);
  };
  
  /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */
  DenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'DenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Array}                      The array vector with the diagonal values.
   */
  DenseMatrix.prototype.diagonal = function(k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k))
        k = k.toNumber();
      // is must be an integer
      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError ('The parameter k must be an integer number');
      }
    }
    else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0;

    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1];

    // number diagonal values
    var n = Math.min(rows - kSub, columns -  kSuper);
    
    // x is a matrix get diagonal from matrix
    var data = [];
    
    // loop rows
    for (var i = 0; i < n; i++) {
      data[i] = this._data[i + kSub][i + kSuper];
    }

    // create DenseMatrix
    return new DenseMatrix({
      data: data,
      size: [n],
      datatype: this._datatype
    });
  };
  
  /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                   The matrix size.
   * @param {number | Array} value          The values for the diagonal.
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]        The default value for non-diagonal
   *
   * @returns {DenseMatrix}
   */
  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!isArray(size))
      throw new TypeError('Array expected, size parameter');
    if (size.length !== 2)
      throw new Error('Only two dimensions matrix are supported');

    // map size & validate
    size = size.map(function (s) {
      // check it is a big number
      if (type.isBigNumber(s)) {
        // convert it
        s = s.toNumber();
      }
      // validate arguments
      if (!isNumber(s) || !isInteger(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      } 
      return s;
    });

    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k))
        k = k.toNumber();
      // is must be an integer
      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError ('The parameter k must be an integer number');
      }
    }
    else {
      // default value
      k = 0;
    }
    
    if (defaultValue && isString(datatype)) {
      // convert defaultValue to the same datatype
      defaultValue = typed.convert(defaultValue, datatype);
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0;
    
    // rows and columns
    var rows = size[0];
    var columns = size[1];

    // number of non-zero items
    var n = Math.min(rows - kSub, columns -  kSuper);

    // value extraction function
    var _value;

    // check value
    if (isArray(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      }
      // define function
      _value = function (i) {
        // return value @ i
        return value[i];
      };      
    }
    else if (type.isMatrix(value)) {
      // matrix size
      var ms = value.size();
      // validate matrix
      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      }
      // define function
      _value = function (i) {
        // return value @ i
        return value.get([i]);
      };
    }
    else {
      // define function
      _value = function () {
        // return value
        return value;
      };
    }
    
    // discover default value if needed
    if (!defaultValue) {
      // check first value in array
      defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;
    }

    // empty array
    var data = [];

    // check we need to resize array
    if (size.length > 0) {
      // resize array
      data = array.resize(data, size, defaultValue);
      // fill diagonal
      for (var d = 0; d < n; d++) {
        data[d + kSub][d + kSuper] = _value(d);
      }
    }
    
    // create DenseMatrix
    return new DenseMatrix({
      data: data,
      size: [rows, columns]
    });
  };

  /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */
  DenseMatrix.fromJSON = function (json) {
    return new DenseMatrix(json);
  };
  
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */
  DenseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
      throw new Error('Row index must be positive integers');
    }
    // check dimensions
    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }
    // validate index
    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[0]);

    // swap rows
    DenseMatrix._swapRows(i, j, this._data);
    // return current instance
    return this;
  };

  /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   */
  DenseMatrix._swapRows = function (i, j, data) {
    // swap values i <-> j
    var vi = data[i];
    data[i] = data[j];
    data[j] = vi;
  };

  /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */
  function preprocess(data) {
    for (var i = 0, ii = data.length; i < ii; i++) {
      var elem = data[i];
      if (isArray(elem)) {
        data[i] = preprocess(elem);
      }
      else if (elem && elem.isMatrix === true) {
        data[i] = preprocess(elem.valueOf());
      }
    }

    return data;
  }

  // register this type in the base class Matrix
  type.Matrix._storage.dense = DenseMatrix;
  type.Matrix._storage['default'] = DenseMatrix;

  // exports
  return DenseMatrix;
}

exports.name = 'DenseMatrix';
exports.path = 'type';
exports.factory = factory;
exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage

},{"../../error/DimensionError":27,"../../utils/customs":552,"../../utils/index":555,"./Matrix":499}],497:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  
  var smaller = load(require('../../function/relational/smaller'));
  var larger = load(require('../../function/relational/larger'));
  
  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  
  /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */
  function FibonacciHeap() {
    if (!(this instanceof FibonacciHeap))
      throw new SyntaxError('Constructor must be called with the new operator');

    // initialize fields
    this._minimum = null;
    this._size = 0;
  }

  /**
   * Attach type information
   */
  FibonacciHeap.prototype.type = 'FibonacciHeap';
  FibonacciHeap.prototype.isFibonacciHeap = true;

  /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */
  FibonacciHeap.prototype.insert = function (key, value) {
    // create node
    var node = {
      key: key,
      value: value,
      degree: 0
    };
    // check we have a node in the minimum
    if (this._minimum) {
      // minimum node
      var minimum = this._minimum;
      // update left & right of node
      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node;
      // update minimum node in heap if needed
      if (smaller(key, minimum.key)) {
        // node has a smaller key, use it as minimum
        this._minimum = node;
      }
    }
    else {
      // set left & right
      node.left = node;
      node.right = node;
      // this is the first node
      this._minimum = node;
    }
    // increment number of nodes in heap
    this._size++;
    // return node
    return node;
  };

  /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */
  FibonacciHeap.prototype.size = function () {
    return this._size;
  };

  /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */
  FibonacciHeap.prototype.clear = function () {
    this._minimum = null;
    this._size = 0;
  };

  /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */
  FibonacciHeap.prototype.isEmpty = function () {
    return this._size === 0;
  };
  
  /**
   * Extracts the node with minimum key from heap. Amortized running 
   * time: O(log n).
   * @memberof FibonacciHeap
   */
  FibonacciHeap.prototype.extractMinimum = function () {
    // node to remove
    var node = this._minimum;
    // check we have a minimum
    if (node === null)
      return node;
    // current minimum
    var minimum = this._minimum;
    // get number of children
    var numberOfChildren = node.degree;
    // pointer to the first child
    var x = node.child;
    // for each child of node do...
    while (numberOfChildren > 0) {
      // store node in right side
      var tempRight = x.right;
      // remove x from child list
      x.left.right = x.right;
      x.right.left = x.left;
      // add x to root list of heap
      x.left = minimum;
      x.right = minimum.right;
      minimum.right = x;
      x.right.left = x;
      // set Parent[x] to null
      x.parent = null;
      x = tempRight;
      numberOfChildren--;
    }
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left;
    // update minimum
    if (node == node.right) {
      // empty
      minimum = null;
    }
    else {
      // update minimum
      minimum = node.right;
      // we need to update the pointer to the root with minimum key
      minimum = _findMinimumNode(minimum, this._size);
    }
    // decrement size of heap
    this._size--;
    // update minimum
    this._minimum = minimum;
    // return node
    return node;
  };
  
  /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */
  FibonacciHeap.prototype.remove = function (node) {
    // decrease key value
    this._minimum = _decreaseKey(this._minimum, node, -1);
    // remove the smallest
    this.extractMinimum();
  };
  
  /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated. 
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */
  var _decreaseKey = function (minimum, node, key) {
    // set node key
    node.key = key;
    // get parent node
    var parent = node.parent;
    if (parent && smaller(node.key, parent.key)) {
      // remove node from parent
      _cut(minimum, node, parent);
      // remove all nodes from parent to the root parent
      _cascadingCut(minimum, parent);
    }
    // update minimum node if needed
    if (smaller(node.key, minimum.key))
      minimum = node;
    // return minimum
    return minimum;
  };
  
  /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */
  var _cut = function (minimum, node, parent) {
    // remove node from parent children and decrement Degree[parent]
    node.left.right = node.right;
    node.right.left = node.left;
    parent.degree--;
    // reset y.child if necessary
    if (parent.child == node)
      parent.child = node.right;
    // remove child if degree is 0
    if (parent.degree === 0)
      parent.child = null;
    // add node to root list of heap
    node.left = minimum;
    node.right = minimum.right;
    minimum.right = node;
    node.right.left = node;
    // set parent[node] to null
    node.parent = null;
    // set mark[node] to false
    node.mark = false;
  };
  
  /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */
  var _cascadingCut= function (minimum, node) {
    // store parent node
    var parent = node.parent;
    // if there's a parent...
    if (!parent)
      return;
    // if node is unmarked, set it marked
    if (!node.mark) {
      node.mark = true;
    }
    else {
      // it's marked, cut it from parent
      _cut(minimum, node, parent);
      // cut its parent as well
      _cascadingCut(parent);
    }
  };
  
  /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */
  var _linkNodes = function (node, parent) {
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left;
    // make node a Child of parent
    node.parent = parent;
    if (!parent.child) {
      parent.child = node;
      node.right = node;
      node.left = node;
    }
    else {
      node.left = parent.child;
      node.right = parent.child.right;
      parent.child.right = node;
      node.right.left = node;
    }
    // increase degree[parent]
    parent.degree++;
    // set mark[node] false
    node.mark = false;
  };
  
  var _findMinimumNode = function (minimum, size) {
    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
    // create list with initial capacity
    var array = new Array(arraySize);
    // find the number of root nodes.
    var numRoots = 0;
    var x = minimum;
    if (x) {
      numRoots++;
      x = x.right;
      while (x !== minimum) {
        numRoots++;
        x = x.right;
      }
    }
    // vars
    var y;
    // For each node in root list do...
    while (numRoots > 0) {
      // access this node's degree..
      var d = x.degree;
      // get next node
      var next = x.right;
      // check if there is a node already in array with the same degree
      while (true) {
        // get node with the same degree is any
        y = array[d];
        if (!y)
          break;
        // make one node with the same degree a child of the other, do this based on the key value.
        if (larger(x.key, y.key)) {
          var temp = y;
          y = x;
          x = temp;
        }
        // make y a child of x
        _linkNodes(y, x);
        // we have handled this degree, go to next one.
        array[d] = null;
        d++;
      }
      // save this node for later when we might encounter another of the same degree.
      array[d] = x;
      // move forward through list.
      x = next;
      numRoots--;
    }
    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].
    minimum = null;
    // loop nodes in array
    for (var i = 0; i < arraySize; i++) {
      // get current node
      y = array[i];
      if (!y)
        continue;
      // check if we have a linked list
      if (minimum) {
        // First remove node from root list.
        y.left.right = y.right;
        y.right.left = y.left;
        // now add to root list, again.
        y.left = minimum;
        y.right = minimum.right;
        minimum.right = y;
        y.right.left = y;
        // check if this is a new min.
        if (smaller(y.key, minimum.key))
          minimum = y;
      }
      else
        minimum = y;
    }
    return minimum;
  };
  
  return FibonacciHeap;
}

exports.name = 'FibonacciHeap';
exports.path = 'type';
exports.factory = factory;

},{"../../function/relational/larger":408,"../../function/relational/smaller":410}],498:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

var string = util.string;
var object = util.object;

var isArray = Array.isArray;
var isString = string.isString;

function factory (type, config, load) {

  var DenseMatrix = load(require('./DenseMatrix'));

  var smaller = load(require('../../function/relational/smaller'));

  function ImmutableDenseMatrix(data, datatype) {
    if (!(this instanceof ImmutableDenseMatrix))
      throw new SyntaxError('Constructor must be called with the new operator');
    if (datatype && !isString(datatype))
      throw new Error('Invalid datatype: ' + datatype);

    if (type.isMatrix(data) || isArray(data)) {
      // use DenseMatrix implementation
      var matrix = new DenseMatrix(data, datatype);
      // internal structures
      this._data = matrix._data;
      this._size = matrix._size;
      this._datatype = matrix._datatype;
      this._min = null;
      this._max = null;
    }
    else if (data && isArray(data.data) && isArray(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = data.datatype;
      this._min = typeof data.min !== 'undefined' ? data.min : null;
      this._max = typeof data.max !== 'undefined' ? data.max : null;
    }
    else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
    }
    else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
      this._min = null;
      this._max = null;
    }
  }

  ImmutableDenseMatrix.prototype = new DenseMatrix();

  /**
   * Attach type information
   */
  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;

  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
  ImmutableDenseMatrix.prototype.subset = function (index) {
    switch (arguments.length) {
      case 1:
        // use base implementation
        var m = DenseMatrix.prototype.subset.call(this, index);
        // check result is a matrix
        if (type.isMatrix(m)) {
          // return immutable matrix
          return new ImmutableDenseMatrix({
            data: m._data,
            size: m._size,
            datatype: m._datatype
          });
        }
        return m;
        
        // intentional fall through
      case 2:
      case 3:
        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };

  /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */
  ImmutableDenseMatrix.prototype.set = function () {
    throw new Error('Cannot invoke set on an Immutable Matrix instance');
  };

  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
  ImmutableDenseMatrix.prototype.resize = function () {
    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
  };

  /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */
  ImmutableDenseMatrix.prototype.reshape = function () {
    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
  };

  /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */
  ImmutableDenseMatrix.prototype.clone = function () {
    var m = new ImmutableDenseMatrix({
      data: object.clone(this._data),
      size: object.clone(this._size),
      datatype: this._datatype
    });
    return m;
  };

  /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */
  ImmutableDenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'ImmutableDenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };

  /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */
  ImmutableDenseMatrix.fromJSON = function (json) {
    return new ImmutableDenseMatrix(json);
  };

  /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */
  ImmutableDenseMatrix.prototype.swapRows = function () {
    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
  };

  /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */
  ImmutableDenseMatrix.prototype.min = function () {
    // check min has been calculated before
    if (this._min === null) {
      // minimum
      var m = null;
      // compute min
      this.forEach(function (v) {
        if (m === null || smaller(v, m))
          m = v;
      });
      this._min = m !== null ? m : undefined;
    }
    return this._min;
  };

  /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */
  ImmutableDenseMatrix.prototype.max = function () {
    // check max has been calculated before
    if (this._max === null) {
      // maximum
      var m = null;
      // compute max
      this.forEach(function (v) {
        if (m === null || smaller(m, v))
          m = v;
      });
      this._max = m !== null ? m : undefined;
    }
    return this._max;
  };

  // exports
  return ImmutableDenseMatrix;
}

exports.name = 'ImmutableDenseMatrix';
exports.path = 'type';
exports.factory = factory;

},{"../../function/relational/smaller":410,"../../utils/index":555,"./DenseMatrix":496}],499:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

var string = util.string;

var isString = string.isString;

function factory (type, config, load, typed) {
  /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *     var matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *     var matrix = math.matrix([[1, 2], [3, 4]]);
   *     matix.size();              // [2, 2]
   *     matrix.resize([3, 2], 5);
   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
  function Matrix() {
    if (!(this instanceof Matrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }

  /**
   * Attach type information
   */
  Matrix.prototype.type = 'Matrix';
  Matrix.prototype.isMatrix = true;

  /**
   * Get the Matrix storage constructor for the given format.
   *
   * @param {string} format       The Matrix storage format.
   *
   * @return {Function}           The Matrix storage constructor.
   */
  Matrix.storage = function (format) {
    // check storage format is a string
    if (!isString(format)) {
      throw new TypeError('format must be a string value');
    }

    // get storage format constructor
    var constructor = Matrix._storage[format];
    if (!constructor) {
      throw new SyntaxError('Unsupported matrix storage format: ' + format);
    }

    // return storage constructor
    return constructor;
  };

  // a map with all constructors for all storage types
  Matrix._storage = {};

  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @return {string}           The storage format.
   */
  Matrix.prototype.storage = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke storage on a Matrix interface');
  };
  
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */
  Matrix.prototype.datatype = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke datatype on a Matrix interface');
  };

  /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */
  Matrix.prototype.create = function (data, datatype) {
    throw new Error('Cannot invoke create on a Matrix interface');
  };

  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
  Matrix.prototype.subset = function (index, replacement, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke subset on a Matrix interface');
  };

  /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */
  Matrix.prototype.get = function (index) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke get on a Matrix interface');
  };

  /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */
  Matrix.prototype.set = function (index, value, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke set on a Matrix interface');
  };

  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when 
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
  Matrix.prototype.resize = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke resize on a Matrix interface');
  };

  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */
  Matrix.prototype.reshape = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke reshape on a Matrix interface');
  };

  /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */
  Matrix.prototype.clone = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke clone on a Matrix interface');
  };

  /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */
  Matrix.prototype.size = function() {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke size on a Matrix interface');
  };

  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */
  Matrix.prototype.map = function (callback, skipZeros) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke map on a Matrix interface');
  };

  /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */
  Matrix.prototype.forEach = function (callback) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke forEach on a Matrix interface');
  };

  /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */
  Matrix.prototype.toArray = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toArray on a Matrix interface');
  };

  /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */
  Matrix.prototype.valueOf = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke valueOf on a Matrix interface');
  };

  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
  Matrix.prototype.format = function (options) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke format on a Matrix interface');
  };

  /**
   * Get a string representation of the matrix
   * @returns {string} str
   */
  Matrix.prototype.toString = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toString on a Matrix interface');
  };
   
  // exports
  return Matrix;
}

exports.name = 'Matrix';
exports.path = 'type';
exports.factory = factory;

},{"../../utils/index":555}],500:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;
var isInteger = require('../../utils/number').isInteger;

function factory (type) {
  
  /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     var index = new Index(range1, range2, matrix1, array1, ...);
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
  function Index(ranges) {
    if (!(this instanceof Index)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this._dimensions = [];
    this._isScalar = true;

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i];

      if (type.isRange(arg)) {
        this._dimensions.push(arg);
        this._isScalar = false;
      }
      else if (Array.isArray(arg) || type.isMatrix(arg)) {
        // create matrix
        var m = _createImmutableMatrix(arg.valueOf());
        this._dimensions.push(m);
        // size
        var size = m.size();
        // scalar
        if (size.length !== 1 || size[0] !== 1) {
          this._isScalar = false;
        }
      }
      else if (typeof arg === 'number') {
        this._dimensions.push(_createImmutableMatrix([arg]));
      }
      else if (typeof arg === 'string') {
        // object property (arguments.count should be 1)
        this._dimensions.push(arg);
      }
      // TODO: implement support for wildcard '*'
      else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      }
    }
  }

  /**
   * Attach type information
   */
  Index.prototype.type = 'Index';
  Index.prototype.isIndex = true;

  function _createImmutableMatrix(arg) {
    // loop array elements
    for (var i = 0, l = arg.length; i < l; i++) {
      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
        throw new TypeError('Index parameters must be positive integer numbers');
      }
    }
    // create matrix
    return new type.ImmutableDenseMatrix(arg);
  }

  /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */
  Index.prototype.clone = function () {
    var index = new Index();
    index._dimensions = clone(this._dimensions);
    index._isScalar = this._isScalar;
    return index;
  };

  /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */
  Index.create = function (ranges) {
    var index = new Index();
    Index.apply(index, ranges);
    return index;
  };

  /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */
  Index.prototype.size = function () {
    var size = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var d = this._dimensions[i];
      size[i] = (typeof d === 'string') ? 1 : d.size()[0];
    }

    return size;
  };

  /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */
  Index.prototype.max = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = (typeof range === 'string') ? range : range.max();
    }

    return values;
  };

  /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */
  Index.prototype.min = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = (typeof range === 'string') ? range : range.min();
    }

    return values;
  };

  /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */
  Index.prototype.forEach = function (callback) {
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      callback(this._dimensions[i], i, this);
    }
  };

  /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */
  Index.prototype.dimension = function (dim) {
    return this._dimensions[dim] || null;
  };

  /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */
  Index.prototype.isObjectProperty = function () {
    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
  };

  /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */
  Index.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  };

  /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */
  Index.prototype.isScalar = function () {
    return this._isScalar;
  };

  /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */
  Index.prototype.toArray = function () {
    var array = [];
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      array.push((typeof dimension === 'string') ? dimension : dimension.toArray());
    }
    return array;
  };

  /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */
  Index.prototype.valueOf = Index.prototype.toArray;

  /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */
  Index.prototype.toString = function () {
    var strings = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      if (typeof dimension === 'string') {
        strings.push(JSON.stringify(dimension));
      }
      else {
        strings.push(dimension.toString());
      }
    }

    return '[' + strings.join(', ') + ']';
  };

  /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */
  Index.prototype.toJSON = function () {
    return {
      mathjs: 'Index',
      dimensions: this._dimensions
    };
  };

  /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */
  Index.fromJSON = function (json) {
    return Index.create(json.dimensions);
  };

  return Index;
}

exports.name = 'Index';
exports.path = 'type';
exports.factory = factory;

},{"../../utils/number":557,"../../utils/object":558}],501:[function(require,module,exports){
'use strict';

var number = require('../../utils/number');

function factory (type, config, load, typed) {
  /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *     var range = new Range(start, end);
   *     var range = new Range(start, end, step);
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x);
   *     });
   *     range.map(function (x) {
   *         return math.sin(x);
   *     });
   *     range.toArray();
   *
   * Example usage:
   *     var c = new Range(2, 6);         // 2:1:5
   *     c.toArray();                     // [2, 3, 4, 5]
   *     var d = new Range(2, -3, -1);    // 2:-1:-2
   *     d.toArray();                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (start != null) {
      if (type.isBigNumber(start))
        start = start.toNumber();
      else if (typeof start !== 'number')
        throw new TypeError('Parameter start must be a number');
    }
    if (end != null) {
      if (type.isBigNumber(end))
        end = end.toNumber();
      else if (typeof end !== 'number')
        throw new TypeError('Parameter end must be a number');
    }
    if (step != null) {
      if (type.isBigNumber(step))
        step = step.toNumber();
      else if (typeof step !== 'number')
        throw new TypeError('Parameter step must be a number');
    }

    this.start = (start != null) ? parseFloat(start) : 0;
    this.end   = (end != null)   ? parseFloat(end)   : 0;
    this.step  = (step != null)  ? parseFloat(step)  : 1;
  }

  /**
   * Attach type information
   */
  Range.prototype.type = 'Range';
  Range.prototype.isRange = true;

  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */
  Range.parse = function (str) {
    if (typeof str !== 'string') {
      return null;
    }

    var args = str.split(':');
    var nums = args.map(function (arg) {
      return parseFloat(arg);
    });

    var invalid = nums.some(function (num) {
      return isNaN(num);
    });
    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return new Range(nums[0], nums[1]);
      case 3:
        return new Range(nums[0], nums[2], nums[1]);
      default:
        return null;
    }
  };

  /**
   * Create a clone of the range
   * @return {Range} clone
   */
  Range.prototype.clone = function () {
    return new Range(this.start, this.end, this.step);
  };

  /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */
  Range.prototype.size = function () {
    var len = 0,
        start = this.start,
        step = this.step,
        end = this.end,
        diff = end - start;

    if (number.sign(step) == number.sign(diff)) {
      len = Math.ceil((diff) / step);
    }
    else if (diff == 0) {
      len = 0;
    }

    if (isNaN(len)) {
      len = 0;
    }
    return [len];
  };

  /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */
  Range.prototype.min = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start;
      }
      else {
        // negative step
        return this.start + (size - 1) * this.step;
      }
    }
    else {
      return undefined;
    }
  };

  /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */
  Range.prototype.max = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start + (size - 1) * this.step;
      }
      else {
        // negative step
        return this.start;
      }
    }
    else {
      return undefined;
    }
  };


  /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */
  Range.prototype.forEach = function (callback) {
    var x = this.start;
    var step = this.step;
    var end = this.end;
    var i = 0;

    if (step > 0) {
      while (x < end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
    else if (step < 0) {
      while (x > end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
  };

  /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */
  Range.prototype.map = function (callback) {
    var array = [];
    this.forEach(function (value, index, obj) {
      array[index[0]] = callback(value, index, obj);
    });
    return array;
  };

  /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */
  Range.prototype.toArray = function () {
    var array = [];
    this.forEach(function (value, index) {
      array[index[0]] = value;
    });
    return array;
  };

  /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */
  Range.prototype.valueOf = function () {
    // TODO: implement a caching mechanism for range.valueOf()
    return this.toArray();
  };

  /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
  Range.prototype.format = function (options) {
    var str = number.format(this.start, options);

    if (this.step != 1) {
      str += ':' + number.format(this.step, options);
    }
    str += ':' + number.format(this.end, options);
    return str;
  };

  /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */
  Range.prototype.toString = function () {
    return this.format();
  };

  /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */
  Range.prototype.toJSON = function () {
    return {
      mathjs: 'Range',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };

  /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */
  Range.fromJSON = function (json) {
    return new Range(json.start, json.end, json.step);
  };

  return Range;
}

exports.name = 'Range';
exports.path = 'type';
exports.factory = factory;

},{"../../utils/number":557}],502:[function(require,module,exports){
'use strict';

function factory (type, config, load) {
  
  var add = load(require('../../function/arithmetic/add'));
  var equalScalar = load(require('../../function/relational/equalScalar'));
  
  /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array 
   * of the vector elements and an ordered list of non-zero elements.
   */
  function Spa() {
    if (!(this instanceof Spa))
      throw new SyntaxError('Constructor must be called with the new operator');
    
    // allocate vector, TODO use typed arrays
    this._values = [];
    this._heap = new type.FibonacciHeap();
  }

  /**
   * Attach type information
   */
  Spa.prototype.type = 'Spa';
  Spa.prototype.isSpa = true;

  /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */
  Spa.prototype.set = function (i, v) {
    // check we have a value @ i
    if (!this._values[i]) {
      // insert in heap
      var node = this._heap.insert(i, v);
      // set the value @ i
      this._values[i] = node;
    }
    else {
      // update the value @ i
      this._values[i].value = v;
    }
  };
  
  Spa.prototype.get = function (i) {
    var node = this._values[i];
    if (node)
      return node.value;
    return 0;
  };
  
  Spa.prototype.accumulate = function (i, v) {
    // node @ i
    var node = this._values[i];
    if (!node) {
      // insert in heap
      node = this._heap.insert(i, v);
      // initialize value
      this._values[i] = node;
    }
    else {
      // accumulate value
      node.value = add(node.value, v);
    }
  };
  
  Spa.prototype.forEach = function (from, to, callback) {
    // references
    var heap = this._heap;
    var values = this._values;
    // nodes
    var nodes = [];
    // node with minimum key, save it
    var node = heap.extractMinimum();
    if (node)
      nodes.push(node);
    // extract nodes from heap (ordered)
    while (node && node.key <= to) {
      // check it is in range
      if (node.key >= from) {
        // check value is not zero
        if (!equalScalar(node.value, 0)) {
          // invoke callback
          callback(node.key, node.value, this);
        }
      }
      // extract next node, save it
      node = heap.extractMinimum();
      if (node)
        nodes.push(node);
    }
    // reinsert all nodes in heap
    for (var i = 0; i < nodes.length; i++) {
      // current node
      var n = nodes[i];
      // insert node in heap
      node = heap.insert(n.key, n.value);
      // update values
      values[node.key] = node;
    }
  };
  
  Spa.prototype.swap = function (i, j) {
    // node @ i and j
    var nodei = this._values[i];
    var nodej = this._values[j];
    // check we need to insert indeces
    if (!nodei && nodej) {
      // insert in heap
      nodei = this._heap.insert(i, nodej.value);
      // remove from heap
      this._heap.remove(nodej);
      // set values
      this._values[i] = nodei;
      this._values[j] = undefined;
    }
    else if (nodei && !nodej) {
      // insert in heap
      nodej = this._heap.insert(j, nodei.value);
      // remove from heap
      this._heap.remove(nodei);
      // set values
      this._values[j] = nodej;
      this._values[i] = undefined;
    }
    else if (nodei && nodej) {
      // swap values
      var v = nodei.value;
      nodei.value = nodej.value;
      nodej.value = v;
    }
  };
  
  return Spa;
}

exports.name = 'Spa';
exports.path = 'type';
exports.factory = factory;

},{"../../function/arithmetic/add":305,"../../function/relational/equalScalar":406}],503:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');
var DimensionError = require('../../error/DimensionError');

var array = util.array;
var object = util.object;
var string = util.string;
var number = util.number;

var isArray = Array.isArray;
var isNumber = number.isNumber;
var isInteger = number.isInteger;
var isString = string.isString;

var validateIndex = array.validateIndex;

function factory (type, config, load, typed) {
  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)
  var equalScalar = load(require('../../function/relational/equalScalar'));

  /**
   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
   * for sparse matrices.
   * @class SparseMatrix
   */
  function SparseMatrix(data, datatype) {
    if (!(this instanceof SparseMatrix))
      throw new SyntaxError('Constructor must be called with the new operator');
    if (datatype && !isString(datatype))
      throw new Error('Invalid datatype: ' + datatype);
    
    if (type.isMatrix(data)) {
      // create from matrix
      _createFromMatrix(this, data, datatype);
    }
    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
      // initialize fields
      this._values = data.values;
      this._index = data.index;
      this._ptr = data.ptr;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    }
    else if (isArray(data)) {
      // create from array
      _createFromArray(this, data, datatype);
    }
    else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
    }
    else {
      // nothing provided
      this._values = [];
      this._index = [];
      this._ptr = [0];
      this._size = [0, 0];
      this._datatype = datatype;
    }
  }
  
  var _createFromMatrix = function (matrix, source, datatype) {
    // check matrix type
    if (source.type === 'SparseMatrix') {
      // clone arrays
      matrix._values = source._values ? object.clone(source._values) : undefined;
      matrix._index = object.clone(source._index);
      matrix._ptr = object.clone(source._ptr);
      matrix._size = object.clone(source._size);
      matrix._datatype = datatype || source._datatype;
    }
    else {
      // build from matrix data
      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
  };
  
  var _createFromArray = function (matrix, data, datatype) {
    // initialize fields
    matrix._values = [];
    matrix._index = [];
    matrix._ptr = [];
    matrix._datatype = datatype;
    // discover rows & columns, do not use math.size() to avoid looping array twice
    var rows = data.length;
    var columns = 0;
    
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    
    if (isString(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
      // convert 0 to the same datatype
      zero = typed.convert(0, datatype);
    }

    // check we have rows (empty array)
    if (rows > 0) {
      // column index
      var j = 0;
      do {
        // store pointer to values index
        matrix._ptr.push(matrix._index.length);
        // loop rows
        for (var i = 0; i < rows; i++) {
          // current row
          var row = data[i];
          // check row is an array
          if (isArray(row)) {
            // update columns if needed (only on first column)
            if (j === 0 && columns < row.length)
              columns = row.length;
            // check row has column
            if (j < row.length) {
              // value
              var v = row[j];
              // check value != 0
              if (!eq(v, zero)) {
                // store value
                matrix._values.push(v);
                // index
                matrix._index.push(i);
              }
            }
          }
          else {
            // update columns if needed (only on first column)
            if (j === 0 && columns < 1)
              columns = 1;
            // check value != 0 (row is a scalar)
            if (!eq(row, zero)) {
              // store value
              matrix._values.push(row);
              // index
              matrix._index.push(i);
            }
          }
        }
        // increment index
        j++;      
      }
      while (j < columns);
    }
    // store number of values in ptr
    matrix._ptr.push(matrix._index.length);
    // size
    matrix._size = [rows, columns];
  };
  
  SparseMatrix.prototype = new Matrix();

  /**
   * Attach type information
   */
  SparseMatrix.prototype.type = 'SparseMatrix';
  SparseMatrix.prototype.isSparseMatrix = true;

  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */
  SparseMatrix.prototype.storage = function () {
    return 'sparse';
  };

  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */
  SparseMatrix.prototype.datatype = function () {
    return this._datatype;
  };

  /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */
  SparseMatrix.prototype.create = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };

  /**
   * Get the matrix density.
   *
   * Usage:
   *     var density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */
  SparseMatrix.prototype.density = function () {
    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1];
    // calculate density
    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;
  };
  
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Maytrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */
  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) { // check it is a pattern matrix
    if (!this._values)
      throw new Error('Cannot invoke subset on a Pattern only matrix');

    // check arguments
    switch (arguments.length) {
      case 1:
        return _getsubset(this, index);

        // intentional fall through
      case 2:
      case 3:
        return _setsubset(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  
  var _getsubset = function (matrix, idx) {
    // check idx
    if (!type.isIndex(idx)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = idx.isScalar();
    if (isScalar) {
      // return a scalar
      return matrix.get(idx.min());
    }
    // validate dimensions
    var size = idx.size();
    if (size.length != matrix._size.length) {
      throw new DimensionError(size.length, matrix._size.length);
    }

    // vars
    var i, ii, k, kk;
    
    // validate if any of the ranges in the index is out of range
    var min = idx.min();
    var max = idx.max();
    for (i = 0, ii = matrix._size.length; i < ii; i++) {
      validateIndex(min[i], matrix._size[i]);
      validateIndex(max[i], matrix._size[i]);
    }
    
    // matrix arrays
    var mvalues = matrix._values;
    var mindex = matrix._index;
    var mptr = matrix._ptr;
        
    // rows & columns dimensions for result matrix
    var rows = idx.dimension(0);
    var columns = idx.dimension(1);
    
    // workspace & permutation vector
    var w = [];
    var pv = [];
    
    // loop rows in resulting matrix
    rows.forEach(function (i, r) {
      // update permutation vector
      pv[i] = r[0];  
      // mark i in workspace
      w[i] = true;
    });

    // result matrix arrays
    var values = mvalues ? [] : undefined;
    var index = [];
    var ptr = [];
        
    // loop columns in result matrix
    columns.forEach(function (j) {
      // update ptr
      ptr.push(index.length);
      // loop values in column j
      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
        // row
        i = mindex[k];
        // check row is in result matrix
        if (w[i] === true) {
          // push index
          index.push(pv[i]);
          // check we need to process values
          if (values)
            values.push(mvalues[k]);
        }
      }
    });
    // update ptr
    ptr.push(index.length);
    
    // return matrix
    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: size,
      datatype: matrix._datatype
    });
  };
  
  var _setsubset = function (matrix, index, submatrix, defaultValue) {
    // check index
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    }
    
    // get index size and check whether the index contains a single value
    var iSize = index.size(),
        isScalar = index.isScalar();
    
    // calculate the size of the submatrix, and convert it into an Array if needed
    var sSize;
    if (type.isMatrix(submatrix)) {
      // submatrix size
      sSize = submatrix.size();
      // use array representation
      submatrix = submatrix.toArray();
    }
    else {
      // get submatrix size (array, scalar)
      sSize = array.size(submatrix);
    }
    
    // check index is a scalar
    if (isScalar) {
      // verify submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }
      // set value
      matrix.set(index.min(), submatrix, defaultValue);
    }
    else {
      // validate dimensions, index size must be one or two dimensions
      if (iSize.length !== 1 && iSize.length !== 2) {
        throw new DimensionError(iSize.length, matrix._size.length, '<');
      }
      
      // check submatrix and index have the same dimensions
      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;
        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }
        while (iSize[i] === 1) {
          outer++;
          i++;
        }
        // unsqueeze both outer and inner dimensions
        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
      }
      
      // check whether the size of the submatrix matches the index size
      if (!object.deepEqual(iSize, sSize)) {
        throw new DimensionError(iSize, sSize, '>');
      }
      
      // offsets
      var x0 = index.min()[0];
      var y0 = index.min()[1];      
      
      // submatrix rows and columns
      var m = sSize[0];
      var n = sSize[1];

      // loop submatrix
      for (var x = 0; x < m; x++) {
        // loop columns
        for (var y = 0; y < n; y++) {
          // value at i, j
          var v = submatrix[x][y];
          // invoke set (zero value will remove entry from matrix)
          matrix.set([x + x0, y + y0], v, defaultValue);
        }
      }
    }
    return matrix;
  };

  /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */
  SparseMatrix.prototype.get = function (index) {
    if (!isArray(index))
      throw new TypeError('Array expected');
    if (index.length != this._size.length)
      throw new DimensionError(index.length, this._size.length);

    // check it is a pattern matrix
    if (!this._values)
      throw new Error('Cannot invoke get on a Pattern only matrix');

    // row and column
    var i = index[0];
    var j = index[1];

    // check i, j are valid
    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[1]);

    // find value index
    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
    // check k is prior to next column k and it is in the correct row
    if (k < this._ptr[j + 1] && this._index[k] === i)
      return this._values[k];

    return 0;
  };
  
  /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */
  SparseMatrix.prototype.set = function (index, v, defaultValue) {
    if (!isArray(index))
      throw new TypeError('Array expected');
    if (index.length != this._size.length)
      throw new DimensionError(index.length, this._size.length);

    // check it is a pattern matrix
    if (!this._values)
      throw new Error('Cannot invoke set on a Pattern only matrix');
      
    // row and column
    var i = index[0];
    var j = index[1];

    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1];
    
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;

    if (isString(this._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
      // convert 0 to the same datatype
      zero = typed.convert(0, this._datatype);
    }

    // check we need to resize matrix
    if (i > rows - 1 || j > columns - 1) {
      // resize matrix
      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
      // update rows & columns
      rows = this._size[0];
      columns = this._size[1];
    }

    // check i, j are valid
    validateIndex(i, rows);
    validateIndex(j, columns);

    // find value index
    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
    // check k is prior to next column k and it is in the correct row
    if (k < this._ptr[j + 1] && this._index[k] === i) {
      // check value != 0
      if (!eq(v, zero)) {
        // update value
        this._values[k] = v;
      }
      else {
        // remove value from matrix
        _remove(k, j, this._values, this._index, this._ptr);
      }
    }
    else {
      // insert value @ (i, j)
      _insert(k, i, j, v, this._values, this._index, this._ptr);
    }

    return this;
  };
  
  var _getValueIndex = function(i, top, bottom, index) {
    // check row is on the bottom side
    if (bottom - top === 0)
      return bottom;
    // loop rows [top, bottom[
    for (var r = top; r < bottom; r++) {
      // check we found value index
      if (index[r] === i)
        return r;
    }
    // we did not find row
    return top;
  };

  var _remove = function (k, j, values, index, ptr) {
    // remove value @ k
    values.splice(k, 1);
    index.splice(k, 1);
    // update pointers
    for (var x = j + 1; x < ptr.length; x++)
      ptr[x]--;
  };

  var _insert = function (k, i, j, v, values, index, ptr) {
    // insert value
    values.splice(k, 0, v);
    // update row for k
    index.splice(k, 0, i);
    // update column pointers
    for (var x = j + 1; x < ptr.length; x++)
      ptr[x]++;
  };
  
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when 
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */
  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    
    // validate arguments
    if (!isArray(size))
      throw new TypeError('Array expected');
    if (size.length !== 2)
      throw new Error('Only two dimensions matrix are supported');

    // check sizes
    size.forEach(function (value) {
      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' +
                            '(size: ' + string.format(size) + ')');
      }
    });
    
    // matrix to resize
    var m = copy ? this.clone() : this;
    // resize matrix
    return _resize(m, size[0], size[1], defaultValue);
  };
  
  var _resize = function (matrix, rows, columns, defaultValue) {
    // value to insert at the time of growing matrix
    var value = defaultValue || 0;
    
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;

    if (isString(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
      // convert 0 to the same datatype
      zero = typed.convert(0, matrix._datatype);
      // convert value to the same datatype
      value = typed.convert(value, matrix._datatype);
    }
    
    // should we insert the value?
    var ins = !eq(value, zero);

    // old columns and rows
    var r = matrix._size[0];
    var c = matrix._size[1];

    var i, j, k;

    // check we need to increase columns
    if (columns > c) {
      // loop new columns
      for (j = c; j < columns; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._values.length;
        // check we need to insert matrix._values
        if (ins) {
          // loop rows
          for (i = 0; i < r; i++) {
            // add new matrix._values
            matrix._values.push(value);
            // update matrix._index
            matrix._index.push(i);
          }
        }        
      }
      // store number of matrix._values in matrix._ptr
      matrix._ptr[columns] = matrix._values.length;
    }
    else if (columns < c) {
      // truncate matrix._ptr
      matrix._ptr.splice(columns + 1, c - columns);
      // truncate matrix._values and matrix._index
      matrix._values.splice(matrix._ptr[columns], matrix._values.length);
      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
    }
    // update columns
    c = columns;

    // check we need to increase rows
    if (rows > r) {
      // check we have to insert values
      if (ins) {
        // inserts
        var n = 0;
        // loop columns
        for (j = 0; j < c; j++) {
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._ptr[j] + n;
          // where to insert matrix._values
          k = matrix._ptr[j + 1] + n;
          // pointer
          var p = 0;
          // loop new rows, initialize pointer
          for (i = r; i < rows; i++, p++) {
            // add value
            matrix._values.splice(k + p, 0, value);
            // update matrix._index
            matrix._index.splice(k + p, 0, i);
            // increment inserts
            n++;
          }
        }
        // store number of matrix._values in matrix._ptr
        matrix._ptr[c] = matrix._values.length;
      }
    }
    else if (rows < r) {
      // deletes
      var d = 0;
      // loop columns
      for (j = 0; j < c; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._ptr[j] - d;
        // where matrix._values start for next column
        var k0 = matrix._ptr[j];
        var k1 = matrix._ptr[j + 1] - d;
        // loop matrix._index
        for (k = k0; k < k1; k++) {
          // row
          i = matrix._index[k];
          // check we need to delete value and matrix._index
          if (i > rows - 1) {
            // remove value
            matrix._values.splice(k, 1);
            // remove item from matrix._index
            matrix._index.splice(k, 1);
            // increase deletes
            d++;
          }
        }
      }
      // update matrix._ptr for current column
      matrix._ptr[j] = matrix._values.length;
    }
    // update matrix._size
    matrix._size[0] = rows;
    matrix._size[1] = columns;
    // return matrix
    return matrix;
  };

  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */
  SparseMatrix.prototype.reshape = function (size, copy) {

    // validate arguments
    if (!isArray(size))
      throw new TypeError('Array expected');
    if (size.length !== 2)
      throw new Error('Sparse matrices can only be reshaped in two dimensions');

    // check sizes
    size.forEach(function (value) {
      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' +
                            '(size: ' + string.format(size) + ')');
      }
    });

    // m * n must not change
    if(this._size[0] * this._size[1] !== size[0] * size[1]) {
      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
    }

    // matrix to reshape
    var m = copy ? this.clone() : this;

    // return unchanged if the same shape
    if(this._size[0] === size[0] && this._size[1] === size[1]) {
      return m;
    }

    // Convert to COO format (generate a column index)
    var colIndex = [];
    for(var i=0; i<m._ptr.length; i++) {
      for(var j=0; j<m._ptr[i+1]-m._ptr[i]; j++) {
        colIndex.push(i);
      }
    }

    // Clone the values array
    var values = m._values.slice();

    // Clone the row index array
    var rowIndex = m._index.slice();

    // Transform the (row, column) indices
    for(var i=0; i<m._index.length; i++) {
      var r1 = rowIndex[i];
      var c1 = colIndex[i];
      var flat = r1 * m._size[1] + c1;
      colIndex[i] = flat % size[1];
      rowIndex[i] = Math.floor(flat / size[1]);
    }

    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
    // sorting several arrays based on some other array.

    // OR, we could easily just:

    // 1. Remove all values from the matrix
    m._values.length = 0;
    m._index.length = 0;
    m._ptr.length = size[1] + 1;
    m._size = size.slice();
    for(var i=0; i<m._ptr.length; i++) {
      m._ptr[i] = 0;
    }

    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
    // This step is probably the most time-consuming
    for(var h=0; h<values.length; h++) {
      var i = rowIndex[h];
      var j = colIndex[h];
      var v = values[h];
      var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);
      _insert(k, i, j, v, m._values, m._index, m._ptr);
    }

    // The value indices are inserted out of order, but apparently that's... still OK?

    return m;
  }
  
  /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */
  SparseMatrix.prototype.clone = function () {
    var m = new SparseMatrix({
      values: this._values ? object.clone(this._values) : undefined,
      index: object.clone(this._index),
      ptr: object.clone(this._ptr),
      size: object.clone(this._size),
      datatype: this._datatype
    });
    return m;
  };
  
  /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */
  SparseMatrix.prototype.size = function() {
    return this._size.slice(0); // copy the Array
  };
  
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */
  SparseMatrix.prototype.map = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values)
      throw new Error('Cannot invoke map on a Pattern only matrix');
    // matrix instance
    var me = this;
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1];
    // invoke callback
    var invoke = function (v, i, j) {
      // invoke callback
      return callback(v, [i, j], me);
    };
    // invoke _map
    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
  };

  /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */
  var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
    // result arrays
    var values = [];
    var index = [];
    var ptr = [];
    
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;

    if (isString(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
      // convert 0 to the same datatype
      zero = typed.convert(0, matrix._datatype);
    }
    
    // invoke callback
    var invoke = function (v, x, y) {
      // invoke callback
      v = callback(v, x, y);
      // check value != 0
      if (!eq(v, zero)) {
        // store value
        values.push(v);
        // index
        index.push(x);
      }
    };
    // loop columns
    for (var j = minColumn; j <= maxColumn; j++) {
      // store pointer to values index
      ptr.push(values.length);
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = matrix._ptr[j];
      var k1 = matrix._ptr[j + 1];
      // row pointer
      var p = minRow;
      // loop k within [k0, k1[
      for (var k = k0; k < k1; k++) {
        // row index
        var i = matrix._index[k];
        // check i is in range
        if (i >= minRow && i <= maxRow) {
          // zero values
          if (!skipZeros) {
           for (var x = p; x < i; x++)
             invoke(0, x - minRow, j - minColumn);
          }
          // value @ k
          invoke(matrix._values[k], i - minRow, j - minColumn);
        }
        // update pointer
        p = i + 1;
      }
      // zero values
      if (!skipZeros) {
        for (var y = p; y <= maxRow; y++)
          invoke(0, y - minRow, j - minColumn);
      }
    }
    // store number of values in ptr
    ptr.push(values.length);
    // return sparse matrix
    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
    });
  };
  
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   */
  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values)
      throw new Error('Cannot invoke forEach on a Pattern only matrix');
    // matrix instance
    var me = this;
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1];
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1];
      // column pointer
      var p = 0;
      // loop k within [k0, k1[
      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k];
        // check we need to process zeros
        if (!skipZeros) {
          // zero values
          for (var x = p; x < i; x++)
            callback(0, [x, j], me);
        }
        // value @ k
        callback(this._values[k], [i, j], me);
        // update pointer
        p = i + 1;
      }
      // check we need to process zeros
      if (!skipZeros) {
        // zero values
        for (var y = p; y < rows; y++)
          callback(0, [y, j], me);
      }
    }
  };
  
  /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */
  SparseMatrix.prototype.toArray = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, true);
  };

  /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */
  SparseMatrix.prototype.valueOf = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, false);
  };
  
  var _toArray = function (values, index, ptr, size, copy) {    
    // rows and columns
    var rows = size[0];
    var columns = size[1];
    // result
    var a = [];
    // vars
    var i, j;
    // initialize array
    for (i = 0; i < rows; i++) {
      a[i] = [];
      for (j = 0; j < columns; j++)
        a[i][j] = 0;
    }

    // loop columns
    for (j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1];
      // loop k within [k0, k1[
      for (var k = k0; k < k1; k++) {
        // row index
        i = index[k];
        // set value (use one for pattern matrix)
        a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;
      }
    }
    return a;
  };
  
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */
  SparseMatrix.prototype.format = function (options) {
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1];
    // density
    var density = this.density();
    // rows & columns
    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n';
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1];
      // loop k within [k0, k1[
      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k];
        // append value
        str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
      }
    }
    return str;
  };
  
  /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */
  SparseMatrix.prototype.toString = function () {
    return string.format(this.toArray());
  };
  
  /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */
  SparseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'SparseMatrix',
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  };

  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */
  SparseMatrix.prototype.diagonal = function(k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k))
        k = k.toNumber();
      // is must be an integer
      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError ('The parameter k must be an integer number');
      }
    }
    else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0;
    
    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1];
    
    // number diagonal values
    var n = Math.min(rows - kSub, columns -  kSuper);
    
    // diagonal arrays
    var values = [];
    var index = [];
    var ptr = [];
    // initial ptr value
    ptr[0] = 0;
    // loop columns
    for (var j = kSuper; j < columns && values.length < n; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1];
      // loop x within [k0, k1[
      for (var x = k0; x < k1; x++) {
        // row index
        var i = this._index[x];
        // check row
        if (i === j - kSuper + kSub) {
          // value on this column
          values.push(this._values[x]);
          // store row
          index[values.length - 1] = i - kSub;
          // exit loop
          break;
        }
      }
    }
    // close ptr
    ptr.push(values.length);
    // return matrix
    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [n, 1]
    });
  };
  
  /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */
  SparseMatrix.fromJSON = function (json) {
    return new SparseMatrix(json);
  };

  /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */
  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!isArray(size))
      throw new TypeError('Array expected, size parameter');
    if (size.length !== 2)
      throw new Error('Only two dimensions matrix are supported');
    
    // map size & validate
    size = size.map(function (s) {
      // check it is a big number
      if (type.isBigNumber(s)) {
        // convert it
        s = s.toNumber();
      }
      // validate arguments
      if (!isNumber(s) || !isInteger(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      } 
      return s;
    });
    
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k))
        k = k.toNumber();
      // is must be an integer
      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError ('The parameter k must be an integer number');
      }
    }
    else {
      // default value
      k = 0;
    }

    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;

    if (isString(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
      // convert 0 to the same datatype
      zero = typed.convert(0, datatype);
    }
    
    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0;
    
    // rows and columns
    var rows = size[0];
    var columns = size[1];
    
    // number of non-zero items
    var n = Math.min(rows - kSub, columns -  kSuper);
    
    // value extraction function
    var _value;
      
    // check value
    if (isArray(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      }
      // define function
      _value = function (i) {
        // return value @ i
        return value[i];
      };
    }
    else if (type.isMatrix(value)) {
      // matrix size
      var ms = value.size();
      // validate matrix
      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      }
      // define function
      _value = function (i) {
        // return value @ i
        return value.get([i]);
      };
    }
    else {
      // define function
      _value = function () {
        // return value
        return value;
      };
    }
    
    // create arrays
    var values = [];
    var index = [];
    var ptr = [];
    
    // loop items
    for (var j = 0; j < columns; j++) {
      // number of rows with value
      ptr.push(values.length);
      // diagonal index
      var i = j - kSuper;      
      // check we need to set diagonal value
      if (i >= 0 && i < n) {
        // get value @ i
        var v = _value(i);
        // check for zero
        if (!eq(v, zero)) {
          // column
          index.push(i + kSub);
          // add value
          values.push(v);
        }
      }
    }
    // last value should be number of values
    ptr.push(values.length);
    // create SparseMatrix
    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [rows, columns]
    });
  };
  
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */
  SparseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
      throw new Error('Row index must be positive integers');
    }
    // check dimensions
    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }
    // validate index
    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[0]);
    
    // swap rows
    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
    // return current instance
    return this;
  };
  
  /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */
  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
    // indeces for column j
    var k0 = ptr[j];
    var k1 = ptr[j + 1];
    // loop
    for (var k = k0; k < k1; k++) {
      // invoke callback
      callback(index[k], values[k]);
    }
  };
  
  /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */
  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1];
      // find value index @ x
      var kx = _getValueIndex(x, k0, k1, index);
      // find value index @ x
      var ky = _getValueIndex(y, k0, k1, index);
      // check both rows exist in matrix
      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
        // swap values (check for pattern matrix)
        if (values) {
          var v = values[kx];
          values[kx] = values[ky];
          values[ky] = v;
        }
        // next column
        continue;
      }
      // check x row exist & no y row
      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
        // value @ x (check for pattern matrix)
        var vx = values ? values[kx] : undefined;
        // insert value @ y
        index.splice(ky, 0, y);
        if (values)
          values.splice(ky, 0, vx);        
        // remove value @ x (adjust array index if needed)
        index.splice(ky <= kx ? kx + 1 : kx, 1);
        if (values)
          values.splice(ky <= kx ? kx + 1 : kx, 1);
        // next column
        continue;
      }
      // check y row exist & no x row
      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
        // value @ y (check for pattern matrix)
        var vy = values ? values[ky] : undefined;
        // insert value @ x
        index.splice(kx, 0, x);
        if (values)
          values.splice(kx, 0, vy);
        // remove value @ y (adjust array index if needed)
        index.splice(kx <= ky ? ky + 1 : ky, 1);
        if (values)
          values.splice(kx <= ky ? ky + 1 : ky, 1);
      }
    }
  };

  // register this type in the base class Matrix
  type.Matrix._storage.sparse = SparseMatrix;

  return SparseMatrix;
}

exports.name = 'SparseMatrix';
exports.path = 'type';
exports.factory = factory;
exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage

},{"../../error/DimensionError":27,"../../function/relational/equalScalar":406,"../../utils/index":555,"./Matrix":499}],504:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    var math = math.js
   *
   *    var b = [1, 2, 3, 4, 5];
   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]
   *
   *    var a = math.matrix([[1, 2], [3, 4]]);
   *    a.subset(math.index(0, 1));             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
  return typed('index', {
    '...number | string | BigNumber | Range | Array | Matrix': function (args) {
      var ranges = args.map(function (arg) {
        if (type.isBigNumber(arg)) {
          return arg.toNumber(); // convert BigNumber to Number
        }
        else if (Array.isArray(arg) || type.isMatrix(arg)) {
          return arg.map(function (elem) {
            // convert BigNumber to Number
            return type.isBigNumber(elem) ? elem.toNumber() : elem;
          });
        }
        else {
          return arg;
        }
      });

      var res = new type.Index();
      type.Index.apply(res, ranges);
      return res;
    }
  });
}

exports.name = 'index';
exports.factory = factory;

},{}],505:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  /**
   * Create a Matrix. The function creates a new `math.type.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    var m = math.matrix([[1, 2], [3, 4]]);
   *    m.size();                        // Array [2, 2]
   *    m.resize([3, 2], 5);
   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format
   *
   * @return {Matrix} The created matrix
   */
  var matrix = typed('matrix', {
    '': function () {
      return _create([]);
    },

    'string': function (format) {
      return _create([], format);
    },
    
    'string, string': function (format, datatype) {
      return _create([], format, datatype);
    },

    'Array': function (data) {
      return _create(data);
    },
      
    'Matrix': function (data) {
      return _create(data, data.storage());
    },
    
    'Array | Matrix, string': _create,
    
    'Array | Matrix, string, string': _create
  });

  matrix.toTex = {
    0: '\\begin{bmatrix}\\end{bmatrix}',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(${args[0]}\\right)'
  };

  return matrix;

  /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */
  function _create(data, format, datatype) {
    // get storage format constructor
    var M = type.Matrix.storage(format || 'default');

    // create instance
    return new M(data, datatype);
  }
}

exports.name = 'matrix';
exports.factory = factory;

},{}],506:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var SparseMatrix = type.SparseMatrix;

  /**
   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    var m = math.sparse([[1, 2], [3, 4]]);
   *    m.size();                        // Array [2, 2]
   *    m.resize([3, 2], 5);
   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */
  var sparse = typed('sparse', {
    '': function () {
      return new SparseMatrix([]);
    },
    
    'string': function (datatype) {
      return new SparseMatrix([], datatype);
    },

    'Array | Matrix': function (data) {
      return new SparseMatrix(data);
    },
    
    'Array | Matrix, string': function (data, datatype) {
      return new SparseMatrix(data, datatype);
    }
  });

  sparse.toTex = {
    0: '\\begin{bsparse}\\end{bsparse}',
    1: '\\left(${args[0]}\\right)'
  };

  return sparse;
}

exports.name = 'sparse';
exports.factory = factory;

},{}],507:[function(require,module,exports){
module.exports = [
  // types
  require('./Matrix'),
  require('./DenseMatrix'),
  require('./SparseMatrix'),
  require('./Spa'),
  require('./FibonacciHeap'),
  require('./ImmutableDenseMatrix'),
  require('./MatrixIndex'),
  require('./Range'),

  // construction functions
  require('./function/index'),
  require('./function/matrix'),
  require('./function/sparse')
];

},{"./DenseMatrix":496,"./FibonacciHeap":497,"./ImmutableDenseMatrix":498,"./Matrix":499,"./MatrixIndex":500,"./Range":501,"./Spa":502,"./SparseMatrix":503,"./function/index":504,"./function/matrix":505,"./function/sparse":506}],508:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var DenseMatrix = type.DenseMatrix;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype;
    // sparse matrix arrays
    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // sparse matrix cannot be a Pattern matrix
    if (!bvalues)
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // process data types
    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
    // callback function
    var cf = dt ? typed.find(callback, [dt, dt]) : callback;

    // vars
    var i, j;
    
    // result (DenseMatrix)
    var cdata = [];
    // initialize c
    for (i = 0; i < rows; i++)
      cdata[i] = [];      
    
    // workspace
    var x = [];
    // marks indicating we have a value in x for a given column
    var w = [];

    // loop columns in b
    for (j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1;
      // values in column j
      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k];
        // update workspace
        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        // mark i as updated
        w[i] = mark;
      }
      // loop rows
      for (i = 0; i < rows; i++) {
        // check row is in workspace
        if (w[i] === mark) {
          // c[i][j] was already calculated
          cdata[i][j] = x[i];
        }
        else {
          // item does not exist in S
          cdata[i][j] = adata[i][j];
        }
      }
    }

    // return dense matrix
    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
  
  return algorithm01;
}

exports.name = 'algorithm01';
exports.factory = factory;

},{"../../../error/DimensionError":27}],509:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var equalScalar = load(require('../../../function/relational/equalScalar'));

  var SparseMatrix = type.SparseMatrix;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype;
    // sparse matrix arrays
    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // sparse matrix cannot be a Pattern matrix
    if (!bvalues)
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];
    
    // datatype
    var dt;
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // find signature that matches (dt, dt)
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result (SparseMatrix)
    var cvalues = [];
    var cindex = [];
    var cptr = [];

    // loop columns in b
    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length;
      // values in column j
      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k];
        // update C(i,j)
        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        // check for nonzero
        if (!eq(cij, zero)) {
          // push i & v
          cindex.push(i);
          cvalues.push(cij);
        }
      }
    }
    // update cptr
    cptr[columns] = cindex.length;

    // return sparse matrix
    return new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
  
  return algorithm02;
}

exports.name = 'algorithm02';
exports.factory = factory;

},{"../../../error/DimensionError":27,"../../../function/relational/equalScalar":406}],510:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var DenseMatrix = type.DenseMatrix;

  /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype;
    // sparse matrix arrays
    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // sparse matrix cannot be a Pattern matrix
    if (!bvalues)
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result (DenseMatrix)
    var cdata = [];

    // initialize dense matrix
    for (var z = 0; z < rows; z++) {
      // initialize row
      cdata[z] = [];
    }

    // workspace
    var x = [];
    // marks indicating we have a value in x for a given column
    var w = [];

    // loop columns in b
    for (var j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1;
      // values in column j
      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k];
        // update workspace
        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        w[i] = mark;
      }
      // process workspace
      for (var y = 0; y < rows; y++) {
        // check we have a calculated value for current row
        if (w[y] === mark) {
          // use calculated value
          cdata[y][j] = x[y];
        }
        else {
          // calculate value
          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        }
      }
    }

    // return dense matrix
    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
  
  return algorithm03;
}

exports.name = 'algorithm03';
exports.factory = factory;

},{"../../../error/DimensionError":27}],511:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var equalScalar = load(require('../../../function/relational/equalScalar'));

  var SparseMatrix = type.SparseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  var algorithm04 = function (a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype;
    // sparse matrix arrays
    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // find signature that matches (dt, dt)
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result arrays
    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = [];
    // matrix
    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });

    // workspace
    var xa = avalues && bvalues ? [] : undefined;
    var xb = avalues && bvalues ? [] : undefined;
    // marks indicating we have a value in x for a given column
    var wa = [];
    var wb = [];

    // vars 
    var i, j, k, k0, k1;
    
    // loop columns
    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length;
      // columns mark
      var mark = j + 1;
      // loop A(:,j)
      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k];
        // update c
        cindex.push(i);
        // update workspace
        wa[i] = mark;
        // check we need to process values
        if (xa)
          xa[i] = avalues[k];
      }
      // loop B(:,j)
      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k];
        // check row exists in A
        if (wa[i] === mark) {
          // update record in xa @ i
          if (xa) {
            // invoke callback
            var v = cf(xa[i], bvalues[k]);
            // check for zero
            if (!eq(v, zero)) {
              // update workspace
              xa[i] = v;              
            }
            else {
              // remove mark (index will be removed later)
              wa[i] = null;
            }
          }
        }
        else {
          // update c
          cindex.push(i);
          // update workspace
          wb[i] = mark;
          // check we need to process values
          if (xb)
            xb[i] = bvalues[k];
        }
      }
      // check we need to process values (non pattern matrix)
      if (xa && xb) {
        // initialize first index in j
        k = cptr[j];
        // loop index in j
        while (k < cindex.length) {
          // row
          i = cindex[k];
          // check workspace has value @ i
          if (wa[i] === mark) {
            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
            cvalues[k] = xa[i];
            // increment pointer
            k++;
          }
          else if (wb[i] === mark) {
            // push value (bij != 0)
            cvalues[k] = xb[i];
            // increment pointer
            k++;
          }
          else {
            // remove index @ k
            cindex.splice(k, 1);
          }
        }
      }
    }
    // update cptr
    cptr[columns] = cindex.length;

    // return sparse matrix
    return c;
  };
  
  return algorithm04;
}

exports.name = 'algorithm04';
exports.factory = factory;

},{"../../../error/DimensionError":27,"../../../function/relational/equalScalar":406}],512:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var equalScalar = load(require('../../../function/relational/equalScalar'));
  
  var SparseMatrix = type.SparseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  var algorithm05 = function (a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype;
    // sparse matrix arrays
    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // find signature that matches (dt, dt)
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result arrays
    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = [];
    // matrix
    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });

    // workspaces
    var xa = cvalues ? [] : undefined;
    var xb = cvalues ? [] : undefined;
    // marks indicating we have a value in x for a given column
    var wa = [];
    var wb = [];

    // vars
    var i, j, k, k1;
    
    // loop columns
    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length;
      // columns mark
      var mark = j + 1;
      // loop values A(:,j)
      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
        // row
        i = aindex[k];
        // push index
        cindex.push(i);
        // update workspace
        wa[i] = mark;
        // check we need to process values
        if (xa)
          xa[i] = avalues[k];
      }
      // loop values B(:,j)
      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
        // row
        i = bindex[k];
        // check row existed in A
        if (wa[i] !== mark) {
          // push index
          cindex.push(i);
        }
        // update workspace
        wb[i] = mark;
        // check we need to process values
        if (xb)
          xb[i] = bvalues[k];
      }
      // check we need to process values (non pattern matrix)
      if (cvalues) {
        // initialize first index in j
        k = cptr[j];
        // loop index in j
        while (k < cindex.length) {
          // row
          i = cindex[k];
          // marks
          var wai = wa[i];
          var wbi = wb[i];
          // check Aij or Bij are nonzero
          if (wai === mark || wbi === mark) {
            // matrix values @ i,j
            var va = wai === mark ? xa[i] : zero;
            var vb = wbi === mark ? xb[i] : zero;
            // Cij
            var vc = cf(va, vb);
            // check for zero
            if (!eq(vc, zero)) {
              // push value
              cvalues.push(vc);
              // increment pointer
              k++;
            }
            else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        }
      }
    }
    // update cptr
    cptr[columns] = cindex.length;

    // return sparse matrix
    return c;
  };

  return algorithm05;
}

exports.name = 'algorithm05';
exports.factory = factory;

},{"../../../error/DimensionError":27,"../../../function/relational/equalScalar":406}],513:[function(require,module,exports){
'use strict';

var scatter = require('./../../../utils/collection/scatter');
var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var equalScalar = load(require('../../../function/relational/equalScalar'));

  var SparseMatrix = type.SparseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  var algorithm06 = function (a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var asize = a._size;
    var adt = a._datatype;
    // sparse matrix arrays
    var bvalues = b._values;
    var bsize = b._size;
    var bdt = b._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // find signature that matches (dt, dt)
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result arrays
    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = [];
    // matrix
    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });

    // workspaces
    var x = cvalues ? [] : undefined;
    // marks indicating we have a value in x for a given column
    var w = [];
    // marks indicating value in a given row has been updated
    var u = [];

    // loop columns
    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length;
      // columns mark
      var mark = j + 1;
      // scatter the values of A(:,j) into workspace
      scatter(a, j, w, x, u, mark, c, cf);
      // scatter the values of B(:,j) into workspace
      scatter(b, j, w, x, u, mark, c, cf);
      // check we need to process values (non pattern matrix)
      if (x) {
        // initialize first index in j
        var k = cptr[j];
        // loop index in j
        while (k < cindex.length) {
          // row
          var i = cindex[k];
          // check function was invoked on current row (Aij !=0 && Bij != 0)
          if (u[i] === mark) {
            // value @ i
            var v = x[i];
            // check for zero value
            if (!eq(v, zero)) {
              // push value
              cvalues.push(v);
              // increment pointer
              k++;
            }
            else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
          else {
            // remove value @ i, do not increment pointer
            cindex.splice(k, 1);
          }
        }
      }
      else {
        // initialize first index in j
        var p = cptr[j];
        // loop index in j
        while (p < cindex.length) {
          // row
          var r = cindex[p];
          // check function was invoked on current row (Aij !=0 && Bij != 0)
          if (u[r] !== mark) {
            // remove value @ i, do not increment pointer
            cindex.splice(p, 1);
          }
          else {
            // increment pointer
            p++;
          }
        }
      }
    }
    // update cptr
    cptr[columns] = cindex.length;

    // return sparse matrix
    return c;
  };
  
  return algorithm06;
}

exports.name = 'algorithm06';
exports.factory = factory;

},{"../../../error/DimensionError":27,"../../../function/relational/equalScalar":406,"./../../../utils/collection/scatter":551}],514:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var DenseMatrix = type.DenseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  var algorithm07 = function (a, b, callback) {
    // sparse matrix arrays
    var asize = a._size;
    var adt = a._datatype;
    // sparse matrix arrays
    var bsize = b._size;
    var bdt = b._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // vars
    var i, j;
    
    // result arrays
    var cdata = [];
    // initialize c
    for (i = 0; i < rows; i++)
      cdata[i] = [];

    // matrix
    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });

    // workspaces
    var xa = [];
    var xb = [];
    // marks indicating we have a value in x for a given column
    var wa = [];
    var wb = [];

    // loop columns
    for (j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1;
      // scatter the values of A(:,j) into workspace
      _scatter(a, j, wa, xa, mark);
      // scatter the values of B(:,j) into workspace
      _scatter(b, j, wb, xb, mark);
      // loop rows
      for (i = 0; i < rows; i++) {
        // matrix values @ i,j
        var va = wa[i] === mark ? xa[i] : zero;
        var vb = wb[i] === mark ? xb[i] : zero;
        // invoke callback
        cdata[i][j] = cf(va, vb);
      }          
    }

    // return sparse matrix
    return c;
  };
  
  var _scatter = function (m, j, w, x, mark) {
    // a arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    // loop values in column j
    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
      // row
      var i = index[k];
      // update workspace
      w[i] = mark;
      x[i] = values[k];
    }
  };
  
  return algorithm07;
}

exports.name = 'algorithm07';
exports.factory = factory;

},{"../../../error/DimensionError":27}],515:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var equalScalar = load(require('../../../function/relational/equalScalar'));

  var SparseMatrix = type.SparseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  var algorithm08 = function (a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype;
    // sparse matrix arrays
    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // sparse matrix cannot be a Pattern matrix
    if (!avalues || !bvalues)
      throw new Error('Cannot perform operation on Pattern Sparse Matrices');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // find signature that matches (dt, dt)
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result arrays
    var cvalues = [];
    var cindex = [];
    var cptr = [];
    // matrix
    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });

    // workspace
    var x = [];
    // marks indicating we have a value in x for a given column
    var w = [];

    // vars
    var k, k0, k1, i;

    // loop columns
    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length;
      // columns mark
      var mark = j + 1;
      // loop values in a
      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k];
        // mark workspace
        w[i] = mark;
        // set value
        x[i] = avalues[k];
        // add index
        cindex.push(i);
      }
      // loop values in b
      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k];
        // check value exists in workspace
        if (w[i] === mark) {
          // evaluate callback
          x[i] = cf(x[i], bvalues[k]);
        }
      }
      // initialize first index in j
      k = cptr[j];
      // loop index in j
      while (k < cindex.length) {
        // row
        i = cindex[k];
        // value @ i
        var v = x[i];
        // check for zero value
        if (!eq(v, zero)) {
          // push value
          cvalues.push(v);
          // increment pointer
          k++;
        }
        else {
          // remove value @ i, do not increment pointer
          cindex.splice(k, 1);
        }
      }      
    }
    // update cptr
    cptr[columns] = cindex.length;

    // return sparse matrix
    return c;
  };

  return algorithm08;
}

exports.name = 'algorithm08';
exports.factory = factory;

},{"../../../error/DimensionError":27,"../../../function/relational/equalScalar":406}],516:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory (type, config, load, typed) {

  var equalScalar = load(require('../../../function/relational/equalScalar'));

  var SparseMatrix = type.SparseMatrix;

  /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). 
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  var algorithm09 = function (a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype;
    // sparse matrix arrays
    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype;

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // check rows & columns
    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // find signature that matches (dt, dt)
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result arrays
    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = [];
    // matrix
    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });

    // workspaces
    var x = cvalues ? [] : undefined;
    // marks indicating we have a value in x for a given column
    var w = [];

    // vars
    var i, j, k, k0, k1;
    
    // loop columns
    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length;
      // column mark
      var mark = j + 1;
      // check we need to process values
      if (x) {
        // loop B(:,j)
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = bindex[k];
          // update workspace
          w[i] = mark;
          x[i] = bvalues[k];
        }
      }
      // loop A(:,j)
      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k];
        // check we need to process values
        if (x) {
          // b value @ i,j
          var vb = w[i] === mark ? x[i] : zero;
          // invoke f
          var vc = cf(avalues[k], vb);
          // check zero value
          if (!eq(vc, zero)) {
            // push index
            cindex.push(i);
            // push value
            cvalues.push(vc);
          }
        }
        else {
          // push index
          cindex.push(i);
        }
      }
    }
    // update cptr
    cptr[columns] = cindex.length;

    // return sparse matrix
    return c;
  };

  return algorithm09;
}

exports.name = 'algorithm09';
exports.factory = factory;

},{"../../../error/DimensionError":27,"../../../function/relational/equalScalar":406}],517:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var DenseMatrix = type.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  var algorithm10 = function (s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype;

    // sparse matrix cannot be a Pattern matrix
    if (!avalues)
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string') {
      // datatype
      dt = adt;
      // convert b to the same datatype
      b = typed.convert(b, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result arrays
    var cdata = [];
    // matrix
    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });

    // workspaces
    var x = [];
    // marks indicating we have a value in x for a given column
    var w = [];

    // loop columns
    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1;
      // values in j
      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k];
        // update workspace
        x[r] = avalues[k];
        w[r] = mark;
      }
      // loop rows
      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        }
        // check sparse matrix has a value @ i,j
        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        }
        else {
          // dense matrix value @ i, j
          cdata[i][j] = b;
        }
      }
    }

    // return sparse matrix
    return c;
  };

  return algorithm10;
}

exports.name = 'algorithm10';
exports.factory = factory;

},{}],518:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var equalScalar = load(require('../../../function/relational/equalScalar'));

  var SparseMatrix = type.SparseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  var algorithm11 = function (s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype;

    // sparse matrix cannot be a Pattern matrix
    if (!avalues)
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // equal signature to use
    var eq = equalScalar;
    // zero value
    var zero = 0;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string') {
      // datatype
      dt = adt;
      // find signature that matches (dt, dt)
      eq = typed.find(equalScalar, [dt, dt]);
      // convert 0 to the same datatype
      zero = typed.convert(0, dt);
      // convert b to the same datatype
      b = typed.convert(b, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // result arrays
    var cvalues = [];
    var cindex = [];
    var cptr = [];
    // matrix
    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });

    // loop columns
    for (var j = 0; j < columns; j++) {
      // initialize ptr
      cptr[j] = cindex.length;
      // values in j
      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = aindex[k];
        // invoke callback
        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
        // check value is zero
        if (!eq(v, zero)) {
          // push index & value
          cindex.push(i);
          cvalues.push(v);
        }
      }
    }
    // update ptr
    cptr[columns] = cindex.length;

    // return sparse matrix
    return c;
  };

  return algorithm11;
}

exports.name = 'algorithm11';
exports.factory = factory;

},{"../../../function/relational/equalScalar":406}],519:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {

  var DenseMatrix = type.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  var algorithm12 = function (s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype;

    // sparse matrix cannot be a Pattern matrix
    if (!avalues)
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');

    // rows & columns
    var rows = asize[0];
    var columns = asize[1];

    // datatype
    var dt;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string') {
      // datatype
      dt = adt;
      // convert b to the same datatype
      b = typed.convert(b, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }
    
    // result arrays
    var cdata = [];
    // matrix
    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });

    // workspaces
    var x = [];
    // marks indicating we have a value in x for a given column
    var w = [];

    // loop columns
    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1;
      // values in j
      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k];
        // update workspace
        x[r] = avalues[k];
        w[r] = mark;
      }
      // loop rows
      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        }
        // check sparse matrix has a value @ i,j
        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        }
        else {
          // dense matrix value @ i, j
          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
        }
      }
    }

    // return sparse matrix
    return c;
  };
  
  return algorithm12;
}

exports.name = 'algorithm12';
exports.factory = factory;

},{}],520:[function(require,module,exports){
'use strict';

var util = require('../../../utils/index');
var DimensionError = require('../../../error/DimensionError');

var string = util.string,
    isString = string.isString;

function factory (type, config, load, typed) {

  var DenseMatrix = type.DenseMatrix;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). 
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */
  var algorithm13 = function (a, b, callback) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype;
    // b arrays
    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype;
    // c arrays
    var csize = [];

    // validate dimensions
    if (asize.length !== bsize.length)
      throw new DimensionError(asize.length, bsize.length);

    // validate each one of the dimension sizes
    for (var s = 0; s < asize.length; s++) {
      // must match
      if (asize[s] !== bsize[s])
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      // update dimension in c
      csize[s] = asize[s];
    }

    // datatype
    var dt;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt;
      // convert b to the same datatype
      b = typed.convert(b, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }

    // populate cdata, iterate through dimensions
    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];
    
    // c matrix
    return new DenseMatrix({
      data: cdata,
      size: csize,
      datatype: dt
    });
  };
  
  // recursive function
  var _iterate = function (f, level, s, n, av, bv) {
    // initialize array for this level
    var cv = [];
    // check we reach the last level
    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = f(av[i], bv[i]);
      }
    }
    else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
      }
    }
    return cv;
  };
  
  return algorithm13;
}

exports.name = 'algorithm13';
exports.factory = factory;

},{"../../../error/DimensionError":27,"../../../utils/index":555}],521:[function(require,module,exports){
'use strict';

var clone = require('../../../utils/object').clone;

function factory (type, config, load, typed) {

  var DenseMatrix = type.DenseMatrix;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). 
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */
  var algorithm14 = function (a, b, callback, inverse) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype;
    
    // datatype
    var dt;
    // callback signature to use
    var cf = callback;

    // process data types
    if (typeof adt === 'string') {
      // datatype
      dt = adt;
      // convert b to the same datatype
      b = typed.convert(b, dt);
      // callback
      cf = typed.find(callback, [dt, dt]);
    }
    
    // populate cdata, iterate through dimensions
    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];

    // c matrix
    return new DenseMatrix({
      data: cdata,
      size: clone(asize),
      datatype: dt
    });
  };
  
  // recursive function
  var _iterate = function (f, level, s, n, av, bv, inverse) {
    // initialize array for this level
    var cv = [];
    // check we reach the last level
    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
      }
    }
    else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
      }
    }
    return cv;
  };

  return algorithm14;
}

exports.name = 'algorithm14';
exports.factory = factory;

},{"../../../utils/object":558}],522:[function(require,module,exports){
'use strict';

var deepMap = require('./../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2);                         // returns number 2
   *    math.number('7.2');                     // returns number 7.2
   *    math.number(true);                      // returns number 1
   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm');    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
  var number = typed('number', {
    '': function () {
      return 0;
    },

    'number': function (x) {
      return x;
    },

    'string': function (x) {
      var num = Number(x);
      if (isNaN(num)) {
        throw new SyntaxError('String "' + x + '" is no valid number');
      }
      return num;
    },

    'BigNumber': function (x) {
      return x.toNumber();
    },

    'Fraction': function (x) {
      return x.valueOf();
    },

    'Unit': function (x) {
      throw new Error('Second argument with valueless unit expected');
    },

    'Unit, string | Unit': function (unit, valuelessUnit) {
      return unit.toNumber(valuelessUnit);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, number);
    }
  });

  number.toTex = {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  };

  return number;
}

exports.name = 'number';
exports.factory = factory;

},{"./../utils/collection/deepMap":547}],523:[function(require,module,exports){
'use strict';

function factory (type, config, load, typed) {
  /**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */
  function ResultSet(entries) {
    if (!(this instanceof ResultSet)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.entries = entries || [];
  }

  /**
   * Attach type information
   */
  ResultSet.prototype.type = 'ResultSet';
  ResultSet.prototype.isResultSet = true;

  /**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */
  ResultSet.prototype.valueOf = function () {
    return this.entries;
  };

  /**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */
  ResultSet.prototype.toString = function () {
    return '[' + this.entries.join(', ') + ']';
  };

  /**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */
  ResultSet.prototype.toJSON = function () {
    return {
      mathjs: 'ResultSet',
      entries: this.entries
    };
  };

  /**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */
  ResultSet.fromJSON = function (json) {
    return new ResultSet(json.entries);
  };

  return ResultSet;
}

exports.name = 'ResultSet';
exports.path = 'type';
exports.factory = factory;

},{}],524:[function(require,module,exports){
module.exports = [
  // type
  require('./ResultSet')
];

},{"./ResultSet":523}],525:[function(require,module,exports){
'use strict';

var deepMap = require('./../utils/collection/deepMap');
var number = require('../utils/number');

function factory (type, config, load, typed) {
  /**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2);               // returns string '4.2'
   *    math.string(math.complex(3, 2); // returns string '3 + 2i'
   *
   *    var u = math.unit(5, 'km');
   *    math.string(u.to('m'));         // returns string '5000 m'
   *
   *    math.string([true, false]);     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */
  var string = typed('string', {
    '': function () {
      return '';
    },

    'number': number.format,

    'null': function (x) {
      return 'null';
    },

    'boolean': function (x) {
      return x + '';
    },

    'string': function (x) {
      return x;
    },

    'Array | Matrix': function (x) {
      return deepMap(x, string);
    },

    'any': function (x) {
      return String(x);
    }
  });

  string.toTex = {
    0: '\\mathtt{""}',
    1: '\\mathrm{string}\\left(${args[0]}\\right)'
  };

  return string;
}

exports.name = 'string';
exports.factory = factory;

},{"../utils/number":557,"./../utils/collection/deepMap":547}],526:[function(require,module,exports){
'use strict';

var endsWith = require('../../utils/string').endsWith;
var clone = require('../../utils/object').clone;
var constants = require('../../utils/bignumber/constants');

function factory (type, config, load, typed, math) {
  var add       = load(require('../../function/arithmetic/addScalar'));
  var subtract  = load(require('../../function/arithmetic/subtract'));
  var multiply  = load(require('../../function/arithmetic/multiplyScalar'));
  var divide    = load(require('../../function/arithmetic/divideScalar'));
  var pow       = load(require('../../function/arithmetic/pow'));
  var abs       = load(require('../../function/arithmetic/abs'));
  var fix       = load(require('../../function/arithmetic/fix'));
  var round     = load(require('../../function/arithmetic/round'));
  var equal     = load(require('../../function/relational/equal'));
  var isNumeric = load(require('../../function/utils/isNumeric'));
  var format    = load(require('../../function/string/format'));
  var getTypeOf = load(require('../../function/utils/typeof'));
  var toNumber  = load(require('../../type/number'));
  var Complex   = load(require('../../type/complex/Complex'));

  /**
   * A unit can be constructed in the following ways:
   *     var a = new Unit(value, name);
   *     var b = new Unit(null, name);
   *     var c = Unit.parse(str);
   *
   * Example usage:
   *     var a = new Unit(5, 'cm');               // 50 mm
   *     var b = Unit.parse('23 kg');             // 23 kg
   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m
   *     var d = new Unit(9.81, "m/s^2");         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */
  function Unit(value, name) {
    if (!(this instanceof Unit)) {
      throw new Error('Constructor must be called with the new operator');
    }

    if (!(value == undefined || isNumeric(value) || type.isComplex(value))) {
      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
    }
    if (name != undefined && (typeof name !== 'string' || name === '')) {
      throw new TypeError('Second parameter in Unit constructor must be a string');
    }

    if (name != undefined) {
      var u = Unit.parse(name);
      this.units = u.units;
      this.dimensions = u.dimensions;
    }
    else {
      this.units = [
        {
          unit: UNIT_NONE,
          prefix: PREFIXES.NONE,  // link to a list with supported prefixes
          power: 0
        }
      ];
      this.dimensions = []; 
      for(var i=0; i<BASE_DIMENSIONS.length; i++) {
        this.dimensions[i] = 0;
      }
    }

    this.value = (value != undefined) ? this._normalize(value) : null;

    this.fixPrefix = false; // if true, function format will not search for the
                            // best prefix but leave it as initially provided.
                            // fixPrefix is set true by the method Unit.to

    // The justification behind this is that if the constructor is explicitly called,
    // the caller wishes the units to be returned exactly as he supplied.
    this.isUnitListSimplified = true;

  }

  /**
   * Attach type information
   */
  Unit.prototype.type = 'Unit';
  Unit.prototype.isUnit = true;

  // private variables and functions for the Unit parser
  var text, index, c;

  function skipWhitespace() {
    while (c == ' ' || c == '\t') {
      next();
    }
  }

  function isDigitDot(c) {
    return ((c >= '0' && c <= '9') || c == '.');
  }

  function isDigit(c) {
    return ((c >= '0' && c <= '9'));
  }

  function next() {
    index++;
    c = text.charAt(index);
  }

  function revert(oldIndex) {
    index = oldIndex;
    c = text.charAt(index);
  }

  function parseNumber() {
    var number = '';
    var oldIndex;
    oldIndex = index;

    if (c == '+') {
      next();
    }
    else if (c == '-') {
      number += c;
      next();
    }

    if (!isDigitDot(c)) {
      // a + or - must be followed by a digit
      revert(oldIndex);
      return null;
    }

    // get number, can have a single dot
    if (c == '.') {
      number += c;
      next();
      if (!isDigit(c)) {
        // this is no legal number, it is just a dot
        revert(oldIndex);
        return null;
      }
    }
    else {
      while (isDigit(c)) {
        number += c;
        next();
      }
      if (c == '.') {
        number += c;
        next();
      }
    }
    while (isDigit(c)) {
      number += c;
      next();
    }

    // check for exponential notation like "2.3e-4" or "1.23e50"
    if (c == 'E' || c == 'e') {
      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"

      var tentativeNumber = '';
      var tentativeIndex = index;

      tentativeNumber += c;
      next();

      if (c == '+' || c == '-') {
        tentativeNumber += c;
        next();
      }

      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)
      if (!isDigit(c)) {
        // The e or E must belong to something else, so return the number without the e or E.
        revert(tentativeIndex);
        return number;
      }
      
      // We can now safely say that this is scientific notation.
      number = number + tentativeNumber;
      while (isDigit(c)) {
        number += c;
        next();
      }
    }

    return number;
  }

  function parseUnit() {
    var unitName = '';

    // Alphanumeric characters only; matches [a-zA-Z0-9]
    var code = text.charCodeAt(index);
    while ( (code >= 48 && code <= 57) ||
            (code >= 65 && code <= 90) ||
            (code >= 97 && code <= 122)) {
      unitName += c;
      next();
      code = text.charCodeAt(index);
    }

    // Must begin with [a-zA-Z]
    code = unitName.charCodeAt(0);
    if ((code >= 65 && code <= 90) ||
        (code >= 97 && code <= 122)) {
        return unitName || null;
    } 
    else {
      return null;
    }
  }

  function parseCharacter(toFind) {
    if (c === toFind) {
      next();
      return toFind;
    }
    else {
      return null;
    }
  }

  /**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */
  Unit.parse = function (str, options) {
    options = options || {};
    text = str;
    index = -1;
    c = '';

    if (typeof text !== 'string') {
      throw new TypeError('Invalid argument in Unit.parse, string expected');
    }

    var unit = new Unit();
    unit.units = [];

    // A unit should follow this pattern:
    // [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]

    // Rules:
    // number is any floating point number.
    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
    // The string may optionally begin with a number.
    // Each unit may optionally be followed by ^number.
    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
    //   2m^2kg/s^2
    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
    //   4erg

    next();
    skipWhitespace();
    // Optional number at the start of the string
    var valueStr = parseNumber();
    var value = null;
    if(valueStr) {
      if (config.number === 'BigNumber') {
        value = new type.BigNumber(valueStr);
      }
      else if (config.number === 'Fraction') {
        value = new type.Fraction(valueStr);
      }
      else { // number
        value = parseFloat(valueStr);
      }
    }
    skipWhitespace();    // Whitespace is not required here

    // Next, we read any number of unit[^number]
    var powerMultiplierCurrent = 1;
    var expectingUnit = false;

    // Stack to keep track of powerMultipliers applied to each parentheses group
    var powerMultiplierStack = [];

    // Running product of all elements in powerMultiplierStack
    var powerMultiplierStackProduct = 1;

    while (true) {
      skipWhitespace();

      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
      // A '(' will always appear directly before a unit.
      while (c === '(') {
        powerMultiplierStack.push(powerMultiplierCurrent);
        powerMultiplierStackProduct *= powerMultiplierCurrent;
        powerMultiplierCurrent = 1;
        next();
        skipWhitespace();
      }

      // Is there something here?
      if(c) {
        var oldC = c;
        var uStr = parseUnit();
        if(uStr == null) {
          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
        }
      }
      else {
        // End of input.
        break;
      }

      // Verify the unit exists and get the prefix (if any)
      var res = _findUnit(uStr);
      if(res == null) {
        // Unit not found.
        throw new SyntaxError('Unit "' + uStr + '" not found.');
      }

      var power = powerMultiplierCurrent * powerMultiplierStackProduct;
      // Is there a "^ number"?
      skipWhitespace();
      if (parseCharacter('^')) {
        skipWhitespace();
        var p = parseNumber();
        if(p == null) {
          // No valid number found for the power!
          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
        }
        power *= p;
      }

      // Add the unit to the list
      unit.units.push( {
        unit: res.unit,
        prefix: res.prefix,
        power: power
      });
      for(var i=0; i<BASE_DIMENSIONS.length; i++) {
        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
      }

      // Check for and consume closing parentheses, popping from the stack.
      // A ')' will always follow a unit.
      skipWhitespace();
      while (c === ')') {
        if(powerMultiplierStack.length === 0) {
          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
        }
        powerMultiplierStackProduct /= powerMultiplierStack.pop();
        next();
        skipWhitespace();
      }

      // "*" and "/" should mean we are expecting something to come next.
      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.
      expectingUnit = false;

      if (parseCharacter('*')) {
        // explicit multiplication
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      }
      else if (parseCharacter('/')) {
        // division
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      }
      else {
        // implicit multiplication
        powerMultiplierCurrent = 1;
      }

      // Replace the unit into the auto unit system
      if(res.unit.base) {
        var baseDim = res.unit.base.key;
        UNIT_SYSTEMS.auto[baseDim] = {
          unit: res.unit,
          prefix: res.prefix
        };
      }
    }
    
    // Has the string been entirely consumed?
    skipWhitespace();
    if(c) {
      throw new SyntaxError('Could not parse: "' + str + '"');
    }

    // Is there a trailing slash?
    if(expectingUnit) {
      throw new SyntaxError('Trailing characters: "' + str + '"');
    }

    // Is the parentheses stack empty?
    if(powerMultiplierStack.length !== 0) {
      throw new SyntaxError('Unmatched "(" in "' + text + '"');
    }

    // Are there any units at all?
    if(unit.units.length == 0 && !options.allowNoUnits) {
      throw new SyntaxError('"' + str + '" contains no units');
    }

    unit.value = (value != undefined) ? unit._normalize(value) : null;
    return unit;
  };

  /**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */
  Unit.prototype.clone = function () {
    var unit = new Unit();

    unit.fixPrefix = this.fixPrefix;
    unit.isUnitListSimplified = this.isUnitListSimplified;

    unit.value = clone(this.value);
    unit.dimensions = this.dimensions.slice(0);
    unit.units = [];
    for(var i = 0; i < this.units.length; i++) {
      unit.units[i] = { };
      for (var p in this.units[i]) {
        if (this.units[i].hasOwnProperty(p)) {
          unit.units[i][p] = this.units[i][p];
        }
      }
    }

    return unit;
  };

  /**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */
  Unit.prototype._isDerived = function() {
    if(this.units.length === 0) {
      return false;
    }
    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
  };

  /**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */
  Unit.prototype._normalize = function (value) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value == null || this.units.length === 0) {
      return value;
    }
    else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      var res = value;
      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

      for(var i=0; i < this.units.length; i++) {
        unitValue       = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower       = convert(this.units[i].power);
        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    }
    else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

      unitValue       = convert(this.units[0].unit.value);
      unitOffset      = convert(this.units[0].unit.offset);
      unitPrefixValue = convert(this.units[0].prefix.value);

      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
    }
  };

  /**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */
  Unit.prototype._denormalize = function (value, prefixValue) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;

    if (value == null || this.units.length === 0) {
      return value;
    }
    else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
      var res = value;
      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue       = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower       = convert(this.units[i].power);
        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    }
    else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

      unitValue       = convert(this.units[0].unit.value);
      unitPrefixValue = convert(this.units[0].prefix.value);
      unitOffset      = convert(this.units[0].unit.offset);

      if (prefixValue == undefined) {
        return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
      }
      else {
        return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);
      }
    }
  };

  /**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */
  function _findUnit(str) {
  
    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
    if(UNITS.hasOwnProperty(str)) {
      var unit = UNITS[str];
      var prefix = unit.prefixes[''];
      return {
        unit: unit,
        prefix: prefix
      }
    }

    for (var name in UNITS) {
      if (UNITS.hasOwnProperty(name)) {
        if (endsWith(str, name)) {
          var unit = UNITS[name];
          var prefixLen = (str.length - name.length);
          var prefixName = str.substring(0, prefixLen);
          var prefix = unit.prefixes.hasOwnProperty(prefixName)
              ? unit.prefixes[prefixName]
              : undefined;
          if (prefix !== undefined) {
            // store unit, prefix, and value
            return {
              unit: unit,
              prefix: prefix
            };
          }
        }
      }
    }

    return null;
  }

  /**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */
  Unit.isValuelessUnit = function (name) {
    return (_findUnit(name) != null);
  };

  /**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */
  Unit.prototype.hasBase = function (base) {

    if(typeof(base) === "string") {
      base = BASE_UNITS[base];
    }

    if(!base)
      return false;


    // All dimensions must be the same
    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }
    return true;

  };

  /**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */
  Unit.prototype.equalBase = function (other) {
    // All dimensions must be the same
    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }
    return true;
  };

  /**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */
  Unit.prototype.equals = function (other) {
    return (this.equalBase(other) && equal(this.value, other.value));
  };

  /**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */
  Unit.prototype.multiply = function (other) {
    var res = this.clone();
    
    for(var i = 0; i<BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
    }

    // Append other's units list onto res (simplify later in Unit.prototype.format)
    for(var i=0; i<other.units.length; i++) {
      // Make a deep copy
      var inverted = {};
      for(var key in other.units[i]) {
        inverted[key] = other.units[i][key];
      }
      res.units.push(inverted);
    }

    // If at least one operand has a value, then the result should also have a value
    if(this.value != null || other.value != null) {
      var valThis = this.value == null ? this._normalize(1) : this.value;
      var valOther = other.value == null ? other._normalize(1) : other.value;
      res.value = multiply(valThis, valOther);
    }
    else {
      res.value = null;
    }

    // Trigger simplification of the unit list at some future time
    res.isUnitListSimplified = false;

    return getNumericIfUnitless(res);
  };

  /**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */
  Unit.prototype.divide = function (other) {
    var res = this.clone();
    
    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
    }

    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)
    for(var i=0; i<other.units.length; i++) {
      // Make a deep copy
      var inverted = {};
      for(var key in other.units[i]) {
        inverted[key] = other.units[i][key];
      }
      inverted.power = -inverted.power;
      res.units.push(inverted);
    }

    // If at least one operand has a value, the result should have a value
    if (this.value != null || other.value != null) {
      var valThis = this.value == null ? this._normalize(1) : this.value;
      var valOther = other.value == null ? other._normalize(1) : other.value;
      res.value = divide(valThis, valOther);
    }
    else {
      res.value = null;
    }

    // Trigger simplification of the unit list at some future time
    res.isUnitListSimplified = false;

    return getNumericIfUnitless(res);
  };

  /**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */
  Unit.prototype.pow = function (p) {
    var res = this.clone();
    
    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) * p;
    }

    // Adjust the power of each unit in the list
    for(var i=0; i<res.units.length; i++) {
      res.units[i].power *= p;
    }

    if(res.value != null) {
      res.value = pow(res.value, p);

      // only allow numeric output, we don't want to return a Complex number
      //if (!isNumeric(res.value)) {
      //  res.value = NaN;
      //}
      // Update: Complex supported now
    }
    else {
      res.value = null;
    }

    // Trigger lazy evaluation of the unit list
    res.isUnitListSimplified = false;

    return getNumericIfUnitless(res);
  };

  /**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */
  var getNumericIfUnitless = function(unit) {
    if(unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
      return unit.value;
    }
    else {
      return unit;
    }
  }
    

  /**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */
  Unit.prototype.abs = function () {
    // This gives correct, but unexpected, results for units with an offset.
    // For example, abs(-283.15 degC) = -263.15 degC !!!
    var ret = this.clone();
    ret.value = abs(ret.value);

    for(var i in ret.units) {
      if(ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
        ret.units[i].unit = UNITS["W"];
      }
    }

    return ret;
  };

  /**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */
  Unit.prototype.to = function (valuelessUnit) {
    var other;
    var value = this.value == null ? this._normalize(1) : this.value;
    if (typeof valuelessUnit === 'string') {
      //other = new Unit(null, valuelessUnit);
      other = Unit.parse(valuelessUnit);
      if (!this.equalBase(other)) {
        throw new Error('Units do not match');
      }
      if (other.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other.value = clone(value);
      other.fixPrefix = true;
      other.isUnitListSimplified = true;
      return other;
    }
    else if (type.isUnit(valuelessUnit)) {
      if (!this.equalBase(valuelessUnit)) {
        throw new Error('Units do not match');
      }
      if (valuelessUnit.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }
      other = valuelessUnit.clone();
      other.value = clone(value);
      other.fixPrefix = true;
      other.isUnitListSimplified = true;
      return other;
    }
    else {
      throw new Error('String or Unit expected as parameter');
    }
  };

  /**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */
  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric
  Unit.prototype.toNumber = function (valuelessUnit) {
    return toNumber(this.toNumeric(valuelessUnit));
  };

  /**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */
  Unit.prototype.toNumeric = function (valuelessUnit) {
    var other = this;
    if(valuelessUnit) {
      // Allow getting the numeric value without converting to a different unit
      other = this.to(valuelessUnit);
    }

    other.simplifyUnitListLazy();

    if(other._isDerived()) {
      return other._denormalize(other.value);
    }
    else {
      return other._denormalize(other.value, other.units[0].prefix.value);
    }
  };

  /**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */
  Unit.prototype.toString = function () {
    return this.format();
  };

  /**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */
  Unit.prototype.toJSON = function () {
    return {
      mathjs: 'Unit',
      value: this._denormalize(this.value),
      unit: this.formatUnits(),
      fixPrefix: this.fixPrefix
    };
  };

  /**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */
  Unit.fromJSON = function (json) {
    var unit = new Unit(json.value, json.unit);
    unit.fixPrefix = json.fixPrefix || false;
    return unit;
  };

  /**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */
  Unit.prototype.valueOf = Unit.prototype.toString;

  /**
   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the "best" units for formatting.
   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.
   */
  Unit.prototype.simplifyUnitListLazy = function() {

    if (this.isUnitListSimplified || this.value == null) {
      return;
    }

    var proposedUnitList = [];

    // Search for a matching base
    var matchingBase;
    for(var key in currentUnitSystem) {
      if(this.hasBase(BASE_UNITS[key])) {
        matchingBase = key;
        break;
      }
    }

    if(matchingBase === 'NONE')
    {
      this.units = [];
    }
    else {
      var matchingUnit;
      if(matchingBase) {
        // Does the unit system have a matching unit?
        if(currentUnitSystem.hasOwnProperty(matchingBase)) {
          matchingUnit = currentUnitSystem[matchingBase];
        }
      }
      var value;
      var str;
      if(matchingUnit) {
        this.units = [{
          unit: matchingUnit.unit,
          prefix: matchingUnit.prefix,
          power: 1.0
        }];
      }
      else {
        // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the current unit system
        var missingBaseDim = false;
        for(var i=0; i<BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];
          if(Math.abs(this.dimensions[i] || 0) > 1e-12) {
            if(currentUnitSystem.hasOwnProperty(baseDim)) {
              proposedUnitList.push({
                unit: currentUnitSystem[baseDim].unit,
                prefix: currentUnitSystem[baseDim].prefix,
                power: this.dimensions[i] || 0
              });
            }
            else {
              missingBaseDim = true;
            }
          }
        }

        // Is the proposed unit list "simpler" than the existing one?
        if(proposedUnitList.length < this.units.length && !missingBaseDim) {
          // Replace this unit list with the proposed list
          this.units = proposedUnitList;
        }
      }
    }

    this.isUnitListSimplified = true;
  };

  Unit.prototype.toSI = function() {

    var ret = this.clone();

    var proposedUnitList = [];

    // Multiple units or units with powers are formatted like this:
    // 5 (kg m^2) / (s^3 mol)
    // Build an representation from the base units of the SI unit system
    var missingBaseDim = false;
    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
      var baseDim = BASE_DIMENSIONS[i];
      if(Math.abs(ret.dimensions[i] || 0) > 1e-12) {
        if(UNIT_SYSTEMS["si"].hasOwnProperty(baseDim)) {
          proposedUnitList.push({
            unit: UNIT_SYSTEMS["si"][baseDim].unit,
            prefix: UNIT_SYSTEMS["si"][baseDim].prefix,
            power: ret.dimensions[i] || 0
          });
        }
        else {
          throw new Error("Cannot express custom unit " + baseDim + " in SI units");
        }
      }
    }

    // Replace this unit list with the proposed list
    ret.units = proposedUnitList;

    ret.isUnitListSimplified = true;

    return ret;
  }

  /**
   * Get a string representation of the units of this Unit, without the value.
   * @memberof Unit
   * @return {string}
   */
  Unit.prototype.formatUnits = function () {

    // Lazy evaluation of the unit list
    this.simplifyUnitListLazy();

    var strNum = "";
    var strDen = "";
    var nNum = 0;
    var nDen = 0;

    for(var i=0; i<this.units.length; i++) {
      if(this.units[i].power > 0) {
        nNum++;
        strNum += " " + this.units[i].prefix.name + this.units[i].unit.name;
        if(Math.abs(this.units[i].power - 1.0) > 1e-15) {
          strNum += "^" + this.units[i].power;
        }
      }
      else if(this.units[i].power < 0) {
        nDen++;
      }
    }

    if(nDen > 0) {
      for(var i=0; i<this.units.length; i++) {
        if(this.units[i].power < 0) {
          if(nNum > 0) {
            strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
            if(Math.abs(this.units[i].power + 1.0) > 1e-15) {
              strDen += "^" + (-this.units[i].power);
            }
          }
          else {
            strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
            strDen += "^" + (this.units[i].power);
          }
        }
      }
    }
    // Remove leading " "
    strNum = strNum.substr(1);
    strDen = strDen.substr(1);

    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting
    if(nNum > 1 && nDen > 0) {
      strNum = "(" + strNum + ")";
    }
    if(nDen > 1 && nNum > 0) {
      strDen = "(" + strDen + ")";
    }

    var str = strNum;
    if(nNum > 0 && nDen > 0) {
      str += " / ";
    }
    str += strDen;

    return str;
  };

  /**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */
  Unit.prototype.format = function (options) {

    // Simplfy the unit list, if necessary
    this.simplifyUnitListLazy();

    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.
    var isImaginary = false;
    var isReal = true;
    if(typeof(this.value) !== 'undefined' && this.value !== null && type.isComplex(this.value)) {
      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
      isImaginary = Math.abs(this.value.re) < 1e-14;
      isReal = Math.abs(this.value.im) < 1e-14;
    }
    
    for(var i in this.units) {
      if(this.units[i].unit) {
        if(this.units[i].unit.name === 'VA' && isImaginary) {
          this.units[i].unit = UNITS["VAR"];
        }
        else if(this.units[i].unit.name === 'VAR' && !isImaginary) {
          this.units[i].unit = UNITS["VA"];
        }
      }
    }


    // Now apply the best prefix
    // Units must have only one unit and not have the fixPrefix flag set
    if (this.units.length === 1 && !this.fixPrefix) {
      // Units must have integer powers, otherwise the prefix will change the
      // outputted value by not-an-integer-power-of-ten
      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
        // Apply the best prefix
        this.units[0].prefix = this._bestPrefix();
      }
    }


    var value = this._denormalize(this.value);
    var str = (this.value !== null) ? format(value, options || {}) : '';
    var unitStr = this.formatUnits();
    if(this.value && type.isComplex(this.value)) {
      str = "(" + str + ")";    // Surround complex values with ( ) to enable better parsing 
    }
    if(unitStr.length > 0 && str.length > 0) {
      str += " ";
    }
    str += unitStr;

    return str;
  };

  /**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */
  Unit.prototype._bestPrefix = function () {
    if (this.units.length !== 1) {
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    }
    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    }

    // find the best prefix value (resulting in the value of which
    // the absolute value of the log10 is closest to zero,
    // though with a little offset of 1.2 for nicer values: you get a
    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...

    // Note: the units value can be any numeric type, but to find the best
    // prefix it's enough to work with limited precision of a regular number
    // Update: using mathjs abs since we also allow complex numbers
    var absValue = abs(this.value);
    var absUnitValue = abs(this.units[0].unit.value);
    var bestPrefix = this.units[0].prefix;
    if (absValue === 0) {
      return bestPrefix;
    }
    var power = this.units[0].power;
    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
    if(bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix;    // Allow the original prefix
    bestDiff = Math.abs(bestDiff);
    var prefixes = this.units[0].unit.prefixes;
    for (var p in prefixes) {
      if (prefixes.hasOwnProperty(p)) {
        var prefix = prefixes[p];
        if (prefix.scientific) {

          var diff = Math.abs(
              Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

          if (diff < bestDiff
              || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {
                // choose the prefix with the smallest diff, or if equal, choose the one
                // with the shortest name (can happen with SHORTLONG for example)
                bestPrefix = prefix;
                bestDiff = diff;
          }
        }
      }
    }

    return bestPrefix;
  };

  /**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units. 
   *
   *   Example:
   *
   *   var u = new Unit(1, 'm');
   *   u.splitUnit(['feet', 'inch']);
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */
  Unit.prototype.splitUnit = function(parts) {

    var x = this.clone();
    var ret = [];
    for(var i=0; i<parts.length; i++) {
      // Convert x to the requested unit
      x = x.to(parts[i]);
      if(i==parts.length-1) break;

      // Get the numeric value of this unit
      var xNumeric = x.toNumeric();

      // Check to see if xNumeric is nearly equal to an integer,
      // since fix can incorrectly round down if there is round-off error
      var xRounded = round(xNumeric);
      var xFixed;
      var isNearlyEqual = equal(xRounded, xNumeric);
      if (isNearlyEqual) {
        xFixed = xRounded;
      }
      else {
        xFixed = fix(x.toNumeric());
      }

      var y = new Unit(xFixed, parts[i].toString());
      ret.push(y);
      x = subtract(x, y);
    }

    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
    // But instead of comparing x, the remainder, with zero--we will compare the sum of
    // all the parts so far with the original value. If they are nearly equal,
    // we set the remainder to 0.
    var testSum = 0;
    for(var i=0; i<ret.length; i++) {
      testSum = add(testSum, ret[i].value);
    }
    if(equal(testSum, this.value)) {
      x.value = 0;
    }

    ret.push(x);

    return ret;
  };

  var PREFIXES = {
    NONE: {
      '': {name: '', value: 1, scientific: true}
    },
    SHORT: {
      '': {name: '', value: 1, scientific: true},

      'da': {name: 'da', value: 1e1, scientific: false},
      'h': {name: 'h', value: 1e2, scientific: false},
      'k': {name: 'k', value: 1e3, scientific: true},
      'M': {name: 'M', value: 1e6, scientific: true},
      'G': {name: 'G', value: 1e9, scientific: true},
      'T': {name: 'T', value: 1e12, scientific: true},
      'P': {name: 'P', value: 1e15, scientific: true},
      'E': {name: 'E', value: 1e18, scientific: true},
      'Z': {name: 'Z', value: 1e21, scientific: true},
      'Y': {name: 'Y', value: 1e24, scientific: true},

      'd': {name: 'd', value: 1e-1, scientific: false},
      'c': {name: 'c', value: 1e-2, scientific: false},
      'm': {name: 'm', value: 1e-3, scientific: true},
      'u': {name: 'u', value: 1e-6, scientific: true},
      'n': {name: 'n', value: 1e-9, scientific: true},
      'p': {name: 'p', value: 1e-12, scientific: true},
      'f': {name: 'f', value: 1e-15, scientific: true},
      'a': {name: 'a', value: 1e-18, scientific: true},
      'z': {name: 'z', value: 1e-21, scientific: true},
      'y': {name: 'y', value: 1e-24, scientific: true}
    },
    LONG: {
      '': {name: '', value: 1, scientific: true},

      'deca': {name: 'deca', value: 1e1, scientific: false},
      'hecto': {name: 'hecto', value: 1e2, scientific: false},
      'kilo': {name: 'kilo', value: 1e3, scientific: true},
      'mega': {name: 'mega', value: 1e6, scientific: true},
      'giga': {name: 'giga', value: 1e9, scientific: true},
      'tera': {name: 'tera', value: 1e12, scientific: true},
      'peta': {name: 'peta', value: 1e15, scientific: true},
      'exa': {name: 'exa', value: 1e18, scientific: true},
      'zetta': {name: 'zetta', value: 1e21, scientific: true},
      'yotta': {name: 'yotta', value: 1e24, scientific: true},

      'deci': {name: 'deci', value: 1e-1, scientific: false},
      'centi': {name: 'centi', value: 1e-2, scientific: false},
      'milli': {name: 'milli', value: 1e-3, scientific: true},
      'micro': {name: 'micro', value: 1e-6, scientific: true},
      'nano': {name: 'nano', value: 1e-9, scientific: true},
      'pico': {name: 'pico', value: 1e-12, scientific: true},
      'femto': {name: 'femto', value: 1e-15, scientific: true},
      'atto': {name: 'atto', value: 1e-18, scientific: true},
      'zepto': {name: 'zepto', value: 1e-21, scientific: true},
      'yocto': {name: 'yocto', value: 1e-24, scientific: true}
    },
    SQUARED: {
      '': {name: '', value: 1, scientific: true},

      'da': {name: 'da', value: 1e2, scientific: false},
      'h': {name: 'h', value: 1e4, scientific: false},
      'k': {name: 'k', value: 1e6, scientific: true},
      'M': {name: 'M', value: 1e12, scientific: true},
      'G': {name: 'G', value: 1e18, scientific: true},
      'T': {name: 'T', value: 1e24, scientific: true},
      'P': {name: 'P', value: 1e30, scientific: true},
      'E': {name: 'E', value: 1e36, scientific: true},
      'Z': {name: 'Z', value: 1e42, scientific: true},
      'Y': {name: 'Y', value: 1e48, scientific: true},

      'd': {name: 'd', value: 1e-2, scientific: false},
      'c': {name: 'c', value: 1e-4, scientific: false},
      'm': {name: 'm', value: 1e-6, scientific: true},
      'u': {name: 'u', value: 1e-12, scientific: true},
      'n': {name: 'n', value: 1e-18, scientific: true},
      'p': {name: 'p', value: 1e-24, scientific: true},
      'f': {name: 'f', value: 1e-30, scientific: true},
      'a': {name: 'a', value: 1e-36, scientific: true},
      'z': {name: 'z', value: 1e-42, scientific: true},
      'y': {name: 'y', value: 1e-48, scientific: true}
    },
    CUBIC: {
      '': {name: '', value: 1, scientific: true},

      'da': {name: 'da', value: 1e3, scientific: false},
      'h': {name: 'h', value: 1e6, scientific: false},
      'k': {name: 'k', value: 1e9, scientific: true},
      'M': {name: 'M', value: 1e18, scientific: true},
      'G': {name: 'G', value: 1e27, scientific: true},
      'T': {name: 'T', value: 1e36, scientific: true},
      'P': {name: 'P', value: 1e45, scientific: true},
      'E': {name: 'E', value: 1e54, scientific: true},
      'Z': {name: 'Z', value: 1e63, scientific: true},
      'Y': {name: 'Y', value: 1e72, scientific: true},

      'd': {name: 'd', value: 1e-3, scientific: false},
      'c': {name: 'c', value: 1e-6, scientific: false},
      'm': {name: 'm', value: 1e-9, scientific: true},
      'u': {name: 'u', value: 1e-18, scientific: true},
      'n': {name: 'n', value: 1e-27, scientific: true},
      'p': {name: 'p', value: 1e-36, scientific: true},
      'f': {name: 'f', value: 1e-45, scientific: true},
      'a': {name: 'a', value: 1e-54, scientific: true},
      'z': {name: 'z', value: 1e-63, scientific: true},
      'y': {name: 'y', value: 1e-72, scientific: true}
    },
    BINARY_SHORT: {
      '': {name: '', value: 1, scientific: true},
      'k': {name: 'k', value: 1e3, scientific: true},
      'M': {name: 'M', value: 1e6, scientific: true},
      'G': {name: 'G', value: 1e9, scientific: true},
      'T': {name: 'T', value: 1e12, scientific: true},
      'P': {name: 'P', value: 1e15, scientific: true},
      'E': {name: 'E', value: 1e18, scientific: true},
      'Z': {name: 'Z', value: 1e21, scientific: true},
      'Y': {name: 'Y', value: 1e24, scientific: true},

      'Ki': {name: 'Ki', value: 1024, scientific: true},
      'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},
      'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},
      'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},
      'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},
      'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},
      'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},
      'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}
    },
    BINARY_LONG: {
      '': {name: '', value: 1, scientific: true},
      'kilo': {name: 'kilo', value: 1e3, scientific: true},
      'mega': {name: 'mega', value: 1e6, scientific: true},
      'giga': {name: 'giga', value: 1e9, scientific: true},
      'tera': {name: 'tera', value: 1e12, scientific: true},
      'peta': {name: 'peta', value: 1e15, scientific: true},
      'exa': {name: 'exa', value: 1e18, scientific: true},
      'zetta': {name: 'zetta', value: 1e21, scientific: true},
      'yotta': {name: 'yotta', value: 1e24, scientific: true},

      'kibi': {name: 'kibi', value: 1024, scientific: true},
      'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},
      'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},
      'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},
      'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},
      'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},
      'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},
      'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}
    },
    BTU: {
      '':   {name: '',   value: 1,   scientific: true},
      'MM': {name: 'MM', value: 1e6, scientific: true}
    }
  };

  // Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):
  PREFIXES.SHORTLONG = {};
  for (var key in PREFIXES.SHORT) {
    if(PREFIXES.SHORT.hasOwnProperty(key)) {
      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
    }
  }
  for (var key in PREFIXES.LONG) {
    if(PREFIXES.LONG.hasOwnProperty(key)) {
      PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];
    }
  }

  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */

  var BASE_DIMENSIONS = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"];

  var BASE_UNITS = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },

    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },

    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },

    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };

  for(var key in BASE_UNITS) {
    BASE_UNITS[key].key = key;
  }

  var BASE_UNIT_NONE = {};

  var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0,0,0,0,0,0,0,0,0]};

  var UNITS = {
    // length
    meter: {
      name: 'meter',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: 'inch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: 'foot',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: 'yard',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: 'mile',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: 'link',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: 'rod',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.029210,
      offset: 0
    },
    chain: {
      name: 'chain',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: 'angstrom',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1e-10,
      offset: 0
    },

    m: {
      name: 'm',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    'in': {
      name: 'in',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: 'ft',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: 'yd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: 'mi',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: 'li',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: 'rd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.029210,
      offset: 0
    },
    ch: {
      name: 'ch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: 'mil',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0000254,
      offset: 0
    }, // 1/1000 inch

    // Surface
    m2: {
      name: 'm2',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: 'sqin',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.00064516,
      offset: 0
    }, // 645.16 mm2
    sqft: {
      name: 'sqft',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.09290304,
      offset: 0
    }, // 0.09290304 m2
    sqyd: {
      name: 'sqyd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.83612736,
      offset: 0
    }, // 0.83612736 m2
    sqmi: {
      name: 'sqmi',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 2589988.110336,
      offset: 0
    }, // 2.589988110336 km2
    sqrd: {
      name: 'sqrd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 25.29295,
      offset: 0
    }, // 25.29295 m2
    sqch: {
      name: 'sqch',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 404.6873,
      offset: 0
    }, // 404.6873 m2
    sqmil: {
      name: 'sqmil',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 6.4516e-10,
      offset: 0
    }, // 6.4516 * 10^-10 m2
    acre: {
      name: 'acre',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 4046.86,
      offset: 0
    }, // 4046.86 m2
    hectare: {
      name: 'hectare',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 10000,
      offset: 0
    }, // 10000 m2

    // Volume
    m3: {
      name: 'm3',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: 'L',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    }, // litre
    l: {
      name: 'l',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    }, // litre
    litre: {
      name: 'litre',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    cuin: {
      name: 'cuin',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1.6387064e-5,
      offset: 0
    }, // 1.6387064e-5 m3
    cuft: {
      name: 'cuft',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.028316846592,
      offset: 0
    }, // 28.316 846 592 L
    cuyd: {
      name: 'cuyd',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.764554857984,
      offset: 0
    }, // 764.554 857 984 L
    teaspoon: {
      name: 'teaspoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000005,
      offset: 0
    }, // 5 mL
    tablespoon: {
      name: 'tablespoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000015,
      offset: 0
    }, // 15 mL
    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: 'drop',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },  // 0.05 mL = 5e-8 m3
    gtt: {
      name: 'gtt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },  // 0.05 mL = 5e-8 m3

    // Liquid volume
    minim: {
      name: 'minim',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00000006161152,
      offset: 0
    }, // 0.06161152 mL
    fluiddram: {
      name: 'fluiddram',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },  // 3.696691 mL
    fluidounce: {
      name: 'fluidounce',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    }, // 29.57353 mL
    gill: {
      name: 'gill',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    }, // 118.2941 mL
    cc: {
      name: 'cc',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1e-6,
      offset: 0
    }, // 1e-6 L
    cup: {
      name: 'cup',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    }, // 236.5882 mL
    pint: {
      name: 'pint',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    }, // 473.1765 mL
    quart: {
      name: 'quart',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    }, // 946.3529 mL
    gallon: {
      name: 'gallon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    }, // 3.785412 L
    beerbarrel: {
      name: 'beerbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    }, // 117.3478 L
    oilbarrel: {
      name: 'oilbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    }, // 158.9873 L
    hogshead: {
      name: 'hogshead',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.2384810,
      offset: 0
    }, // 238.4810 L

    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
    fldr: {
      name: 'fldr',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },  // 3.696691 mL
    floz: {
      name: 'floz',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    }, // 29.57353 mL
    gi: {
      name: 'gi',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    }, // 118.2941 mL
    cp: {
      name: 'cp',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    }, // 236.5882 mL
    pt: {
      name: 'pt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    }, // 473.1765 mL
    qt: {
      name: 'qt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    }, // 946.3529 mL
    gal: {
      name: 'gal',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    }, // 3.785412 L
    bbl: {
      name: 'bbl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    }, // 117.3478 L
    obl: {
      name: 'obl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    }, // 158.9873 L
    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?

    // Mass
    g: {
      name: 'g',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    gram: {
      name: 'gram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },

    ton: {
      name: 'ton',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 907.18474,
      offset: 0
    },
    tonne: {
      name: 'tonne',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 1000,
      offset: 0
    },

    grain: {
      name: 'grain',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dram: {
      name: 'dram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    ounce: {
      name: 'ounce',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    poundmass: {
      name: 'poundmass',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    hundredweight: {
      name: 'hundredweight',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: 'stick',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 115e-3,
      offset: 0
    },
    stone: {
      name: 'stone',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 6.35029318,
      offset: 0
    },

    gr: {
      name: 'gr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dr: {
      name: 'dr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    oz: {
      name: 'oz',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    lbm: {
      name: 'lbm',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    cwt: {
      name: 'cwt',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },

    // Time
    s: {
      name: 's',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: 'min',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: 'h',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: 'second',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: 'sec',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: 'minute',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: 'hour',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: 'day',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: 'week',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 7*86400,
      offset: 0
    },
    month: {
      name: 'month',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 2629800, //1/12th of Julian year
      offset: 0
    },
    year: {
      name: 'year',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600, //Julian year
      offset: 0
    },
    decade: {
      name: 'year',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 315576000, //Julian decade
      offset: 0
    },
    century: {
      name: 'century',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3155760000, //Julian century
      offset: 0
    },
    millennium: {
      name: 'millennium',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600000, //Julian millennium
      offset: 0
    },

    // Frequency
    hertz: {
      name: 'Hertz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    Hz: {
      name: 'Hz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0,
      reciprocal: true
    },

    // Angle
    rad: {
      name: 'rad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: 'deg',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null, // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: 'grad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null, // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: 'cycle',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null, // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: 'arcsec',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null, // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: 'arcmin',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null, // will be filled in by calculateAngleValues()
      offset: 0
    },
    
    // Electric current
    A: {
      name: 'A',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: 'ampere',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },

    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) / 1.8
    // K(R) = °R / 1.8
    K: {
      name: 'K',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    degC: {
      name: 'degC',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: 'degF',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    degR: {
      name: 'degR',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    kelvin: {
      name: 'kelvin',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    celsius: {
      name: 'celsius',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: 'fahrenheit',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    rankine: {
      name: 'rankine',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },

    // amount of substance
    mol: {
      name: 'mol',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: 'mole',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },

    // luminous intensity
    cd: {
      name: 'cd',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    candela: {
      name: 'candela',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},

    // Force
    N: {
      name: 'N',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: 'newton',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: 'dyn',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 0.00001,
      offset: 0
    },
    dyne: {
      name: 'dyne',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 0.00001,
      offset: 0
    },
    lbf: {
      name: 'lbf',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: 'poundforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: 'kip',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 4448.2216,
      offset: 0
    },
	
    // Energy
    J: {
      name: 'J',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: 'joule',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    erg: {
      name: 'erg',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.NONE,
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: 'Wh',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: 'BTU',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: 'eV',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1.602176565e-19,
      offset: 0
    },
    electronvolt: {
      name: 'electronvolt',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.LONG,
      value: 1.602176565e-19,
      offset: 0
    },


    // Power
    W: {
      name: 'W',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: 'W',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: 'hp',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.NONE,
      value: 745.6998715386,
      offset: 0
    },

    // Electrical power units
    VAR: {
      name: 'VAR',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: Complex.I,
      offset: 0
    },
    
    VA: {
      name: 'VA',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },

    // Pressure
    Pa: {
      name: 'Pa',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: 'psi',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: 'atm',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: 'bar',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 100000,
      offset: 0
    },
    torr: {
      name: 'torr',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: 'mmHg',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: 'mmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: 'cmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 98.0665,
      offset: 0
    },

    // Electric charge
    coulomb: {
      name: 'coulomb',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: 'C',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: 'farad',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: 'F',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: 'volt',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: 'V',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: 'ohm',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORTLONG,    // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },
    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: 'henry',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: 'H',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: 'siemens',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: 'S',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: 'weber',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: 'Wb',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: 'tesla',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: 'T',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },

    // Binary
    b: {
      name: 'b',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: 'bits',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: 'B',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: 'bytes',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 8,
      offset: 0
    }
  };

  // aliases (formerly plurals)
  var ALIASES = {
    meters: 'meter',
    inches: 'inch',
    feet: 'foot',
    yards: 'yard',
    miles: 'mile',
    links: 'link',
    rods: 'rod',
    chains: 'chain',
    angstroms: 'angstrom',

    lt: 'l',
    litres: 'litre',
    liter: 'litre',
    liters: 'litre',
    teaspoons: 'teaspoon',
    tablespoons: 'tablespoon',
    minims: 'minim',
    fluiddrams: 'fluiddram',
    fluidounces: 'fluidounce',
    gills: 'gill',
    cups: 'cup',
    pints: 'pint',
    quarts: 'quart',
    gallons: 'gallon',
    beerbarrels: 'beerbarrel',
    oilbarrels: 'oilbarrel',
    hogsheads: 'hogshead',
    gtts: 'gtt',

    grams: 'gram',
    tons: 'ton',
    tonnes: 'tonne',
    grains: 'grain',
    drams: 'dram',
    ounces: 'ounce',
    poundmasses: 'poundmass',
    hundredweights: 'hundredweight',
    sticks: 'stick',
    lb: 'lbm',
    lbs: 'lbm',
	
    kips: 'kip',

    acres: 'acre',
    hectares: 'hectare',
    sqfeet: 'sqft',
    sqyard: 'sqyd',
    sqmile: 'sqmi',
    sqmiles: 'sqmi',

    mmhg: 'mmHg',
    mmh2o: 'mmH2O',
    cmh2o: 'cmH2O',

    seconds: 'second',
    secs: 'second',
    minutes: 'minute',
    mins: 'minute',
    hours: 'hour',
    hr: 'hour',
    hrs: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
    years: 'year',

    hertz: 'hertz',

    radians: 'rad',
    degree: 'deg',
    degrees: 'deg',
    gradian: 'grad',
    gradians: 'grad',
    cycles: 'cycle',
    arcsecond: 'arcsec',
    arcseconds: 'arcsec',
    arcminute: 'arcmin',
    arcminutes: 'arcmin',

    BTUs: 'BTU',
    watts: 'watt',
    joules: 'joule',

    amperes: 'ampere',
    coulombs: 'coulomb',
    volts: 'volt',
    ohms: 'ohm',
    farads: 'farad',
    webers: 'weber',
    teslas: 'tesla',
    electronvolts: 'electronvolt',
    moles: 'mole'

  };

  /**
   * Calculate the values for the angle units.
   * Value is calculated as number or BigNumber depending on the configuration
   * @param {{number: 'number' | 'BigNumber'}} config
   */
  function calculateAngleValues (config) {
    if (config.number === 'BigNumber') {
      var pi = constants.pi(type.BigNumber);
      UNITS.rad.value = new type.BigNumber(1);
      UNITS.deg.value = pi.div(180);        // 2 * pi / 360;
      UNITS.grad.value = pi.div(200);       // 2 * pi / 400;
      UNITS.cycle.value = pi.times(2);      // 2 * pi
      UNITS.arcsec.value = pi.div(648000);  // 2 * pi / 360 / 3600
      UNITS.arcmin.value = pi.div(10800);   // 2 * pi / 360 / 60
    }
    else { // number
      UNITS.rad.value = 1;
      UNITS.deg.value = Math.PI / 180;        // 2 * pi / 360;
      UNITS.grad.value = Math.PI / 200;       // 2 * pi / 400;
      UNITS.cycle.value = Math.PI * 2;        // 2 * pi
      UNITS.arcsec.value = Math.PI / 648000;  // 2 * pi / 360 / 3600;
      UNITS.arcmin.value = Math.PI / 10800;   // 2 * pi / 360 / 60;
    }
  }

  // apply the angle values now
  calculateAngleValues(config);

  // recalculate the values on change of configuration
  math.on('config', function (curr, prev) {
    if (curr.number !== prev.number) {
      calculateAngleValues(curr);
    }
  });

  /**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */
  var UNIT_SYSTEMS = {
    si: {
      // Base units
      NONE:                  {unit: UNIT_NONE, prefix: PREFIXES.NONE['']},
      LENGTH:                {unit: UNITS.m,   prefix: PREFIXES.SHORT['']},
      MASS:                  {unit: UNITS.g,   prefix: PREFIXES.SHORT['k']}, 
      TIME:                  {unit: UNITS.s,   prefix: PREFIXES.SHORT['']}, 
      CURRENT:               {unit: UNITS.A,   prefix: PREFIXES.SHORT['']}, 
      TEMPERATURE:           {unit: UNITS.K,   prefix: PREFIXES.SHORT['']}, 
      LUMINOUS_INTENSITY:    {unit: UNITS.cd,  prefix: PREFIXES.SHORT['']}, 
      AMOUNT_OF_SUBSTANCE:   {unit: UNITS.mol, prefix: PREFIXES.SHORT['']}, 
      ANGLE:                 {unit: UNITS.rad, prefix: PREFIXES.SHORT['']}, 
      BIT:                   {unit: UNITS.bit, prefix: PREFIXES.SHORT['']}, 

      // Derived units
      FORCE:                 {unit: UNITS.N,   prefix: PREFIXES.SHORT['']}, 
      ENERGY:                {unit: UNITS.J,   prefix: PREFIXES.SHORT['']},
      POWER:                 {unit: UNITS.W,   prefix: PREFIXES.SHORT['']},
      PRESSURE:              {unit: UNITS.Pa,  prefix: PREFIXES.SHORT['']},
      ELECTRIC_CHARGE:       {unit: UNITS.C,   prefix: PREFIXES.SHORT['']},
      ELECTRIC_CAPACITANCE:  {unit: UNITS.F,   prefix: PREFIXES.SHORT['']},
      ELECTRIC_POTENTIAL:    {unit: UNITS.V,   prefix: PREFIXES.SHORT['']},
      ELECTRIC_RESISTANCE:   {unit: UNITS.ohm, prefix: PREFIXES.SHORT['']},
      ELECTRIC_INDUCTANCE:   {unit: UNITS.H,   prefix: PREFIXES.SHORT['']},
      ELECTRIC_CONDUCTANCE:  {unit: UNITS.S,   prefix: PREFIXES.SHORT['']},
      MAGNETIC_FLUX:         {unit: UNITS.Wb,  prefix: PREFIXES.SHORT['']},
      MAGNETIC_FLUX_DENSITY: {unit: UNITS.T,   prefix: PREFIXES.SHORT['']},
      FREQUENCY:             {unit: UNITS.Hz,  prefix: PREFIXES.SHORT['']}
    }
  };

  // Clone to create the other unit systems
  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};
  UNIT_SYSTEMS.cgs.MASS =   {unit: UNITS.g,   prefix: PREFIXES.SHORT['']};
  UNIT_SYSTEMS.cgs.FORCE =  {unit: UNITS.dyn, prefix: PREFIXES.SHORT['']};
  UNIT_SYSTEMS.cgs.ENERGY = {unit: UNITS.erg, prefix: PREFIXES.NONE['']};
  // there are wholly 4 unique cgs systems for electricity and magnetism,
  // so let's not worry about it unless somebody complains
  
  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};
  UNIT_SYSTEMS.us.MASS =        {unit: UNITS.lbm,  prefix: PREFIXES.NONE['']};
  UNIT_SYSTEMS.us.TEMPERATURE = {unit: UNITS.degF, prefix: PREFIXES.NONE['']};
  UNIT_SYSTEMS.us.FORCE =       {unit: UNITS.lbf,  prefix: PREFIXES.NONE['']};
  UNIT_SYSTEMS.us.ENERGY =      {unit: UNITS.BTU,  prefix: PREFIXES.BTU['']};
  UNIT_SYSTEMS.us.POWER =       {unit: UNITS.hp,   prefix: PREFIXES.NONE['']};
  UNIT_SYSTEMS.us.PRESSURE =    {unit: UNITS.psi,  prefix: PREFIXES.NONE['']};

  // Add additional unit systems here.



  // Choose a unit system to seed the auto unit system.
  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));

  // Set the current unit system
  var currentUnitSystem = UNIT_SYSTEMS.auto;

  /**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */
  Unit.setUnitSystem = function(name) {
    if(UNIT_SYSTEMS.hasOwnProperty(name)) {
      currentUnitSystem = UNIT_SYSTEMS[name];
    }
    else {
      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
    }
  };

  /**
   * Return the current unit system.
   * @return {string} The current unit system.
   */
  Unit.getUnitSystem = function() {
    for(var key in UNIT_SYSTEMS) {
      if(UNIT_SYSTEMS[key] === currentUnitSystem) {
        return key;
      }
    }
  };

  /**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */
  Unit.typeConverters = {
    BigNumber: function (x) {
      return new type.BigNumber(x + ''); // stringify to prevent constructor error
    },

    Fraction: function (x) {
      return new type.Fraction(x);
    },

    Complex: function (x) {
      return x;
    },

    number: function (x) {
      return x;
    }
  };

  /**
   * Retrieve the right convertor function corresponding with the type
   * of provided exampleValue.
   *
   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
   *                        In case of an unknown type,
   * @return {Function}
   */
  Unit._getNumberConverter = function (type) {
    if (!Unit.typeConverters[type]) {
      throw new TypeError('Unsupported type "' + type + '"');
    }

    return Unit.typeConverters[type];
  };

  // Add dimensions to each built-in unit
  for (var key in UNITS) {
    var unit = UNITS[key];
    unit.dimensions = unit.base.dimensions;
  }    

  // Create aliases
  for (var name in ALIASES) {
    if(ALIASES.hasOwnProperty(name)) {
      var unit = UNITS[ALIASES[name]];
      var alias = {};
      for(var key in unit) {
        if(unit.hasOwnProperty(key)) {
          alias[key] = unit[key];
        }
      }
      alias.name = name;
      UNITS[name] = alias;
    }
  }

  function assertUnitNameIsValid(name) {
    for(var i=0; i<name.length; i++) {
      var c = name.charAt(i);
       
      var isValidAlpha = function (p) {
        return /^[a-zA-Z]$/.test(p);
      };

      var isDigit = function (c) {
        return (c >= '0' && c <= '9');
      }

      if(i === 0 && !isValidAlpha(c))
        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');

      if(i > 0 && !( isValidAlpha(c)
                  || isDigit(c)))
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');

    }
  }

  /**
   * Wrapper around createUnitSingle.
   * Example: 
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  }, 
   *  {
   *    override: true;
   *  });
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */
  Unit.createUnit = function(obj, options) {
    
    if(typeof(obj) !== 'object') {
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    }

    // Remove all units and aliases we are overriding
    if(options && options.override) {
      for(var key in obj) {
        if(obj.hasOwnProperty(key)) {
          Unit.deleteUnit(key);
        }
        if(obj[key].aliases) {
          for(var i=0; i<obj[key].aliases.length; i++) {
            Unit.deleteUnit(obj[key].aliases[i]);
          }
        }
      }
    }

    // TODO: traverse multiple times until all units have been added
    var lastUnit;
    for(var key in obj) {
      if(obj.hasOwnProperty(key)) {
        lastUnit = Unit.createUnitSingle(key, obj[key]);
      }
    }
    return lastUnit;
  };

  /**
   * Create a user-defined unit and register it with the Unit type.
   * Example: 
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
   *
   * @return {Unit} 
   */
  Unit.createUnitSingle = function(name, obj, options) {

    if(typeof(obj) === 'undefined' || obj === null) {
      obj = {};
    }
    
    if(typeof(name) !== 'string') {
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    }
   
    // Check collisions with existing units
    if(UNITS.hasOwnProperty(name)) {
      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
    }

    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.

    assertUnitNameIsValid(name);

    var defUnit = null;   // The Unit from which the new unit will be created.
    var aliases = [];
    var offset = 0;
    var definition;
    var prefixes;
    if(obj && obj.type === 'Unit') {
      defUnit = obj.clone();
    }
    else if(typeof(obj) === 'string') {
      if(obj !== '') {
        definition = obj;
      }
    }
    else if(typeof(obj) === 'object') {
      definition = obj.definition;
      prefixes = obj.prefixes; 
      offset = obj.offset;
      if (obj.aliases) {
        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
      }
    }
    else {
      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
    }

    if(aliases) {
      for (var i=0; i<aliases.length; i++) {
        if(UNITS.hasOwnProperty(aliases[i])) {
          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
        }
      }
    }

    if(definition && typeof(definition) === 'string' && !defUnit) {
      try {
        defUnit = Unit.parse(definition, {allowNoUnits: true});
      }
      catch (ex) {
        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
        throw(ex);
      }
    }
    else if(definition && definition.type === 'Unit') {
      defUnit = definition.clone();
    }

    aliases = aliases || [];
    offset = offset || 0;
    if(prefixes && prefixes.toUpperCase) 
      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
    else
      prefixes = PREFIXES.NONE;


    // If defUnit is null, it is because the user did not
    // specify a defintion. So create a new base dimension.
    var newUnit = {};
    if(!defUnit) {
      // Add a new base dimension
      var baseName = name + "_STUFF";   // foo --> foo_STUFF, or the essence of foo
      if(BASE_DIMENSIONS.indexOf(baseName) >= 0) {
        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
      }
      BASE_DIMENSIONS.push(baseName);

      // Push 0 onto existing base units
      for(var b in BASE_UNITS) {
        if(BASE_UNITS.hasOwnProperty(b)) {
          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length-1] = 0;
        }
      }

      // Add the new base unit
      var newBaseUnit = { dimensions: [] };
      for(var i=0; i<BASE_DIMENSIONS.length; i++) {
        newBaseUnit.dimensions[i] = 0;
      }
      newBaseUnit.dimensions[BASE_DIMENSIONS.length-1] = 1;
      newBaseUnit.key = baseName;
      BASE_UNITS[baseName] = newBaseUnit;
       
      newUnit = {
        name: name,
        value: 1,
        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
        prefixes: prefixes,
        offset: offset,
        base: baseName
      };

      currentUnitSystem[baseName] = {
        unit: newUnit,
        prefix: PREFIXES.NONE['']
      };

    }
    else {

      newUnit = {
        name: name,
        value: defUnit.value,
        dimensions: defUnit.dimensions.slice(0),
        prefixes: prefixes,
        offset: offset,
      };
      
      // Create a new base if no matching base exists
      var anyMatch = false;
      for(var i in BASE_UNITS) {
        if(BASE_UNITS.hasOwnProperty(i)) {
          var match = true;
          for(var j=0; j<BASE_DIMENSIONS.length; j++) {
            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {
              match = false;
              break;
            }
          }
          if(match) {
            anyMatch = true;
            break;
          }
        }
      }
      if(!anyMatch) {
        var baseName = name + "_STUFF";   // foo --> foo_STUFF, or the essence of foo
        // Add the new base unit
        var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };
        newBaseUnit.key = baseName;
        BASE_UNITS[baseName] = newBaseUnit;

        currentUnitSystem[baseName] = {
          unit: newUnit,
          prefix: PREFIXES.NONE['']
        };

        newUnit.base = baseName;
      }
    }

    Unit.UNITS[name] = newUnit;

    for (var i=0; i<aliases.length; i++) {
      var aliasName = aliases[i];
      var alias = {};
      for(var key in newUnit) {
        if(newUnit.hasOwnProperty(key)) {
          alias[key] = newUnit[key];
        }
      }
      alias.name = aliasName;
      Unit.UNITS[aliasName] = alias;
    }

    return new Unit(null, name);
  };

  Unit.deleteUnit = function(name) {
    delete Unit.UNITS[name];
  };

  // expose arrays with prefixes, dimensions, units, systems
  Unit.PREFIXES = PREFIXES;
  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
  Unit.BASE_UNITS = BASE_UNITS;
  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
  Unit.UNITS = UNITS;

  return Unit;
}

exports.name = 'Unit';
exports.path = 'type';
exports.factory = factory;
exports.math = true; // request access to the math namespace

},{"../../function/arithmetic/abs":304,"../../function/arithmetic/addScalar":306,"../../function/arithmetic/divideScalar":311,"../../function/arithmetic/fix":316,"../../function/arithmetic/multiplyScalar":326,"../../function/arithmetic/pow":329,"../../function/arithmetic/round":330,"../../function/arithmetic/subtract":334,"../../function/relational/equal":405,"../../function/string/format":438,"../../function/utils/isNumeric":474,"../../function/utils/typeof":478,"../../type/complex/Complex":489,"../../type/number":522,"../../utils/bignumber/constants":538,"../../utils/object":558,"../../utils/string":559}],527:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples: 
   *
   *     math.createUnit('foo');
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});
   *     math.createUnit('mph', '1 mile/hour');
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */
  var createUnit = typed('createUnit', {

    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    'Object, Object': function(obj, options) {
      return type.Unit.createUnit(obj, options);
    },

    // Same as above but without the options.
    'Object': function(obj) {
      return type.Unit.createUnit(obj, {});
    },

    // Shortcut method for creating one unit.
    'string, Unit | string | Object, Object': function (name, def, options) {
      var obj = {};
      obj[name] = def;
      return type.Unit.createUnit(obj, options);
    },

    // Same as above but without the options.
    'string, Unit | string | Object': function (name, def) {
      var obj = {};
      obj[name] = def;
      return type.Unit.createUnit(obj, {});
    },

    // Without a definition, creates a base unit.
    'string': function (name) {
      var obj = {};
      obj[name] = {};
      return type.Unit.createUnit(obj, {});
    },
  });

  return createUnit;
}

exports.name = 'createUnit';
exports.factory = factory;

},{"../../../utils/collection/deepMap":547}],528:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory (type, config, load, typed) {

  /**
   * Split a unit in an array of units whose sum is equal to the original unit.
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */
  var splitUnit = typed('splitUnit', {
    'Unit, Array': function(unit, parts) {
      return unit.splitUnit(parts);
    }
  });

  return splitUnit;

}

exports.name = 'splitUnit';
exports.factory = factory;

},{"../../../utils/collection/deepMap":547}],529:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory (type, config, load, typed) {
  /**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.type.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm
   *    var b = math.unit('23 kg');    // returns Unit 23 kg
   *    a.to('m');                     // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */

  var unit = typed('unit', {
    'Unit': function (x) {
      return x.clone();
    },

    'string': function (x) {
      if (type.Unit.isValuelessUnit(x)) {
        return new type.Unit(null, x); // a pure unit
      }

      return type.Unit.parse(x); // a unit with value, like '5cm'
    },

    'number | BigNumber | Fraction | Complex, string': function (value, unit) {
      return new type.Unit(value, unit);
    },

    'Array | Matrix': function (x) {
      return deepMap(x, unit);
    }
  });

  unit.toTex = {
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  };

  return unit;
}

exports.name = 'unit';
exports.factory = factory;

},{"../../../utils/collection/deepMap":547}],530:[function(require,module,exports){
module.exports = [
  // type
  require('./Unit'),

  // construction function
  require('./function/unit'),

  // create new units
  require('./function/createUnit'),

  // split units
  require('./function/splitUnit'),

  // physical constants
  require('./physicalConstants')
];

},{"./Unit":526,"./function/createUnit":527,"./function/splitUnit":528,"./function/unit":529,"./physicalConstants":531}],531:[function(require,module,exports){
var lazy = require('../../utils/object').lazy;


function factory (type, config, load, typed, math) {

  // helper function to create a unit with a fixed prefix
  function fixedUnit(str) {
    var unit = type.Unit.parse(str);
    unit.fixPrefix = true;
    return unit;
  }

  // Source: http://www.wikiwand.com/en/Physical_constant

  // Universal constants
  setLazyConstant(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});
  setLazyConstant(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});
  setLazyConstant(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});
  setLazyConstant(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});

  // Electromagnetic constants
  setLazyConstant(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});
  setLazyConstant(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});
  setLazyConstant(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});
  setLazyConstant(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});
  setLazyConstant(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});
  setLazyConstant(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});
  setLazyConstant(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});
  setLazyConstant(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});
  setLazyConstant(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});
  setLazyConstant(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});
  setLazyConstant(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});
  //setLazyConstant(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed

  // Atomic and nuclear constants
  setLazyConstant(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});
  setLazyConstant(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});
  setLazyConstant(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});
  setLazyConstant(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});
  setLazyConstant(math, 'fineStructure',           function () {return 7.297352569824e-3});
  setLazyConstant(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});
  setLazyConstant(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});
  setLazyConstant(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});
  setLazyConstant(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});
  setLazyConstant(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});
  setLazyConstant(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});
  setLazyConstant(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});
  setLazyConstant(math, 'weakMixingAngle',         function () {return 0.222321});
  setLazyConstant(math, 'efimovFactor',            function () {return 22.7});

  // Physico-chemical constants
  setLazyConstant(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});
  setLazyConstant(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});
  setLazyConstant(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});
  setLazyConstant(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});
  setLazyConstant(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});
  // setLazyConstant(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance
  setLazyConstant(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});
  setLazyConstant(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});
  setLazyConstant(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});
  setLazyConstant(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});
  setLazyConstant(math, 'sackurTetrode',       function () {return -1.164870823});
  setLazyConstant(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});
  setLazyConstant(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});
  setLazyConstant(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});

  // Adopted values
  setLazyConstant(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});
  setLazyConstant(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});
  setLazyConstant(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});
  // atm is defined in Unit.js

  // Natural units
  setLazyConstant(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});
  setLazyConstant(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});
  setLazyConstant(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});
  setLazyConstant(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});
  setLazyConstant(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});

}

// create a lazy constant in both math and mathWithTransform
function setLazyConstant (math, name, resolver) {
  lazy(math, name,  resolver);
  lazy(math.expression.mathWithTransform, name,  resolver);
}

exports.factory = factory;
exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed
exports.math = true;   // request access to the math namespace

},{"../../utils/object":558}],532:[function(require,module,exports){
'use strict';

var number = require('./number');
var string = require('./string');
var object = require('./object');
var types = require('./types');

var DimensionError = require('../error/DimensionError');
var IndexError = require('../error/IndexError');

/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */
exports.size = function (x) {
  var s = [];

  while (Array.isArray(x)) {
    s.push(x.length);
    x = x[0];
  }

  return s;
};

/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */
function _validate(array, size, dim) {
  var i;
  var len = array.length;

  if (len != size[dim]) {
    throw new DimensionError(len, size[dim]);
  }

  if (dim < size.length - 1) {
    // recursively validate each child array
    var dimNext = dim + 1;
    for (i = 0; i < len; i++) {
      var child = array[i];
      if (!Array.isArray(child)) {
        throw new DimensionError(size.length - 1, size.length, '<');
      }
      _validate(array[i], size, dimNext);
    }
  }
  else {
    // last dimension. none of the childs may be an array
    for (i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        throw new DimensionError(size.length + 1, size.length, '>');
      }
    }
  }
}

/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */
exports.validate = function(array, size) {
  var isScalar = (size.length == 0);
  if (isScalar) {
    // scalar
    if (Array.isArray(array)) {
      throw new DimensionError(array.length, 0);
    }
  }
  else {
    // array
    _validate(array, size, 0);
  }
};

/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */
exports.validateIndex = function(index, length) {
  if (!number.isNumber(index) || !number.isInteger(index)) {
    throw new TypeError('Index must be an integer (value: ' + index + ')');
  }
  if (index < 0 || (typeof length === 'number' && index >= length)) {
    throw new IndexError(index, length);
  }
};

// a constant used to specify an undefined defaultValue
exports.UNINITIALIZED = {};

/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. To leave new entries undefined,
 *                              specify array.UNINITIALIZED as defaultValue
 * @return {Array} array         The resized array
 */
exports.resize = function(array, size, defaultValue) {
  // TODO: add support for scalars, having size=[] ?

  // check the type of the arguments
  if (!Array.isArray(array) || !Array.isArray(size)) {
    throw new TypeError('Array expected');
  }
  if (size.length === 0) {
    throw new Error('Resizing to scalar is not supported');
  }

  // check whether size contains positive integers
  size.forEach(function (value) {
    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
      throw new TypeError('Invalid size, must contain positive integers ' +
          '(size: ' + string.format(size) + ')');
    }
  });

  // recursively resize the array
  var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;
  _resize(array, size, 0, _defaultValue);

  return array;
};

/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */
function _resize (array, size, dim, defaultValue) {
  var i;
  var elem;
  var oldLen = array.length;
  var newLen = size[dim];
  var minLen = Math.min(oldLen, newLen);

  // apply new length
  array.length = newLen;

  if (dim < size.length - 1) {
    // non-last dimension
    var dimNext = dim + 1;

    // resize existing child arrays
    for (i = 0; i < minLen; i++) {
      // resize child array
      elem = array[i];
      if (!Array.isArray(elem)) {
        elem = [elem]; // add a dimension
        array[i] = elem;
      }
      _resize(elem, size, dimNext, defaultValue);
    }

    // create new child arrays
    for (i = minLen; i < newLen; i++) {
      // get child array
      elem = [];
      array[i] = elem;

      // resize new child array
      _resize(elem, size, dimNext, defaultValue);
    }
  }
  else {
    // last dimension

    // remove dimensions of existing values
    for (i = 0; i < minLen; i++) {
      while (Array.isArray(array[i])) {
        array[i] = array[i][0];
      }
    }

    if(defaultValue !== exports.UNINITIALIZED) {
      // fill new elements with the default value
      for (i = minLen; i < newLen; i++) {
        array[i] = defaultValue;
      }
    }
  }
}

/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */
exports.reshape = function(array, sizes) {
  var flatArray = exports.flatten(array);
  var newArray;

  var product = function (arr) {
    return arr.reduce(function (prev, curr) {
      return prev * curr;
    });
  };

  if (!Array.isArray(array) || !Array.isArray(sizes)) {
    throw new TypeError('Array expected');
  }

  if (sizes.length === 0) {
    throw new DimensionError(0, product(exports.size(array)), '!=');
  }

  try {
    newArray  = _reshape(flatArray, sizes);
  } catch (e) {
    if (e instanceof DimensionError) {
      throw new DimensionError(
        product(sizes),
        product(exports.size(array)),
        '!='
      );
    }
    throw e;
  }

  if (flatArray.length > 0) {
    throw new DimensionError(
      product(sizes),
      product(exports.size(array)),
      '!='
    );
  }

  return newArray;
};

/**
 * Recursively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */
function _reshape(array, sizes) {
  var accumulator = [];
  var i;

  if (sizes.length === 0) {
    if (array.length === 0) {
      throw new DimensionError(null, null, '!=');
    }
    return array.shift();
  }
  for (i = 0; i < sizes[0]; i += 1) {
    accumulator.push(_reshape(array, sizes.slice(1)));
  }
  return accumulator;
}


/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */
exports.squeeze = function(array, size) {
  var s = size || exports.size(array);

  // squeeze outer dimensions
  while (Array.isArray(array) && array.length === 1) {
    array = array[0];
    s.shift();
  }

  // find the first dimension to be squeezed
  var dims = s.length;
  while (s[dims - 1] === 1) {
    dims--;
  }

  // squeeze inner dimensions
  if (dims < s.length) {
    array = _squeeze(array, dims, 0);
    s.length = dims;
  }

  return array;
};

/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */
function _squeeze (array, dims, dim) {
  var i, ii;

  if (dim < dims) {
    var next = dim + 1;
    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _squeeze(array[i], dims, next);
    }
  }
  else {
    while (Array.isArray(array)) {
      array = array[0];
    }
  }

  return array;
}

/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 * 
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 * 
 * @param {Array} array
 * @param {number} dims     Desired number of dimensions of the array
 * @param {number} [outer]  Number of outer dimensions to be added
 * @param {Array} [size]    Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */
exports.unsqueeze = function(array, dims, outer, size) {
  var s = size || exports.size(array);

  // unsqueeze outer dimensions
  if (outer) {
    for (var i = 0; i < outer; i++) {
      array = [array];
      s.unshift(1);
    }
  }

  // unsqueeze inner dimensions
  array = _unsqueeze(array, dims, 0);
  while (s.length < dims) {
    s.push(1);
  }

  return array;
};

/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */
function _unsqueeze (array, dims, dim) {
  var i, ii;

  if (Array.isArray(array)) {
    var next = dim + 1;
    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _unsqueeze(array[i], dims, next);
    }
  }
  else {
    for (var d = dim; d < dims; d++) {
      array = [array];
    }
  }

  return array;
}
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */
exports.flatten = function(array) {
  if (!Array.isArray(array)) {
    //if not an array, return as is
    return array;
  }
  var flat = [];

  array.forEach(function callback(value) {
    if (Array.isArray(value)) {
      value.forEach(callback);  //traverse through sub-arrays recursively
    }
    else {
      flat.push(value);
    }
  });

  return flat;
};

/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */
exports.map = function (array, callback) {
  return Array.prototype.map.call(array, callback);
}

/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */
exports.forEach = function (array, callback) {
  Array.prototype.forEach.call(array, callback);
}

/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */
exports.filter = function (array, callback) {
  if (exports.size(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, callback);
}

/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */
exports.filterRegExp = function (array, regexp) {
  if (exports.size(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, function (entry) {
    return regexp.test(entry);
  });
}

/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */
exports.join = function (array, separator) {
  return Array.prototype.join.call(array, separator);
}

/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array}	a  An array
 * @return {Array}	An array of objects containing the original value and its identifier
 */
exports.identify = function(a) {
  if (!Array.isArray(a)) {
	throw new TypeError('Array input expected');
  }
	
  if (a.length === 0) {
	return a;
  }
	
  var b = [];
  var count = 0;
  b[0] = {value: a[0], identifier: 0};
  for (var i=1; i<a.length; i++) {
    if (a[i] === a[i-1]) {
  	count++;
    }
    else {
      count = 0;
    }
    b.push({value: a[i], identifier: count});
  }
  return b;
}

/**
 * Remove the numeric identifier from the elements
 * @param	a  An array
 * @return	An array of values without identifiers
 */
exports.generalize = function(a) {
  if (!Array.isArray(a)) {
	throw new TypeError('Array input expected');
  }
	
  if (a.length === 0) {
	return a;
  }
	
  var b = [];
  for (var i=0; i<a.length; i++) {
    b.push(a[i].value);
  }
  return b;
}

/**
 * Test whether an object is an array
 * @param {*} value
 * @return {boolean} isArray
 */
exports.isArray = Array.isArray;

},{"../error/DimensionError":27,"../error/IndexError":28,"./number":557,"./object":558,"./string":559,"./types":560}],533:[function(require,module,exports){
var bitwise = require('./bitwise');

/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */
module.exports = function bitAnd(x, y) {
  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
    throw new Error('Integers expected in function bitAnd');
  }

  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.eq(-1) || x.eq(y)) {
    return x;
  }
  if (y.isZero() || x.eq(-1)) {
    return y;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      if (x.isNegative() == y.isNegative()) {
        return x;
      }
      return new BigNumber(0);
    }
    if (!x.isFinite()) {
      if (y.isNegative()) {
        return x;
      }
      if (x.isNegative()) {
        return new BigNumber(0);
      }
      return y;
    }
    if (!y.isFinite()) {
      if (x.isNegative()) {
        return y;
      }
      if (y.isNegative()) {
        return new BigNumber(0);
      }
      return x;
    }
  }
  return bitwise(x, y, function (a, b) { return a & b });
};

},{"./bitwise":537}],534:[function(require,module,exports){
/**
 * Bitwise not
 * @param {BigNumber} value
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */
module.exports = function bitNot (x) {
  if (x.isFinite() && !x.isInteger()) {
    throw new Error('Integer expected in function bitNot');
  }

  var BigNumber = x.constructor;
  var prevPrec = BigNumber.precision;
  BigNumber.config({precision: 1E9});

  var x = x.plus(new BigNumber(1));
  x.s = -x.s || null;

  BigNumber.config({precision: prevPrec});
  return x;
};

},{}],535:[function(require,module,exports){
var bitwise = require('./bitwise');

/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */
module.exports = function bitOr (x, y) {
  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
    throw new Error('Integers expected in function bitOr');
  }

  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  var negOne = new BigNumber(-1);
  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
    return y;
  }
  if (y.isZero() || x.eq(negOne)) {
    return x;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||
        (x.isNegative() && !y.isNegative() && !y.isFinite())) {
      return negOne;
    }
    if (x.isNegative() && y.isNegative()) {
      return x.isFinite() ? x : y;
    }
    return x.isFinite() ? y : x;
  }

  return bitwise(x, y, function (a, b) { return a | b });
};

},{"./bitwise":537}],536:[function(require,module,exports){
var bitwise = require('./bitwise');
var bitNot = require('./bitNot');

/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */
module.exports = function bitXor(x, y) {
  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
    throw new Error('Integers expected in function bitXor');
  }

  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }
  if (x.isZero()) {
    return y;
  }
  if (y.isZero()) {
    return x;
  }

  if (x.eq(y)) {
    return new BigNumber(0);
  }

  var negOne = new BigNumber(-1);
  if (x.eq(negOne)) {
    return bitNot(y);
  }
  if (y.eq(negOne)) {
    return bitNot(x);
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      return negOne;
    }
    return new BigNumber(x.isNegative() == y.isNegative()
        ?  Infinity
        : -Infinity);
  }
  return bitwise(x, y, function (a, b) { return a ^ b });
};

},{"./bitNot":534,"./bitwise":537}],537:[function(require,module,exports){
var bitNot = require('./bitNot');

/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */
module.exports = function bitwise(x, y, func) {
  var BigNumber = x.constructor;

  var xBits, yBits;
  var xSign = +(x.s < 0);
  var ySign = +(y.s < 0);
  if (xSign) {
    xBits = decCoefficientToBinaryString(bitNot(x));
    for (var i = 0; i < xBits.length; ++i) {
      xBits[i] ^= 1;
    }
  } else {
    xBits = decCoefficientToBinaryString(x);
  }
  if (ySign) {
    yBits = decCoefficientToBinaryString(bitNot(y));
    for (var i = 0; i < yBits.length; ++i) {
      yBits[i] ^= 1;
    }
  } else {
    yBits = decCoefficientToBinaryString(y);
  }

  var minBits, maxBits, minSign;
  if (xBits.length <= yBits.length) {
    minBits = xBits;
    maxBits = yBits;
    minSign = xSign;
  } else {
    minBits = yBits;
    maxBits = xBits;
    minSign = ySign;
  }

  var shortLen = minBits.length;
  var longLen = maxBits.length;
  var expFuncVal = func(xSign, ySign) ^ 1;
  var outVal = new BigNumber(expFuncVal ^ 1);
  var twoPower = new BigNumber(1);
  var two = new BigNumber(2);

  var prevPrec = BigNumber.precision;
  BigNumber.config({precision: 1E9});

  while (shortLen > 0) {
    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
      outVal = outVal.plus(twoPower);
    }
    twoPower = twoPower.times(two);
  }
  while (longLen > 0) {
    if (func(minSign, maxBits[--longLen]) == expFuncVal) {
      outVal = outVal.plus(twoPower);
    }
    twoPower = twoPower.times(two);
  }

  BigNumber.config({precision: prevPrec});

  if (expFuncVal == 0) {
    outVal.s = -outVal.s;
  }
  return outVal;
};

/* Extracted from decimal.js, and edited to specialize. */
function decCoefficientToBinaryString (x) {
  // Convert to string
  var a = x.d; // array with digits
  var r = a[0] + '';

  for (var i = 1; i < a.length; ++i) {
    var s = a[i] + '';
    for (var z = 7 - s.length; z--; ) {
      s = '0' + s;
    }

    r += s;
  }

  var j;
  for (j = r.length - 1; r.charAt(j) == '0'; --j);

  var xe = x.e;
  var str = r.slice(0, j + 1 || 1);
  var strL = str.length;
  if (xe > 0) {
    if (++xe > strL) {
      // Append zeros.
      for (xe -= strL; xe--; str += '0');
    } else if (xe < strL) {
      str = str.slice(0, xe) + '.' + str.slice(xe);
    }
  }

  // Convert from base 10 (decimal) to base 2
  var arr = [0];
  for (var i = 0; i < str.length; ) {
    for (var arrL = arr.length; arrL--; arr[arrL] *= 10);

    arr[0] += str.charAt(i++) << 0;  // convert to int
    for (var j = 0; j < arr.length; ++j) {
      if (arr[j] > 1) {
        if (arr[j + 1] == null) {
          arr[j + 1] = 0;
        }

        arr[j + 1] += arr[j] >> 1;
        arr[j] &= 1;
      }
    }
  }

  return arr.reverse();
}

},{"./bitNot":534}],538:[function(require,module,exports){
var memoize = require('../function').memoize;

/**
 * Calculate BigNumber e
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns e
 */
exports.e = memoize(function (BigNumber) {
  return new BigNumber(1).exp();
}, hasher);

/**
 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns phi
 */
exports.phi = memoize(function (BigNumber) {
  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
}, hasher);

/**
 * Calculate BigNumber pi.
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns pi
 */
exports.pi = memoize(function (BigNumber) {
  return BigNumber.acos(-1);
}, hasher);

/**
 * Calculate BigNumber tau, tau = 2 * pi
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns tau
 */
exports.tau = memoize(function (BigNumber) {
  return exports.pi(BigNumber).times(2);
}, hasher);

/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */
function hasher (args) {
  return args[0].precision;
}

},{"../function":554}],539:[function(require,module,exports){
/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential' and
 *                                          'auto', `precision` defines the total
 *                                          number of significant digits returned
 *                                          and is undefined by default.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point, and is 0 by default.
 *                     {Object} exponential An object containing two parameters,
 *                                          {number} lower and {number} upper,
 *                                          used by notation 'auto' to determine
 *                                          when to return exponential notation.
 *                                          Default values are `lower=1e-3` and
 *                                          `upper=1e5`.
 *                                          Only applicable for notation `auto`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4);                                        // '6.4'
 *    format(1240000);                                    // '1.24e6'
 *    format(1/3);                                        // '0.3333333333333333'
 *    format(1/3, 3);                                     // '0.333'
 *    format(21385, 2);                                   // '21000'
 *    format(12.071, {notation: 'fixed'});                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */
exports.format = function (value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  }

  // handle special cases
  if (!value.isFinite()) {
    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');
  }

  // default values for options
  var notation = 'auto';
  var precision = undefined;

  if (options !== undefined) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    }

    // determine precision from options
    if (typeof options === 'number') {
      precision = options;
    }
    else if (options.precision) {
      precision = options.precision;
    }
  }

  // handle the various notations
  switch (notation) {
    case 'fixed':
      return exports.toFixed(value, precision);

    case 'exponential':
      return exports.toExponential(value, precision);

    case 'auto':
      // determine lower and upper bound for exponential notation.
      // TODO: implement support for upper and lower to be BigNumbers themselves
      var lower = 1e-3;
      var upper = 1e5;
      if (options && options.exponential) {
        if (options.exponential.lower !== undefined) {
          lower = options.exponential.lower;
        }
        if (options.exponential.upper !== undefined) {
          upper = options.exponential.upper;
        }
      }

      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)
      var oldConfig = {
        toExpNeg: value.constructor.toExpNeg,
        toExpPos: value.constructor.toExpPos
      };

      value.constructor.config({
        toExpNeg: Math.round(Math.log(lower) / Math.LN10),
        toExpPos: Math.round(Math.log(upper) / Math.LN10)
      });

      // handle special case zero
      if (value.isZero()) return '0';

      // determine whether or not to output exponential notation
      var str;
      var abs = value.abs();
      if (abs.gte(lower) && abs.lt(upper)) {
        // normal number notation
        str = value.toSignificantDigits(precision).toFixed();
      }
      else {
        // exponential notation
        str = exports.toExponential(value, precision);
      }

      // remove trailing zeros after the decimal point
      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
        var digits = arguments[2];
        var e = arguments[4];
        return (digits !== '.') ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' +
          'Choose "auto", "exponential", or "fixed".');
  }
};

/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */
exports.toExponential = function (value, precision) {
  if (precision !== undefined) {
    return value.toExponential(precision - 1); // Note the offset of one
  }
  else {
    return value.toExponential();
  }
};

/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */
exports.toFixed = function (value, precision) {
  return value.toFixed(precision || 0);
  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an
  // undefined default precision instead of 0.
};

},{}],540:[function(require,module,exports){
/**
 * Test whether a value is a BigNumber
 * @param {*} x
 * @return {boolean}
 */
module.exports = function isBigNumber(x) {
  return x && x.constructor.prototype.isBigNumber || false
}

},{}],541:[function(require,module,exports){

/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */
module.exports = function leftShift (x, y) {
  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
    throw new Error('Integers expected in function leftShift');
  }

  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
    return new BigNumber(NaN);
  }
  if (x.isZero() || y.isZero()) {
    return x;
  }
  if (!x.isFinite() && !y.isFinite()) {
    return new BigNumber(NaN);
  }

  // Math.pow(2, y) is fully precise for y < 55, and fast
  if (y.lt(55)) {
    return x.times(Math.pow(2, y.toNumber()) + '');
  }
  return x.times(new BigNumber(2).pow(y));
};

},{}],542:[function(require,module,exports){
'use strict';

/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */
module.exports = function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon == null) {
    return x.eq(y);
  }


  // use "==" operator, handles infinities
  if (x.eq(y)) {
    return true;
  }

  // NaN
  if (x.isNaN() || y.isNaN()) {
    return false;
  }

  // at this point x and y should be finite
  if(x.isFinite() && y.isFinite()) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = x.minus(y).abs();
    if (diff.isZero()) {
      return true;
    }
    else {
      // use relative error
      var max = x.constructor.max(x.abs(), y.abs());
      return diff.lte(max.times(epsilon));
    }
  }

  // Infinite and Number or negative Infinite and positive Infinite cases
  return false;
};

},{}],543:[function(require,module,exports){
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */
module.exports = function rightArithShift (x, y) {
  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
    throw new Error('Integers expected in function rightArithShift');
  }

  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
    return new BigNumber(NaN);
  }
  if (x.isZero() || y.isZero()) {
    return x;
  }
  if (!y.isFinite()) {
    if (x.isNegative()) {
      return new BigNumber(-1);
    }
    if (!x.isFinite()) {
      return new BigNumber(NaN);
    }
    return new BigNumber(0);
  }

  // Math.pow(2, y) is fully precise for y < 55, and fast
  if (y.lt(55)) {
    return x.div(Math.pow(2, y.toNumber()) + '').floor();
  }
  return x.div(new BigNumber(2).pow(y)).floor();
};

},{}],544:[function(require,module,exports){
'use strict';

/**
 * Test whether value is a boolean
 * @param {*} value
 * @return {boolean} isBoolean
 */
exports.isBoolean = function(value) {
  return typeof value == 'boolean';
};

},{}],545:[function(require,module,exports){
'use strict';

var isCollection = require('./isCollection');

/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */
module.exports = function containsCollections (array) {
  for (var i = 0; i < array.length; i++) {
    if (isCollection(array[i])) {
      return true;
    }
  }
  return false;
};

},{"./isCollection":548}],546:[function(require,module,exports){
'use strict';

var isMatrix = require('./isMatrix');

/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */
module.exports = function deepForEach (array, callback) {
  if (isMatrix(array)) {
    array = array.valueOf();
  }

  for (var i = 0, ii = array.length; i < ii; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      deepForEach(value, callback);
    }
    else {
      callback(value);
    }
  }
};

},{"./isMatrix":549}],547:[function(require,module,exports){
'use strict';

/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */
module.exports = function deepMap(array, callback, skipZeros) {
  if (array && (typeof array.map === 'function')) {
    // TODO: replace array.map with a for loop to improve performance
    return array.map(function (x) {
      return deepMap(x, callback, skipZeros);
    });
  }
  else {
    return callback(array);
  }
};

},{}],548:[function(require,module,exports){
'use strict';

var isMatrix = require('./isMatrix');

/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */
module.exports = function isCollection (x) {
  return Array.isArray(x) || isMatrix(x);
};

},{"./isMatrix":549}],549:[function(require,module,exports){
'use strict';

/**
 * Test whether a value is a Matrix
 * @param {*} x
 * @returns {boolean} returns true with input is a Matrix
 *                    (like a DenseMatrix or SparseMatrix)
 */
module.exports = function isMatrix (x) {
  return x && x.constructor.prototype.isMatrix || false;
};

},{}],550:[function(require,module,exports){
'use strict';

var arraySize = require('../array').size;
var isMatrix = require('../collection/isMatrix');
var IndexError = require('../../error/IndexError');

/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */
module.exports = function(mat, dim, callback) {
  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
  if (dim < 0 || (dim >= size.length)) {
    // TODO: would be more clear when throwing a DimensionError here
    throw new IndexError(dim, size.length);
  }

  if (isMatrix(mat)) {
    return mat.create(_reduce(mat.valueOf(), dim, callback));
  }else {
    return _reduce(mat, dim, callback);
  }
};

/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */
function _reduce(mat, dim, callback){
  var i, ret, val, tran;

  if(dim<=0){
    if( !Array.isArray(mat[0]) ){
      val = mat[0];
      for(i=1; i<mat.length; i++){
        val = callback(val, mat[i]);
      }
      return val;
    }else{
      tran = _switch(mat);
      ret = [];
      for(i=0; i<tran.length; i++){
        ret[i] = _reduce(tran[i], dim-1, callback);
      }
      return ret;
    }
  }else{
    ret = [];
    for(i=0; i<mat.length; i++){
      ret[i] = _reduce(mat[i], dim-1, callback);
    }
    return ret;
  }
}

/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */
function _switch(mat){
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];
  for( j=0; j<J; j++) {
    var tmp = [];
    for( i=0; i<I; i++) {
      tmp.push(mat[i][j]);
    }
    ret.push(tmp);
  }
  return ret;
}

},{"../../error/IndexError":28,"../array":532,"../collection/isMatrix":549}],551:[function(require,module,exports){
'use strict';

module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  // c arrays
  var cindex = c._index;

  // vars
  var k, k0, k1, i;

  // check we need to process values (pattern matrix)
  if (x) {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k];
      // check value exists in current j
      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark;
        // add i to pattern of C
        cindex.push(i);
        // x(i) = A, check we need to call function this time
        if (update) {
          // copy value to workspace calling callback function
          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
          // function was called on current row
          u[i] = mark;
        }
        else {
          // copy value to workspace
          x[i] = avalues[k];
        }
      }
      else {
        // i exists in C already
        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
        // function was called on current row
        u[i] = mark;
      }
    }
  }
  else {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k];
      // check value exists in current j
      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark;
        // add i to pattern of C
        cindex.push(i);
      }
      else {
        // indicate function was called on current row
        u[i] = mark;
      }
    }
  }
};

},{}],552:[function(require,module,exports){
'use strict';

var hasOwnProperty = require('./object').hasOwnProperty;

/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */
function getSafeProperty (object, prop) {
  // only allow getting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop];
  }

  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
    throw new Error('Cannot access method "' + prop + '" as a property');
  }

  throw new Error('No access to property "' + prop + '"');
}

/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */
// TODO: merge this function into access.js?
function setSafeProperty (object, prop, value) {
  // only allow setting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop] = value;
  }

  throw new Error('No access to property "' + prop + '"');
}

/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */
function isSafeProperty (object, prop) {
  if (!object || typeof object !== 'object') {
    return false;
  }
  // SAFE: whitelisted
  // e.g length
  if (hasOwnProperty(safeNativeProperties, prop)) {
    return true;
  }
  // UNSAFE: inherited from Object prototype
  // e.g constructor
  if (prop in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  }
  // UNSAFE: inherited from Function prototype
  // e.g call, apply
  if (prop in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }
  return true;
}

/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */
// TODO: merge this function into assign.js?
function validateSafeMethod (object, method) {
  if (!isSafeMethod(object, method)) {
    throw new Error('No access to method "' + method + '"');
  }
}

/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */
function isSafeMethod (object, method) {
  if (!object || typeof object[method] !== 'function') {
    return false;
  }
  // UNSAFE: ghosted
  // e.g overridden toString
  // Note that IE10 doesn't support __proto__ and we can't do this check there.
  if (hasOwnProperty(object, method) &&
      (object.__proto__ && (method in object.__proto__))) {
    return false;
  }
  // SAFE: whitelisted
  // e.g toString
  if (hasOwnProperty(safeNativeMethods, method)) {
    return true;
  }
  // UNSAFE: inherited from Object prototype
  // e.g constructor
  if (method in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  }
  // UNSAFE: inherited from Function prototype
  // e.g call, apply
  if (method in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }
  return true;
}

function isPlainObject (object) {
  return typeof object === 'object' && object && object.constructor === Object;
}

var safeNativeProperties = {
  length: true,
  name: true
};

var safeNativeMethods = {
  toString: true,
  valueOf: true,
  toLocaleString: true
};

exports.getSafeProperty = getSafeProperty;
exports.setSafeProperty = setSafeProperty;
exports.isSafeProperty = isSafeProperty;
exports.validateSafeMethod = validateSafeMethod;
exports.isSafeMethod = isSafeMethod;
exports.isPlainObject = isPlainObject;

},{"./object":558}],553:[function(require,module,exports){
var Emitter = require('tiny-emitter');

/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */
exports.mixin = function (obj) {
  // create event emitter
  var emitter = new Emitter();

  // bind methods to obj (we don't want to expose the emitter.e Array...)
  obj.on   = emitter.on.bind(emitter);
  obj.off  = emitter.off.bind(emitter);
  obj.once = emitter.once.bind(emitter);
  obj.emit = emitter.emit.bind(emitter);

  return obj;
};

},{"tiny-emitter":616}],554:[function(require,module,exports){
// function utils

/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {function(args: Array)} [hasher]  A custom hash builder.
 *                                          Is JSON.stringify by default.
 * @return {function}                       Returns the memoized function
 */
exports.memoize = function(fn, hasher) {
  return function memoize() {
    if (typeof memoize.cache !== 'object') {
      memoize.cache = {};
    }

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    var hash = hasher ? hasher(args) : JSON.stringify(args);
    if (!(hash in memoize.cache)) {
      return memoize.cache[hash] = fn.apply(fn, args);
    }
    return memoize.cache[hash];
  };
};

/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */
exports.maxArgumentCount = function (fn) {
  return Object.keys(fn.signatures || {})
      .reduce(function (args, signature) {
        var count = (signature.match(/,/g) || []).length + 1;
        return Math.max(args, count);
      }, -1);
};

/**
 * Call a typed function with the
 * @param {function} fn   A function or typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */
exports.callWithRightArgumentCount = function (fn, args, argCount) {
  return Object.keys(fn.signatures || {})
      .reduce(function (args, signature) {
        var count = (signature.match(/,/g) || []).length + 1;
        return Math.max(args, count);
      }, -1);
};

},{}],555:[function(require,module,exports){
'use strict';

exports.array = require('./array');
exports['boolean'] = require('./boolean');
exports['function'] = require('./function');
exports.number = require('./number');
exports.object = require('./object');
exports.string = require('./string');
exports.types = require('./types');
exports.emitter = require('./emitter');

},{"./array":532,"./boolean":544,"./emitter":553,"./function":554,"./number":557,"./object":558,"./string":559,"./types":560}],556:[function(require,module,exports){
'use strict';

exports.symbols = {
  // GREEK LETTERS
  Alpha: 'A',     alpha: '\\alpha',
  Beta: 'B',      beta: '\\beta',
  Gamma: '\\Gamma',    gamma: '\\gamma',
  Delta: '\\Delta',    delta: '\\delta',
  Epsilon: 'E',   epsilon: '\\epsilon',  varepsilon: '\\varepsilon',
  Zeta: 'Z',      zeta: '\\zeta',
  Eta: 'H',       eta: '\\eta',
  Theta: '\\Theta',    theta: '\\theta',    vartheta: '\\vartheta',
  Iota: 'I',      iota: '\\iota',
  Kappa: 'K',     kappa: '\\kappa',    varkappa: '\\varkappa',
  Lambda: '\\Lambda',   lambda: '\\lambda',
  Mu: 'M',        mu: '\\mu',
  Nu: 'N',        nu: '\\nu',
  Xi: '\\Xi',       xi: '\\xi',
  Omicron: 'O',   omicron: 'o',
  Pi: '\\Pi',       pi: '\\pi',       varpi: '\\varpi',
  Rho: 'P',       rho: '\\rho',      varrho: '\\varrho',
  Sigma: '\\Sigma',    sigma: '\\sigma',    varsigma: '\\varsigma',
  Tau: 'T',       tau: '\\tau',
  Upsilon: '\\Upsilon',  upsilon: '\\upsilon',
  Phi: '\\Phi',      phi: '\\phi',      varphi: '\\varphi',
  Chi: 'X',       chi: '\\chi',
  Psi: '\\Psi',      psi: '\\psi',
  Omega: '\\Omega',    omega: '\\omega',
  //logic
  'true': '\\mathrm{True}',
  'false': '\\mathrm{False}',
  //other
  i: 'i', //TODO use \i ??
  inf: '\\infty',
  Inf: '\\infty',
  infinity: '\\infty',
  Infinity: '\\infty',
  oo: '\\infty',
  lim: '\\lim',
  'undefined': '\\mathbf{?}'
};

exports.operators = {
  'transpose': '^\\top',
  'factorial': '!',
  'pow': '^',
  'dotPow': '.^\\wedge', //TODO find ideal solution
  'unaryPlus': '+',
  'unaryMinus': '-',
  'bitNot': '~', //TODO find ideal solution
  'not': '\\neg',
  'multiply': '\\cdot',
  'divide': '\\frac', //TODO how to handle that properly?
  'dotMultiply': '.\\cdot', //TODO find ideal solution
  'dotDivide': '.:', //TODO find ideal solution
  'mod': '\\mod',
  'add': '+',
  'subtract': '-',
  'to': '\\rightarrow',
  'leftShift': '<<',
  'rightArithShift': '>>',
  'rightLogShift': '>>>',
  'equal': '=',
  'unequal': '\\neq',
  'smaller': '<',
  'larger': '>',
  'smallerEq': '\\leq',
  'largerEq': '\\geq',
  'bitAnd': '\\&',
  'bitXor': '\\underline{|}',
  'bitOr': '|',
  'and': '\\wedge',
  'xor': '\\veebar',
  'or': '\\vee'
};

exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';

var units = {
  deg: '^\\circ'
};

//@param {string} name
//@param {boolean} isUnit
exports.toSymbol = function (name, isUnit) {
  isUnit = typeof isUnit === 'undefined' ? false : isUnit;
  if (isUnit) {
    if (units.hasOwnProperty(name)) {
      return units[name];
    }
    return '\\mathrm{' + name + '}';
  }

  if (exports.symbols.hasOwnProperty(name)) {
    return exports.symbols[name];
  }
  else if (name.indexOf('_') !== -1) {
    //symbol with index (eg. alpha_1)
    var index = name.indexOf('_');
    return exports.toSymbol(name.substring(0, index)) + '_{'
      + exports.toSymbol(name.substring(index + 1)) + '}';
  }
  return name;
};

},{}],557:[function(require,module,exports){
'use strict';

/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */

/**
 * Test whether value is a number
 * @param {*} value
 * @return {boolean} isNumber
 */
exports.isNumber = function(value) {
  return typeof value === 'number';
};

/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */
exports.isInteger = function(value) {
  return isFinite(value)
      ? (value == Math.round(value))
      : false;
  // Note: we use ==, not ===, as we can have Booleans as well
};

/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {*}
 */
exports.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  else if (x < 0) {
    return -1;
  }
  else {
    return 0;
  }
};

/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential' and
 *                                          'auto', `precision` defines the total
 *                                          number of significant digits returned
 *                                          and is undefined by default.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point, and is 0 by default.
 *                     {Object} exponential An object containing two parameters,
 *                                          {number} lower and {number} upper,
 *                                          used by notation 'auto' to determine
 *                                          when to return exponential notation.
 *                                          Default values are `lower=1e-3` and
 *                                          `upper=1e5`.
 *                                          Only applicable for notation `auto`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4);                                        // '6.4'
 *    format(1240000);                                    // '1.24e6'
 *    format(1/3);                                        // '0.3333333333333333'
 *    format(1/3, 3);                                     // '0.333'
 *    format(21385, 2);                                   // '21000'
 *    format(12.071, {notation: 'fixed'});                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */
exports.format = function(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  }

  // handle special cases
  if (value === Infinity) {
    return 'Infinity';
  }
  else if (value === -Infinity) {
    return '-Infinity';
  }
  else if (isNaN(value)) {
    return 'NaN';
  }

  // default values for options
  var notation = 'auto';
  var precision = undefined;

  if (options) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    }

    // determine precision from options
    if (exports.isNumber(options)) {
      precision = options;
    }
    else if (options.precision) {
      precision = options.precision;
    }
  }

  // handle the various notations
  switch (notation) {
    case 'fixed':
      return exports.toFixed(value, precision);

    case 'exponential':
      return exports.toExponential(value, precision);

    case 'engineering':
      return exports.toEngineering(value, precision);

    case 'auto':
      return exports
          .toPrecision(value, precision, options && options.exponential)

          // remove trailing zeros after the decimal point
          .replace(/((\.\d*?)(0+))($|e)/, function () {
            var digits = arguments[2];
            var e = arguments[4];
            return (digits !== '.') ? digits + e : e;
          });

    default:
      throw new Error('Unknown notation "' + notation + '". ' +
          'Choose "auto", "exponential", or "fixed".');
  }
};

/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */
exports.splitNumber = function (value) {
  // parse the input value
  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
  if (!match) {
    throw new SyntaxError('Invalid number ' + value);
  }

  var sign         = match[1];
  var digits       = match[2];
  var exponent     = parseFloat(match[4] || '0');

  var dot = digits.indexOf('.');
  exponent += (dot !== -1) ? (dot - 1) : (digits.length - 1);

  var coefficients = digits
      .replace('.', '')  // remove the dot (must be removed before removing leading zeros)
      .replace(/^0*/, function (zeros) {
        // remove leading zeros, add their count to the exponent
        exponent -= zeros.length;
        return '';
      })
      .replace(/0*$/, '') // remove trailing zeros
      .split('')
      .map(function (d) {
        return parseInt(d);
      });

  if (coefficients.length === 0) {
    coefficients.push(0);
    exponent++;
  }

  return {
    sign: sign,
    coefficients: coefficients,
    exponent: exponent
  };
};


/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */
exports.toEngineering = function (value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }
  
  var rounded = exports.roundDigits(exports.splitNumber(value), precision);

  var e = rounded.exponent;
  var c = rounded.coefficients;

  // find nearest lower multiple of 3 for exponent
  var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));

  // concatenate coefficients with necessary zeros
  var significandsDiff = e >= 0 ? e : Math.abs(newExp);

  // add zeros if necessary (for ex: 1e+8)
  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));

  // find difference in exponents
  var expDiff = Math.abs(e - newExp);

  var decimalIdx = 1;

  // push decimal index over by expDiff times
  while (--expDiff >= 0) decimalIdx++;

  // if all coefficient values are zero after the decimal point, don't add a decimal value.
  // otherwise concat with the rest of the coefficients
  var decimals = c.slice(decimalIdx).join('');
  var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';

  var str = c.slice(0, decimalIdx).join('') +
      decimalVal +
      'e' + (e >= 0 ? '+' : '') + newExp.toString();
  return rounded.sign + str;
};

/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */
exports.toFixed = function (value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var splitValue = exports.splitNumber(value)
  var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));
  var c = rounded.coefficients;
  var p = rounded.exponent + 1; // exponent may have changed

  // append zeros if needed
  var pp = p + (precision || 0);
  if (c.length < pp) {
    c = c.concat(zeros(pp - c.length));
  }

  // prepend zeros if needed
  if (p < 0) {
    c = zeros(-p + 1).concat(c);
    p = 1;
  }

  // insert a dot if needed
  if (precision) {
    c.splice(p, 0, (p === 0) ? '0.' : '.');
  }

  return rounded.sign + c.join('');
};

/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */
exports.toExponential = function (value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  // round if needed, else create a clone
  var split = exports.splitNumber(value)
  var rounded = precision ? exports.roundDigits(split, precision) : split;
  var c = rounded.coefficients;
  var e = rounded.exponent;

  // append zeros if needed
  if (c.length < precision) {
    c = c.concat(zeros(precision - c.length));
  }

  // format as `C.CCCe+EEE` or `C.CCCe-EEE`
  var first = c.shift();
  return rounded.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +
      'e' + (e >= 0 ? '+' : '') + e;
}

/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lower: number | undefined, upper: number | undefined}} [options]
 *                                       By default:
 *                                         lower = 1e-3 (excl)
 *                                         upper = 1e+5 (incl)
 * @return {string}
 */
exports.toPrecision = function (value, precision, options) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  // determine lower and upper bound for exponential notation.
  var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;
  var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;

  var split = exports.splitNumber(value)
  var abs = Math.abs(Math.pow(10, split.exponent));
  if (abs < lower || abs >= upper) {
    // exponential notation
    return exports.toExponential(value, precision);
  }
  else {
    var rounded = precision ? exports.roundDigits(split, precision) : split;
    var c = rounded.coefficients;
    var e = rounded.exponent;

    // append trailing zeros
    if (c.length < precision) {
      c = c.concat(zeros(precision - c.length));
    }

    // append trailing zeros
    // TODO: simplify the next statement
    c = c.concat(zeros(e - c.length + 1 +
        (c.length < precision ? precision - c.length : 0)));

    // prepend zeros
    c = zeros(-e).concat(c);

    var dot = e > 0 ? e : 0;
    if (dot < c.length - 1) {
      c.splice(dot + 1, 0, '.');
    }

    return rounded.sign + c.join('');
  }
}

/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */
exports.roundDigits = function (split, precision) {
  // create a clone
  var rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  }
  var c = rounded.coefficients;

  // prepend zeros if needed
  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }

  if (c.length > precision) {
    var removed = c.splice(precision, c.length - precision);

    if (removed[0] >= 5) {
      var i = precision - 1;
      c[i]++;
      while (c[i] === 10) {
        c.pop();
        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }
        i--;
        c[i]++;
      }
    }
  }

  return rounded;
};

/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */
function zeros(length) {
  var arr = [];
  for (var i = 0; i < length; i++) {
    arr.push(0);
  }
  return arr;
}

/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */
exports.digits = function(value) {
  return value
      .toExponential()
      .replace(/e.*$/, '')          // remove exponential notation
      .replace( /^0\.?0*|\./, '')   // remove decimal point and leading zeros
      .length
};

/**
 * Minimum number added to one that makes the result different than one
 */
exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;

/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/
exports.nearlyEqual = function(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon == null) {
    return x == y;
  }

  // use "==" operator, handles infinities
  if (x == y) {
    return true;
  }

  // NaN
  if (isNaN(x) || isNaN(y)) {
    return false;
  }

  // at this point x and y should be finite
  if(isFinite(x) && isFinite(y)) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = Math.abs(x - y);
    if (diff < exports.DBL_EPSILON) {
      return true;
    }
    else {
      // use relative error
      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    }
  }

  // Infinite and Number or negative Infinite and positive Infinite cases
  return false;
};

},{}],558:[function(require,module,exports){
'use strict';

var isBigNumber = require('./bignumber/isBigNumber');

/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */
exports.clone = function clone(x) {
  var type = typeof x;

  // immutable primitive types
  if (type === 'number' || type === 'string' || type === 'boolean' ||
      x === null || x === undefined) {
    return x;
  }

  // use clone function of the object when available
  if (typeof x.clone === 'function') {
    return x.clone();
  }

  // array
  if (Array.isArray(x)) {
    return x.map(function (value) {
      return clone(value);
    });
  }

  if (x instanceof Number)    return new Number(x.valueOf());
  if (x instanceof String)    return new String(x.valueOf());
  if (x instanceof Boolean)   return new Boolean(x.valueOf());
  if (x instanceof Date)      return new Date(x.valueOf());
  if (isBigNumber(x))         return x; // bignumbers are immutable
  if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp

  // object
  return exports.map(x, clone);
};

/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */
exports.map = function(object, callback) {
  var clone = {};

  for (var key in object) {
    if (exports.hasOwnProperty(object, key)) {
      clone[key] = callback(object[key]);
    }
  }

  return clone;
}

/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */
exports.extend = function(a, b) {
  for (var prop in b) {
    if (exports.hasOwnProperty(b, prop)) {
      a[prop] = b[prop];
    }
  }
  return a;
};

/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */
exports.deepExtend = function deepExtend (a, b) {
  // TODO: add support for Arrays to deepExtend
  if (Array.isArray(b)) {
    throw new TypeError('Arrays are not supported by deepExtend');
  }

  for (var prop in b) {
    if (exports.hasOwnProperty(b, prop)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }
        if (a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        }
        else {
          a[prop] = b[prop];
        }
      } else if (Array.isArray(b[prop])) {
        throw new TypeError('Arrays are not supported by deepExtend');
      } else {
        a[prop] = b[prop];
      }
    }
  }
  return a;
};

/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */
exports.deepEqual = function deepEqual (a, b) {
  var prop, i, len;
  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }

    if (a.length != b.length) {
      return false;
    }

    for (i = 0, len = a.length; i < len; i++) {
      if (!exports.deepEqual(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
  else if (a instanceof Object) {
    if (Array.isArray(b) || !(b instanceof Object)) {
      return false;
    }

    for (prop in a) {
      //noinspection JSUnfilteredForInLoop
      if (!exports.deepEqual(a[prop], b[prop])) {
        return false;
      }
    }
    for (prop in b) {
      //noinspection JSUnfilteredForInLoop
      if (!exports.deepEqual(a[prop], b[prop])) {
        return false;
      }
    }
    return true;
  }
  else {
    return (typeof a === typeof b) && (a == b);
  }
};

/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */
exports.canDefineProperty = function () {
  // test needed for broken IE8 implementation
  try {
    if (Object.defineProperty) {
      Object.defineProperty({}, 'x', { get: function () {} });
      return true;
    }
  } catch (e) {}

  return false;
};

/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 * On older browsers (<IE8), the function will fall back to direct evaluation
 * of the properties value.
 * @param {Object} object   Object where to add the property
 * @param {string} prop     Property name
 * @param {Function} fn     Function returning the property value. Called
 *                          without arguments.
 */
exports.lazy = function (object, prop, fn) {
  if (exports.canDefineProperty()) {
    var _uninitialized = true;
    var _value;
    Object.defineProperty(object, prop, {
      get: function () {
        if (_uninitialized) {
          _value = fn();
          _uninitialized = false;
        }
        return _value;
      },

      set: function (value) {
        _value = value;
        _uninitialized = false;
      },

      configurable: true,
      enumerable: true
    });
  }
  else {
    // fall back to immediate evaluation
    object[prop] = fn();
  }
};

/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */
exports.traverse = function(object, path) {
  var obj = object;

  if (path) {
    var names = path.split('.');
    for (var i = 0; i < names.length; i++) {
      var name = names[i];
      if (!(name in obj)) {
        obj[name] = {};
      }
      obj = obj[name];
    }
  }

  return obj;
};

/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */
exports.hasOwnProperty = function (object, property) {
  return object && Object.hasOwnProperty.call(object, property);
}

/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */
exports.isFactory = function (object) {
  return object && typeof object.factory === 'function';
};

},{"./bignumber/isBigNumber":540}],559:[function(require,module,exports){
'use strict';

var formatNumber = require('./number').format;
var formatBigNumber = require('./bignumber/formatter').format;
var isBigNumber = require('./bignumber/isBigNumber');

/**
 * Test whether value is a string
 * @param {*} value
 * @return {boolean} isString
 */
exports.isString = function(value) {
  return typeof value === 'string';
};

/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */
exports.endsWith = function(text, search) {
  var start = text.length - search.length;
  var end = text.length;
  return (text.substring(start, end) === search);
};

/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7);                // '0.2857142857142857'
 *     math.format(math.pi, 3);         // '3.14'
 *     math.format(new Complex(2, 3));  // '2 + 3i'
 *     math.format('hello');            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */
exports.format = function(value, options) {
  if (typeof value === 'number') {
    return formatNumber(value, options);
  }

  if (isBigNumber(value)) {
    return formatBigNumber(value, options);
  }

  // note: we use unsafe duck-typing here to check for Fractions, this is
  // ok here since we're only invoking toString or concatenating its values
  if (looksLikeFraction(value)) {
    if (!options || options.fraction !== 'decimal') {
      // output as ratio, like '1/3'
      return (value.s * value.n) + '/' + value.d;
    }
    else {
      // output as decimal, like '0.(3)'
      return value.toString();
    }
  }

  if (Array.isArray(value)) {
    return formatArray(value, options);
  }

  if (exports.isString(value)) {
    return '"' + value + '"';
  }

  if (typeof value === 'function') {
    return value.syntax ? String(value.syntax) : 'function';
  }

  if (value && typeof value === 'object') {
    if (typeof value.format === 'function') {
      return value.format(options);
    }
    else if (value && value.toString() !== {}.toString()) {
      // this object has a non-native toString method, use that one
      return value.toString();
    }
    else {
      var entries = [];

      for (var key in value) {
        if (value.hasOwnProperty(key)) {
          entries.push('"' + key + '": ' + exports.format(value[key], options));
        }
      }

      return '{' + entries.join(', ') + '}';
    }
  }

  return String(value);
};

/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */
exports.stringify = function (value) {
  var text = String(value);
  var escaped = '';
  var i = 0;
  while (i < text.length) {
    var c = text.charAt(i);

    if (c === '\\') {
      escaped += c;
      i++;

      c = text.charAt(i);
      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
        escaped += '\\';  // no valid escape character -> escape it
      }
      escaped += c;
    }
    else if (c === '"') {
      escaped += '\\"';
    }
    else {
      escaped += c;
    }
    i++;
  }

  return '"' + escaped + '"';
}

/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */
exports.escape = function (value) {
  var text = String(value);
  text = text.replace(/&/g, '&amp;')
			 .replace(/"/g, '&quot;')
			 .replace(/'/g, '&#39;')
			 .replace(/</g, '&lt;')
			 .replace(/>/g, '&gt;');
  
  return text;
}

/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */
function formatArray (array, options) {
  if (Array.isArray(array)) {
    var str = '[';
    var len = array.length;
    for (var i = 0; i < len; i++) {
      if (i != 0) {
        str += ', ';
      }
      str += formatArray(array[i], options);
    }
    str += ']';
    return str;
  }
  else {
    return exports.format(array, options);
  }
}

/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */
function looksLikeFraction (value) {
  return (value &&
      typeof value === 'object' &&
      typeof value.s === 'number' &&
      typeof value.n === 'number' &&
      typeof value.d === 'number') || false;
}

},{"./bignumber/formatter":539,"./bignumber/isBigNumber":540,"./number":557}],560:[function(require,module,exports){
'use strict';

/**
 * Determine the type of a variable
 *
 *     type(x)
 *
 * The following types are recognized:
 *
 *     'undefined'
 *     'null'
 *     'boolean'
 *     'number'
 *     'string'
 *     'Array'
 *     'Function'
 *     'Date'
 *     'RegExp'
 *     'Object'
 *
 * @param {*} x
 * @return {string} Returns the name of the type. Primitive types are lower case,
 *                  non-primitive types are upper-camel-case.
 *                  For example 'number', 'string', 'Array', 'Date'.
 */
exports.type = function(x) {
  var type = typeof x;

  if (type === 'object') {
    if (x === null)           return 'null';
    if (Array.isArray(x))     return 'Array';
    if (x instanceof Date)    return 'Date';
    if (x instanceof RegExp)  return 'RegExp';
    if (x instanceof Boolean) return 'boolean';
    if (x instanceof Number)  return 'number';
    if (x instanceof String)  return 'string';

    return 'Object';
  }

  if (type === 'function')    return 'Function';

  return type;
};

},{}],561:[function(require,module,exports){
module.exports = '3.18.0';
// Note: This file is automatically generated when building math.js.
// Changes made in this file will be overwritten.

},{}],562:[function(require,module,exports){
(function (global){
/*! Native Promise Only
    v0.7.6-a (c) Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
!function(t,n,e){n[t]=n[t]||e(),"undefined"!=typeof module&&module.exports?module.exports=n[t]:"function"==typeof define&&define.amd&&define(function(){return n[t]})}("Promise","undefined"!=typeof global?global:this,function(){"use strict";function t(t,n){l.add(t,n),h||(h=y(l.drain))}function n(t){var n,e=typeof t;return null==t||"object"!=e&&"function"!=e||(n=t.then),"function"==typeof n?n:!1}function e(){for(var t=0;t<this.chain.length;t++)o(this,1===this.state?this.chain[t].success:this.chain[t].failure,this.chain[t]);this.chain.length=0}function o(t,e,o){var r,i;try{e===!1?o.reject(t.msg):(r=e===!0?t.msg:e.call(void 0,t.msg),r===o.promise?o.reject(TypeError("Promise-chain cycle")):(i=n(r))?i.call(r,o.resolve,o.reject):o.resolve(r))}catch(c){o.reject(c)}}function r(o){var c,u,a=this;if(!a.triggered){a.triggered=!0,a.def&&(a=a.def);try{(c=n(o))?(u=new f(a),c.call(o,function(){r.apply(u,arguments)},function(){i.apply(u,arguments)})):(a.msg=o,a.state=1,a.chain.length>0&&t(e,a))}catch(s){i.call(u||new f(a),s)}}}function i(n){var o=this;o.triggered||(o.triggered=!0,o.def&&(o=o.def),o.msg=n,o.state=2,o.chain.length>0&&t(e,o))}function c(t,n,e,o){for(var r=0;r<n.length;r++)!function(r){t.resolve(n[r]).then(function(t){e(r,t)},o)}(r)}function f(t){this.def=t,this.triggered=!1}function u(t){this.promise=t,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function a(n){if("function"!=typeof n)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var o=new u(this);this.then=function(n,r){var i={success:"function"==typeof n?n:!0,failure:"function"==typeof r?r:!1};return i.promise=new this.constructor(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");i.resolve=t,i.reject=n}),o.chain.push(i),0!==o.state&&t(e,o),i.promise},this["catch"]=function(t){return this.then(void 0,t)};try{n.call(void 0,function(t){r.call(o,t)},function(t){i.call(o,t)})}catch(c){i.call(o,c)}}var s,h,l,p=Object.prototype.toString,y="undefined"!=typeof setImmediate?function(t){return setImmediate(t)}:setTimeout;try{Object.defineProperty({},"x",{}),s=function(t,n,e,o){return Object.defineProperty(t,n,{value:e,writable:!0,configurable:o!==!1})}}catch(d){s=function(t,n,e){return t[n]=e,t}}l=function(){function t(t,n){this.fn=t,this.self=n,this.next=void 0}var n,e,o;return{add:function(r,i){o=new t(r,i),e?e.next=o:n=o,e=o,o=void 0},drain:function(){var t=n;for(n=e=h=void 0;t;)t.fn.call(t.self),t=t.next}}}();var g=s({},"constructor",a,!1);return s(a,"prototype",g,!1),s(g,"__NPO__",0,!1),s(a,"resolve",function(t){var n=this;return t&&"object"==typeof t&&1===t.__NPO__?t:new n(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");n(t)})}),s(a,"reject",function(t){return new this(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");e(t)})}),s(a,"all",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):0===t.length?n.resolve([]):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");var r=t.length,i=Array(r),f=0;c(n,t,function(t,n){i[t]=n,++f===r&&e(i)},o)})}),s(a,"race",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");c(n,t,function(t,n){e(n)},o)})}),a});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],563:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],564:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require('fbjs/lib/invariant');
  var warning = require('fbjs/lib/warning');
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":569,"_process":3,"fbjs/lib/invariant":10,"fbjs/lib/warning":11}],565:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = require('./factoryWithTypeCheckers');
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

},{"./factoryWithTypeCheckers":567}],566:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    invariant(
      false,
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./lib/ReactPropTypesSecret":569,"fbjs/lib/emptyFunction":8,"fbjs/lib/invariant":10}],567:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');
var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":564,"./lib/ReactPropTypesSecret":569,"_process":3,"fbjs/lib/emptyFunction":8,"fbjs/lib/invariant":10,"fbjs/lib/warning":11,"object-assign":563}],568:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}

}).call(this,require('_process'))
},{"./factoryWithThrowingShims":566,"./factoryWithTypeCheckers":567,"_process":3}],569:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],570:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var Radio = (function (_React$Component) {
  _inherits(Radio, _React$Component);

  function Radio() {
    _classCallCheck(this, Radio);

    _get(Object.getPrototypeOf(Radio.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Radio, [{
    key: 'render',
    value: function render() {
      var _context$radioGroup = this.context.radioGroup;
      var name = _context$radioGroup.name;
      var selectedValue = _context$radioGroup.selectedValue;
      var onChange = _context$radioGroup.onChange;

      var optional = {};
      if (selectedValue !== undefined) {
        optional.checked = this.props.value === selectedValue;
      }
      if (typeof onChange === 'function') {
        optional.onChange = onChange.bind(null, this.props.value);
      }

      return _react2['default'].createElement('input', _extends({}, this.props, {
        type: 'radio',
        name: name
      }, optional));
    }
  }]);

  return Radio;
})(_react2['default'].Component);

exports.Radio = Radio;
;

Radio.contextTypes = {
  radioGroup: _propTypes2['default'].object
};

var RadioGroup = (function (_React$Component2) {
  _inherits(RadioGroup, _React$Component2);

  function RadioGroup() {
    _classCallCheck(this, RadioGroup);

    _get(Object.getPrototypeOf(RadioGroup.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RadioGroup, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _props = this.props;
      var name = _props.name;
      var selectedValue = _props.selectedValue;
      var onChange = _props.onChange;

      return {
        radioGroup: {
          name: name, selectedValue: selectedValue, onChange: onChange
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var Component = _props2.Component;
      var name = _props2.name;
      var selectedValue = _props2.selectedValue;
      var onChange = _props2.onChange;
      var children = _props2.children;

      var rest = _objectWithoutProperties(_props2, ['Component', 'name', 'selectedValue', 'onChange', 'children']);

      return _react2['default'].createElement(
        Component,
        rest,
        children
      );
    }
  }]);

  return RadioGroup;
})(_react2['default'].Component);

exports.RadioGroup = RadioGroup;
;

RadioGroup.defaultProps = {
  Component: "div"
};

RadioGroup.propTypes = {
  name: _propTypes2['default'].string,
  selectedValue: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number, _propTypes2['default'].bool]),
  onChange: _propTypes2['default'].func,
  children: _propTypes2['default'].node.isRequired,
  Component: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func, _propTypes2['default'].object])
};

RadioGroup.childContextTypes = {
  radioGroup: _propTypes2['default'].object
};
},{"prop-types":568,"react":595}],571:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
},{}],572:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))
},{"./reactProdInvariant":593,"_process":3,"fbjs/lib/invariant":10}],573:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactBaseClasses = require('./ReactBaseClasses');
var ReactChildren = require('./ReactChildren');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var createReactClass = require('./createClass');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var lowPriorityWarning = require('./lowPriorityWarning');
  var canDefineProperty = require('./canDefineProperty');
  var ReactElementValidator = require('./ReactElementValidator');
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;
}).call(this,require('_process'))
},{"./ReactBaseClasses":574,"./ReactChildren":575,"./ReactDOMFactories":578,"./ReactElement":579,"./ReactElementValidator":581,"./ReactPropTypes":584,"./ReactVersion":586,"./canDefineProperty":587,"./createClass":589,"./lowPriorityWarning":591,"./onlyChild":592,"_process":3,"object-assign":563}],574:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var lowPriorityWarning = require('./lowPriorityWarning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};
}).call(this,require('_process'))
},{"./ReactNoopUpdateQueue":582,"./canDefineProperty":587,"./lowPriorityWarning":591,"./reactProdInvariant":593,"_process":3,"fbjs/lib/emptyObject":9,"fbjs/lib/invariant":10,"object-assign":563}],575:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":572,"./ReactElement":579,"./traverseAllChildren":594,"fbjs/lib/emptyFunction":8}],576:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":577,"./reactProdInvariant":593,"_process":3,"fbjs/lib/invariant":10,"fbjs/lib/warning":11}],577:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;
},{}],578:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactElement = require('./ReactElement');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require('./ReactElementValidator');
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
}).call(this,require('_process'))
},{"./ReactElement":579,"./ReactElementValidator":581,"_process":3}],579:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var warning = require('fbjs/lib/warning');
var canDefineProperty = require('./canDefineProperty');
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":577,"./ReactElementSymbol":580,"./canDefineProperty":587,"_process":3,"fbjs/lib/warning":11,"object-assign":563}],580:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
},{}],581:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactComponentTreeHook = require('./ReactComponentTreeHook');
var ReactElement = require('./ReactElement');

var checkReactTypeSpec = require('./checkReactTypeSpec');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var warning = require('fbjs/lib/warning');
var lowPriorityWarning = require('./lowPriorityWarning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":576,"./ReactCurrentOwner":577,"./ReactElement":579,"./canDefineProperty":587,"./checkReactTypeSpec":588,"./getIteratorFn":590,"./lowPriorityWarning":591,"_process":3,"fbjs/lib/warning":11}],582:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))
},{"_process":3,"fbjs/lib/warning":11}],583:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))
},{"_process":3}],584:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _require = require('./ReactElement'),
    isValidElement = _require.isValidElement;

var factory = require('prop-types/factory');

module.exports = factory(isValidElement);
},{"./ReactElement":579,"prop-types/factory":565}],585:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
},{}],586:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

module.exports = '15.6.2';
},{}],587:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))
},{"_process":3}],588:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('./ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('./ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":576,"./ReactPropTypeLocationNames":583,"./ReactPropTypesSecret":585,"./reactProdInvariant":593,"_process":3,"fbjs/lib/invariant":10,"fbjs/lib/warning":11}],589:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _require = require('./ReactBaseClasses'),
    Component = _require.Component;

var _require2 = require('./ReactElement'),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');
var factory = require('create-react-class/factory');

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);
},{"./ReactBaseClasses":574,"./ReactElement":579,"./ReactNoopUpdateQueue":582,"create-react-class/factory":5}],590:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],591:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;
}).call(this,require('_process'))
},{"_process":3}],592:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))
},{"./ReactElement":579,"./reactProdInvariant":593,"_process":3,"fbjs/lib/invariant":10}],593:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;
},{}],594:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":571,"./ReactCurrentOwner":577,"./ReactElementSymbol":580,"./getIteratorFn":590,"./reactProdInvariant":593,"_process":3,"fbjs/lib/invariant":10,"fbjs/lib/warning":11}],595:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":573}],596:[function(require,module,exports){
module.exports = require('./src');

},{"./src":608}],597:[function(require,module,exports){
/**
 * A module of methods that you want to include in all actions.
 * This module is consumed by `createAction`.
 */
module.exports = {
};

},{}],598:[function(require,module,exports){
exports.createdStores = [];

exports.createdActions = [];

exports.reset = function() {
    while(exports.createdStores.length) {
        exports.createdStores.pop();
    }
    while(exports.createdActions.length) {
        exports.createdActions.pop();
    }
};

},{}],599:[function(require,module,exports){
var _ = require('./utils'),
    maker = require('./joins').instanceJoinCreator;

/**
 * Extract child listenables from a parent from their
 * children property and return them in a keyed Object
 *
 * @param {Object} listenable The parent listenable
 */
var mapChildListenables = function(listenable) {
    var i = 0, children = {}, childName;
    for (;i < (listenable.children||[]).length; ++i) {
        childName = listenable.children[i];
        if(listenable[childName]){
            children[childName] = listenable[childName];
        }
    }
    return children;
};

/**
 * Make a flat dictionary of all listenables including their
 * possible children (recursively), concatenating names in camelCase.
 *
 * @param {Object} listenables The top-level listenables
 */
var flattenListenables = function(listenables) {
    var flattened = {};
    for(var key in listenables){
        var listenable = listenables[key];
        var childMap = mapChildListenables(listenable);

        // recursively flatten children
        var children = flattenListenables(childMap);

        // add the primary listenable and chilren
        flattened[key] = listenable;
        for(var childKey in children){
            var childListenable = children[childKey];
            flattened[key + _.capitalize(childKey)] = childListenable;
        }
    }

    return flattened;
};

/**
 * A module of methods related to listening.
 */
module.exports = {

    /**
     * An internal utility function used by `validateListening`
     *
     * @param {Action|Store} listenable The listenable we want to search for
     * @returns {Boolean} The result of a recursive search among `this.subscriptions`
     */
    hasListener: function(listenable) {
        var i = 0, j, listener, listenables;
        for (;i < (this.subscriptions||[]).length; ++i) {
            listenables = [].concat(this.subscriptions[i].listenable);
            for (j = 0; j < listenables.length; j++){
                listener = listenables[j];
                if (listener === listenable || listener.hasListener && listener.hasListener(listenable)) {
                    return true;
                }
            }
        }
        return false;
    },

    /**
     * A convenience method that listens to all listenables in the given object.
     *
     * @param {Object} listenables An object of listenables. Keys will be used as callback method names.
     */
    listenToMany: function(listenables){
        var allListenables = flattenListenables(listenables);
        for(var key in allListenables){
            var cbname = _.callbackName(key),
                localname = this[cbname] ? cbname : this[key] ? key : undefined;
            if (localname){
                this.listenTo(allListenables[key],localname,this[cbname+"Default"]||this[localname+"Default"]||localname);
            }
        }
    },

    /**
     * Checks if the current context can listen to the supplied listenable
     *
     * @param {Action|Store} listenable An Action or Store that should be
     *  listened to.
     * @returns {String|Undefined} An error message, or undefined if there was no problem.
     */
    validateListening: function(listenable){
        if (listenable === this) {
            return "Listener is not able to listen to itself";
        }
        if (!_.isFunction(listenable.listen)) {
            return listenable + " is missing a listen method";
        }
        if (listenable.hasListener && listenable.hasListener(this)) {
            return "Listener cannot listen to this listenable because of circular loop";
        }
    },

    /**
     * Sets up a subscription to the given listenable for the context object
     *
     * @param {Action|Store} listenable An Action or Store that should be
     *  listened to.
     * @param {Function|String} callback The callback to register as event handler
     * @param {Function|String} defaultCallback The callback to register as default handler
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is the object being listened to
     */
    listenTo: function(listenable, callback, defaultCallback) {
        var desub, unsubscriber, subscriptionobj, subs = this.subscriptions = this.subscriptions || [];
        _.throwIf(this.validateListening(listenable));
        this.fetchInitialState(listenable, defaultCallback);
        desub = listenable.listen(this[callback]||callback, this);
        unsubscriber = function() {
            var index = subs.indexOf(subscriptionobj);
            _.throwIf(index === -1,'Tried to remove listen already gone from subscriptions list!');
            subs.splice(index, 1);
            desub();
        };
        subscriptionobj = {
            stop: unsubscriber,
            listenable: listenable
        };
        subs.push(subscriptionobj);
        return subscriptionobj;
    },

    /**
     * Stops listening to a single listenable
     *
     * @param {Action|Store} listenable The action or store we no longer want to listen to
     * @returns {Boolean} True if a subscription was found and removed, otherwise false.
     */
    stopListeningTo: function(listenable){
        var sub, i = 0, subs = this.subscriptions || [];
        for(;i < subs.length; i++){
            sub = subs[i];
            if (sub.listenable === listenable){
                sub.stop();
                _.throwIf(subs.indexOf(sub)!==-1,'Failed to remove listen from subscriptions list!');
                return true;
            }
        }
        return false;
    },

    /**
     * Stops all subscriptions and empties subscriptions array
     */
    stopListeningToAll: function(){
        var remaining, subs = this.subscriptions || [];
        while((remaining=subs.length)){
            subs[0].stop();
            _.throwIf(subs.length!==remaining-1,'Failed to remove listen from subscriptions list!');
        }
    },

    /**
     * Used in `listenTo`. Fetches initial data from a publisher if it has a `getInitialState` method.
     * @param {Action|Store} listenable The publisher we want to get initial state from
     * @param {Function|String} defaultCallback The method to receive the data
     */
    fetchInitialState: function (listenable, defaultCallback) {
        defaultCallback = (defaultCallback && this[defaultCallback]) || defaultCallback;
        var me = this;
        if (_.isFunction(defaultCallback) && _.isFunction(listenable.getInitialState)) {
            var data = listenable.getInitialState();
            if (data && _.isFunction(data.then)) {
                data.then(function() {
                    defaultCallback.apply(me, arguments);
                });
            } else {
                defaultCallback.call(this, data);
            }
        }
    },

    /**
     * The callback will be called once all listenables have triggered at least once.
     * It will be invoked with the last emission from each listenable.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinTrailing: maker("last"),

    /**
     * The callback will be called once all listenables have triggered at least once.
     * It will be invoked with the first emission from each listenable.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinLeading: maker("first"),

    /**
     * The callback will be called once all listenables have triggered at least once.
     * It will be invoked with all emission from each listenable.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinConcat: maker("all"),

    /**
     * The callback will be called once all listenables have triggered.
     * If a callback triggers twice before that happens, an error is thrown.
     * @param {...Publishers} publishers Publishers that should be tracked.
     * @param {Function|String} callback The method to call when all publishers have emitted
     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
     */
    joinStrict: maker("strict")
};

},{"./joins":609,"./utils":613}],600:[function(require,module,exports){
var _ = require('./utils'),
    ListenerMethods = require('./ListenerMethods');

/**
 * A module meant to be consumed as a mixin by a React component. Supplies the methods from
 * `ListenerMethods` mixin and takes care of teardown of subscriptions.
 * Note that if you're using the `connect` mixin you don't need this mixin, as connect will
 * import everything this mixin contains!
 */
module.exports = _.extend({

    /**
     * Cleans up all listener previously registered.
     */
    componentWillUnmount: ListenerMethods.stopListeningToAll

}, ListenerMethods);

},{"./ListenerMethods":599,"./utils":613}],601:[function(require,module,exports){
var _ = require('./utils');

/**
 * A module of methods for object that you want to be able to listen to.
 * This module is consumed by `createStore` and `createAction`
 */
module.exports = {

    /**
     * Hook used by the publisher that is invoked before emitting
     * and before `shouldEmit`. The arguments are the ones that the action
     * is invoked with. If this function returns something other than
     * undefined, that will be passed on as arguments for shouldEmit and
     * emission.
     */
    preEmit: function() {},

    /**
     * Hook used by the publisher after `preEmit` to determine if the
     * event should be emitted with given arguments. This may be overridden
     * in your application, default implementation always returns true.
     *
     * @returns {Boolean} true if event should be emitted
     */
    shouldEmit: function() { return true; },

    /**
     * Subscribes the given callback for action triggered
     *
     * @param {Function} callback The callback to register as event handler
     * @param {Mixed} [optional] bindContext The context to bind the callback with
     * @returns {Function} Callback that unsubscribes the registered event handler
     */
    listen: function(callback, bindContext) {
        bindContext = bindContext || this;
        var eventHandler = function(args) {
            if (aborted){
                return;
            }
            callback.apply(bindContext, args);
        }, me = this, aborted = false;
        this.emitter.addListener(this.eventLabel, eventHandler);
        return function() {
            aborted = true;
            me.emitter.removeListener(me.eventLabel, eventHandler);
        };
    },

    /**
     * Attach handlers to promise that trigger the completed and failed
     * child publishers, if available.
     *
     * @param {Object} The promise to attach to
     */
    promise: function(promise) {
        var me = this;

        var canHandlePromise =
            this.children.indexOf('completed') >= 0 &&
            this.children.indexOf('failed') >= 0;

        if (!canHandlePromise){
            throw new Error('Publisher must have "completed" and "failed" child publishers');
        }

        promise.then(function(response) {
            return me.completed(response);
        }, function(error) {
            return me.failed(error);
        });
    },

    /**
     * Subscribes the given callback for action triggered, which should
     * return a promise that in turn is passed to `this.promise`
     *
     * @param {Function} callback The callback to register as event handler
     */
    listenAndPromise: function(callback, bindContext) {
        var me = this;
        bindContext = bindContext || this;
        this.willCallPromise = (this.willCallPromise || 0) + 1;

        var removeListen = this.listen(function() {

            if (!callback) {
                throw new Error('Expected a function returning a promise but got ' + callback);
            }

            var args = arguments,
                promise = callback.apply(bindContext, args);
            return me.promise.call(me, promise);
        }, bindContext);

        return function () {
          me.willCallPromise--;
          removeListen.call(me);
        };

    },

    /**
     * Publishes an event using `this.emitter` (if `shouldEmit` agrees)
     */
    trigger: function() {
        var args = arguments,
            pre = this.preEmit.apply(this, args);
        args = pre === undefined ? args : _.isArguments(pre) ? pre : [].concat(pre);
        if (this.shouldEmit.apply(this, args)) {
            this.emitter.emit(this.eventLabel, args);
        }
    },

    /**
     * Tries to publish the event on the next tick
     */
    triggerAsync: function(){
        var args = arguments,me = this;
        _.nextTick(function() {
            me.trigger.apply(me, args);
        });
    },

    /**
     * Returns a Promise for the triggered action
     *
     * @return {Promise}
     *   Resolved by completed child action.
     *   Rejected by failed child action.
     *   If listenAndPromise'd, then promise associated to this trigger.
     *   Otherwise, the promise is for next child action completion.
     */
    triggerPromise: function(){
        var me = this;
        var args = arguments;

        var canHandlePromise =
            this.children.indexOf('completed') >= 0 &&
            this.children.indexOf('failed') >= 0;

        var promise = _.createPromise(function(resolve, reject) {
            // If `listenAndPromise` is listening
            // patch `promise` w/ context-loaded resolve/reject
            if (me.willCallPromise) {
                _.nextTick(function() {
                    var old_promise_method = me.promise;
                    me.promise = function (promise) {
                        promise.then(resolve, reject);
                        // Back to your regularly schedule programming.
                        me.promise = old_promise_method;
                        return me.promise.apply(me, arguments);
                    };
                    me.trigger.apply(me, args);
                });
                return;
            }

            if (canHandlePromise) {
                var removeSuccess = me.completed.listen(function(args) {
                    removeSuccess();
                    removeFailed();
                    resolve(args);
                });

                var removeFailed = me.failed.listen(function(args) {
                    removeSuccess();
                    removeFailed();
                    reject(args);
                });
            }

            me.triggerAsync.apply(me, args);

            if (!canHandlePromise) {
                resolve();
            }
        });

        return promise;
    }
};

},{"./utils":613}],602:[function(require,module,exports){
/**
 * A module of methods that you want to include in all stores.
 * This module is consumed by `createStore`.
 */
module.exports = {
};

},{}],603:[function(require,module,exports){
module.exports = function(store, definition) {
  for (var name in definition) {
    if (Object.getOwnPropertyDescriptor && Object.defineProperty) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(definition, name);

        if (!propertyDescriptor.value || typeof propertyDescriptor.value !== 'function' || !definition.hasOwnProperty(name)) {
            continue;
        }

        store[name] = definition[name].bind(store);
    } else {
        var property = definition[name];

        if (typeof property !== 'function' || !definition.hasOwnProperty(name)) {
            continue;
        }

        store[name] = property.bind(store);
    }
  }

  return store;
};

},{}],604:[function(require,module,exports){
var Reflux = require('./index'),
    _ = require('./utils');

module.exports = function(listenable,key){
    return {
        getInitialState: function(){
            if (!_.isFunction(listenable.getInitialState)) {
                return {};
            } else if (key === undefined) {
                return listenable.getInitialState();
            } else {
                return _.object([key],[listenable.getInitialState()]);
            }
        },
        componentDidMount: function(){
            _.extend(this,Reflux.ListenerMethods);
            var me = this, cb = (key === undefined ? this.setState : function(v){me.setState(_.object([key],[v]));});
            this.listenTo(listenable,cb);
        },
        componentWillUnmount: Reflux.ListenerMixin.componentWillUnmount
    };
};

},{"./index":608,"./utils":613}],605:[function(require,module,exports){
var Reflux = require('./index'),
  _ = require('./utils');

module.exports = function(listenable, key, filterFunc) {
    filterFunc = _.isFunction(key) ? key : filterFunc;
    return {
        getInitialState: function() {
            if (!_.isFunction(listenable.getInitialState)) {
                return {};
            } else if (_.isFunction(key)) {
                return filterFunc.call(this, listenable.getInitialState());
            } else {
                // Filter initial payload from store.
                var result = filterFunc.call(this, listenable.getInitialState());
                if (result) {
                  return _.object([key], [result]);
                } else {
                  return {};
                }
            }
        },
        componentDidMount: function() {
            _.extend(this, Reflux.ListenerMethods);
            var me = this;
            var cb = function(value) {
                if (_.isFunction(key)) {
                    me.setState(filterFunc.call(me, value));
                } else {
                    var result = filterFunc.call(me, value);
                    me.setState(_.object([key], [result]));
                }
            };

            this.listenTo(listenable, cb);
        },
        componentWillUnmount: Reflux.ListenerMixin.componentWillUnmount
    };
};


},{"./index":608,"./utils":613}],606:[function(require,module,exports){
var _ = require('./utils'),
    Reflux = require('./index'),
    Keep = require('./Keep'),
    allowed = {preEmit:1,shouldEmit:1};

/**
 * Creates an action functor object. It is mixed in with functions
 * from the `PublisherMethods` mixin. `preEmit` and `shouldEmit` may
 * be overridden in the definition object.
 *
 * @param {Object} definition The action object definition
 */
var createAction = function(definition) {

    definition = definition || {};
    if (!_.isObject(definition)){
        definition = {actionName: definition};
    }

    for(var a in Reflux.ActionMethods){
        if (!allowed[a] && Reflux.PublisherMethods[a]) {
            throw new Error("Cannot override API method " + a +
                " in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead."
            );
        }
    }

    for(var d in definition){
        if (!allowed[d] && Reflux.PublisherMethods[d]) {
            throw new Error("Cannot override API method " + d +
                " in action creation. Use another method name or override it on Reflux.PublisherMethods instead."
            );
        }
    }

    definition.children = definition.children || [];
    if (definition.asyncResult){
        definition.children = definition.children.concat(["completed","failed"]);
    }

    var i = 0, childActions = {};
    for (; i < definition.children.length; i++) {
        var name = definition.children[i];
        childActions[name] = createAction(name);
    }

    var context = _.extend({
        eventLabel: "action",
        emitter: new _.EventEmitter(),
        _isAction: true
    }, Reflux.PublisherMethods, Reflux.ActionMethods, definition);

    var functor = function() {
        return functor[functor.sync?"trigger":"triggerPromise"].apply(functor, arguments);
    };

    _.extend(functor,childActions,context);

    Keep.createdActions.push(functor);

    return functor;

};

module.exports = createAction;

},{"./Keep":598,"./index":608,"./utils":613}],607:[function(require,module,exports){
var _ = require('./utils'),
    Reflux = require('./index'),
    Keep = require('./Keep'),
    mixer = require('./mixer'),
    allowed = {preEmit:1,shouldEmit:1},
    bindMethods = require('./bindMethods');

/**
 * Creates an event emitting Data Store. It is mixed in with functions
 * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`
 * and `shouldEmit` may be overridden in the definition object.
 *
 * @param {Object} definition The data store object definition
 * @returns {Store} A data store instance
 */
module.exports = function(definition) {

    definition = definition || {};

    for(var a in Reflux.StoreMethods){
        if (!allowed[a] && (Reflux.PublisherMethods[a] || Reflux.ListenerMethods[a])){
            throw new Error("Cannot override API method " + a +
                " in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead."
            );
        }
    }

    for(var d in definition){
        if (!allowed[d] && (Reflux.PublisherMethods[d] || Reflux.ListenerMethods[d])){
            throw new Error("Cannot override API method " + d +
                " in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead."
            );
        }
    }

    definition = mixer(definition);

    function Store() {
        var i=0, arr;
        this.subscriptions = [];
        this.emitter = new _.EventEmitter();
        this.eventLabel = "change";
        bindMethods(this, definition);
        if (this.init && _.isFunction(this.init)) {
            this.init();
        }
        if (this.listenables){
            arr = [].concat(this.listenables);
            for(;i < arr.length;i++){
                this.listenToMany(arr[i]);
            }
        }
    }

    _.extend(Store.prototype, Reflux.ListenerMethods, Reflux.PublisherMethods, Reflux.StoreMethods, definition);

    var store = new Store();
    Keep.createdStores.push(store);

    return store;
};

},{"./Keep":598,"./bindMethods":603,"./index":608,"./mixer":612,"./utils":613}],608:[function(require,module,exports){
exports.ActionMethods = require('./ActionMethods');

exports.ListenerMethods = require('./ListenerMethods');

exports.PublisherMethods = require('./PublisherMethods');

exports.StoreMethods = require('./StoreMethods');

exports.createAction = require('./createAction');

exports.createStore = require('./createStore');

exports.connect = require('./connect');

exports.connectFilter = require('./connectFilter');

exports.ListenerMixin = require('./ListenerMixin');

exports.listenTo = require('./listenTo');

exports.listenToMany = require('./listenToMany');


var maker = require('./joins').staticJoinCreator;

exports.joinTrailing = exports.all = maker("last"); // Reflux.all alias for backward compatibility

exports.joinLeading = maker("first");

exports.joinStrict = maker("strict");

exports.joinConcat = maker("all");

var _ = require('./utils');

exports.EventEmitter = _.EventEmitter;

exports.Promise = _.Promise;

/**
 * Convenience function for creating a set of actions
 *
 * @param definitions the definitions for the actions to be created
 * @returns an object with actions of corresponding action names
 */
exports.createActions = function(definitions) {
    var actions = {};
    for (var k in definitions){
        if (definitions.hasOwnProperty(k)) {
            var val = definitions[k],
                actionName = _.isObject(val) ? k : val;

            actions[actionName] = exports.createAction(val);
        }
    }
    return actions;
};

/**
 * Sets the eventmitter that Reflux uses
 */
exports.setEventEmitter = function(ctx) {
    var _ = require('./utils');
    exports.EventEmitter = _.EventEmitter = ctx;
};


/**
 * Sets the Promise library that Reflux uses
 */
exports.setPromise = function(ctx) {
    var _ = require('./utils');
    exports.Promise = _.Promise = ctx;
};


/**
 * Sets the Promise factory that creates new promises
 * @param {Function} factory has the signature `function(resolver) { return [new Promise]; }`
 */
exports.setPromiseFactory = function(factory) {
    var _ = require('./utils');
    _.createPromise = factory;
};


/**
 * Sets the method used for deferring actions and stores
 */
exports.nextTick = function(nextTick) {
    var _ = require('./utils');
    _.nextTick = nextTick;
};

/**
 * Provides the set of created actions and stores for introspection
 */
exports.__keep = require('./Keep');

/**
 * Warn if Function.prototype.bind not available
 */
if (!Function.prototype.bind) {
  console.error(
    'Function.prototype.bind not available. ' +
    'ES5 shim required. ' +
    'https://github.com/spoike/refluxjs#es5'
  );
}

},{"./ActionMethods":597,"./Keep":598,"./ListenerMethods":599,"./ListenerMixin":600,"./PublisherMethods":601,"./StoreMethods":602,"./connect":604,"./connectFilter":605,"./createAction":606,"./createStore":607,"./joins":609,"./listenTo":610,"./listenToMany":611,"./utils":613}],609:[function(require,module,exports){
/**
 * Internal module used to create static and instance join methods
 */

var slice = Array.prototype.slice,
    _ = require("./utils"),
    createStore = require("./createStore"),
    strategyMethodNames = {
        strict: "joinStrict",
        first: "joinLeading",
        last: "joinTrailing",
        all: "joinConcat"
    };

/**
 * Used in `index.js` to create the static join methods
 * @param {String} strategy Which strategy to use when tracking listenable trigger arguments
 * @returns {Function} A static function which returns a store with a join listen on the given listenables using the given strategy
 */
exports.staticJoinCreator = function(strategy){
    return function(/* listenables... */) {
        var listenables = slice.call(arguments);
        return createStore({
            init: function(){
                this[strategyMethodNames[strategy]].apply(this,listenables.concat("triggerAsync"));
            }
        });
    };
};

/**
 * Used in `ListenerMethods.js` to create the instance join methods
 * @param {String} strategy Which strategy to use when tracking listenable trigger arguments
 * @returns {Function} An instance method which sets up a join listen on the given listenables using the given strategy
 */
exports.instanceJoinCreator = function(strategy){
    return function(/* listenables..., callback*/){
        _.throwIf(arguments.length < 3,'Cannot create a join with less than 2 listenables!');
        var listenables = slice.call(arguments),
            callback = listenables.pop(),
            numberOfListenables = listenables.length,
            join = {
                numberOfListenables: numberOfListenables,
                callback: this[callback]||callback,
                listener: this,
                strategy: strategy
            }, i, cancels = [], subobj;
        for (i = 0; i < numberOfListenables; i++) {
            _.throwIf(this.validateListening(listenables[i]));
        }
        for (i = 0; i < numberOfListenables; i++) {
            cancels.push(listenables[i].listen(newListener(i,join),this));
        }
        reset(join);
        subobj = {listenable: listenables};
        subobj.stop = makeStopper(subobj,cancels,this);
        this.subscriptions = (this.subscriptions || []).concat(subobj);
        return subobj;
    };
};

// ---- internal join functions ----

function makeStopper(subobj,cancels,context){
    return function() {
        var i, subs = context.subscriptions,
            index = (subs ? subs.indexOf(subobj) : -1);
        _.throwIf(index === -1,'Tried to remove join already gone from subscriptions list!');
        for(i=0;i < cancels.length; i++){
            cancels[i]();
        }
        subs.splice(index, 1);
    };
}

function reset(join) {
    join.listenablesEmitted = new Array(join.numberOfListenables);
    join.args = new Array(join.numberOfListenables);
}

function newListener(i,join) {
    return function() {
        var callargs = slice.call(arguments);
        if (join.listenablesEmitted[i]){
            switch(join.strategy){
                case "strict": throw new Error("Strict join failed because listener triggered twice.");
                case "last": join.args[i] = callargs; break;
                case "all": join.args[i].push(callargs);
            }
        } else {
            join.listenablesEmitted[i] = true;
            join.args[i] = (join.strategy==="all"?[callargs]:callargs);
        }
        emitIfAllListenablesEmitted(join);
    };
}

function emitIfAllListenablesEmitted(join) {
    for (var i = 0; i < join.numberOfListenables; i++) {
        if (!join.listenablesEmitted[i]) {
            return;
        }
    }
    join.callback.apply(join.listener,join.args);
    reset(join);
}

},{"./createStore":607,"./utils":613}],610:[function(require,module,exports){
var Reflux = require('./index');


/**
 * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,
 * without having to manually set listeners in the `componentDidMount` method.
 *
 * @param {Action|Store} listenable An Action or Store that should be
 *  listened to.
 * @param {Function|String} callback The callback to register as event handler
 * @param {Function|String} defaultCallback The callback to register as default handler
 * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.
 */
module.exports = function(listenable,callback,initial){
    return {
        /**
         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`
         * and then make the call to `listenTo` with the arguments provided to the factory function
         */
        componentDidMount: function() {
            for(var m in Reflux.ListenerMethods){
                if (this[m] !== Reflux.ListenerMethods[m]){
                    if (this[m]){
                        throw "Can't have other property '"+m+"' when using Reflux.listenTo!";
                    }
                    this[m] = Reflux.ListenerMethods[m];
                }
            }
            this.listenTo(listenable,callback,initial);
        },
        /**
         * Cleans up all listener previously registered.
         */
        componentWillUnmount: Reflux.ListenerMethods.stopListeningToAll
    };
};

},{"./index":608}],611:[function(require,module,exports){
var Reflux = require('./index');

/**
 * A mixin factory for a React component. Meant as a more convenient way of using the `listenerMixin`,
 * without having to manually set listeners in the `componentDidMount` method. This version is used
 * to automatically set up a `listenToMany` call.
 *
 * @param {Object} listenables An object of listenables
 * @returns {Object} An object to be used as a mixin, which sets up the listeners for the given listenables.
 */
module.exports = function(listenables){
    return {
        /**
         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`
         * and then make the call to `listenTo` with the arguments provided to the factory function
         */
        componentDidMount: function() {
            for(var m in Reflux.ListenerMethods){
                if (this[m] !== Reflux.ListenerMethods[m]){
                    if (this[m]){
                        throw "Can't have other property '"+m+"' when using Reflux.listenToMany!";
                    }
                    this[m] = Reflux.ListenerMethods[m];
                }
            }
            this.listenToMany(listenables);
        },
        /**
         * Cleans up all listener previously registered.
         */
        componentWillUnmount: Reflux.ListenerMethods.stopListeningToAll
    };
};

},{"./index":608}],612:[function(require,module,exports){
var _ = require('./utils');

module.exports = function mix(def) {
    var composed = {
        init: [],
        preEmit: [],
        shouldEmit: []
    };

    var updated = (function mixDef(mixin) {
        var mixed = {};
        if (mixin.mixins) {
            mixin.mixins.forEach(function (subMixin) {
                _.extend(mixed, mixDef(subMixin));
            });
        }
        _.extend(mixed, mixin);
        Object.keys(composed).forEach(function (composable) {
            if (mixin.hasOwnProperty(composable)) {
                composed[composable].push(mixin[composable]);
            }
        });
        return mixed;
    }(def));

    if (composed.init.length > 1) {
        updated.init = function () {
            var args = arguments;
            composed.init.forEach(function (init) {
                init.apply(this, args);
            }, this);
        };
    }
    if (composed.preEmit.length > 1) {
        updated.preEmit = function () {
            return composed.preEmit.reduce(function (args, preEmit) {
                var newValue = preEmit.apply(this, args);
                return newValue === undefined ? args : [newValue];
            }.bind(this), arguments);
        };
    }
    if (composed.shouldEmit.length > 1) {
        updated.shouldEmit = function () {
            var args = arguments;
            return !composed.shouldEmit.some(function (shouldEmit) {
                return !shouldEmit.apply(this, args);
            }, this);
        };
    }
    Object.keys(composed).forEach(function (composable) {
        if (composed[composable].length === 1) {
            updated[composable] = composed[composable][0];
        }
    });

    return updated;
};

},{"./utils":613}],613:[function(require,module,exports){
/*
 * isObject, extend, isFunction, isArguments are taken from undescore/lodash in
 * order to remove the dependency
 */
var isObject = exports.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
};

exports.extend = function(obj) {
    if (!isObject(obj)) {
        return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
        source = arguments[i];
        for (prop in source) {
            if (Object.getOwnPropertyDescriptor && Object.defineProperty) {
                var propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);
                Object.defineProperty(obj, prop, propertyDescriptor);
            } else {
                obj[prop] = source[prop];
            }
        }
    }
    return obj;
};

exports.isFunction = function(value) {
    return typeof value === 'function';
};

exports.EventEmitter = require('eventemitter3');

exports.nextTick = function(callback) {
    setTimeout(callback, 0);
};

exports.capitalize = function(string){
    return string.charAt(0).toUpperCase()+string.slice(1);
};

exports.callbackName = function(string){
    return "on"+exports.capitalize(string);
};

exports.object = function(keys,vals){
    var o={}, i=0;
    for(;i<keys.length;i++){
        o[keys[i]] = vals[i];
    }
    return o;
};

exports.Promise = require("native-promise-only");

exports.createPromise = function(resolver) {
    return new exports.Promise(resolver);
};

exports.isArguments = function(value) {
    return typeof value === 'object' && ('callee' in value) && typeof value.length === 'number';
};

exports.throwIf = function(val,msg){
    if (val){
        throw Error(msg||val);
    }
};

},{"eventemitter3":7,"native-promise-only":562}],614:[function(require,module,exports){
(function (global){
'use strict';

var width = 256;// each RC4 output is 0 <= x < 256
var chunks = 6;// at least six RC4 outputs for each double
var digits = 52;// there are 52 significant digits in a double
var pool = [];// pool: entropy pool starts empty
var GLOBAL = typeof global === 'undefined' ? window : global;

//
// The following constants are related to IEEE 754 limits.
//
var startdenom = Math.pow(width, chunks),
    significance = Math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1;


var oldRandom = Math.random;

//
// seedrandom()
// This is the seedrandom function described above.
//
module.exports = function(seed, options) {
  if (options && options.global === true) {
    options.global = false;
    Math.random = module.exports(seed, options);
    options.global = true;
    return Math.random;
  }
  var use_entropy = (options && options.entropy) || false;
  var key = [];

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    use_entropy ? [seed, tostring(pool)] :
    0 in arguments ? seed : autoseed(), 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  return function() {         // Closure to return a random double:
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer Math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };
};

module.exports.resetGlobal = function () {
  Math.random = oldRandom;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability discard an initial batch of values.
    // See http://www.rsa.com/rsalabs/node.asp?id=2009
  })(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj)[0], prop;
  if (depth && typ == 'o') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 's' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto if available.
//
/** @param {Uint8Array=} seed */
function autoseed(seed) {
  try {
    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
    return tostring(seed);
  } catch (e) {
    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
            GLOBAL.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call Math.random on its own again after
// initialization.
//
mixkey(Math.random(), pool);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],615:[function(require,module,exports){
(function (process){
exports = module.exports = SemVer;

// The debug function is excluded entirely from the minified version.
/* nomin */ var debug;
/* nomin */ if (typeof process === 'object' &&
    /* nomin */ process.env &&
    /* nomin */ process.env.NODE_DEBUG &&
    /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
  /* nomin */ debug = function() {
    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
    /* nomin */ args.unshift('SEMVER');
    /* nomin */ console.log.apply(console, args);
    /* nomin */ };
/* nomin */ else
  /* nomin */ debug = function() {};

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0';

var MAX_LENGTH = 256;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

// The actual regexps go on exports.re
var re = exports.re = [];
var src = exports.src = [];
var R = 0;

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++;
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
var NUMERICIDENTIFIERLOOSE = R++;
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++;
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++;
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')';

var MAINVERSIONLOOSE = R++;
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++;
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')';

var PRERELEASEIDENTIFIERLOOSE = R++;
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++;
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

var PRERELEASELOOSE = R++;
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++;
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++;
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++;
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?';

src[FULL] = '^' + FULLPLAIN + '$';

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?';

var LOOSE = R++;
src[LOOSE] = '^' + LOOSEPLAIN + '$';

var GTLT = R++;
src[GTLT] = '((?:<|>)?=?)';

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++;
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
var XRANGEIDENTIFIER = R++;
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

var XRANGEPLAIN = R++;
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?';

var XRANGEPLAINLOOSE = R++;
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?';

var XRANGE = R++;
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
var XRANGELOOSE = R++;
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++;
src[LONETILDE] = '(?:~>?)';

var TILDETRIM = R++;
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
var tildeTrimReplace = '$1~';

var TILDE = R++;
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
var TILDELOOSE = R++;
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++;
src[LONECARET] = '(?:\\^)';

var CARETTRIM = R++;
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
var caretTrimReplace = '$1^';

var CARET = R++;
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
var CARETLOOSE = R++;
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++;
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
var COMPARATOR = R++;
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++;
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
var comparatorTrimReplace = '$1$2$3';


// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++;
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$';

var HYPHENRANGELOOSE = R++;
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$';

// Star ranges basically just allow anything at all.
var STAR = R++;
src[STAR] = '(<|>)?=?\\s*\\*';

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i]);
  if (!re[i])
    re[i] = new RegExp(src[i]);
}

exports.parse = parse;
function parse(version, loose) {
  if (version instanceof SemVer)
    return version;

  if (typeof version !== 'string')
    return null;

  if (version.length > MAX_LENGTH)
    return null;

  var r = loose ? re[LOOSE] : re[FULL];
  if (!r.test(version))
    return null;

  try {
    return new SemVer(version, loose);
  } catch (er) {
    return null;
  }
}

exports.valid = valid;
function valid(version, loose) {
  var v = parse(version, loose);
  return v ? v.version : null;
}


exports.clean = clean;
function clean(version, loose) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
  return s ? s.version : null;
}

exports.SemVer = SemVer;

function SemVer(version, loose) {
  if (version instanceof SemVer) {
    if (version.loose === loose)
      return version;
    else
      version = version.version;
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version);
  }

  if (version.length > MAX_LENGTH)
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

  if (!(this instanceof SemVer))
    return new SemVer(version, loose);

  debug('SemVer', version, loose);
  this.loose = loose;
  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

  if (!m)
    throw new TypeError('Invalid Version: ' + version);

  this.raw = version;

  // these are actually numbers
  this.major = +m[1];
  this.minor = +m[2];
  this.patch = +m[3];

  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
    throw new TypeError('Invalid major version')

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
    throw new TypeError('Invalid minor version')

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
    throw new TypeError('Invalid patch version')

  // numberify any prerelease numeric ids
  if (!m[4])
    this.prerelease = [];
  else
    this.prerelease = m[4].split('.').map(function(id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id;
        if (num >= 0 && num < MAX_SAFE_INTEGER)
          return num;
      }
      return id;
    });

  this.build = m[5] ? m[5].split('.') : [];
  this.format();
}

SemVer.prototype.format = function() {
  this.version = this.major + '.' + this.minor + '.' + this.patch;
  if (this.prerelease.length)
    this.version += '-' + this.prerelease.join('.');
  return this.version;
};

SemVer.prototype.toString = function() {
  return this.version;
};

SemVer.prototype.compare = function(other) {
  debug('SemVer.compare', this.version, this.loose, other);
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.loose);

  return this.compareMain(other) || this.comparePre(other);
};

SemVer.prototype.compareMain = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.loose);

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch);
};

SemVer.prototype.comparePre = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.loose);

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length)
    return -1;
  else if (!this.prerelease.length && other.prerelease.length)
    return 1;
  else if (!this.prerelease.length && !other.prerelease.length)
    return 0;

  var i = 0;
  do {
    var a = this.prerelease[i];
    var b = other.prerelease[i];
    debug('prerelease compare', i, a, b);
    if (a === undefined && b === undefined)
      return 0;
    else if (b === undefined)
      return 1;
    else if (a === undefined)
      return -1;
    else if (a === b)
      continue;
    else
      return compareIdentifiers(a, b);
  } while (++i);
};

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function(release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor = 0;
      this.major++;
      this.inc('pre', identifier);
      break;
    case 'preminor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor++;
      this.inc('pre', identifier);
      break;
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0;
      this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0)
        this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
        this.major++;
      this.minor = 0;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0)
        this.minor++;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0)
        this.patch++;
      this.prerelease = [];
      break;
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0)
        this.prerelease = [0];
      else {
        var i = this.prerelease.length;
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++;
            i = -2;
          }
        }
        if (i === -1) // didn't increment anything
          this.prerelease.push(0);
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1]))
            this.prerelease = [identifier, 0];
        } else
          this.prerelease = [identifier, 0];
      }
      break;

    default:
      throw new Error('invalid increment argument: ' + release);
  }
  this.format();
  this.raw = this.version;
  return this;
};

exports.inc = inc;
function inc(version, release, loose, identifier) {
  if (typeof(loose) === 'string') {
    identifier = loose;
    loose = undefined;
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version;
  } catch (er) {
    return null;
  }
}

exports.diff = diff;
function diff(version1, version2) {
  if (eq(version1, version2)) {
    return null;
  } else {
    var v1 = parse(version1);
    var v2 = parse(version2);
    if (v1.prerelease.length || v2.prerelease.length) {
      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return 'pre'+key;
          }
        }
      }
      return 'prerelease';
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return key;
        }
      }
    }
  }
}

exports.compareIdentifiers = compareIdentifiers;

var numeric = /^[0-9]+$/;
function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return (anum && !bnum) ? -1 :
         (bnum && !anum) ? 1 :
         a < b ? -1 :
         a > b ? 1 :
         0;
}

exports.rcompareIdentifiers = rcompareIdentifiers;
function rcompareIdentifiers(a, b) {
  return compareIdentifiers(b, a);
}

exports.major = major;
function major(a, loose) {
  return new SemVer(a, loose).major;
}

exports.minor = minor;
function minor(a, loose) {
  return new SemVer(a, loose).minor;
}

exports.patch = patch;
function patch(a, loose) {
  return new SemVer(a, loose).patch;
}

exports.compare = compare;
function compare(a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose));
}

exports.compareLoose = compareLoose;
function compareLoose(a, b) {
  return compare(a, b, true);
}

exports.rcompare = rcompare;
function rcompare(a, b, loose) {
  return compare(b, a, loose);
}

exports.sort = sort;
function sort(list, loose) {
  return list.sort(function(a, b) {
    return exports.compare(a, b, loose);
  });
}

exports.rsort = rsort;
function rsort(list, loose) {
  return list.sort(function(a, b) {
    return exports.rcompare(a, b, loose);
  });
}

exports.gt = gt;
function gt(a, b, loose) {
  return compare(a, b, loose) > 0;
}

exports.lt = lt;
function lt(a, b, loose) {
  return compare(a, b, loose) < 0;
}

exports.eq = eq;
function eq(a, b, loose) {
  return compare(a, b, loose) === 0;
}

exports.neq = neq;
function neq(a, b, loose) {
  return compare(a, b, loose) !== 0;
}

exports.gte = gte;
function gte(a, b, loose) {
  return compare(a, b, loose) >= 0;
}

exports.lte = lte;
function lte(a, b, loose) {
  return compare(a, b, loose) <= 0;
}

exports.cmp = cmp;
function cmp(a, op, b, loose) {
  var ret;
  switch (op) {
    case '===':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a === b;
      break;
    case '!==':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a !== b;
      break;
    case '': case '=': case '==': ret = eq(a, b, loose); break;
    case '!=': ret = neq(a, b, loose); break;
    case '>': ret = gt(a, b, loose); break;
    case '>=': ret = gte(a, b, loose); break;
    case '<': ret = lt(a, b, loose); break;
    case '<=': ret = lte(a, b, loose); break;
    default: throw new TypeError('Invalid operator: ' + op);
  }
  return ret;
}

exports.Comparator = Comparator;
function Comparator(comp, loose) {
  if (comp instanceof Comparator) {
    if (comp.loose === loose)
      return comp;
    else
      comp = comp.value;
  }

  if (!(this instanceof Comparator))
    return new Comparator(comp, loose);

  debug('comparator', comp, loose);
  this.loose = loose;
  this.parse(comp);

  if (this.semver === ANY)
    this.value = '';
  else
    this.value = this.operator + this.semver.version;

  debug('comp', this);
}

var ANY = {};
Comparator.prototype.parse = function(comp) {
  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var m = comp.match(r);

  if (!m)
    throw new TypeError('Invalid comparator: ' + comp);

  this.operator = m[1];
  if (this.operator === '=')
    this.operator = '';

  // if it literally is just '>' or '' then allow anything.
  if (!m[2])
    this.semver = ANY;
  else
    this.semver = new SemVer(m[2], this.loose);
};

Comparator.prototype.toString = function() {
  return this.value;
};

Comparator.prototype.test = function(version) {
  debug('Comparator.test', version, this.loose);

  if (this.semver === ANY)
    return true;

  if (typeof version === 'string')
    version = new SemVer(version, this.loose);

  return cmp(version, this.operator, this.semver, this.loose);
};

Comparator.prototype.intersects = function(comp, loose) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required');
  }

  var rangeTmp;

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, loose);
    return satisfies(this.value, rangeTmp, loose);
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, loose);
    return satisfies(comp.semver, rangeTmp, loose);
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>');
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<');
  var sameSemVer = this.semver.version === comp.semver.version;
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=');
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, loose) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'));
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, loose) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'));

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
};


exports.Range = Range;
function Range(range, loose) {
  if (range instanceof Range) {
    if (range.loose === loose) {
      return range;
    } else {
      return new Range(range.raw, loose);
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, loose);
  }

  if (!(this instanceof Range))
    return new Range(range, loose);

  this.loose = loose;

  // First, split based on boolean or ||
  this.raw = range;
  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
    return this.parseRange(range.trim());
  }, this).filter(function(c) {
    // throw out any that are not relevant for whatever reason
    return c.length;
  });

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range);
  }

  this.format();
}

Range.prototype.format = function() {
  this.range = this.set.map(function(comps) {
    return comps.join(' ').trim();
  }).join('||').trim();
  return this.range;
};

Range.prototype.toString = function() {
  return this.range;
};

Range.prototype.parseRange = function(range) {
  var loose = this.loose;
  range = range.trim();
  debug('range', range, loose);
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
  range = range.replace(hr, hyphenReplace);
  debug('hyphen replace', range);
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
  debug('comparator trim', range, re[COMPARATORTRIM]);

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace);

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace);

  // normalize spaces
  range = range.split(/\s+/).join(' ');

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var set = range.split(' ').map(function(comp) {
    return parseComparator(comp, loose);
  }).join(' ').split(/\s+/);
  if (this.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function(comp) {
      return !!comp.match(compRe);
    });
  }
  set = set.map(function(comp) {
    return new Comparator(comp, loose);
  });

  return set;
};

Range.prototype.intersects = function(range, loose) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required');
  }

  return this.set.some(function(thisComparators) {
    return thisComparators.every(function(thisComparator) {
      return range.set.some(function(rangeComparators) {
        return rangeComparators.every(function(rangeComparator) {
          return thisComparator.intersects(rangeComparator, loose);
        });
      });
    });
  });
};

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators;
function toComparators(range, loose) {
  return new Range(range, loose).set.map(function(comp) {
    return comp.map(function(c) {
      return c.value;
    }).join(' ').trim().split(' ');
  });
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator(comp, loose) {
  debug('comp', comp);
  comp = replaceCarets(comp, loose);
  debug('caret', comp);
  comp = replaceTildes(comp, loose);
  debug('tildes', comp);
  comp = replaceXRanges(comp, loose);
  debug('xrange', comp);
  comp = replaceStars(comp, loose);
  debug('stars', comp);
  return comp;
}

function isX(id) {
  return !id || id.toLowerCase() === 'x' || id === '*';
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes(comp, loose) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceTilde(comp, loose);
  }).join(' ');
}

function replaceTilde(comp, loose) {
  var r = loose ? re[TILDELOOSE] : re[TILDE];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p))
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    else if (pr) {
      debug('replaceTilde pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      ret = '>=' + M + '.' + m + '.' + p + pr +
            ' <' + M + '.' + (+m + 1) + '.0';
    } else
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0';

    debug('tilde return', ret);
    return ret;
  });
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets(comp, loose) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceCaret(comp, loose);
  }).join(' ');
}

function replaceCaret(comp, loose) {
  debug('caret', comp, loose);
  var r = loose ? re[CARETLOOSE] : re[CARET];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p)) {
      if (M === '0')
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      else
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
    } else if (pr) {
      debug('replaceCaret pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p + pr +
              ' <' + (+M + 1) + '.0.0';
    } else {
      debug('no pr');
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0';
    }

    debug('caret return', ret);
    return ret;
  });
}

function replaceXRanges(comp, loose) {
  debug('replaceXRanges', comp, loose);
  return comp.split(/\s+/).map(function(comp) {
    return replaceXRange(comp, loose);
  }).join(' ');
}

function replaceXRange(comp, loose) {
  comp = comp.trim();
  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    var xM = isX(M);
    var xm = xM || isX(m);
    var xp = xm || isX(p);
    var anyX = xp;

    if (gtlt === '=' && anyX)
      gtlt = '';

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // replace X with 0
      if (xm)
        m = 0;
      if (xp)
        p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>=';
        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else if (xp) {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';
        if (xm)
          M = +M + 1;
        else
          m = +m + 1;
      }

      ret = gtlt + M + '.' + m + '.' + p;
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    }

    debug('xRange return', ret);

    return ret;
  });
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars(comp, loose) {
  debug('replaceStars', comp, loose);
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '');
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace($0,
                       from, fM, fm, fp, fpr, fb,
                       to, tM, tm, tp, tpr, tb) {

  if (isX(fM))
    from = '';
  else if (isX(fm))
    from = '>=' + fM + '.0.0';
  else if (isX(fp))
    from = '>=' + fM + '.' + fm + '.0';
  else
    from = '>=' + from;

  if (isX(tM))
    to = '';
  else if (isX(tm))
    to = '<' + (+tM + 1) + '.0.0';
  else if (isX(tp))
    to = '<' + tM + '.' + (+tm + 1) + '.0';
  else if (tpr)
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
  else
    to = '<=' + to;

  return (from + ' ' + to).trim();
}


// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function(version) {
  if (!version)
    return false;

  if (typeof version === 'string')
    version = new SemVer(version, this.loose);

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version))
      return true;
  }
  return false;
};

function testSet(set, version) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version))
      return false;
  }

  if (version.prerelease.length) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (var i = 0; i < set.length; i++) {
      debug(set[i].semver);
      if (set[i].semver === ANY)
        continue;

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver;
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch)
          return true;
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false;
  }

  return true;
}

exports.satisfies = satisfies;
function satisfies(version, range, loose) {
  try {
    range = new Range(range, loose);
  } catch (er) {
    return false;
  }
  return range.test(version);
}

exports.maxSatisfying = maxSatisfying;
function maxSatisfying(versions, range, loose) {
  var max = null;
  var maxSV = null;
  try {
    var rangeObj = new Range(range, loose);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, loose)
      if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)
        max = v;
        maxSV = new SemVer(max, loose);
      }
    }
  })
  return max;
}

exports.minSatisfying = minSatisfying;
function minSatisfying(versions, range, loose) {
  var min = null;
  var minSV = null;
  try {
    var rangeObj = new Range(range, loose);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, loose)
      if (!min || minSV.compare(v) === 1) { // compare(min, v, true)
        min = v;
        minSV = new SemVer(min, loose);
      }
    }
  })
  return min;
}

exports.validRange = validRange;
function validRange(range, loose) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, loose).range || '*';
  } catch (er) {
    return null;
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr;
function ltr(version, range, loose) {
  return outside(version, range, '<', loose);
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr;
function gtr(version, range, loose) {
  return outside(version, range, '>', loose);
}

exports.outside = outside;
function outside(version, range, hilo, loose) {
  version = new SemVer(version, loose);
  range = new Range(range, loose);

  var gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt;
      ltefn = lte;
      ltfn = lt;
      comp = '>';
      ecomp = '>=';
      break;
    case '<':
      gtfn = lt;
      ltefn = gte;
      ltfn = gt;
      comp = '<';
      ecomp = '<=';
      break;
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"');
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, loose)) {
    return false;
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];

    var high = null;
    var low = null;

    comparators.forEach(function(comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator;
      low = low || comparator;
      if (gtfn(comparator.semver, high.semver, loose)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, loose)) {
        low = comparator;
      }
    });

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false;
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false;
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false;
    }
  }
  return true;
}

exports.prerelease = prerelease;
function prerelease(version, loose) {
  var parsed = parse(version, loose);
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
}

exports.intersects = intersects;
function intersects(r1, r2, loose) {
  r1 = new Range(r1, loose)
  r2 = new Range(r2, loose)
  return r1.intersects(r2)
}

}).call(this,require('_process'))
},{"_process":3}],616:[function(require,module,exports){
function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;

},{}],617:[function(require,module,exports){
/**
 * typed-function
 *
 * Type checking for JavaScript functions
 *
 * https://github.com/josdejong/typed-function
 */
'use strict';

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof exports === 'object') {
    // OldNode. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like OldNode.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.typed = factory();
  }
}(this, function () {
  // factory function to create a new instance of typed-function
  // TODO: allow passing configuration, types, tests via the factory function
  function create() {
    /**
     * Get a type test function for a specific data type
     * @param {string} name                   Name of a data type like 'number' or 'string'
     * @returns {Function(obj: *) : boolean}  Returns a type testing function.
     *                                        Throws an error for an unknown type.
     */
    function getTypeTest(name) {
      var test;
      for (var i = 0; i < typed.types.length; i++) {
        var entry = typed.types[i];
        if (entry.name === name) {
          test = entry.test;
          break;
        }
      }

      if (!test) {
        var hint;
        for (i = 0; i < typed.types.length; i++) {
          entry = typed.types[i];
          if (entry.name.toLowerCase() == name.toLowerCase()) {
            hint = entry.name;
            break;
          }
        }

        throw new Error('Unknown type "' + name + '"' +
            (hint ? ('. Did you mean "' + hint + '"?') : ''));
      }
      return test;
    }

    /**
     * Retrieve the function name from a set of functions, and check
     * whether the name of all functions match (if given)
     * @param {Array.<function>} fns
     */
    function getName (fns) {
      var name = '';

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i];

        // merge function name when this is a typed function
        if (fn.signatures && fn.name != '') {
          if (name == '') {
            name = fn.name;
          }
          else if (name != fn.name) {
            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
            err.data = {
              actual: fn.name,
              expected: name
            };
            throw err;
          }
        }
      }

      return name;
    }

    /**
     * Create an ArgumentsError. Creates messages like:
     *
     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)
     *   Too few arguments (expected: ..., index: ...)
     *   Too many arguments (expected: ..., actual: ...)
     *
     * @param {String} fn         Function name
     * @param {number} argCount   Number of arguments
     * @param {Number} index      Current argument index
     * @param {*} actual          Current argument
     * @param {string} [expected] An optional, comma separated string with
     *                            expected types on given index
     * @extends Error
     */
    function createError(fn, argCount, index, actual, expected) {
      var actualType = getTypeOf(actual);
      var _expected = expected ? expected.split(',') : null;
      var _fn = (fn || 'unnamed');
      var anyType = _expected && contains(_expected, 'any');
      var message;
      var data = {
        fn: fn,
        index: index,
        actual: actual,
        expected: _expected
      };

      if (_expected) {
        if (argCount > index && !anyType) {
          // unexpected type
          message = 'Unexpected type of argument in function ' + _fn +
              ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
        }
        else {
          // too few arguments
          message = 'Too few arguments in function ' + _fn +
              ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
        }
      }
      else {
        // too many arguments
        message = 'Too many arguments in function ' + _fn +
            ' (expected: ' + index + ', actual: ' + argCount + ')'
      }

      var err = new TypeError(message);
      err.data = data;
      return err;
    }

    /**
     * Collection with function references (local shortcuts to functions)
     * @constructor
     * @param {string} [name='refs']  Optional name for the refs, used to generate
     *                                JavaScript code
     */
    function Refs(name) {
      this.name = name || 'refs';
      this.categories = {};
    }

    /**
     * Add a function reference.
     * @param {Function} fn
     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'
     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'
     */
    Refs.prototype.add = function (fn, category) {
      var cat = category || 'fn';
      if (!this.categories[cat]) this.categories[cat] = [];

      var index = this.categories[cat].indexOf(fn);
      if (index == -1) {
        index = this.categories[cat].length;
        this.categories[cat].push(fn);
      }

      return cat + index;
    };

    /**
     * Create code lines for all function references
     * @returns {string} Returns the code containing all function references
     */
    Refs.prototype.toCode = function () {
      var code = [];
      var path = this.name + '.categories';
      var categories = this.categories;

      for (var cat in categories) {
        if (categories.hasOwnProperty(cat)) {
          var category = categories[cat];

          for (var i = 0; i < category.length; i++) {
            code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
          }
        }
      }

      return code.join('\n');
    };

    /**
     * A function parameter
     * @param {string | string[] | Param} types    A parameter type like 'string',
     *                                             'number | boolean'
     * @param {boolean} [varArgs=false]            Variable arguments if true
     * @constructor
     */
    function Param(types, varArgs) {
      // parse the types, can be a string with types separated by pipe characters |
      if (typeof types === 'string') {
        // parse variable arguments operator (ellipses '...number')
        var _types = types.trim();
        var _varArgs = _types.substr(0, 3) === '...';
        if (_varArgs) {
          _types = _types.substr(3);
        }
        if (_types === '') {
          this.types = ['any'];
        }
        else {
          this.types = _types.split('|');
          for (var i = 0; i < this.types.length; i++) {
            this.types[i] = this.types[i].trim();
          }
        }
      }
      else if (Array.isArray(types)) {
        this.types = types;
      }
      else if (types instanceof Param) {
        return types.clone();
      }
      else {
        throw new Error('String or Array expected');
      }

      // can hold a type to which to convert when handling this parameter
      this.conversions = [];
      // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)

      // variable arguments
      this.varArgs = _varArgs || varArgs || false;

      // check for any type arguments
      this.anyType = this.types.indexOf('any') !== -1;
    }

    /**
     * Order Params
     * any type ('any') will be ordered last, and object as second last (as other
     * types may be an object as well, like Array).
     *
     * @param {Param} a
     * @param {Param} b
     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
     */
    Param.compare = function (a, b) {
      // TODO: simplify parameter comparison, it's a mess
      if (a.anyType) return 1;
      if (b.anyType) return -1;

      if (contains(a.types, 'Object')) return 1;
      if (contains(b.types, 'Object')) return -1;

      if (a.hasConversions()) {
        if (b.hasConversions()) {
          var i, ac, bc;

          for (i = 0; i < a.conversions.length; i++) {
            if (a.conversions[i] !== undefined) {
              ac = a.conversions[i];
              break;
            }
          }

          for (i = 0; i < b.conversions.length; i++) {
            if (b.conversions[i] !== undefined) {
              bc = b.conversions[i];
              break;
            }
          }

          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
        }
        else {
          return 1;
        }
      }
      else {
        if (b.hasConversions()) {
          return -1;
        }
        else {
          // both params have no conversions
          var ai, bi;

          for (i = 0; i < typed.types.length; i++) {
            if (typed.types[i].name === a.types[0]) {
              ai = i;
              break;
            }
          }

          for (i = 0; i < typed.types.length; i++) {
            if (typed.types[i].name === b.types[0]) {
              bi = i;
              break;
            }
          }

          return ai - bi;
        }
      }
    };

    /**
     * Test whether this parameters types overlap an other parameters types.
     * Will not match ['any'] with ['number']
     * @param {Param} other
     * @return {boolean} Returns true when there are overlapping types
     */
    Param.prototype.overlapping = function (other) {
      for (var i = 0; i < this.types.length; i++) {
        if (contains(other.types, this.types[i])) {
          return true;
        }
      }
      return false;
    };

    /**
     * Test whether this parameters types matches an other parameters types.
     * When any of the two parameters contains `any`, true is returned
     * @param {Param} other
     * @return {boolean} Returns true when there are matching types
     */
    Param.prototype.matches = function (other) {
      return this.anyType || other.anyType || this.overlapping(other);
    };

    /**
     * Create a clone of this param
     * @returns {Param} Returns a cloned version of this param
     */
    Param.prototype.clone = function () {
      var param = new Param(this.types.slice(), this.varArgs);
      param.conversions = this.conversions.slice();
      return param;
    };

    /**
     * Test whether this parameter contains conversions
     * @returns {boolean} Returns true if the parameter contains one or
     *                    multiple conversions.
     */
    Param.prototype.hasConversions = function () {
      return this.conversions.length > 0;
    };

    /**
     * Tests whether this parameters contains any of the provided types
     * @param {Object} types  A Map with types, like {'number': true}
     * @returns {boolean}     Returns true when the parameter contains any
     *                        of the provided types
     */
    Param.prototype.contains = function (types) {
      for (var i = 0; i < this.types.length; i++) {
        if (types[this.types[i]]) {
          return true;
        }
      }
      return false;
    };

    /**
     * Return a string representation of this params types, like 'string' or
     * 'number | boolean' or '...number'
     * @param {boolean} [toConversion]   If true, the returned types string
     *                                   contains the types where the parameter
     *                                   will convert to. If false (default)
     *                                   the "from" types are returned
     * @returns {string}
     */
    Param.prototype.toString = function (toConversion) {
      var types = [];
      var keys = {};

      for (var i = 0; i < this.types.length; i++) {
        var conversion = this.conversions[i];
        var type = toConversion && conversion ? conversion.to : this.types[i];
        if (!(type in keys)) {
          keys[type] = true;
          types.push(type);
        }
      }

      return (this.varArgs ? '...' : '') + types.join('|');
    };

    /**
     * A function signature
     * @param {string | string[] | Param[]} params
     *                         Array with the type(s) of each parameter,
     *                         or a comma separated string with types
     * @param {Function} fn    The actual function
     * @constructor
     */
    function Signature(params, fn) {
      var _params;
      if (typeof params === 'string') {
        _params = (params !== '') ? params.split(',') : [];
      }
      else if (Array.isArray(params)) {
        _params = params;
      }
      else {
        throw new Error('string or Array expected');
      }

      this.params = new Array(_params.length);
      this.anyType = false;
      this.varArgs = false;
      for (var i = 0; i < _params.length; i++) {
        var param = new Param(_params[i]);
        this.params[i] = param;
        if (param.anyType) {
          this.anyType = true;
        }
        if (i === _params.length - 1) {
          // the last argument
          this.varArgs = param.varArgs;
        }
        else {
          // non-last argument
          if (param.varArgs) {
            throw new SyntaxError('Unexpected variable arguments operator "..."');
          }
        }
      }

      this.fn = fn;
    }

    /**
     * Create a clone of this signature
     * @returns {Signature} Returns a cloned version of this signature
     */
    Signature.prototype.clone = function () {
      return new Signature(this.params.slice(), this.fn);
    };

    /**
     * Expand a signature: split params with union types in separate signatures
     * For example split a Signature "string | number" into two signatures.
     * @return {Signature[]} Returns an array with signatures (at least one)
     */
    Signature.prototype.expand = function () {
      var signatures = [];

      function recurse(signature, path) {
        if (path.length < signature.params.length) {
          var i, newParam, conversion;

          var param = signature.params[path.length];
          if (param.varArgs) {
            // a variable argument. do not split the types in the parameter
            newParam = param.clone();

            // add conversions to the parameter
            // recurse for all conversions
            for (i = 0; i < typed.conversions.length; i++) {
              conversion = typed.conversions[i];
              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                var j = newParam.types.length;
                newParam.types[j] = conversion.from;
                newParam.conversions[j] = conversion;
              }
            }

            recurse(signature, path.concat(newParam));
          }
          else {
            // split each type in the parameter
            for (i = 0; i < param.types.length; i++) {
              recurse(signature, path.concat(new Param(param.types[i])));
            }

            // recurse for all conversions
            for (i = 0; i < typed.conversions.length; i++) {
              conversion = typed.conversions[i];
              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                newParam = new Param(conversion.from);
                newParam.conversions[0] = conversion;
                recurse(signature, path.concat(newParam));
              }
            }
          }
        }
        else {
          signatures.push(new Signature(path, signature.fn));
        }
      }

      recurse(this, []);

      return signatures;
    };

    /**
     * Compare two signatures.
     *
     * When two params are equal and contain conversions, they will be sorted
     * by lowest index of the first conversions.
     *
     * @param {Signature} a
     * @param {Signature} b
     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
     */
    Signature.compare = function (a, b) {
      if (a.params.length > b.params.length) return 1;
      if (a.params.length < b.params.length) return -1;

      // count the number of conversions
      var i;
      var len = a.params.length; // a and b have equal amount of params
      var ac = 0;
      var bc = 0;
      for (i = 0; i < len; i++) {
        if (a.params[i].hasConversions()) ac++;
        if (b.params[i].hasConversions()) bc++;
      }

      if (ac > bc) return 1;
      if (ac < bc) return -1;

      // compare the order per parameter
      for (i = 0; i < a.params.length; i++) {
        var cmp = Param.compare(a.params[i], b.params[i]);
        if (cmp !== 0) {
          return cmp;
        }
      }

      return 0;
    };

    /**
     * Test whether any of the signatures parameters has conversions
     * @return {boolean} Returns true when any of the parameters contains
     *                   conversions.
     */
    Signature.prototype.hasConversions = function () {
      for (var i = 0; i < this.params.length; i++) {
        if (this.params[i].hasConversions()) {
          return true;
        }
      }
      return false;
    };

    /**
     * Test whether this signature should be ignored.
     * Checks whether any of the parameters contains a type listed in
     * typed.ignore
     * @return {boolean} Returns true when the signature should be ignored
     */
    Signature.prototype.ignore = function () {
      // create a map with ignored types
      var types = {};
      for (var i = 0; i < typed.ignore.length; i++) {
        types[typed.ignore[i]] = true;
      }

      // test whether any of the parameters contains this type
      for (i = 0; i < this.params.length; i++) {
        if (this.params[i].contains(types)) {
          return true;
        }
      }

      return false;
    };

    /**
     * Test whether the path of this signature matches a given path.
     * @param {Param[]} params
     */
    Signature.prototype.paramsStartWith = function (params) {
      if (params.length === 0) {
        return true;
      }

      var aLast = last(this.params);
      var bLast = last(params);

      for (var i = 0; i < params.length; i++) {
        var a = this.params[i] || (aLast.varArgs ? aLast: null);
        var b = params[i]      || (bLast.varArgs ? bLast: null);

        if (!a ||  !b || !a.matches(b)) {
          return false;
        }
      }

      return true;
    };

    /**
     * Generate the code to invoke this signature
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns code
     */
    Signature.prototype.toCode = function (refs, prefix) {
      var code = [];

      var args = new Array(this.params.length);
      for (var i = 0; i < this.params.length; i++) {
        var param = this.params[i];
        var conversion = param.conversions[0];
        if (param.varArgs) {
          args[i] = 'varArgs';
        }
        else if (conversion) {
          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
        }
        else {
          args[i] = 'arg' + i;
        }
      }

      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;
      if (ref) {
        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
      }

      return code.join('\n');
    };

    /**
     * Return a string representation of the signature
     * @returns {string}
     */
    Signature.prototype.toString = function () {
      return this.params.join(', ');
    };

    /**
     * A group of signatures with the same parameter on given index
     * @param {Param[]} path
     * @param {Signature} [signature]
     * @param {Node[]} childs
     * @param {boolean} [fallThrough=false]
     * @constructor
     */
    function Node(path, signature, childs, fallThrough) {
      this.path = path || [];
      this.param = path[path.length - 1] || null;
      this.signature = signature || null;
      this.childs = childs || [];
      this.fallThrough = fallThrough || false;
    }

    /**
     * Generate code for this group of signatures
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns the code as string
     */
    Node.prototype.toCode = function (refs, prefix) {
      // TODO: split this function in multiple functions, it's too large
      var code = [];

      if (this.param) {
        var index = this.path.length - 1;
        var conversion = this.param.conversions[0];
        var comment = '// type: ' + (conversion ?
                (conversion.from + ' (convert to ' + conversion.to + ')') :
                this.param);

        // non-root node (path is non-empty)
        if (this.param.varArgs) {
          if (this.param.anyType) {
            // variable arguments with any type
            code.push(prefix + 'if (arguments.length > ' + index + ') {');
            code.push(prefix + '  var varArgs = [];');
            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
            code.push(prefix + '    varArgs.push(arguments[i]);');
            code.push(prefix + '  }');
            code.push(this.signature.toCode(refs, prefix + '  '));
            code.push(prefix + '}');
          }
          else {
            // variable arguments with a fixed type
            var getTests = function (types, arg) {
              var tests = [];
              for (var i = 0; i < types.length; i++) {
                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
              }
              return tests.join(' || ');
            }.bind(this);

            var allTypes = this.param.types;
            var exactTypes = [];
            for (var i = 0; i < allTypes.length; i++) {
              if (this.param.conversions[i] === undefined) {
                exactTypes.push(allTypes[i]);
              }
            }

            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
            code.push(prefix + '  var varArgs = [arg' + index + '];');
            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
            code.push(prefix + '      varArgs.push(arguments[i]);');

            for (var i = 0; i < allTypes.length; i++) {
              var conversion_i = this.param.conversions[i];
              if (conversion_i) {
                var test = refs.add(getTypeTest(allTypes[i]), 'test');
                var convert = refs.add(conversion_i.convert, 'convert');
                code.push(prefix + '    }');
                code.push(prefix + '    else if (' + test + '(arguments[i])) {');
                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
              }
            }
            code.push(prefix + '    } else {');
            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
            code.push(prefix + '    }');
            code.push(prefix + '  }');
            code.push(this.signature.toCode(refs, prefix + '  '));
            code.push(prefix + '}');
          }
        }
        else {
          if (this.param.anyType) {
            // any type
            code.push(prefix + '// type: any');
            code.push(this._innerCode(refs, prefix));
          }
          else {
            // regular type
            var type = this.param.types[0];
            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;

            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
            code.push(this._innerCode(refs, prefix + '  '));
            code.push(prefix + '}');
          }
        }
      }
      else {
        // root node (path is empty)
        code.push(this._innerCode(refs, prefix));
      }

      return code.join('\n');
    };

    /**
     * Generate inner code for this group of signatures.
     * This is a helper function of Node.prototype.toCode
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns the inner code as string
     * @private
     */
    Node.prototype._innerCode = function (refs, prefix) {
      var code = [];
      var i;

      if (this.signature) {
        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
        code.push(this.signature.toCode(refs, prefix + '  '));
        code.push(prefix + '}');
      }

      for (i = 0; i < this.childs.length; i++) {
        code.push(this.childs[i].toCode(refs, prefix));
      }

      // TODO: shouldn't the this.param.anyType check be redundant
      if (!this.fallThrough || (this.param && this.param.anyType)) {
        var exceptions = this._exceptions(refs, prefix);
        if (exceptions) {
          code.push(exceptions);
        }
      }

      return code.join('\n');
    };


    /**
     * Generate code to throw exceptions
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns the inner code as string
     * @private
     */
    Node.prototype._exceptions = function (refs, prefix) {
      var index = this.path.length;

      if (this.childs.length === 0) {
        // TODO: can this condition be simplified? (we have a fall-through here)
        return [
          prefix + 'if (arguments.length > ' + index + ') {',
          prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',
          prefix + '}'
        ].join('\n');
      }
      else {
        var keys = {};
        var types = [];

        for (var i = 0; i < this.childs.length; i++) {
          var node = this.childs[i];
          if (node.param) {
            for (var j = 0; j < node.param.types.length; j++) {
              var type = node.param.types[j];
              if (!(type in keys) && !node.param.conversions[j]) {
                keys[type] = true;
                types.push(type);
              }
            }
          }
        }

        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
      }
    };

    /**
     * Split all raw signatures into an array with expanded Signatures
     * @param {Object.<string, Function>} rawSignatures
     * @return {Signature[]} Returns an array with expanded signatures
     */
    function parseSignatures(rawSignatures) {
      // FIXME: need to have deterministic ordering of signatures, do not create via object
      var signature;
      var keys = {};
      var signatures = [];
      var i;

      for (var types in rawSignatures) {
        if (rawSignatures.hasOwnProperty(types)) {
          var fn = rawSignatures[types];
          signature = new Signature(types, fn);

          if (signature.ignore()) {
            continue;
          }

          var expanded = signature.expand();

          for (i = 0; i < expanded.length; i++) {
            var signature_i = expanded[i];
            var key = signature_i.toString();
            var existing = keys[key];
            if (!existing) {
              keys[key] = signature_i;
            }
            else {
              var cmp = Signature.compare(signature_i, existing);
              if (cmp < 0) {
                // override if sorted first
                keys[key] = signature_i;
              }
              else if (cmp === 0) {
                throw new Error('Signature "' + key + '" is defined twice');
              }
              // else: just ignore
            }
          }
        }
      }

      // convert from map to array
      for (key in keys) {
        if (keys.hasOwnProperty(key)) {
          signatures.push(keys[key]);
        }
      }

      // order the signatures
      signatures.sort(function (a, b) {
        return Signature.compare(a, b);
      });

      // filter redundant conversions from signatures with varArgs
      // TODO: simplify this loop or move it to a separate function
      for (i = 0; i < signatures.length; i++) {
        signature = signatures[i];

        if (signature.varArgs) {
          var index = signature.params.length - 1;
          var param = signature.params[index];

          var t = 0;
          while (t < param.types.length) {
            if (param.conversions[t]) {
              var type = param.types[t];

              for (var j = 0; j < signatures.length; j++) {
                var other = signatures[j];
                var p = other.params[index];

                if (other !== signature &&
                    p &&
                    contains(p.types, type) && !p.conversions[index]) {
                  // this (conversion) type already exists, remove it
                  param.types.splice(t, 1);
                  param.conversions.splice(t, 1);
                  t--;
                  break;
                }
              }
            }
            t++;
          }
        }
      }

      return signatures;
    }

    /**
     * Filter all any type signatures
     * @param {Signature[]} signatures
     * @return {Signature[]} Returns only any type signatures
     */
    function filterAnyTypeSignatures (signatures) {
      var filtered = [];

      for (var i = 0; i < signatures.length; i++) {
        if (signatures[i].anyType) {
          filtered.push(signatures[i]);
        }
      }

      return filtered;
    }

    /**
     * create a map with normalized signatures as key and the function as value
     * @param {Signature[]} signatures   An array with split signatures
     * @return {Object.<string, Function>} Returns a map with normalized
     *                                     signatures as key, and the function
     *                                     as value.
     */
    function mapSignatures(signatures) {
      var normalized = {};

      for (var i = 0; i < signatures.length; i++) {
        var signature = signatures[i];
        if (signature.fn && !signature.hasConversions()) {
          var params = signature.params.join(',');
          normalized[params] = signature.fn;
        }
      }

      return normalized;
    }

    /**
     * Parse signatures recursively in a node tree.
     * @param {Signature[]} signatures  Array with expanded signatures
     * @param {Param[]} path            Traversed path of parameter types
     * @param {Signature[]} anys
     * @return {Node}                   Returns a node tree
     */
    function parseTree(signatures, path, anys) {
      var i, signature;
      var index = path.length;
      var nodeSignature;

      var filtered = [];
      for (i = 0; i < signatures.length; i++) {
        signature = signatures[i];

        // filter the first signature with the correct number of params
        if (signature.params.length === index && !nodeSignature) {
          nodeSignature = signature;
        }

        if (signature.params[index] != undefined) {
          filtered.push(signature);
        }
      }

      // sort the filtered signatures by param
      filtered.sort(function (a, b) {
        return Param.compare(a.params[index], b.params[index]);
      });

      // recurse over the signatures
      var entries = [];
      for (i = 0; i < filtered.length; i++) {
        signature = filtered[i];
        // group signatures with the same param at current index
        var param = signature.params[index];

        // TODO: replace the next filter loop
        var existing = entries.filter(function (entry) {
          return entry.param.overlapping(param);
        })[0];

        //var existing;
        //for (var j = 0; j < entries.length; j++) {
        //  if (entries[j].param.overlapping(param)) {
        //    existing = entries[j];
        //    break;
        //  }
        //}

        if (existing) {
          if (existing.param.varArgs) {
            throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
          }
          existing.signatures.push(signature);
        }
        else {
          entries.push({
            param: param,
            signatures: [signature]
          });
        }
      }

      // find all any type signature that can still match our current path
      var matchingAnys = [];
      for (i = 0; i < anys.length; i++) {
        if (anys[i].paramsStartWith(path)) {
          matchingAnys.push(anys[i]);
        }
      }

      // see if there are any type signatures that don't match any of the
      // signatures that we have in our tree, i.e. we have alternative
      // matching signature(s) outside of our current tree and we should
      // fall through to them instead of throwing an exception
      var fallThrough = false;
      for (i = 0; i < matchingAnys.length; i++) {
        if (!contains(signatures, matchingAnys[i])) {
          fallThrough = true;
          break;
        }
      }

      // parse the childs
      var childs = new Array(entries.length);
      for (i = 0; i < entries.length; i++) {
        var entry = entries[i];
        childs[i] = parseTree(entry.signatures, path.concat(entry.param), matchingAnys)
      }

      return new Node(path, nodeSignature, childs, fallThrough);
    }

    /**
     * Generate an array like ['arg0', 'arg1', 'arg2']
     * @param {number} count Number of arguments to generate
     * @returns {Array} Returns an array with argument names
     */
    function getArgs(count) {
      // create an array with all argument names
      var args = [];
      for (var i = 0; i < count; i++) {
        args[i] = 'arg' + i;
      }

      return args;
    }

    /**
     * Compose a function from sub-functions each handling a single type signature.
     * Signatures:
     *   typed(signature: string, fn: function)
     *   typed(name: string, signature: string, fn: function)
     *   typed(signatures: Object.<string, function>)
     *   typed(name: string, signatures: Object.<string, function>)
     *
     * @param {string | null} name
     * @param {Object.<string, Function>} signatures
     * @return {Function} Returns the typed function
     * @private
     */
    function _typed(name, signatures) {
      var refs = new Refs();

      // parse signatures, expand them
      var _signatures = parseSignatures(signatures);
      if (_signatures.length == 0) {
        throw new Error('No signatures provided');
      }

      // filter all any type signatures
      var anys = filterAnyTypeSignatures(_signatures);

      // parse signatures into a node tree
      var node = parseTree(_signatures, [], anys);

      //var util = require('util');
      //console.log('ROOT');
      //console.log(util.inspect(node, { depth: null }));

      // generate code for the typed function
      // safeName is a conservative replacement of characters 
      // to prevend being able to inject JS code at the place of the function name 
      // the name is useful for stack trackes therefore we want have it there
      var code = [];
      var safeName = (name || '').replace(/[^a-zA-Z0-9_$]/g, '_')
      var args = getArgs(maxParams(_signatures));
      code.push('function ' + safeName + '(' + args.join(', ') + ') {');
      code.push('  "use strict";');
      code.push('  var name = ' + JSON.stringify(name || '') + ';');
      code.push(node.toCode(refs, '  ', false));
      code.push('}');

      // generate body for the factory function
      var body = [
        refs.toCode(),
        'return ' + code.join('\n')
      ].join('\n');

      // evaluate the JavaScript code and attach function references
      var factory = (new Function(refs.name, 'createError', body));
      var fn = factory(refs, createError);

      //console.log('FN\n' + fn.toString()); // TODO: cleanup

      // attach the signatures with sub-functions to the constructed function
      fn.signatures = mapSignatures(_signatures);

      return fn;
    }

    /**
     * Calculate the maximum number of parameters in givens signatures
     * @param {Signature[]} signatures
     * @returns {number} The maximum number of parameters
     */
    function maxParams(signatures) {
      var max = 0;

      for (var i = 0; i < signatures.length; i++) {
        var len = signatures[i].params.length;
        if (len > max) {
          max = len;
        }
      }

      return max;
    }

    /**
     * Get the type of a value
     * @param {*} x
     * @returns {string} Returns a string with the type of value
     */
    function getTypeOf(x) {
      var obj;

      for (var i = 0; i < typed.types.length; i++) {
        var entry = typed.types[i];

        if (entry.name === 'Object') {
          // Array and Date are also Object, so test for Object afterwards
          obj = entry;
        }
        else {
          if (entry.test(x)) return entry.name;
        }
      }

      // at last, test whether an object
      if (obj && obj.test(x)) return obj.name;

      return 'unknown';
    }

    /**
     * Test whether an array contains some item
     * @param {Array} array
     * @param {*} item
     * @return {boolean} Returns true if array contains item, false if not.
     */
    function contains(array, item) {
      return array.indexOf(item) !== -1;
    }

    /**
     * Returns the last item in the array
     * @param {Array} array
     * @return {*} item
     */
    function last (array) {
      return array[array.length - 1];
    }

    // data type tests
    var types = [
      { name: 'number',    test: function (x) { return typeof x === 'number' } },
      { name: 'string',    test: function (x) { return typeof x === 'string' } },
      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
      { name: 'Function',  test: function (x) { return typeof x === 'function'} },
      { name: 'Array',     test: Array.isArray },
      { name: 'Date',      test: function (x) { return x instanceof Date } },
      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
      { name: 'Object',    test: function (x) { return typeof x === 'object' } },
      { name: 'null',      test: function (x) { return x === null } },
      { name: 'undefined', test: function (x) { return x === undefined } }
    ];

    // configuration
    var config = {};

    // type conversions. Order is important
    var conversions = [];

    // types to be ignored
    var ignore = [];

    // temporary object for holding types and conversions, for constructing
    // the `typed` function itself
    // TODO: find a more elegant solution for this
    var typed = {
      config: config,
      types: types,
      conversions: conversions,
      ignore: ignore
    };

    /**
     * Construct the typed function itself with various signatures
     *
     * Signatures:
     *
     *   typed(signatures: Object.<string, function>)
     *   typed(name: string, signatures: Object.<string, function>)
     */
    typed = _typed('typed', {
      'Object': function (signatures) {
        var fns = [];
        for (var signature in signatures) {
          if (signatures.hasOwnProperty(signature)) {
            fns.push(signatures[signature]);
          }
        }
        var name = getName(fns);

        return _typed(name, signatures);
      },
      'string, Object': _typed,
      // TODO: add a signature 'Array.<function>'
      '...Function': function (fns) {
        var err;
        var name = getName(fns);
        var signatures = {};

        for (var i = 0; i < fns.length; i++) {
          var fn = fns[i];

          // test whether this is a typed-function
          if (!(typeof fn.signatures === 'object')) {
            err = new TypeError('Function is no typed-function (index: ' + i + ')');
            err.data = {index: i};
            throw err;
          }

          // merge the signatures
          for (var signature in fn.signatures) {
            if (fn.signatures.hasOwnProperty(signature)) {
              if (signatures.hasOwnProperty(signature)) {
                if (fn.signatures[signature] !== signatures[signature]) {
                  err = new Error('Signature "' + signature + '" is defined twice');
                  err.data = {signature: signature};
                  throw err;
                }
                // else: both signatures point to the same function, that's fine
              }
              else {
                signatures[signature] = fn.signatures[signature];
              }
            }
          }
        }

        return _typed(name, signatures);
      }
    });

    /**
     * Find a specific signature from a (composed) typed function, for
     * example:
     *
     *   typed.find(fn, ['number', 'string'])
     *   typed.find(fn, 'number, string')
     *
     * Function find only only works for exact matches.
     *
     * @param {Function} fn                   A typed-function
     * @param {string | string[]} signature   Signature to be found, can be
     *                                        an array or a comma separated string.
     * @return {Function}                     Returns the matching signature, or
     *                                        throws an errror when no signature
     *                                        is found.
     */
    function find (fn, signature) {
      if (!fn.signatures) {
        throw new TypeError('Function is no typed-function');
      }

      // normalize input
      var arr;
      if (typeof signature === 'string') {
        arr = signature.split(',');
        for (var i = 0; i < arr.length; i++) {
          arr[i] = arr[i].trim();
        }
      }
      else if (Array.isArray(signature)) {
        arr = signature;
      }
      else {
        throw new TypeError('String array or a comma separated string expected');
      }

      var str = arr.join(',');

      // find an exact match
      var match = fn.signatures[str];
      if (match) {
        return match;
      }

      // TODO: extend find to match non-exact signatures

      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
    }

    /**
     * Convert a given value to another data type.
     * @param {*} value
     * @param {string} type
     */
    function convert (value, type) {
      var from = getTypeOf(value);

      // check conversion is needed
      if (type === from) {
        return value;
      }

      for (var i = 0; i < typed.conversions.length; i++) {
        var conversion = typed.conversions[i];
        if (conversion.from === from && conversion.to === type) {
          return conversion.convert(value);
        }
      }

      throw new Error('Cannot convert from ' + from + ' to ' + type);
    }

    // attach types and conversions to the final `typed` function
    typed.config = config;
    typed.types = types;
    typed.conversions = conversions;
    typed.ignore = ignore;
    typed.create = create;
    typed.find = find;
    typed.convert = convert;

    // add a type
    typed.addType = function (type) {
      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
        throw new TypeError('Object with properties {name: string, test: function} expected');
      }

      typed.types.push(type);
    };

    // add a conversion
    typed.addConversion = function (conversion) {
      if (!conversion
          || typeof conversion.from !== 'string'
          || typeof conversion.to !== 'string'
          || typeof conversion.convert !== 'function') {
        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
      }

      typed.conversions.push(conversion);
    };

    return typed;
  }

  return create();
}));

},{}],618:[function(require,module,exports){
(function (global){

var rng;

if (global.crypto && crypto.getRandomValues) {
  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
  // Moderately fast, high quality
  var _rnds8 = new Uint8Array(16);
  rng = function whatwgRNG() {
    crypto.getRandomValues(_rnds8);
    return _rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var  _rnds = new Array(16);
  rng = function() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return _rnds;
  };
}

module.exports = rng;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],619:[function(require,module,exports){
//     uuid.js
//
//     Copyright (c) 2010-2012 Robert Kieffer
//     MIT License - http://opensource.org/licenses/mit-license.php

// Unique ID creation requires a high quality random # generator.  We feature
// detect to determine the best RNG source, normalizing to a function that
// returns 128-bits of randomness, since that's what's usually required
var _rng = require('./rng');

// Maps for number <-> hex string conversion
var _byteToHex = [];
var _hexToByte = {};
for (var i = 0; i < 256; i++) {
  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
  _hexToByte[_byteToHex[i]] = i;
}

// **`parse()` - Parse a UUID into it's component bytes**
function parse(s, buf, offset) {
  var i = (buf && offset) || 0, ii = 0;

  buf = buf || [];
  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
    if (ii < 16) { // Don't overflow!
      buf[i + ii++] = _hexToByte[oct];
    }
  });

  // Zero out remaining bytes if string was short
  while (ii < 16) {
    buf[i + ii++] = 0;
  }

  return buf;
}

// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
function unparse(buf, offset) {
  var i = offset || 0, bth = _byteToHex;
  return  bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = _rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
  _seedBytes[0] | 0x01,
  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; n++) {
    b[i + n] = node[n];
  }

  return buf ? buf : unparse(b);
}

// **`v4()` - Generate random UUID**

// See https://github.com/broofa/node-uuid for API details
function v4(options, buf, offset) {
  // Deprecated - 'format' argument, as supported in v1.2
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || _rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ii++) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || unparse(rnds);
}

// Export public API
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
uuid.parse = parse;
uuid.unparse = unparse;

module.exports = uuid;

},{"./rng":618}],620:[function(require,module,exports){
module.exports = Reflux.createActions(["codapLoaded", "hideUndoRedo", "sendUndoToCODAP", "sendRedoToCODAP"]);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvYWN0aW9ucy9jb2RhcC1hY3Rpb25zLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2FjdGlvbnMvY29kYXAtYWN0aW9ucy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsTUFBTSxDQUFDLGFBQVAsQ0FDZixDQUNFLGFBREYsRUFFRSxjQUZGLEVBR0UsaUJBSEYsRUFJRSxpQkFKRixDQURlIn0=

},{}],621:[function(require,module,exports){
module.exports = Reflux.createActions(["graphChanged"]);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvYWN0aW9ucy9ncmFwaC1hY3Rpb25zLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2FjdGlvbnMvZ3JhcGgtYWN0aW9ucy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsTUFBTSxDQUFDLGFBQVAsQ0FBcUIsQ0FBRSxjQUFGLENBQXJCIn0=

},{}],622:[function(require,module,exports){
module.exports = Reflux.createActions(["import"]);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvYWN0aW9ucy9pbXBvcnQtYWN0aW9ucy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9hY3Rpb25zL2ltcG9ydC1hY3Rpb25zLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixNQUFNLENBQUMsYUFBUCxDQUFxQixDQUFFLFFBQUYsQ0FBckIifQ==

},{}],623:[function(require,module,exports){
module.exports = [
  {
    "id": "1",
    "title": "",
    "image": "img/nodes/blank.png",
    "metadata": {
      "source": "internal",
      "title": "Blank",
      "link": null,
      "license": "public domain"
    }
  }
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9pbml0aWFsLXBhbGV0dGUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9pbml0aWFsLXBhbGV0dGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0VBQ2Y7SUFDRSxJQUFBLEVBQU0sR0FEUjtJQUVFLE9BQUEsRUFBUyxFQUZYO0lBR0UsT0FBQSxFQUFTLHFCQUhYO0lBSUUsVUFBQSxFQUFZO01BQ1YsUUFBQSxFQUFVLFVBREE7TUFFVixPQUFBLEVBQVMsT0FGQztNQUdWLE1BQUEsRUFBUSxJQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQURlIn0=

},{}],624:[function(require,module,exports){
module.exports = [
  {
    "id": "2",
    "title": "Egg",
    "image": "img/nodes/egg.png",
    "metadata": {
      "source": "internal",
      "title": "Egg",
      "link": "https://openclipart.org/detail/166320/egg",
      "license": "public domain"
    }
  }, {
    "id": "3",
    "title": "Chick",
    "image": "img/nodes/chick.png",
    "metadata": {
      "source": "internal",
      "title": "Chick",
      "link": "https://openclipart.org/detail/131641/Funny%20Chick%20Cartoon%20Newborn",
      "license": "public domain"
    }
  }, {
    "id": "4",
    "title": "Chicken",
    "image": "img/nodes/chicken.png",
    "metadata": {
      "source": "internal",
      "title": "Chicken",
      "link": "http://pixabay.com/en/rooster-cock-chicken-bird-farm-312602/",
      "license": "public domain"
    }
  }, {
    "id": "5",
    "title": "Tree",
    "image": "img/nodes/tree.png",
    "metadata": {
      "source": "internal",
      "title": "Tree",
      "link": "https://openclipart.org/detail/21735/tree",
      "license": "public domain"
    }
  }, {
    "id": "6",
    "title": "Cloud",
    "image": "img/nodes/cloud.png",
    "metadata": {
      "source": "internal",
      "title": "Cloud",
      "link": "https://openclipart.org/detail/17666/net%20wan%20cloud",
      "license": "public domain"
    }
  }, {
    "id": "7",
    "title": "Raindrops",
    "image": "img/nodes/raindrops.png",
    "metadata": {
      "source": "internal",
      "title": "Raindrops",
      "link": "http://pixabay.com/en/cloudy-rainy-rain-drops-raindrops-98506/",
      "license": "public domain"
    }
  }, {
    "id": "8",
    "title": "Hill",
    "image": "img/nodes/hill.png",
    "metadata": {
      "source": "internal",
      "title": "Hill",
      "link": "https://openclipart.org/detail/9437/RPG%20map%20symbols%3A%20hill",
      "license": "public domain"
    }
  }, {
    "id": "9",
    "title": "Axe",
    "image": "img/nodes/axe.png",
    "metadata": {
      "source": "internal",
      "title": "Axe",
      "link": "https://openclipart.org/detail/2591/axe",
      "license": "public domain"
    }
  }, {
    "id": "10",
    "title": "Frog",
    "image": "img/nodes/frog.png",
    "metadata": {
      "source": "internal",
      "title": "Frog",
      "link": "https://openclipart.org/detail/2112/green-sitting-frog",
      "license": "public domain"
    }
  }, {
    "id": "12",
    "title": "Maple-Tree",
    "image": "img/nodes/maple-tree.png",
    "metadata": {
      "source": "internal",
      "title": "Maple-Tree",
      "link": "https://openclipart.org/detail/21735/tree",
      "license": "public domain"
    }
  }, {
    "id": "13",
    "title": "Molecule",
    "image": "img/nodes/molecule.png",
    "metadata": {
      "source": "internal",
      "title": "Molecule",
      "link": "https://openclipart.org/detail/192917/molecule",
      "license": "public domain"
    }
  }, {
    "id": "14",
    "title": "Penguin",
    "image": "img/nodes/penguin.png",
    "metadata": {
      "source": "internal",
      "title": "Penguin",
      "link": "https://openclipart.org/detail/159679/pinguino-%7C-penguin",
      "license": "public domain"
    }
  }, {
    "id": "15",
    "title": "Woodpecker",
    "image": "img/nodes/woodpecker.png",
    "metadata": {
      "source": "internal",
      "title": "Woodpecker",
      "link": "https://openclipart.org/detail/25756/woodpecker",
      "license": "public domain"
    }
  }, {
    "id": "16",
    "title": "Reed",
    "image": "img/nodes/reed.png",
    "metadata": {
      "source": "internal",
      "title": "Reed",
      "link": "https://openclipart.org/detail/13141/reed",
      "license": "public domain"
    }
  }, {
    "id": "17",
    "title": "Car-Pollute",
    "image": "img/nodes/car-pollute.png",
    "metadata": {
      "source": "internal",
      "title": "Car-Pollute",
      "link": "https://openclipart.org/detail/173174/the-car-pollute-the-air-with-co2",
      "license": "public domain"
    }
  }, {
    "id": "18",
    "title": "Ladybug",
    "image": "img/nodes/ladybug.png",
    "metadata": {
      "source": "internal",
      "title": "Ladybug",
      "link": "https://openclipart.org/detail/17678/ladybug",
      "license": "public domain"
    }
  }, {
    "id": "19",
    "title": "Earth",
    "image": "img/nodes/earth.png",
    "metadata": {
      "source": "internal",
      "title": "Earth",
      "link": "https://openclipart.org/detail/3320/earth",
      "license": "public domain"
    }
  }, {
    "id": "20",
    "title": "Lobster",
    "image": "img/nodes/lobster.png",
    "metadata": {
      "source": "internal",
      "title": "Lobster",
      "link": "https://openclipart.org/detail/223269/lobster-stylised",
      "license": "public domain"
    }
  }, {
    "id": "21",
    "title": "Water-Pollution",
    "image": "img/nodes/water-pollution.png",
    "metadata": {
      "source": "internal",
      "title": "Water-Pollution",
      "link": "https://openclipart.org/detail/169806/water-pollution",
      "license": "public domain"
    }
  }, {
    "id": "22",
    "title": "Lemon",
    "image": "img/nodes/lemon.png",
    "metadata": {
      "source": "internal",
      "title": "Lemon",
      "link": "https://openclipart.org/detail/26149/lemon",
      "license": "public domain"
    }
  }, {
    "id": "23",
    "title": "Fish",
    "image": "img/nodes/fish.png",
    "metadata": {
      "source": "internal",
      "title": "Fish",
      "link": "https://openclipart.org/detail/2707/happy-fish",
      "license": "public domain"
    }
  }, {
    "id": "24",
    "title": "Iceberg",
    "image": "img/nodes/iceberg.png",
    "metadata": {
      "source": "internal",
      "title": "Iceberg",
      "link": "https://openclipart.org/detail/194157/climate-change",
      "license": "public domain"
    }
  }, {
    "id": "25",
    "title": "Carbon-Dioxide",
    "image": "img/nodes/carbon-dioxide.png",
    "metadata": {
      "source": "internal",
      "title": "Carbon-Dioxide",
      "link": "https://openclipart.org/detail/232272/famous-and-infamous-molecules-4",
      "license": "public domain"
    }
  }
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9pbnRlcm5hbC1saWJyYXJ5LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvaW50ZXJuYWwtbGlicmFyeS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUI7RUFDZjtJQUNFLElBQUEsRUFBTSxHQURSO0lBRUUsT0FBQSxFQUFTLEtBRlg7SUFHRSxPQUFBLEVBQVMsbUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxLQUZDO01BR1YsTUFBQSxFQUFRLDJDQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQURlLEVBWWY7SUFDRSxJQUFBLEVBQU0sR0FEUjtJQUVFLE9BQUEsRUFBUyxPQUZYO0lBR0UsT0FBQSxFQUFTLHFCQUhYO0lBSUUsVUFBQSxFQUFZO01BQ1YsUUFBQSxFQUFVLFVBREE7TUFFVixPQUFBLEVBQVMsT0FGQztNQUdWLE1BQUEsRUFBUSx5RUFIRTtNQUlWLFNBQUEsRUFBVyxlQUpEO0tBSmQ7R0FaZSxFQXVCZjtJQUNFLElBQUEsRUFBTSxHQURSO0lBRUUsT0FBQSxFQUFTLFNBRlg7SUFHRSxPQUFBLEVBQVMsdUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxTQUZDO01BR1YsTUFBQSxFQUFRLDhEQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQXZCZSxFQWtDZjtJQUNFLElBQUEsRUFBTSxHQURSO0lBRUUsT0FBQSxFQUFTLE1BRlg7SUFHRSxPQUFBLEVBQVMsb0JBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxNQUZDO01BR1YsTUFBQSxFQUFRLDJDQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQWxDZSxFQTZDZjtJQUNFLElBQUEsRUFBTSxHQURSO0lBRUUsT0FBQSxFQUFTLE9BRlg7SUFHRSxPQUFBLEVBQVMscUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxPQUZDO01BR1YsTUFBQSxFQUFRLHdEQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQTdDZSxFQXdEZjtJQUNFLElBQUEsRUFBTSxHQURSO0lBRUUsT0FBQSxFQUFTLFdBRlg7SUFHRSxPQUFBLEVBQVMseUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxXQUZDO01BR1YsTUFBQSxFQUFRLGdFQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQXhEZSxFQW1FZjtJQUNFLElBQUEsRUFBTSxHQURSO0lBRUUsT0FBQSxFQUFTLE1BRlg7SUFHRSxPQUFBLEVBQVMsb0JBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxNQUZDO01BR1YsTUFBQSxFQUFRLG1FQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQW5FZSxFQThFZjtJQUNFLElBQUEsRUFBTSxHQURSO0lBRUUsT0FBQSxFQUFTLEtBRlg7SUFHRSxPQUFBLEVBQVMsbUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxLQUZDO01BR1YsTUFBQSxFQUFRLHlDQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQTlFZSxFQXlGZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLE1BRlg7SUFHRSxPQUFBLEVBQVMsb0JBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxNQUZDO01BR1YsTUFBQSxFQUFRLHdEQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQXpGZSxFQW9HZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLFlBRlg7SUFHRSxPQUFBLEVBQVMsMEJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxZQUZDO01BR1YsTUFBQSxFQUFRLDJDQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQXBHZSxFQStHZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLFVBRlg7SUFHRSxPQUFBLEVBQVMsd0JBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxVQUZDO01BR1YsTUFBQSxFQUFRLGdEQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQS9HZSxFQTBIZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLFNBRlg7SUFHRSxPQUFBLEVBQVMsdUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxTQUZDO01BR1YsTUFBQSxFQUFRLDREQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQTFIZSxFQXFJZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLFlBRlg7SUFHRSxPQUFBLEVBQVMsMEJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxZQUZDO01BR1YsTUFBQSxFQUFRLGlEQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQXJJZSxFQWdKZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLE1BRlg7SUFHRSxPQUFBLEVBQVMsb0JBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxNQUZDO01BR1YsTUFBQSxFQUFRLDJDQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQWhKZSxFQTJKZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLGFBRlg7SUFHRSxPQUFBLEVBQVMsMkJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxhQUZDO01BR1YsTUFBQSxFQUFRLHdFQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQTNKZSxFQXNLZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLFNBRlg7SUFHRSxPQUFBLEVBQVMsdUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxTQUZDO01BR1YsTUFBQSxFQUFRLDhDQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQXRLZSxFQWlMZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLE9BRlg7SUFHRSxPQUFBLEVBQVMscUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxPQUZDO01BR1YsTUFBQSxFQUFRLDJDQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQWpMZSxFQTRMZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLFNBRlg7SUFHRSxPQUFBLEVBQVMsdUJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxTQUZDO01BR1YsTUFBQSxFQUFRLHdEQUhFO01BSVYsU0FBQSxFQUFXLGVBSkQ7S0FKZDtHQTVMZSxFQXVNZjtJQUNFLElBQUEsRUFBTSxJQURSO0lBRUUsT0FBQSxFQUFTLGlCQUZYO0lBR0UsT0FBQSxFQUFTLCtCQUhYO0lBSUUsVUFBQSxFQUFZO01BQ1YsUUFBQSxFQUFVLFVBREE7TUFFVixPQUFBLEVBQVMsaUJBRkM7TUFHVixNQUFBLEVBQVEsdURBSEU7TUFJVixTQUFBLEVBQVcsZUFKRDtLQUpkO0dBdk1lLEVBa05mO0lBQ0UsSUFBQSxFQUFNLElBRFI7SUFFRSxPQUFBLEVBQVMsT0FGWDtJQUdFLE9BQUEsRUFBUyxxQkFIWDtJQUlFLFVBQUEsRUFBWTtNQUNWLFFBQUEsRUFBVSxVQURBO01BRVYsT0FBQSxFQUFTLE9BRkM7TUFHVixNQUFBLEVBQVEsNENBSEU7TUFJVixTQUFBLEVBQVcsZUFKRDtLQUpkO0dBbE5lLEVBNk5mO0lBQ0UsSUFBQSxFQUFNLElBRFI7SUFFRSxPQUFBLEVBQVMsTUFGWDtJQUdFLE9BQUEsRUFBUyxvQkFIWDtJQUlFLFVBQUEsRUFBWTtNQUNWLFFBQUEsRUFBVSxVQURBO01BRVYsT0FBQSxFQUFTLE1BRkM7TUFHVixNQUFBLEVBQVEsZ0RBSEU7TUFJVixTQUFBLEVBQVcsZUFKRDtLQUpkO0dBN05lLEVBd09mO0lBQ0UsSUFBQSxFQUFNLElBRFI7SUFFRSxPQUFBLEVBQVMsU0FGWDtJQUdFLE9BQUEsRUFBUyx1QkFIWDtJQUlFLFVBQUEsRUFBWTtNQUNWLFFBQUEsRUFBVSxVQURBO01BRVYsT0FBQSxFQUFTLFNBRkM7TUFHVixNQUFBLEVBQVEsc0RBSEU7TUFJVixTQUFBLEVBQVcsZUFKRDtLQUpkO0dBeE9lLEVBbVBmO0lBQ0UsSUFBQSxFQUFNLElBRFI7SUFFRSxPQUFBLEVBQVMsZ0JBRlg7SUFHRSxPQUFBLEVBQVMsOEJBSFg7SUFJRSxVQUFBLEVBQVk7TUFDVixRQUFBLEVBQVUsVUFEQTtNQUVWLE9BQUEsRUFBUyxnQkFGQztNQUdWLE1BQUEsRUFBUSx1RUFIRTtNQUlWLFNBQUEsRUFBVyxlQUpEO0tBSmQ7R0FuUGUifQ==

},{}],625:[function(require,module,exports){
var optgroup, option, ref;

ref = React.DOM, option = ref.option, optgroup = ref.optgroup;

module.exports = {
  map: {
    'public domain': {
      label: 'Public Domain',
      fullLabel: 'Public Domain',
      link: 'http://en.wikipedia.org/wiki/Public_domain'
    },
    'creative commons': {
      'cc by': {
        label: 'Attribution Only',
        fullLabel: 'Creative Commons: Attribution Only',
        link: 'http://creativecommons.org/licenses/by/4.0'
      },
      'cc by-sa': {
        label: 'ShareAlike',
        fullLabel: 'Creative Commons: ShareAlike',
        link: 'http://creativecommons.org/licenses/by-sa/4.0'
      },
      'cc by-nd': {
        label: 'NoDerivatives',
        fullLabel: 'Creative Commons: NoDerivatives',
        link: 'http://creativecommons.org/licenses/by-nd/4.0'
      },
      'cc by-nc': {
        label: 'NonCommercial (NC)',
        fullLabel: 'Creative Commons: NonCommercial (NC)',
        link: 'http://creativecommons.org/licenses/by-nc/4.0'
      },
      'cc by-nc-sa': {
        label: 'NC-ShareAlike',
        fullLabel: 'Creative Commons: NC-ShareAlike',
        link: 'http://creativecommons.org/licenses/by-nc-sa/4.0'
      },
      'cc by-nc-nd': {
        label: 'NC-NoDerivatives',
        fullLabel: 'Creative Commons: NC-NoDerivatives',
        link: 'http://creativecommons.org/licenses/by-nc-nd/4.0'
      }
    }
  },
  getLicense: function(slug) {
    return this.map[slug] || this.map['creative commons'][slug] || {
      label: 'n/a',
      link: null
    };
  },
  getLicenseLabel: function(slug) {
    return (this.getLicense(slug)).label;
  },
  getRenderOptions: function(slug) {
    var license;
    return [
      option({
        key: slug + "-public-domain",
        value: 'public domain'
      }, this.getLicenseLabel('public domain')), optgroup({
        key: slug + "-opt-group",
        label: 'Creative Commons'
      }, (function() {
        var ref1, results;
        ref1 = this.map['creative commons'];
        results = [];
        for (slug in ref1) {
          license = ref1[slug];
          results.push(option({
            key: slug,
            value: slug
          }, license.label));
        }
        return results;
      }).call(this))
    ];
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9saWNlbnNlcy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9kYXRhL2xpY2Vuc2VzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQXFCLEtBQUssQ0FBQyxHQUEzQixFQUFDLG1CQUFELEVBQVM7O0FBRVQsTUFBTSxDQUFDLE9BQVAsR0FDRTtFQUFBLEdBQUEsRUFDRTtJQUFBLGVBQUEsRUFDRTtNQUFBLEtBQUEsRUFBTyxlQUFQO01BQ0EsU0FBQSxFQUFXLGVBRFg7TUFFQSxJQUFBLEVBQU0sNENBRk47S0FERjtJQUlBLGtCQUFBLEVBQ0U7TUFBQSxPQUFBLEVBQ0U7UUFBQSxLQUFBLEVBQU8sa0JBQVA7UUFDQSxTQUFBLEVBQVcsb0NBRFg7UUFFQSxJQUFBLEVBQU0sNENBRk47T0FERjtNQUlBLFVBQUEsRUFDRTtRQUFBLEtBQUEsRUFBTyxZQUFQO1FBQ0EsU0FBQSxFQUFXLDhCQURYO1FBRUEsSUFBQSxFQUFNLCtDQUZOO09BTEY7TUFRQSxVQUFBLEVBQ0U7UUFBQSxLQUFBLEVBQU8sZUFBUDtRQUNBLFNBQUEsRUFBVyxpQ0FEWDtRQUVBLElBQUEsRUFBTSwrQ0FGTjtPQVRGO01BWUEsVUFBQSxFQUNFO1FBQUEsS0FBQSxFQUFPLG9CQUFQO1FBQ0EsU0FBQSxFQUFXLHNDQURYO1FBRUEsSUFBQSxFQUFNLCtDQUZOO09BYkY7TUFnQkEsYUFBQSxFQUNFO1FBQUEsS0FBQSxFQUFPLGVBQVA7UUFDQSxTQUFBLEVBQVcsaUNBRFg7UUFFQSxJQUFBLEVBQU0sa0RBRk47T0FqQkY7TUFvQkEsYUFBQSxFQUNFO1FBQUEsS0FBQSxFQUFPLGtCQUFQO1FBQ0EsU0FBQSxFQUFXLG9DQURYO1FBRUEsSUFBQSxFQUFNLGtEQUZOO09BckJGO0tBTEY7R0FERjtFQStCQSxVQUFBLEVBQVksU0FBQyxJQUFEO1dBQ1YsSUFBQyxDQUFBLEdBQUksQ0FBQSxJQUFBLENBQUwsSUFBYyxJQUFDLENBQUEsR0FBSSxDQUFBLGtCQUFBLENBQW9CLENBQUEsSUFBQSxDQUF2QyxJQUFnRDtNQUFDLEtBQUEsRUFBTyxLQUFSO01BQWUsSUFBQSxFQUFNLElBQXJCOztFQUR0QyxDQS9CWjtFQWtDQSxlQUFBLEVBQWlCLFNBQUMsSUFBRDtXQUNmLENBQUMsSUFBQyxDQUFBLFVBQUQsQ0FBWSxJQUFaLENBQUQsQ0FBa0IsQ0FBQztFQURKLENBbENqQjtFQXFDQSxnQkFBQSxFQUFrQixTQUFDLElBQUQ7QUFDaEIsUUFBQTtXQUFBO01BQ0csTUFBQSxDQUFPO1FBQUMsR0FBQSxFQUFRLElBQUQsR0FBTSxnQkFBZDtRQUErQixLQUFBLEVBQU8sZUFBdEM7T0FBUCxFQUFnRSxJQUFDLENBQUEsZUFBRCxDQUFpQixlQUFqQixDQUFoRSxDQURILEVBRUcsUUFBQSxDQUFTO1FBQUMsR0FBQSxFQUFRLElBQUQsR0FBTSxZQUFkO1FBQTJCLEtBQUEsRUFBTyxrQkFBbEM7T0FBVDs7QUFDQztBQUFBO2FBQUEsWUFBQTs7dUJBQUMsTUFBQSxDQUFPO1lBQUMsR0FBQSxFQUFLLElBQU47WUFBWSxLQUFBLEVBQU8sSUFBbkI7V0FBUCxFQUFpQyxPQUFPLENBQUMsS0FBekM7QUFBRDs7bUJBREQsQ0FGSDs7RUFEZ0IsQ0FyQ2xCIn0=

},{}],626:[function(require,module,exports){
var migration;

migration = {
  version: "1.0.0",
  description: "The initial migrations from old mysystem style file format.",
  date: "2015-08-12",
  doUpdate: function(data) {
    this.updateNodes(data);
    this.updateLinks(data);
    return this.updatePalette(data);
  },
  updateNodes: function(data) {
    return data.nodes = _.map(data.nodes || [], function(node) {
      return {
        key: node.key,
        data: node
      };
    });
  },
  updateLinks: function(data) {
    return data.links = _.map(data.links || [], function(link) {
      return {
        sourceNode: link.sourceNodeKey,
        targetNode: link.targetNodeKey,
        sourceTerminal: link.sourceTerminal,
        targetTerminal: link.targetTerminal,
        title: link.title,
        color: link.color
      };
    });
  },
  updatePalette: function(data) {
    if (!data.palette) {
      data.palette = _.map(data.nodes, function(node) {
        return {
          image: node.data.image,
          key: node.data.image,
          title: node.data.title,
          metadata: {
            title: node.data.title,
            source: "external",
            link: null,
            license: "public domain"
          }
        };
      });
      return data.palette.push({
        title: "",
        image: "img/nodes/blank.png",
        key: "img/nodes/blank.png",
        metadata: {
          source: "internal",
          title: "Blank",
          link: null,
          license: "public domain"
        }
      });
    }
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzAxX2Jhc2UuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzAxX2Jhc2UuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLElBQUE7O0FBQUEsU0FBQSxHQUNFO0VBQUEsT0FBQSxFQUFTLE9BQVQ7RUFDQSxXQUFBLEVBQWEsNkRBRGI7RUFFQSxJQUFBLEVBQU0sWUFGTjtFQUlBLFFBQUEsRUFBVSxTQUFDLElBQUQ7SUFDUixJQUFDLENBQUEsV0FBRCxDQUFhLElBQWI7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFhLElBQWI7V0FDQSxJQUFDLENBQUEsYUFBRCxDQUFlLElBQWY7RUFIUSxDQUpWO0VBU0EsV0FBQSxFQUFhLFNBQUMsSUFBRDtXQUNYLElBQUksQ0FBQyxLQUFMLEdBQWEsQ0FBQyxDQUFDLEdBQUYsQ0FBTyxJQUFJLENBQUMsS0FBTCxJQUFjLEVBQXJCLEVBQTBCLFNBQUMsSUFBRDthQUNyQztRQUFBLEdBQUEsRUFBSyxJQUFJLENBQUMsR0FBVjtRQUNBLElBQUEsRUFBTSxJQUROOztJQURxQyxDQUExQjtFQURGLENBVGI7RUFjQSxXQUFBLEVBQWEsU0FBQyxJQUFEO1dBQ1gsSUFBSSxDQUFDLEtBQUwsR0FBYSxDQUFDLENBQUMsR0FBRixDQUFPLElBQUksQ0FBQyxLQUFMLElBQWMsRUFBckIsRUFBMEIsU0FBQyxJQUFEO2FBQ3JDO1FBQUEsVUFBQSxFQUFZLElBQUksQ0FBQyxhQUFqQjtRQUNBLFVBQUEsRUFBWSxJQUFJLENBQUMsYUFEakI7UUFFQSxjQUFBLEVBQWdCLElBQUksQ0FBQyxjQUZyQjtRQUdBLGNBQUEsRUFBZ0IsSUFBSSxDQUFDLGNBSHJCO1FBSUEsS0FBQSxFQUFPLElBQUksQ0FBQyxLQUpaO1FBS0EsS0FBQSxFQUFPLElBQUksQ0FBQyxLQUxaOztJQURxQyxDQUExQjtFQURGLENBZGI7RUF1QkEsYUFBQSxFQUFlLFNBQUMsSUFBRDtJQUViLElBQUEsQ0FBTyxJQUFJLENBQUMsT0FBWjtNQUNFLElBQUksQ0FBQyxPQUFMLEdBQWUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxJQUFJLENBQUMsS0FBWCxFQUFrQixTQUFDLElBQUQ7ZUFDL0I7VUFBQSxLQUFBLEVBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFqQjtVQUNBLEdBQUEsRUFBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBRGY7VUFFQSxLQUFBLEVBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUZqQjtVQUdBLFFBQUEsRUFDRTtZQUFBLEtBQUEsRUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQWpCO1lBQ0EsTUFBQSxFQUFRLFVBRFI7WUFFQSxJQUFBLEVBQU0sSUFGTjtZQUdBLE9BQUEsRUFBUyxlQUhUO1dBSkY7O01BRCtCLENBQWxCO2FBU2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFiLENBQ0U7UUFBQSxLQUFBLEVBQU8sRUFBUDtRQUNBLEtBQUEsRUFBTyxxQkFEUDtRQUVBLEdBQUEsRUFBSyxxQkFGTDtRQUdBLFFBQUEsRUFDRTtVQUFBLE1BQUEsRUFBUSxVQUFSO1VBQ0EsS0FBQSxFQUFPLE9BRFA7VUFFQSxJQUFBLEVBQU0sSUFGTjtVQUdBLE9BQUEsRUFBUyxlQUhUO1NBSkY7T0FERixFQVZGOztFQUZhLENBdkJmOzs7QUE2Q0YsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],627:[function(require,module,exports){
var Relationship, migration;

Relationship = require('../../models/relationship');

migration = {
  version: "1.1.0",
  description: "Adds initial values and relationships.",
  date: "2015-08-13",
  doUpdate: function(data) {
    this.updateNodes(data);
    return this.updateLinks(data);
  },
  updateNodes: function(data) {
    var i, len, node, ref, results;
    ref = data.nodes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      node.data || (node.data = {});
      node.data.initialValue = 50;
      results.push(node.data.isAccumulator = false);
    }
    return results;
  },
  updateLinks: function(data) {
    var defaultRelation, i, len, link, ref, results;
    defaultRelation = {
      text: Relationship.defaultText,
      formula: Relationship.defaultFormula
    };
    ref = data.links;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      link = ref[i];
      results.push(link.relation = _.clone(defaultRelation));
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzAyX2FkZF9yZWxhdGlvbnMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzAyX2FkZF9yZWxhdGlvbnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsWUFBQSxHQUFlLE9BQUEsQ0FBUSwyQkFBUjs7QUFFZixTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsT0FBVDtFQUNBLFdBQUEsRUFBYSx3Q0FEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtJQUNSLElBQUMsQ0FBQSxXQUFELENBQWEsSUFBYjtXQUNBLElBQUMsQ0FBQSxXQUFELENBQWEsSUFBYjtFQUZRLENBSlY7RUFTQSxXQUFBLEVBQWEsU0FBQyxJQUFEO0FBQ1gsUUFBQTtBQUFBO0FBQUE7U0FBQSxxQ0FBQTs7TUFDRSxJQUFJLENBQUMsU0FBTCxJQUFJLENBQUMsT0FBUztNQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBVixHQUF5QjttQkFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFWLEdBQTBCO0FBSDVCOztFQURXLENBVGI7RUFnQkEsV0FBQSxFQUFhLFNBQUMsSUFBRDtBQUNYLFFBQUE7SUFBQSxlQUFBLEdBQ0U7TUFBQSxJQUFBLEVBQWMsWUFBWSxDQUFDLFdBQTNCO01BQ0EsT0FBQSxFQUFjLFlBQVksQ0FBQyxjQUQzQjs7QUFHRjtBQUFBO1NBQUEscUNBQUE7O21CQUNFLElBQUksQ0FBQyxRQUFMLEdBQWdCLENBQUMsQ0FBQyxLQUFGLENBQVEsZUFBUjtBQURsQjs7RUFMVyxDQWhCYjs7O0FBd0JGLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxLQUFGLENBQVEsU0FBUixFQUFtQixPQUFBLENBQVEsbUJBQVIsQ0FBbkIifQ==

},{"../../models/relationship":658,"./migration-mixin":647}],628:[function(require,module,exports){
var migration;

migration = {
  version: "1.2.0",
  description: "Adds initial value for defining node semiquantitatively.",
  date: "2015-09-02",
  doUpdate: function(data) {
    return this.updateNodes(data);
  },
  updateNodes: function(data) {
    var i, len, node, ref, results;
    ref = data.nodes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      node.data || (node.data = {});
      results.push(node.data.valueDefinedSemiQuantitatively = true);
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzAzX2FkZF9zZW1pX3F1YW50X2VkaXRpbmcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzAzX2FkZF9zZW1pX3F1YW50X2VkaXRpbmcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsU0FBQSxHQUNFO0VBQUEsT0FBQSxFQUFTLE9BQVQ7RUFDQSxXQUFBLEVBQWEsMERBRGI7RUFFQSxJQUFBLEVBQU0sWUFGTjtFQUlBLFFBQUEsRUFBVSxTQUFDLElBQUQ7V0FDUixJQUFDLENBQUEsV0FBRCxDQUFhLElBQWI7RUFEUSxDQUpWO0VBUUEsV0FBQSxFQUFhLFNBQUMsSUFBRDtBQUNYLFFBQUE7QUFBQTtBQUFBO1NBQUEscUNBQUE7O01BQ0UsSUFBSSxDQUFDLFNBQUwsSUFBSSxDQUFDLE9BQVM7bUJBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyw4QkFBVixHQUEyQztBQUY3Qzs7RUFEVyxDQVJiOzs7QUFhRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"./migration-mixin":647}],629:[function(require,module,exports){
var migration;

migration = {
  version: "1.3.0",
  description: "Adds min and max values for nodes.",
  date: "2015-09-03",
  doUpdate: function(data) {
    return this.updateNodes(data);
  },
  updateNodes: function(data) {
    var i, len, node, ref, results;
    ref = data.nodes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      node.data || (node.data = {});
      node.data.min = 0;
      results.push(node.data.max = 100);
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzA0X2FkZF9taW5fbWF4LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8wNF9hZGRfbWluX21heC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsT0FBVDtFQUNBLFdBQUEsRUFBYSxvQ0FEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtXQUNSLElBQUMsQ0FBQSxXQUFELENBQWEsSUFBYjtFQURRLENBSlY7RUFRQSxXQUFBLEVBQWEsU0FBQyxJQUFEO0FBQ1gsUUFBQTtBQUFBO0FBQUE7U0FBQSxxQ0FBQTs7TUFDRSxJQUFJLENBQUMsU0FBTCxJQUFJLENBQUMsT0FBUztNQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBVixHQUFnQjttQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFWLEdBQWdCO0FBSGxCOztFQURXLENBUmI7OztBQWNGLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxLQUFGLENBQVEsU0FBUixFQUFtQixPQUFBLENBQVEsbUJBQVIsQ0FBbkIifQ==

},{"./migration-mixin":647}],630:[function(require,module,exports){
var migration;

migration = {
  version: "1.4.0",
  description: "Adds settings object and cap default.",
  date: "2015-09-17",
  doUpdate: function(data) {
    var base;
    if (data.settings == null) {
      data.settings = {};
    }
    return (base = data.settings).capNodeValues != null ? base.capNodeValues : base.capNodeValues = false;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzA1X2FkZF9zZXR0aW5nc19hbmRfY2FwLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8wNV9hZGRfc2V0dGluZ3NfYW5kX2NhcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsT0FBVDtFQUNBLFdBQUEsRUFBYSx1Q0FEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtBQUNSLFFBQUE7O01BQUEsSUFBSSxDQUFDLFdBQVk7OzhEQUNKLENBQUMsb0JBQUQsQ0FBQyxnQkFBaUI7RUFGdkIsQ0FKVjs7O0FBUUYsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],631:[function(require,module,exports){
var imageToUUIDMap, migration, uuid;

uuid = require('uuid');

imageToUUIDMap = {};

migration = {
  version: "1.5.0",
  description: "Nodes reference PaletteItems",
  date: "2015-09-16",
  doUpdate: function(data) {
    this.updatePalette(data);
    return this.updateNodes(data);
  },
  updatePalette: function(data) {
    return _.each(data.palette, function(paletteItem) {
      paletteItem.uuid || (paletteItem.uuid = uuid.v4());
      return imageToUUIDMap[paletteItem.image] = paletteItem.uuid;
    });
  },
  updateNodes: function(data) {
    var i, len, node, ref, results;
    ref = data.nodes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      if (node.data.image) {
        results.push(node.data.paletteItem = imageToUUIDMap[node.data.image]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzA2X2FkZF9wYWxldHRlX3JlZmVyZW5jZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzA2X2FkZF9wYWxldHRlX3JlZmVyZW5jZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSOztBQUVQLGNBQUEsR0FBZ0I7O0FBRWhCLFNBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxPQUFUO0VBQ0EsV0FBQSxFQUFhLDhCQURiO0VBRUEsSUFBQSxFQUFNLFlBRk47RUFJQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0lBQ1IsSUFBQyxDQUFBLGFBQUQsQ0FBZSxJQUFmO1dBQ0EsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFiO0VBRlEsQ0FKVjtFQVFBLGFBQUEsRUFBZSxTQUFDLElBQUQ7V0FDYixDQUFDLENBQUMsSUFBRixDQUFPLElBQUksQ0FBQyxPQUFaLEVBQXFCLFNBQUMsV0FBRDtNQUNuQixXQUFXLENBQUMsU0FBWixXQUFXLENBQUMsT0FBUyxJQUFJLENBQUMsRUFBTCxDQUFBO2FBQ3JCLGNBQWUsQ0FBQSxXQUFXLENBQUMsS0FBWixDQUFmLEdBQW9DLFdBQVcsQ0FBQztJQUY3QixDQUFyQjtFQURhLENBUmY7RUFjQSxXQUFBLEVBQWEsU0FBQyxJQUFEO0FBQ1gsUUFBQTtBQUFBO0FBQUE7U0FBQSxxQ0FBQTs7TUFDRSxJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBYjtxQkFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVYsR0FBd0IsY0FBZSxDQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBVixHQUR6QztPQUFBLE1BQUE7NkJBQUE7O0FBREY7O0VBRFcsQ0FkYjs7O0FBbUJGLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxLQUFGLENBQVEsU0FBUixFQUFtQixPQUFBLENBQVEsbUJBQVIsQ0FBbkIifQ==

},{"./migration-mixin":647,"uuid":619}],632:[function(require,module,exports){
var migration;

migration = {
  version: "1.6.0",
  description: "Adds diagramOnly setting. Default == false",
  date: "2015-09-22",
  doUpdate: function(data) {
    var base;
    if (data.settings == null) {
      data.settings = {};
    }
    return (base = data.settings).diagramOnly != null ? base.diagramOnly : base.diagramOnly = false;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzA3X2FkZF9kaWFncmFtX29ubHlfc2V0dGluZy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9kYXRhL21pZ3JhdGlvbnMvMDdfYWRkX2RpYWdyYW1fb25seV9zZXR0aW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFNBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxPQUFUO0VBQ0EsV0FBQSxFQUFhLDRDQURiO0VBRUEsSUFBQSxFQUFNLFlBRk47RUFJQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0FBQ1IsUUFBQTs7TUFBQSxJQUFJLENBQUMsV0FBWTs7NERBQ0osQ0FBQyxrQkFBRCxDQUFDLGNBQWU7RUFGckIsQ0FKVjs7O0FBUUYsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],633:[function(require,module,exports){
var TimeUnits, migration;

TimeUnits = require('../../utils/time-units');

migration = {
  version: "1.7.0",
  description: "Adds Simulation settings",
  date: "2015-10-02",
  doUpdate: function(data) {
    var base, base1, base2;
    if (data.settings == null) {
      data.settings = {};
    }
    if ((base = data.settings).simulation == null) {
      base.simulation = {};
    }
    if ((base1 = data.settings.simulation).period == null) {
      base1.period = 10;
    }
    if ((base2 = data.settings.simulation).stepSize == null) {
      base2.stepSize = 1;
    }
    data.settings.simulation.periodUnits = TimeUnits.defaultUnit;
    return data.settings.simulation.stepUnits = TimeUnits.defaultUnit;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzA4X2FkZF9zaW11bGF0aW9uX3NldHRpbmdzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8wOF9hZGRfc2ltdWxhdGlvbl9zZXR0aW5ncy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQVksT0FBQSxDQUFRLHdCQUFSOztBQUVaLFNBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxPQUFUO0VBQ0EsV0FBQSxFQUFhLDBCQURiO0VBRUEsSUFBQSxFQUFNLFlBRk47RUFJQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0FBQ1IsUUFBQTs7TUFBQSxJQUFJLENBQUMsV0FBWTs7O1VBQ0osQ0FBQyxhQUFjOzs7V0FDSixDQUFDLFNBQVU7OztXQUNYLENBQUMsV0FBWTs7SUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsV0FBekIsR0FBdUMsU0FBUyxDQUFDO1dBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFNBQXpCLEdBQXFDLFNBQVMsQ0FBQztFQU52QyxDQUpWOzs7QUFZRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"../../utils/time-units":688,"./migration-mixin":647}],634:[function(require,module,exports){
var migration;

migration = {
  version: "1.8.0",
  description: "Updates duration settings",
  date: "2015-10-14",
  doUpdate: function(data) {
    var base, simulation;
    if (data.settings == null) {
      data.settings = {};
    }
    if ((base = data.settings).simulation == null) {
      base.simulation = {};
    }
    simulation = data.settings.simulation;
    if (simulation.duration == null) {
      if ((simulation.period != null) && (simulation.stepSize != null)) {
        simulation.duration = Math.floor(simulation.period / simulation.stepSize);
      } else {
        simulation.duration = 10;
      }
    }
    delete data.settings.simulation.period;
    delete data.settings.simulation.stepSize;
    return delete data.settings.simulation.periodUnits;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzA5X3VwZGF0ZV9kdXJhdGlvbl9zZXR0aW5ncy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9kYXRhL21pZ3JhdGlvbnMvMDlfdXBkYXRlX2R1cmF0aW9uX3NldHRpbmdzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFNBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxPQUFUO0VBQ0EsV0FBQSxFQUFhLDJCQURiO0VBRUEsSUFBQSxFQUFNLFlBRk47RUFJQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0FBQ1IsUUFBQTs7TUFBQSxJQUFJLENBQUMsV0FBWTs7O1VBQ0osQ0FBQyxhQUFjOztJQUU1QixVQUFBLEdBQWEsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUUzQixJQUFPLDJCQUFQO01BQ0UsSUFBRywyQkFBQSxJQUF1Qiw2QkFBMUI7UUFDRSxVQUFVLENBQUMsUUFBWCxHQUFzQixJQUFJLENBQUMsS0FBTCxDQUFXLFVBQVUsQ0FBQyxNQUFYLEdBQW9CLFVBQVUsQ0FBQyxRQUExQyxFQUR4QjtPQUFBLE1BQUE7UUFHRSxVQUFVLENBQUMsUUFBWCxHQUFzQixHQUh4QjtPQURGOztJQU1BLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDaEMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztXQUNoQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO0VBZHhCLENBSlY7OztBQW9CRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"./migration-mixin":647}],635:[function(require,module,exports){
var migration;

migration = {
  version: "1.9.0",
  description: "Adds simulation speed and capNodeValues settings",
  date: "2015-10-14",
  doUpdate: function(data) {
    var base, base1;
    if (data.settings == null) {
      data.settings = {};
    }
    if ((base = data.settings).simulation == null) {
      base.simulation = {};
    }
    if ((base1 = data.settings.simulation).speed == null) {
      base1.speed = 4;
    }
    if (data.settings.simulation.capNodeValues == null) {
      if (data.settings.capNodeValues) {
        data.settings.simulation.capNodeValues = data.settings.capNodeValues;
      } else {
        data.settings.simulation.capNodeValues = false;
      }
    }
    return delete data.settings.capNodeValues;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzEwX2FkZF9zcGVlZF9hbmRfY2FwLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8xMF9hZGRfc3BlZWRfYW5kX2NhcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsT0FBVDtFQUNBLFdBQUEsRUFBYSxrREFEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtBQUNSLFFBQUE7O01BQUEsSUFBSSxDQUFDLFdBQVk7OztVQUNKLENBQUMsYUFBYzs7O1dBRUosQ0FBQyxRQUFTOztJQUVsQyxJQUFPLDhDQUFQO01BQ0UsSUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWpCO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsYUFBekIsR0FBeUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUR6RDtPQUFBLE1BQUE7UUFHRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUF6QixHQUF5QyxNQUgzQztPQURGOztXQU1BLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztFQVpiLENBSlY7OztBQW9CRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"./migration-mixin":647}],636:[function(require,module,exports){
var migration;

migration = {
  version: "1.10.0",
  description: "Adds simulation engine settings",
  date: "2016-01-16",
  doUpdate: function(data) {
    var base, base1;
    if (data.settings == null) {
      data.settings = {};
    }
    if ((base = data.settings).simulation == null) {
      base.simulation = {};
    }
    return (base1 = data.settings.simulation).newIntegration != null ? base1.newIntegration : base1.newIntegration = false;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzExX3NpbXVsYXRpb25fZW5naW5lX3NldHRpbmdzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8xMV9zaW11bGF0aW9uX2VuZ2luZV9zZXR0aW5ncy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsUUFBVDtFQUNBLFdBQUEsRUFBYSxpQ0FEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtBQUNSLFFBQUE7O01BQUEsSUFBSSxDQUFDLFdBQVk7OztVQUNKLENBQUMsYUFBYzs7NEVBRUosQ0FBQyxzQkFBRCxDQUFDLGlCQUFrQjtFQUpuQyxDQUpWOzs7QUFXRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"./migration-mixin":647}],637:[function(require,module,exports){
var migration;

migration = {
  version: "1.11.0",
  description: "Adds minigraphs settings",
  date: "2016-03-15",
  doUpdate: function(data) {
    var base;
    if (data.settings == null) {
      data.settings = {};
    }
    return (base = data.settings).showMinigraphs != null ? base.showMinigraphs : base.showMinigraphs = false;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzEyX2FkZF9taW5pZ3JhcGhzX3Zpc2liaWxpdHkuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzEyX2FkZF9taW5pZ3JhcGhzX3Zpc2liaWxpdHkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsU0FBQSxHQUNFO0VBQUEsT0FBQSxFQUFTLFFBQVQ7RUFDQSxXQUFBLEVBQWEsMEJBRGI7RUFFQSxJQUFBLEVBQU0sWUFGTjtFQUlBLFFBQUEsRUFBVSxTQUFDLElBQUQ7QUFDUixRQUFBOztNQUFBLElBQUksQ0FBQyxXQUFZOzsrREFDSixDQUFDLHFCQUFELENBQUMsaUJBQWtCO0VBRnhCLENBSlY7OztBQVNGLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxLQUFGLENBQVEsU0FBUixFQUFtQixPQUFBLENBQVEsbUJBQVIsQ0FBbkIifQ==

},{"./migration-mixin":647}],638:[function(require,module,exports){
var migration;

migration = {
  version: "1.12.0",
  description: "Adds minigraphs data",
  date: "2016-03-16",
  doUpdate: function(data) {
    return this.updateNodes(data);
  },
  updateNodes: function(data) {
    var base, i, len, node, ref, results;
    ref = data.nodes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      results.push((base = node.data).frames != null ? base.frames : base.frames = []);
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzEzX2FkZF9mcmFtZXNfdG9fbm9kZXMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzEzX2FkZF9mcmFtZXNfdG9fbm9kZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsU0FBQSxHQUNFO0VBQUEsT0FBQSxFQUFTLFFBQVQ7RUFDQSxXQUFBLEVBQWEsc0JBRGI7RUFFQSxJQUFBLEVBQU0sWUFGTjtFQUlBLFFBQUEsRUFBVSxTQUFDLElBQUQ7V0FDUixJQUFDLENBQUEsV0FBRCxDQUFhLElBQWI7RUFEUSxDQUpWO0VBT0EsV0FBQSxFQUFhLFNBQUMsSUFBRDtBQUNYLFFBQUE7QUFBQTtBQUFBO1NBQUEscUNBQUE7OzJEQUNXLENBQUMsYUFBRCxDQUFDLFNBQVU7QUFEdEI7O0VBRFcsQ0FQYjs7O0FBV0YsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],639:[function(require,module,exports){
var migration;

migration = {
  version: "1.13.0",
  description: "Removes new integration setting",
  date: "2016-01-17",
  doUpdate: function(data) {
    var ref, ref1;
    return (ref = data.settings) != null ? (ref1 = ref.simulation) != null ? delete ref1.newIntegration : void 0 : void 0;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzE0X3JlbW92ZV9uZXdfaW50ZWdyYXRpb24uY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzE0X3JlbW92ZV9uZXdfaW50ZWdyYXRpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsU0FBQSxHQUNFO0VBQUEsT0FBQSxFQUFTLFFBQVQ7RUFDQSxXQUFBLEVBQWEsaUNBRGI7RUFFQSxJQUFBLEVBQU0sWUFGTjtFQUlBLFFBQUEsRUFBVSxTQUFDLElBQUQ7QUFDUixRQUFBOzZFQUFBLFdBQWdDLENBQUU7RUFEMUIsQ0FKVjs7O0FBUUYsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],640:[function(require,module,exports){
var migration;

migration = {
  version: "1.14.0",
  description: "Clamp less-and-less relationship to go down to zero. Fixes case where input values below 0 would produce imaginary number results",
  date: "2016-05-24",
  doUpdate: function(data) {
    var i, len, link, ref, results;
    ref = data.links;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      link = ref[i];
      if (link.relation.formula === "maxIn - 21.7 * log(in+1)") {
        link.relation.formula = "maxIn - 21.7 * log(max(1,in))";
      }
      if (link.relation.formula === "1 * 21.7 * log(in+1)") {
        results.push(link.relation.formula = "1 * 21.7 * log(max(1,in))");
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzE1X3VwZGF0ZV9sZXNzX3JlbGF0aW9uc2hpcF9mb3JtdWxhLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8xNV91cGRhdGVfbGVzc19yZWxhdGlvbnNoaXBfZm9ybXVsYS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsUUFBVDtFQUNBLFdBQUEsRUFBYSxtSUFEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtBQUVSLFFBQUE7QUFBQTtBQUFBO1NBQUEscUNBQUE7O01BQ0UsSUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQWQsS0FBeUIsMEJBQTVCO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFkLEdBQXdCLGdDQUQxQjs7TUFFQSxJQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBZCxLQUF5QixzQkFBNUI7cUJBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFkLEdBQXdCLDZCQUQxQjtPQUFBLE1BQUE7NkJBQUE7O0FBSEY7O0VBRlEsQ0FKVjs7O0FBWUYsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],641:[function(require,module,exports){
var migration;

migration = {
  version: "1.15.0",
  description: "Adds link reasoning",
  date: "2016-05-24",
  doUpdate: function(data) {
    var i, len, link, ref, results;
    ref = data.links;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      link = ref[i];
      results.push(link.reasoning != null ? link.reasoning : link.reasoning = "");
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzE2X2FkZF9saW5rX3JlYXNvbmluZy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9kYXRhL21pZ3JhdGlvbnMvMTZfYWRkX2xpbmtfcmVhc29uaW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFNBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxRQUFUO0VBQ0EsV0FBQSxFQUFhLHFCQURiO0VBRUEsSUFBQSxFQUFNLFlBRk47RUFJQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0FBRVIsUUFBQTtBQUFBO0FBQUE7U0FBQSxxQ0FBQTs7NENBQ0UsSUFBSSxDQUFDLFlBQUwsSUFBSSxDQUFDLFlBQWE7QUFEcEI7O0VBRlEsQ0FKVjs7O0FBU0YsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],642:[function(require,module,exports){
var migration;

migration = {
  version: "1.16.0",
  description: "Removes simulation setting for speed",
  date: "2016-11-17",
  doUpdate: function(data) {
    var ref, ref1;
    return (ref = data.settings) != null ? (ref1 = ref.simulation) != null ? delete ref1.speed : void 0 : void 0;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzE3X3JlbW92ZV9zaW11bGF0aW9uX3NwZWVkLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8xN19yZW1vdmVfc2ltdWxhdGlvbl9zcGVlZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsUUFBVDtFQUNBLFdBQUEsRUFBYSxzQ0FEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtBQUNSLFFBQUE7NkVBQUEsV0FBZ0MsQ0FBRTtFQUQxQixDQUpWOzs7QUFPRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"./migration-mixin":647}],643:[function(require,module,exports){
var migration;

migration = {
  version: "1.17.0",
  description: "Adds experiment number to serialization",
  date: "2017-01-09",
  doUpdate: function(data) {
    var ref, ref1;
    if ((ref = data.settings.simulation) != null) {
      ref.experimentNumber || (ref.experimentNumber = 0);
    }
    return (ref1 = data.settings.simulation) != null ? ref1.experimentFrame || (ref1.experimentFrame = 0) : void 0;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzE4X3NlcmlhbGl6ZV9leHBlcmltZW50X251bWJlci5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9kYXRhL21pZ3JhdGlvbnMvMThfc2VyaWFsaXplX2V4cGVyaW1lbnRfbnVtYmVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFNBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxRQUFUO0VBQ0EsV0FBQSxFQUFhLHlDQURiO0VBRUEsSUFBQSxFQUFNLFlBRk47RUFJQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0FBQ1IsUUFBQTs7U0FBd0IsQ0FBRSx3QkFBRixDQUFFLG1CQUFxQjs7MkRBQ3ZCLENBQUUsd0JBQUYsQ0FBRSxrQkFBb0I7RUFGdEMsQ0FKVjs7O0FBUUYsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],644:[function(require,module,exports){
var migration;

migration = {
  version: "1.18.0",
  description: "Adds link relationship type",
  date: "2016-05-24",
  doUpdate: function(data) {
    var base, i, len, link, ref, results;
    ref = data.links;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      link = ref[i];
      results.push((base = link.relation).type != null ? base.type : base.type = "range");
    }
    return results;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzE5X2FkZF9yZWxhdGlvbl90eXBlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8xOV9hZGRfcmVsYXRpb25fdHlwZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQ0U7RUFBQSxPQUFBLEVBQVMsUUFBVDtFQUNBLFdBQUEsRUFBYSw2QkFEYjtFQUVBLElBQUEsRUFBTSxZQUZOO0VBSUEsUUFBQSxFQUFVLFNBQUMsSUFBRDtBQUVSLFFBQUE7QUFBQTtBQUFBO1NBQUEscUNBQUE7OzZEQUNlLENBQUMsV0FBRCxDQUFDLE9BQVE7QUFEeEI7O0VBRlEsQ0FKVjs7O0FBU0YsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxTQUFSLEVBQW1CLE9BQUEsQ0FBUSxtQkFBUixDQUFuQiJ9

},{"./migration-mixin":647}],645:[function(require,module,exports){
var AppSettingsStore, migration;

AppSettingsStore = require('../../stores/app-settings-store').store;

migration = {
  version: "1.19.0",
  description: "Adds complexity setting, based on old diagramOnly. Removes diagramOnly",
  date: "2017-09-26",
  doUpdate: function(data) {
    var base, defaultComplexity, wasDiagramOnly;
    if (data.settings == null) {
      data.settings = {};
    }
    wasDiagramOnly = data.settings.diagramOnly || false;
    delete data.settings.diagramOnly;
    defaultComplexity = wasDiagramOnly ? AppSettingsStore.Complexity.diagramOnly : AppSettingsStore.Complexity.DEFAULT;
    return (base = data.settings).complexity != null ? base.complexity : base.complexity = defaultComplexity;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzIwX2FkZF9jb21wbGV4aXR5LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL2RhdGEvbWlncmF0aW9ucy8yMF9hZGRfY29tcGxleGl0eS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxnQkFBQSxHQUFtQixPQUFBLENBQVEsaUNBQVIsQ0FBMEMsQ0FBQzs7QUFFOUQsU0FBQSxHQUNFO0VBQUEsT0FBQSxFQUFTLFFBQVQ7RUFDQSxXQUFBLEVBQWEsd0VBRGI7RUFFQSxJQUFBLEVBQU0sWUFGTjtFQUlBLFFBQUEsRUFBVSxTQUFDLElBQUQ7QUFDUixRQUFBOztNQUFBLElBQUksQ0FBQyxXQUFZOztJQUNqQixjQUFBLEdBQWlCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBZCxJQUE2QjtJQUU5QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFFckIsaUJBQUEsR0FBdUIsY0FBSCxHQUNsQixnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsV0FEVixHQUdsQixnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7MkRBRWpCLENBQUMsaUJBQUQsQ0FBQyxhQUFjO0VBWHBCLENBSlY7OztBQWlCRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"../../stores/app-settings-store":662,"./migration-mixin":647}],646:[function(require,module,exports){
var migration;

migration = {
  version: "1.20.0",
  description: "Removes experiment and frame numbers",
  date: "2017-10-03",
  doUpdate: function(data) {
    var ref, ref1;
    if ((ref = data.settings.simulation) != null) {
      delete ref.experimentNumber;
    }
    return (ref1 = data.settings.simulation) != null ? delete ref1.experimentFrame : void 0;
  }
};

module.exports = _.mixin(migration, require('./migration-mixin'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zLzIxX3JlbW92ZV9leHBlcmltZW50X251bWJlci5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9kYXRhL21pZ3JhdGlvbnMvMjFfcmVtb3ZlX2V4cGVyaW1lbnRfbnVtYmVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFNBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxRQUFUO0VBQ0EsV0FBQSxFQUFhLHNDQURiO0VBRUEsSUFBQSxFQUFNLFlBRk47RUFJQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0FBQ1IsUUFBQTs7TUFBQSxVQUErQixDQUFFOzt1REFDakMsV0FBK0IsQ0FBRTtFQUZ6QixDQUpWOzs7QUFRRixNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLENBQUMsS0FBRixDQUFRLFNBQVIsRUFBbUIsT0FBQSxDQUFRLG1CQUFSLENBQW5CIn0=

},{"./migration-mixin":647}],647:[function(require,module,exports){
var semver;

semver = require("semver");

module.exports = {
  needsUpdate: function(data) {
    var version;
    version = data.version || "0.0.0";
    if (typeof version === "number") {
      version = this._semverize(version);
    }
    return semver.gt(this.version, version);
  },
  name: function() {
    return this.version + " – " + this.date + " : " + this.description;
  },
  update: function(data) {
    if (this.needsUpdate(data)) {
      this.doUpdate(data);
      log.info("✔ upgradded " + (this.name()));
      data.version = this.version;
    } else {
      log.info("  skipped : " + (this.name()));
    }
    return data;
  },
  _semverize: function(v) {
    if (v === 1.95) {
      return "1.9.5";
    } else {
      return v + ".0";
    }
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zL21pZ3JhdGlvbi1taXhpbi5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9kYXRhL21pZ3JhdGlvbnMvbWlncmF0aW9uLW1peGluLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxJQUFBOztBQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjs7QUFFVCxNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsV0FBQSxFQUFhLFNBQUMsSUFBRDtBQUNYLFFBQUE7SUFBQSxPQUFBLEdBQVUsSUFBSSxDQUFDLE9BQUwsSUFBZ0I7SUFFMUIsSUFBRyxPQUFPLE9BQVAsS0FBa0IsUUFBckI7TUFBbUMsT0FBQSxHQUFVLElBQUMsQ0FBQSxVQUFELENBQVksT0FBWixFQUE3Qzs7V0FFQSxNQUFNLENBQUMsRUFBUCxDQUFVLElBQUMsQ0FBQSxPQUFYLEVBQW9CLE9BQXBCO0VBTFcsQ0FBYjtFQU9BLElBQUEsRUFBTSxTQUFBO1dBQ0QsSUFBQyxDQUFBLE9BQUYsR0FBVSxLQUFWLEdBQWUsSUFBQyxDQUFBLElBQWhCLEdBQXFCLEtBQXJCLEdBQTBCLElBQUMsQ0FBQTtFQUR6QixDQVBOO0VBVUEsTUFBQSxFQUFRLFNBQUMsSUFBRDtJQUNOLElBQUcsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFiLENBQUg7TUFDRSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVY7TUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLGNBQUEsR0FBYyxDQUFDLElBQUMsQ0FBQSxJQUFELENBQUEsQ0FBRCxDQUF2QjtNQUNBLElBQUksQ0FBQyxPQUFMLEdBQWUsSUFBQyxDQUFBLFFBSGxCO0tBQUEsTUFBQTtNQUtFLEdBQUcsQ0FBQyxJQUFKLENBQVMsY0FBQSxHQUFjLENBQUMsSUFBQyxDQUFBLElBQUQsQ0FBQSxDQUFELENBQXZCLEVBTEY7O1dBTUE7RUFQTSxDQVZSO0VBcUJBLFVBQUEsRUFBWSxTQUFDLENBQUQ7SUFDVixJQUFJLENBQUEsS0FBSyxJQUFUO0FBQ0UsYUFBTyxRQURUO0tBQUEsTUFBQTtBQUdFLGFBQU8sQ0FBQSxHQUFJLEtBSGI7O0VBRFUsQ0FyQloifQ==

},{"semver":615}],648:[function(require,module,exports){
var migrations;

migrations = [require("./01_base"), require("./02_add_relations"), require("./03_add_semi_quant_editing"), require("./04_add_min_max"), require("./05_add_settings_and_cap"), require("./06_add_palette_references"), require("./07_add_diagram_only_setting"), require("./08_add_simulation_settings"), require("./09_update_duration_settings"), require("./10_add_speed_and_cap"), require("./11_simulation_engine_settings"), require("./12_add_minigraphs_visibility"), require("./13_add_frames_to_nodes"), require("./14_remove_new_integration"), require("./15_update_less_relationship_formula"), require("./16_add_link_reasoning"), require("./17_remove_simulation_speed"), require("./18_serialize_experiment_number"), require("./19_add_relation_type"), require("./20_add_complexity"), require("./21_remove_experiment_number")];

module.exports = {
  migrations: migrations,
  update: function(data) {
    var i, len, m;
    for (i = 0, len = migrations.length; i < len; i++) {
      m = migrations[i];
      if (m.update) {
        data = m.update(data);
      }
    }
    return data;
  },
  latestVersion: function() {
    return this.lastMigration().version;
  },
  lastMigration: function() {
    return migrations[migrations.length - 1];
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zL21pZ3JhdGlvbnMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvZGF0YS9taWdyYXRpb25zL21pZ3JhdGlvbnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLElBQUE7O0FBQUEsVUFBQSxHQUFhLENBQ1gsT0FBQSxDQUFRLFdBQVIsQ0FEVyxFQUVYLE9BQUEsQ0FBUSxvQkFBUixDQUZXLEVBR1gsT0FBQSxDQUFRLDZCQUFSLENBSFcsRUFJWCxPQUFBLENBQVEsa0JBQVIsQ0FKVyxFQUtYLE9BQUEsQ0FBUSwyQkFBUixDQUxXLEVBTVgsT0FBQSxDQUFRLDZCQUFSLENBTlcsRUFPWCxPQUFBLENBQVEsK0JBQVIsQ0FQVyxFQVFYLE9BQUEsQ0FBUSw4QkFBUixDQVJXLEVBU1gsT0FBQSxDQUFRLCtCQUFSLENBVFcsRUFVWCxPQUFBLENBQVEsd0JBQVIsQ0FWVyxFQVdYLE9BQUEsQ0FBUSxpQ0FBUixDQVhXLEVBWVgsT0FBQSxDQUFRLGdDQUFSLENBWlcsRUFhWCxPQUFBLENBQVEsMEJBQVIsQ0FiVyxFQWNYLE9BQUEsQ0FBUSw2QkFBUixDQWRXLEVBZVgsT0FBQSxDQUFRLHVDQUFSLENBZlcsRUFnQlgsT0FBQSxDQUFRLHlCQUFSLENBaEJXLEVBaUJYLE9BQUEsQ0FBUSw4QkFBUixDQWpCVyxFQWtCWCxPQUFBLENBQVEsa0NBQVIsQ0FsQlcsRUFtQlgsT0FBQSxDQUFRLHdCQUFSLENBbkJXLEVBb0JYLE9BQUEsQ0FBUSxxQkFBUixDQXBCVyxFQXFCWCxPQUFBLENBQVEsK0JBQVIsQ0FyQlc7O0FBd0JiLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxVQUFBLEVBQVksVUFBWjtFQUNBLE1BQUEsRUFBUSxTQUFDLElBQUQ7QUFDTixRQUFBO0FBQUEsU0FBQSw0Q0FBQTs7TUFDRSxJQUFHLENBQUMsQ0FBQyxNQUFMO1FBQ0UsSUFBQSxHQUFPLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBVCxFQURUOztBQURGO1dBR0E7RUFKTSxDQURSO0VBT0EsYUFBQSxFQUFlLFNBQUE7V0FDYixJQUFDLENBQUEsYUFBRCxDQUFBLENBQWdCLENBQUM7RUFESixDQVBmO0VBVUEsYUFBQSxFQUFlLFNBQUE7V0FDYixVQUFXLENBQUEsVUFBVSxDQUFDLE1BQVgsR0FBa0IsQ0FBbEI7RUFERSxDQVZmIn0=

},{"./01_base":626,"./02_add_relations":627,"./03_add_semi_quant_editing":628,"./04_add_min_max":629,"./05_add_settings_and_cap":630,"./06_add_palette_references":631,"./07_add_diagram_only_setting":632,"./08_add_simulation_settings":633,"./09_update_duration_settings":634,"./10_add_speed_and_cap":635,"./11_simulation_engine_settings":636,"./12_add_minigraphs_visibility":637,"./13_add_frames_to_nodes":638,"./14_remove_new_integration":639,"./15_update_less_relationship_formula":640,"./16_add_link_reasoning":641,"./17_remove_simulation_speed":642,"./18_serialize_experiment_number":643,"./19_add_relation_type":644,"./20_add_complexity":645,"./21_remove_experiment_number":646}],649:[function(require,module,exports){
var CodapStore, GoogleFileStore, HashParams, PaletteStore, tr;

PaletteStore = require("../stores/palette-store");

CodapStore = require("../stores/codap-store");

GoogleFileStore = require("../stores/google-file-store");

HashParams = require("../utils/hash-parameters");

tr = require('../utils/translate');

module.exports = {
  getInitialAppViewState: function(subState) {
    var mixinState;
    mixinState = {
      selectedNode: null,
      selectedConnection: null,
      palette: [],
      filename: null,
      undoRedoShowing: true,
      showBuildInfo: false
    };
    return _.extend(mixinState, subState);
  },
  componentDidUpdate: function() {
    return log.info('Did Update: AppView');
  },
  addDeleteKeyHandler: function(add) {
    var deleteFunction;
    if (add) {
      deleteFunction = this.props.graphStore.deleteSelected.bind(this.props.graphStore);
      return $(window).on('keydown', function(e) {
        var ref;
        if (((ref = e.which) === 8 || ref === 46) && !$(e.target).is('input, textarea')) {
          e.preventDefault();
          return deleteFunction();
        }
      });
    } else {
      return $(window).off('keydown');
    }
  },
  componentDidMount: function() {
    this.addDeleteKeyHandler(true);
    this.props.graphStore.selectionManager.addSelectionListener(this._updateSelection);
    this.props.graphStore.addFilenameListener((function(_this) {
      return function(filename) {
        return _this.setState({
          filename: filename
        });
      };
    })(this));
    this._loadInitialData();
    this._registerUndoRedoKeys();
    PaletteStore.store.listen(this.onPaletteChange);
    return CodapStore.store.listen(this.onCodapStateChange);
  },
  componentWillUnmount: function() {
    return this.addDeleteKeyHandler(false);
  },
  onPaletteChange: function(status) {
    return this.setState({
      palette: status.palette,
      internalLibrary: status.internalLibrary
    });
  },
  onCodapStateChange: function(status) {
    return this.setState({
      undoRedoShowing: !status.hideUndoRedo
    });
  },
  onNodeChanged: function(node, data) {
    return this.props.graphStore.changeNode(data);
  },
  onNodeDelete: function() {
    return this.props.graphStore.deleteSelected();
  },
  _updateSelection: function(manager) {
    var editingNode, selectedLink, selectedNode;
    selectedNode = manager.getNodeInspection()[0] || null;
    editingNode = manager.getNodeTitleEditing()[0] || null;
    selectedLink = manager.getLinkInspection()[0] || null;
    this.setState({
      selectedNode: selectedNode,
      editingNode: editingNode,
      selectedLink: selectedLink
    });
    return this.selectionUpdated();
  },
  _loadInitialData: function() {
    var googleDoc, publicUrl, ref, ref1, ref2;
    if (((ref = this.props.data) != null ? ref.length : void 0) > 0) {
      this.props.graphStore.addAfterAuthHandler(JSON.parse(this.props.data));
      return HashParams.clearParam('data');
    } else if (((ref1 = this.props.publicUrl) != null ? ref1.length : void 0) > 0) {
      publicUrl = this.props.publicUrl;
      GoogleFileStore.actions.addAfterAuthHandler(function(context) {
        return context.loadPublicUrl(publicUrl);
      });
      return HashParams.clearParam('publicUrl');
    } else if (((ref2 = this.props.googleDoc) != null ? ref2.length : void 0) > 0) {
      googleDoc = this.props.googleDoc;
      return GoogleFileStore.actions.addAfterAuthHandler(function(context) {
        return context.loadFile({
          id: googleDoc
        });
      });
    }
  },
  hideBuildInfo: function() {
    return this.setState({
      showBuildInfo: false
    });
  },
  showBuildInfo: function() {
    return this.setState({
      showBuildInfo: true
    });
  },
  _registerUndoRedoKeys: function() {
    return ($(window)).on('keydown', (function(_this) {
      return function(e) {
        var redo, undo, y, z;
        y = (e.keyCode === 89) || (e.keyCode === 121);
        z = (e.keyCode === 90) || (e.keyCode === 122);
        if (!(y || z)) {
          return;
        }
        if (e.metaKey) {
          undo = z && !e.shiftKey;
          redo = (z && e.shiftKey) || y;
        } else if (e.ctrlKey) {
          undo = z;
          redo = y;
        } else {
          undo = redo = false;
        }
        if (undo || redo) {
          if (_this.state.undoRedoShowing) {
            e.preventDefault();
            if (redo) {
              _this.props.graphStore.redo();
            }
            if (undo) {
              return _this.props.graphStore.undo();
            }
          }
        }
      };
    })(this));
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbWl4aW5zL2FwcC12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL21peGlucy9hcHAtdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxZQUFBLEdBQWtCLE9BQUEsQ0FBUSx5QkFBUjs7QUFDbEIsVUFBQSxHQUFrQixPQUFBLENBQVEsdUJBQVI7O0FBQ2xCLGVBQUEsR0FBa0IsT0FBQSxDQUFRLDZCQUFSOztBQUNsQixVQUFBLEdBQWtCLE9BQUEsQ0FBUSwwQkFBUjs7QUFDbEIsRUFBQSxHQUFrQixPQUFBLENBQVEsb0JBQVI7O0FBRWxCLE1BQU0sQ0FBQyxPQUFQLEdBRUU7RUFBQSxzQkFBQSxFQUF3QixTQUFDLFFBQUQ7QUFDdEIsUUFBQTtJQUFBLFVBQUEsR0FDRTtNQUFBLFlBQUEsRUFBYyxJQUFkO01BQ0Esa0JBQUEsRUFBb0IsSUFEcEI7TUFFQSxPQUFBLEVBQVMsRUFGVDtNQUdBLFFBQUEsRUFBVSxJQUhWO01BSUEsZUFBQSxFQUFpQixJQUpqQjtNQUtBLGFBQUEsRUFBZSxLQUxmOztXQU1GLENBQUMsQ0FBQyxNQUFGLENBQVMsVUFBVCxFQUFxQixRQUFyQjtFQVJzQixDQUF4QjtFQVVBLGtCQUFBLEVBQW9CLFNBQUE7V0FDbEIsR0FBRyxDQUFDLElBQUosQ0FBUyxxQkFBVDtFQURrQixDQVZwQjtFQWFBLG1CQUFBLEVBQXFCLFNBQUMsR0FBRDtBQUNuQixRQUFBO0lBQUEsSUFBRyxHQUFIO01BQ0UsY0FBQSxHQUFpQixJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBakMsQ0FBc0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUE3QzthQUNqQixDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsRUFBVixDQUFhLFNBQWIsRUFBd0IsU0FBQyxDQUFEO0FBRXRCLFlBQUE7UUFBQSxJQUFHLFFBQUEsQ0FBQyxDQUFDLE1BQUYsS0FBWSxDQUFaLElBQUEsR0FBQSxLQUFlLEVBQWYsQ0FBQSxJQUF1QixDQUFJLENBQUEsQ0FBRSxDQUFDLENBQUMsTUFBSixDQUFXLENBQUMsRUFBWixDQUFlLGlCQUFmLENBQTlCO1VBQ0UsQ0FBQyxDQUFDLGNBQUYsQ0FBQTtpQkFDQSxjQUFBLENBQUEsRUFGRjs7TUFGc0IsQ0FBeEIsRUFGRjtLQUFBLE1BQUE7YUFRRSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsR0FBVixDQUFjLFNBQWQsRUFSRjs7RUFEbUIsQ0FickI7RUF3QkEsaUJBQUEsRUFBbUIsU0FBQTtJQUNqQixJQUFDLENBQUEsbUJBQUQsQ0FBcUIsSUFBckI7SUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBbkMsQ0FBd0QsSUFBQyxDQUFBLGdCQUF6RDtJQUVBLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBVSxDQUFDLG1CQUFsQixDQUFzQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRDtlQUNwQyxLQUFDLENBQUEsUUFBRCxDQUFVO1VBQUEsUUFBQSxFQUFVLFFBQVY7U0FBVjtNQURvQztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEM7SUFHQSxJQUFDLENBQUEsZ0JBQUQsQ0FBQTtJQUNBLElBQUMsQ0FBQSxxQkFBRCxDQUFBO0lBQ0EsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFuQixDQUEwQixJQUFDLENBQUEsZUFBM0I7V0FDQSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQWpCLENBQXdCLElBQUMsQ0FBQSxrQkFBekI7RUFWaUIsQ0F4Qm5CO0VBb0NBLG9CQUFBLEVBQXNCLFNBQUE7V0FDcEIsSUFBQyxDQUFBLG1CQUFELENBQXFCLEtBQXJCO0VBRG9CLENBcEN0QjtFQXVDQSxlQUFBLEVBQWlCLFNBQUMsTUFBRDtXQUNmLElBQUMsQ0FBQSxRQUFELENBQ0U7TUFBQSxPQUFBLEVBQVMsTUFBTSxDQUFDLE9BQWhCO01BQ0EsZUFBQSxFQUFpQixNQUFNLENBQUMsZUFEeEI7S0FERjtFQURlLENBdkNqQjtFQTRDQSxrQkFBQSxFQUFvQixTQUFDLE1BQUQ7V0FDbEIsSUFBQyxDQUFBLFFBQUQsQ0FDRTtNQUFBLGVBQUEsRUFBaUIsQ0FBSSxNQUFNLENBQUMsWUFBNUI7S0FERjtFQURrQixDQTVDcEI7RUFnREEsYUFBQSxFQUFlLFNBQUMsSUFBRCxFQUFPLElBQVA7V0FDYixJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFsQixDQUE2QixJQUE3QjtFQURhLENBaERmO0VBbURBLFlBQUEsRUFBYyxTQUFBO1dBQ1osSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFVLENBQUMsY0FBbEIsQ0FBQTtFQURZLENBbkRkO0VBdURBLGdCQUFBLEVBQWtCLFNBQUMsT0FBRDtBQUNoQixRQUFBO0lBQUEsWUFBQSxHQUFlLE9BQU8sQ0FBQyxpQkFBUixDQUFBLENBQTRCLENBQUEsQ0FBQSxDQUE1QixJQUFrQztJQUNqRCxXQUFBLEdBQWUsT0FBTyxDQUFDLG1CQUFSLENBQUEsQ0FBOEIsQ0FBQSxDQUFBLENBQTlCLElBQW9DO0lBQ25ELFlBQUEsR0FBZSxPQUFPLENBQUMsaUJBQVIsQ0FBQSxDQUE0QixDQUFBLENBQUEsQ0FBNUIsSUFBa0M7SUFFakQsSUFBQyxDQUFBLFFBQUQsQ0FDRTtNQUFBLFlBQUEsRUFBYyxZQUFkO01BQ0EsV0FBQSxFQUFhLFdBRGI7TUFFQSxZQUFBLEVBQWMsWUFGZDtLQURGO1dBS0EsSUFBQyxDQUFBLGdCQUFELENBQUE7RUFWZ0IsQ0F2RGxCO0VBbUVBLGdCQUFBLEVBQWtCLFNBQUE7QUFDaEIsUUFBQTtJQUFBLDBDQUFjLENBQUUsZ0JBQWIsR0FBc0IsQ0FBekI7TUFDRSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxtQkFBbEIsQ0FBc0MsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQWxCLENBQXRDO2FBQ0EsVUFBVSxDQUFDLFVBQVgsQ0FBc0IsTUFBdEIsRUFGRjtLQUFBLE1BSUssaURBQW1CLENBQUUsZ0JBQWxCLEdBQTJCLENBQTlCO01BQ0gsU0FBQSxHQUFZLElBQUMsQ0FBQSxLQUFLLENBQUM7TUFDbkIsZUFBZSxDQUFDLE9BQU8sQ0FBQyxtQkFBeEIsQ0FBNEMsU0FBQyxPQUFEO2VBQzFDLE9BQU8sQ0FBQyxhQUFSLENBQXNCLFNBQXRCO01BRDBDLENBQTVDO2FBRUEsVUFBVSxDQUFDLFVBQVgsQ0FBc0IsV0FBdEIsRUFKRztLQUFBLE1BTUEsaURBQW1CLENBQUUsZ0JBQWxCLEdBQTJCLENBQTlCO01BQ0gsU0FBQSxHQUFZLElBQUMsQ0FBQSxLQUFLLENBQUM7YUFDbkIsZUFBZSxDQUFDLE9BQU8sQ0FBQyxtQkFBeEIsQ0FBNEMsU0FBQyxPQUFEO2VBQzFDLE9BQU8sQ0FBQyxRQUFSLENBQWlCO1VBQUMsRUFBQSxFQUFJLFNBQUw7U0FBakI7TUFEMEMsQ0FBNUMsRUFGRzs7RUFYVyxDQW5FbEI7RUFtRkEsYUFBQSxFQUFlLFNBQUE7V0FDYixJQUFDLENBQUEsUUFBRCxDQUNFO01BQUEsYUFBQSxFQUFlLEtBQWY7S0FERjtFQURhLENBbkZmO0VBdUZBLGFBQUEsRUFBZSxTQUFBO1dBQ2IsSUFBQyxDQUFBLFFBQUQsQ0FDRTtNQUFBLGFBQUEsRUFBZSxJQUFmO0tBREY7RUFEYSxDQXZGZjtFQTRGQSxxQkFBQSxFQUF1QixTQUFBO1dBQ3JCLENBQUMsQ0FBQSxDQUFFLE1BQUYsQ0FBRCxDQUFVLENBQUMsRUFBWCxDQUFjLFNBQWQsRUFBeUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7QUFDdkIsWUFBQTtRQUFBLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxPQUFGLEtBQWEsRUFBZCxDQUFBLElBQXFCLENBQUMsQ0FBQyxDQUFDLE9BQUYsS0FBYSxHQUFkO1FBQ3pCLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxPQUFGLEtBQWEsRUFBZCxDQUFBLElBQXFCLENBQUMsQ0FBQyxDQUFDLE9BQUYsS0FBYSxHQUFkO1FBQ3pCLElBQVUsQ0FBSSxDQUFDLENBQUEsSUFBSyxDQUFOLENBQWQ7QUFBQSxpQkFBQTs7UUFDQSxJQUFHLENBQUMsQ0FBQyxPQUFMO1VBQ0UsSUFBQSxHQUFPLENBQUEsSUFBTSxDQUFJLENBQUMsQ0FBQztVQUNuQixJQUFBLEdBQU8sQ0FBQyxDQUFBLElBQU0sQ0FBQyxDQUFDLFFBQVQsQ0FBQSxJQUFzQixFQUYvQjtTQUFBLE1BR0ssSUFBRyxDQUFDLENBQUMsT0FBTDtVQUNILElBQUEsR0FBTztVQUNQLElBQUEsR0FBTyxFQUZKO1NBQUEsTUFBQTtVQUlILElBQUEsR0FBTyxJQUFBLEdBQU8sTUFKWDs7UUFLTCxJQUFHLElBQUEsSUFBUSxJQUFYO1VBQ0UsSUFBSSxLQUFDLENBQUEsS0FBSyxDQUFDLGVBQVg7WUFDRSxDQUFDLENBQUMsY0FBRixDQUFBO1lBQ0EsSUFBNEIsSUFBNUI7Y0FBQSxLQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFsQixDQUFBLEVBQUE7O1lBQ0EsSUFBNEIsSUFBNUI7cUJBQUEsS0FBQyxDQUFBLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBbEIsQ0FBQSxFQUFBO2FBSEY7V0FERjs7TUFadUI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXpCO0VBRHFCLENBNUZ2QiJ9

},{"../stores/codap-store":663,"../stores/google-file-store":664,"../stores/palette-store":670,"../utils/hash-parameters":678,"../utils/translate":689}],650:[function(require,module,exports){
module.exports = {
  componentDidMount: function() {
    var addClasses, doMove, domRef, reactSafeClone, removeClasses;
    doMove = this.doMove || function() {
      return void 0;
    };
    removeClasses = this.removeClasses || ['proto-node'];
    addClasses = this.addClasses || ['elm'];
    domRef = this.refs.draggable || this;
    reactSafeClone = function(e) {
      var clone;
      clone = $(this).clone(false);
      _.each(removeClasses, function(classToRemove) {
        return clone.removeClass(classToRemove);
      });
      _.each(addClasses, function(classToAdd) {
        return clone.addClass(classToAdd);
      });
      clone.attr('data-reactid', null);
      clone.find("*").each(function(i, v) {
        return $(v).attr('data-reactid', null);
      });
      return clone;
    };
    return $(ReactDOM.findDOMNode(domRef)).draggable({
      drag: this.doMove,
      revert: true,
      helper: reactSafeClone,
      revertDuration: 0,
      opacity: 0.35,
      appendTo: 'body',
      zIndex: 1000
    });
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbWl4aW5zL2RyYWdnYWJsZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9taXhpbnMvZHJhZ2dhYmxlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsaUJBQUEsRUFBbUIsU0FBQTtBQUVqQixRQUFBO0lBQUEsTUFBQSxHQUFnQixJQUFDLENBQUEsTUFBRCxJQUFXLFNBQUE7YUFBRztJQUFIO0lBQzNCLGFBQUEsR0FBZ0IsSUFBQyxDQUFBLGFBQUQsSUFBa0IsQ0FBQyxZQUFEO0lBQ2xDLFVBQUEsR0FBZ0IsSUFBQyxDQUFBLFVBQUQsSUFBZSxDQUFDLEtBQUQ7SUFDL0IsTUFBQSxHQUFnQixJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sSUFBbUI7SUFJbkMsY0FBQSxHQUFpQixTQUFDLENBQUQ7QUFDZixVQUFBO01BQUEsS0FBQSxHQUFRLENBQUEsQ0FBRSxJQUFGLENBQUksQ0FBQyxLQUFMLENBQVcsS0FBWDtNQUNSLENBQUMsQ0FBQyxJQUFGLENBQU8sYUFBUCxFQUFzQixTQUFDLGFBQUQ7ZUFDcEIsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsYUFBbEI7TUFEb0IsQ0FBdEI7TUFFQSxDQUFDLENBQUMsSUFBRixDQUFPLFVBQVAsRUFBbUIsU0FBQyxVQUFEO2VBQ2pCLEtBQUssQ0FBQyxRQUFOLENBQWUsVUFBZjtNQURpQixDQUFuQjtNQUVBLEtBQUssQ0FBQyxJQUFOLENBQVcsY0FBWCxFQUEyQixJQUEzQjtNQUNBLEtBQUssQ0FBQyxJQUFOLENBQVcsR0FBWCxDQUFlLENBQUMsSUFBaEIsQ0FBcUIsU0FBQyxDQUFELEVBQUcsQ0FBSDtlQUNuQixDQUFBLENBQUUsQ0FBRixDQUFJLENBQUMsSUFBTCxDQUFVLGNBQVYsRUFBMEIsSUFBMUI7TUFEbUIsQ0FBckI7YUFFQTtJQVRlO1dBV2pCLENBQUEsQ0FBRSxRQUFRLENBQUMsV0FBVCxDQUFxQixNQUFyQixDQUFGLENBQStCLENBQUMsU0FBaEMsQ0FDRTtNQUFBLElBQUEsRUFBTSxJQUFDLENBQUEsTUFBUDtNQUNBLE1BQUEsRUFBUSxJQURSO01BRUEsTUFBQSxFQUFRLGNBRlI7TUFHQSxjQUFBLEVBQWdCLENBSGhCO01BSUEsT0FBQSxFQUFTLElBSlQ7TUFLQSxRQUFBLEVBQVUsTUFMVjtNQU1BLE1BQUEsRUFBUSxJQU5SO0tBREY7RUFwQmlCLENBQW5CIn0=

},{}],651:[function(require,module,exports){
var ImageDialogStore, PreviewImage, hasValidImageExtension;

PreviewImage = React.createFactory(require('../views/preview-image-dialog-view'));

hasValidImageExtension = require('../utils/has-valid-image-extension');

ImageDialogStore = require('../stores/image-dialog-store');

module.exports = {
  getInitialImageDialogViewState: function(subState) {
    return subState;
  },
  imageSelected: function(imageInfo) {
    return ImageDialogStore.actions.update(imageInfo);
  },
  imageDropped: function(imageInfo) {
    return this.imageSelected(imageInfo);
  },
  hasValidImageExtension: function(imageName) {
    return hasValidImageExtension(imageName);
  },
  renderPreviewImage: function() {
    return PreviewImage({
      imageInfo: this.props.selectedImage
    });
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbWl4aW5zL2ltYWdlLWRpYWxvZy12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL21peGlucy9pbWFnZS1kaWFsb2ctdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxZQUFBLEdBQWUsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLG9DQUFSLENBQXBCOztBQUNmLHNCQUFBLEdBQXlCLE9BQUEsQ0FBUSxvQ0FBUjs7QUFDekIsZ0JBQUEsR0FBbUIsT0FBQSxDQUFRLDhCQUFSOztBQUduQixNQUFNLENBQUMsT0FBUCxHQUVFO0VBQUEsOEJBQUEsRUFBZ0MsU0FBQyxRQUFEO1dBQzlCO0VBRDhCLENBQWhDO0VBR0EsYUFBQSxFQUFlLFNBQUMsU0FBRDtXQUNiLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxNQUF6QixDQUFnQyxTQUFoQztFQURhLENBSGY7RUFNQSxZQUFBLEVBQWMsU0FBQyxTQUFEO1dBQ1osSUFBQyxDQUFBLGFBQUQsQ0FBZSxTQUFmO0VBRFksQ0FOZDtFQVNBLHNCQUFBLEVBQXdCLFNBQUMsU0FBRDtXQUN0QixzQkFBQSxDQUF1QixTQUF2QjtFQURzQixDQVR4QjtFQVlBLGtCQUFBLEVBQW9CLFNBQUE7V0FDakIsWUFBQSxDQUFhO01BQUMsU0FBQSxFQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBbkI7S0FBYjtFQURpQixDQVpwQiJ9

},{"../stores/image-dialog-store":666,"../utils/has-valid-image-extension":677,"../views/preview-image-dialog-view":728}],652:[function(require,module,exports){
var tr;

tr = require("../utils/translate");

module.exports = {
  defaultTitle: function() {
    return tr("~NODE.UNTITLED");
  },
  titlePlaceholder: function() {
    return this.defaultTitle();
  },
  isDefaultTitle: function() {
    return this.props.title === this.titlePlaceholder();
  },
  displayTitleForInput: function(proposedTitle) {
    if (proposedTitle === this.defaultTitle()) {
      return "";
    } else {
      return proposedTitle;
    }
  },
  maxTitleLength: function() {
    return 35;
  },
  cleanupTitle: function(newTitle, isComplete) {
    var cleanTitle;
    cleanTitle = isComplete ? _.trim(newTitle) : newTitle;
    cleanTitle = cleanTitle.substr(0, this.maxTitleLength());
    cleanTitle = isComplete ? _.trim(cleanTitle) : cleanTitle;
    return cleanTitle = cleanTitle.length > 0 ? cleanTitle : this.defaultTitle();
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbWl4aW5zL25vZGUtdGl0bGUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbWl4aW5zL25vZGUtdGl0bGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFDTCxNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsWUFBQSxFQUFjLFNBQUE7V0FDWixFQUFBLENBQUcsZ0JBQUg7RUFEWSxDQUFkO0VBR0EsZ0JBQUEsRUFBa0IsU0FBQTtXQUNoQixJQUFDLENBQUEsWUFBRCxDQUFBO0VBRGdCLENBSGxCO0VBTUEsY0FBQSxFQUFnQixTQUFBO1dBQ2QsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEtBQWdCLElBQUMsQ0FBQSxnQkFBRCxDQUFBO0VBREYsQ0FOaEI7RUFTQSxvQkFBQSxFQUFzQixTQUFDLGFBQUQ7SUFHcEIsSUFBRyxhQUFBLEtBQWlCLElBQUMsQ0FBQSxZQUFELENBQUEsQ0FBcEI7YUFBeUMsR0FBekM7S0FBQSxNQUFBO2FBQWlELGNBQWpEOztFQUhvQixDQVR0QjtFQWNBLGNBQUEsRUFBZ0IsU0FBQTtXQUNkO0VBRGMsQ0FkaEI7RUFpQkEsWUFBQSxFQUFjLFNBQUMsUUFBRCxFQUFXLFVBQVg7QUFDWixRQUFBO0lBQUEsVUFBQSxHQUFnQixVQUFILEdBQW1CLENBQUMsQ0FBQyxJQUFGLENBQU8sUUFBUCxDQUFuQixHQUF5QztJQUN0RCxVQUFBLEdBQWEsVUFBVSxDQUFDLE1BQVgsQ0FBa0IsQ0FBbEIsRUFBcUIsSUFBQyxDQUFBLGNBQUQsQ0FBQSxDQUFyQjtJQUNiLFVBQUEsR0FBZ0IsVUFBSCxHQUFtQixDQUFDLENBQUMsSUFBRixDQUFPLFVBQVAsQ0FBbkIsR0FBMkM7V0FDeEQsVUFBQSxHQUFnQixVQUFVLENBQUMsTUFBWCxHQUFvQixDQUF2QixHQUE4QixVQUE5QixHQUE4QyxJQUFDLENBQUEsWUFBRCxDQUFBO0VBSi9DLENBakJkIn0=

},{"../utils/translate":689}],653:[function(require,module,exports){
var CodapActions, CodapConnect, IframePhoneRpcEndpoint, SimulationStore, TimeUnits, escapeRegExp, tr, undoRedoUIActions,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

IframePhoneRpcEndpoint = (require('iframe-phone')).IframePhoneRpcEndpoint;

tr = require('../utils/translate');

CodapActions = require('../actions/codap-actions');

undoRedoUIActions = (require('../stores/undo-redo-ui-store')).actions;

SimulationStore = require('../stores/simulation-store');

TimeUnits = require('../utils/time-units');

escapeRegExp = (require('../utils/escape-reg-ex')).escapeRegExp;

module.exports = CodapConnect = (function() {
  CodapConnect.instances = {};

  CodapConnect.instance = function(context) {
    var base;
    if ((base = CodapConnect.instances)[context] == null) {
      base[context] = new CodapConnect(context);
    }
    return CodapConnect.instances[context];
  };

  function CodapConnect(context) {
    this.codapRequestHandler = bind(this.codapRequestHandler, this);
    var GraphStore;
    log.info('CodapConnect: initializing');
    GraphStore = require('../stores/graph-store');
    this.standaloneMode = false;
    this.queue = [];
    this.graphStore = GraphStore.store;
    this.lastTimeSent = this._timeStamp();
    this.sendThrottleMs = 300;
    this.dataContextName = "Sage Simulation";
    this.simulationCollectionName = "Simulation";
    this.samplesCollectionName = "Samples";
    SimulationStore.actions.recordingFramesCreated.listen(this.addData.bind(this));
    CodapActions.sendUndoToCODAP.listen(this._sendUndoToCODAP.bind(this));
    CodapActions.sendRedoToCODAP.listen(this._sendRedoToCODAP.bind(this));
    this.codapPhone = new IframePhoneRpcEndpoint(this.codapRequestHandler, 'data-interactive', window.parent);
    this.codapPhone.call([
      {
        action: 'update',
        resource: 'interactiveFrame',
        values: {
          title: tr("~CODAP.INTERACTIVE_FRAME.TITLE")
        }
      }, {
        action: 'get',
        resource: 'interactiveFrame'
      }, {
        action: 'get',
        resource: 'dataContext'
      }
    ], (function(_this) {
      return function(ret) {
        var frame, ref, ref1, state;
        if (ret) {
          frame = ret[1];
          context = ret[2];
          _this.graphStore.setUsingCODAP(true);
          if (frame != null ? frame.values.externalUndoAvailable : void 0) {
            CodapActions.hideUndoRedo();
          } else if (frame != null ? frame.values.standaloneUndoModeAvailable : void 0) {
            _this.standaloneMode = true;
            _this.graphStore.setCodapStandaloneMode(true);
          }
          state = (frame != null ? frame.values.savedState : void 0) || (context != null ? (ref = context.values) != null ? (ref1 = ref.contextStorage) != null ? ref1.gameState : void 0 : void 0 : void 0);
          if (state != null) {
            _this.graphStore.deleteAll();
            _this.graphStore.loadData(state);
            return _this._initialSyncAttributeProperties(null, true);
          }
        } else {
          return log.info("null response in codap-connect codapPhone.call");
        }
      };
    })(this));
    this.codapPhone.call({
      action: 'get',
      resource: "dataContext[" + this.dataContextName + "]"
    }, (function(_this) {
      return function(ret) {
        var attrs, ref, ref1, ref2;
        if (!ret || ret.success) {
          if ((attrs = (ret != null ? (ref = ret.values) != null ? (ref1 = ref.collections) != null ? (ref2 = ref1[1]) != null ? ref2.attrs : void 0 : void 0 : void 0 : void 0) != null)) {
            _this._initialSyncAttributeProperties(attrs);
          }
          return _this._getExperimentNumber();
        } else {
          return _this._createDataContext();
        }
      };
    })(this));
  }

  CodapConnect.prototype._initialSyncAttributeProperties = function(attrs, isLoaded) {
    if (attrs) {
      this._attrsToSync = attrs;
    }
    if (isLoaded) {
      this._attrsAreLoaded = isLoaded;
    }
    if (this._attrsToSync && this._attrsAreLoaded) {
      this._syncAttributeProperties(this._attrsToSync, true);
      return this._attrsToSync = null;
    }
  };

  CodapConnect.prototype._createDataContext = function() {
    var message, sampleDataAttrs;
    sampleDataAttrs = this._getSampleAttributes();
    message = {
      action: 'create',
      resource: 'dataContext',
      values: {
        name: this.dataContextName,
        title: this.dataContextName,
        collections: [
          {
            name: this.simulationCollectionName,
            title: 'Sage Simulation',
            labels: {
              singleCase: 'run',
              pluralCase: 'runs'
            },
            attrs: [
              {
                name: tr('~CODAP.SIMULATION.EXPERIMENT'),
                type: 'categorical'
              }
            ]
          }, {
            parent: this.simulationCollectionName,
            name: this.samplesCollectionName,
            title: this.samplesCollectionName,
            labels: {
              singleCase: 'sample',
              pluralCase: 'samples'
            },
            attrs: sampleDataAttrs
          }
        ]
      }
    };
    return this.codapPhone.call(message, this.initGameHandler);
  };

  CodapConnect.prototype._getSampleAttributes = function() {
    var addNodeAttr, nodes, sampleDataAttrs, timeUnit;
    nodes = this.graphStore.getNodes();
    timeUnit = TimeUnits.toString(SimulationStore.store.stepUnits(), true);
    sampleDataAttrs = [
      {
        name: timeUnit,
        type: "numeric"
      }
    ];
    addNodeAttr = function(node) {
      var type;
      type = node.valueDefinedSemiQuantitatively ? 'qualitative' : 'numeric';
      return sampleDataAttrs.push({
        name: node.codapName || node.title,
        type: type
      });
    };
    _.each(nodes, function(node) {
      return addNodeAttr(node);
    });
    return sampleDataAttrs;
  };

  CodapConnect.prototype._createMissingDataAttributes = function(callback) {
    var attributesKey, currentAttributes, doResolve, getListing;
    currentAttributes = _.sortBy(this._getSampleAttributes(), 'name');
    attributesKey = _.pluck(currentAttributes, 'name').join("|");
    if (this.attributesKey === attributesKey) {
      if (callback) {
        return callback();
      }
    } else {
      doResolve = (function(_this) {
        return function(listAttributeResponse) {
          var message, newAttributes, values;
          if (listAttributeResponse != null ? listAttributeResponse.success : void 0) {
            values = listAttributeResponse.values;
            newAttributes = _.select(currentAttributes, function(a) {
              return !_.includes(values, a.name);
            });
            message = {
              action: 'create',
              resource: "dataContext[" + _this.dataContextName + "].collection[" + _this.samplesCollectionName + "].attribute",
              values: newAttributes
            };
            return _this.codapPhone.call(message, function(response) {
              var ref;
              if (response.success) {
                if ((((ref = response.values) != null ? ref.attrs : void 0) != null)) {
                  _this._syncAttributeProperties(response.values.attrs, true);
                }
                _this.attributesKey = attributesKey;
                if (callback) {
                  return callback();
                }
              } else {
                return log.info("Unable to update Attributes");
              }
            });
          } else {
            return log.info("unable to list attributes");
          }
        };
      })(this);
      getListing = {
        action: 'get',
        resource: "dataContext[" + this.dataContextName + "].collection[" + this.samplesCollectionName + "].attributeList"
      };
      this.codapPhone.call(getListing, doResolve);
      return log.info("requested list of attributes");
    }
  };

  CodapConnect.prototype._syncAttributeProperties = function(attrProps, initialSync) {
    var nodesToSync;
    nodesToSync = initialSync ? _.filter(this.graphStore.nodeKeys, function(node) {
      return !node.codapID || !node.codapName;
    }) : _.map(this.graphStore.nodeKeys, function(node) {
      return node;
    });
    if (nodesToSync != null ? nodesToSync.length : void 0) {
      return _.each(attrProps, (function(_this) {
        return function(attr) {
          var nameRegEx, node;
          node = _.find(nodesToSync, function(node) {
            return node.codapID === attr.id;
          });
          if (!node && attr.clientName) {
            node = _.find(nodesToSync, function(node) {
              return node.title === attr.clientName;
            });
          }
          if (!node && attr.name) {
            node = _.find(nodesToSync, function(node) {
              return node.codapName === attr.name;
            });
          }
          if (!node && attr.name) {
            nameRegEx = new RegExp("^" + (escapeRegExp(attr.name.replace(/_/g, '?'))) + "$");
            node = _.find(nodesToSync, function(node) {
              return nameRegEx.test(node.title);
            });
          }
          if (node) {
            if (!node.codapID || !node.codapName) {
              if (!node.codapID) {
                node.codapID = attr.id;
              }
              node.codapName = attr.name;
            } else if (node.codapName !== attr.name) {
              node.codapName = attr.name;
              if (!initialSync && (node.title !== attr.name)) {
                _this.graphStore._changeNode(node, {
                  title: attr.name
                }, false);
              }
            }
            if (initialSync) {
              _.remove(nodesToSync, function(node) {
                return node.codapID && node.codapName;
              });
            } else {
              _.remove(nodesToSync, function(node) {
                return node.codapID === attr.id;
              });
            }
          }
          if (!(nodesToSync != null ? nodesToSync.length : void 0)) {
            return false;
          }
        };
      })(this));
    }
  };

  CodapConnect.prototype.sendRenameAttribute = function(nodeKey, prevTitle) {
    var codapKey, message, node;
    node = this.graphStore.nodeKeys[nodeKey];
    codapKey = node.codapID || node.codapName || prevTitle;
    if (codapKey) {
      message = {
        action: 'update',
        resource: "dataContext[Sage Simulation].collection[Samples].attribute[" + codapKey + "]",
        values: {
          name: node.title
        },
        meta: {
          dirtyDocument: false
        }
      };
      return this.codapPhone.call(message, (function(_this) {
        return function(response) {
          var ref;
          if (response.success) {
            if (response != null ? (ref = response.values) != null ? ref.attrs : void 0 : void 0) {
              return _this._syncAttributeProperties(response.values.attrs);
            }
          } else if (node.codapID && node.codapName) {
            return console.log("Error: CODAP attribute rename failed!");
          }
        };
      })(this));
    }
  };

  CodapConnect.prototype._timeStamp = function() {
    return new Date().getTime();
  };

  CodapConnect.prototype._shouldSend = function() {
    var currentTime, elapsedTime;
    currentTime = this._timeStamp();
    elapsedTime = currentTime - this.lastTimeSent;
    return elapsedTime > this.sendThrottleMs;
  };

  CodapConnect.prototype._sendSimulationData = function() {
    var createItemsMessage, sampleData;
    sampleData = this.queue;
    this.queue = [];
    createItemsMessage = {
      action: 'create',
      resource: "dataContext[" + this.dataContextName + "].item",
      values: sampleData
    };
    if (sampleData.length > 0) {
      this.createTable();
      return this._createMissingDataAttributes((function(_this) {
        return function() {
          var createItemsCallback;
          createItemsCallback = function(newSampleResult) {
            if (newSampleResult.success) {
              return _this.lastTimeSent = _this._timeStamp();
            } else {
              log.info("CODAP returned an error on 'create item''");
              return _this.queue = sampleData.concat(_this.queue);
            }
          };
          return _this.codapPhone.call(createItemsMessage, createItemsCallback);
        };
      })(this));
    }
  };

  CodapConnect.prototype._sendUndoToCODAP = function() {
    return this.codapPhone.call({
      action: 'notify',
      resource: 'undoChangeNotice',
      values: {
        operation: this.standaloneMode ? 'undoButtonPress' : 'undoAction'
      }
    }, function(response) {
      var ref, ref1;
      if (((response != null ? (ref = response.values) != null ? ref.canUndo : void 0 : void 0) != null) && ((response != null ? (ref1 = response.values) != null ? ref1.canRedo : void 0 : void 0) != null)) {
        return undoRedoUIActions.setCanUndoRedo(response.values.canUndo, response.values.canRedo);
      }
    });
  };

  CodapConnect.prototype._sendRedoToCODAP = function() {
    return this.codapPhone.call({
      action: 'notify',
      resource: 'undoChangeNotice',
      values: {
        operation: this.standaloneMode ? 'redoButtonPress' : 'redoAction'
      }
    }, function(response) {
      var ref, ref1;
      if (((response != null ? (ref = response.values) != null ? ref.canUndo : void 0 : void 0) != null) && ((response != null ? (ref1 = response.values) != null ? ref1.canRedo : void 0 : void 0) != null)) {
        return undoRedoUIActions.setCanUndoRedo(response.values.canUndo, response.values.canRedo);
      }
    });
  };

  CodapConnect.prototype.sendUndoableActionPerformed = function(logMessage) {
    return this.codapPhone.call({
      action: 'notify',
      resource: 'undoChangeNotice',
      values: {
        operation: 'undoableActionPerformed',
        logMessage: logMessage
      }
    }, function(response) {
      var ref, ref1;
      if (((response != null ? (ref = response.values) != null ? ref.canUndo : void 0 : void 0) != null) && ((response != null ? (ref1 = response.values) != null ? ref1.canRedo : void 0 : void 0) != null)) {
        return undoRedoUIActions.setCanUndoRedo(response.values.canUndo, response.values.canRedo);
      }
    });
  };

  CodapConnect.prototype.addData = function(data) {
    var sampleData, timeUnit;
    timeUnit = TimeUnits.toString(SimulationStore.store.stepUnits(), true);
    sampleData = _.map(data, function(frame) {
      var sample;
      sample = {};
      sample[tr('~CODAP.SIMULATION.EXPERIMENT')] = SimulationStore.store.settings.experimentNumber;
      sample[timeUnit] = frame.time;
      _.each(frame.nodes, function(n) {
        return sample[n.title] = n.value;
      });
      return sample;
    });
    this.queue = this.queue.concat(sampleData);
    if (this._shouldSend()) {
      return this._sendSimulationData();
    } else {
      return setTimeout(this._sendSimulationData.bind(this), this.sendThrottleMs);
    }
  };

  CodapConnect.prototype.createGraph = function(yAttributeName) {
    var timeUnit;
    this._createMissingDataAttributes();
    timeUnit = TimeUnits.toString(SimulationStore.store.stepUnits(), true);
    return this.codapPhone.call({
      action: 'create',
      resource: 'component',
      values: {
        type: 'graph',
        dataContext: this.dataContextName,
        xAttributeName: timeUnit,
        yAttributeName: yAttributeName,
        size: {
          width: 242,
          height: 221
        },
        position: 'bottom',
        enableNumberToggle: true
      }
    });
  };

  CodapConnect.prototype.createTable = function() {
    if (!this.tableCreated) {
      this.codapPhone.call({
        action: 'create',
        resource: 'component',
        values: {
          type: 'caseTable',
          dataContext: this.dataContextName
        }
      });
      return this.tableCreated = true;
    }
  };

  CodapConnect.prototype.codapRequestHandler = function(cmd, callback) {
    var action, change, operation, paletteManager, ref, ref1, ref2, ref3, ref4, resource, successes;
    resource = cmd.resource;
    action = cmd.action;
    change = Array.isArray(cmd.values) ? cmd.values[0] : cmd.values;
    operation = change != null ? change.operation : void 0;
    paletteManager = require('../stores/palette-store');
    switch (resource) {
      case 'interactiveState':
        if (action === 'get') {
          log.info('Received saveState request from CODAP.');
          return callback({
            success: true,
            state: this.graphStore.serialize(paletteManager.store.palette)
          });
        }
        break;
      case 'undoChangeNotice':
        if (operation === 'undoAction') {
          log.info('Received undoAction request from CODAP.');
          successes = this.graphStore.undo(true);
          callback({
            success: this.reduceSuccesses(successes) !== false
          });
        }
        if (operation === 'redoAction') {
          log.info('Received redoAction request from CODAP.');
          successes = this.graphStore.redo(true);
          callback({
            success: this.reduceSuccesses(successes) !== false
          });
        }
        if (operation === 'clearUndo') {
          log.info('Received clearUndo request from CODAP.');
          this.graphStore.undoRedoManager.clearHistory();
        }
        if (operation === 'clearRedo') {
          log.info('Received clearRedo request from CODAP.');
          this.graphStore.undoRedoManager.clearRedo();
        }
        if ((((ref = cmd.values) != null ? ref.canUndo : void 0) != null) && (((ref1 = cmd.values) != null ? ref1.canRedo : void 0) != null)) {
          return undoRedoUIActions.setCanUndoRedo((ref2 = cmd.values) != null ? ref2.canUndo : void 0, (ref3 = cmd.values) != null ? ref3.canRedo : void 0);
        }
        break;
      case 'dataContextChangeNotice[Sage Simulation]':
        if (operation === 'updateAttributes') {
          if (change != null ? (ref4 = change.result) != null ? ref4.attrs : void 0 : void 0) {
            return this._syncAttributeProperties(change.result.attrs);
          }
        }
        break;
      default:
        return log.info('Unhandled request received from CODAP: ' + JSON.stringify(cmd));
    }
  };

  CodapConnect.prototype.reduceSuccesses = function(successes) {
    var i, len, s;
    if (!(successes != null ? successes.length : void 0)) {
      return successes;
    }
    for (i = 0, len = successes.length; i < len; i++) {
      s = successes[i];
      if (s === false) {
        return false;
      }
    }
    return true;
  };

  CodapConnect.prototype._getExperimentNumber = function(result) {
    var runsCollection;
    runsCollection = "dataContext[" + this.dataContextName + "].collection[" + this.simulationCollectionName + "]";
    return this.codapPhone.call({
      action: 'get',
      resource: runsCollection + ".caseCount"
    }, (function(_this) {
      return function(ret) {
        var caseCount;
        if (ret != null ? ret.success : void 0) {
          caseCount = ret.values;
          if (caseCount > 0) {
            _this.codapPhone.call({
              action: 'get',
              resource: runsCollection + ".caseByIndex[" + (caseCount - 1) + "]"
            }, function(ret2) {
              var lastCase, lastExperimentNumber;
              if (ret2 != null ? ret2.success : void 0) {
                lastCase = ret2.values['case'];
                lastExperimentNumber = lastCase.values[tr("~CODAP.SIMULATION.EXPERIMENT")];
                return SimulationStore.actions.setExperimentNumber(lastExperimentNumber + 1);
              }
            });
          }
        }
        return _this.initGameHandler(ret);
      };
    })(this));
  };

  CodapConnect.prototype.initGameHandler = function(result) {
    if (result && result.success) {
      return CodapActions.codapLoaded();
    }
  };

  CodapConnect.prototype.request = function(action, args, callback) {
    var promise;
    promise = new Promise((function(_this) {
      return function(resolve, reject) {
        return _this.codapPhone.call({
          action: action,
          args: args
        }, function(reply) {
          if (callback) {
            callback(reply);
          }
          if (reply && reply.success) {
            return resolve(reply);
          } else {
            return reject('CODAP request error');
          }
        });
      };
    })(this));
    return promise;
  };

  return CodapConnect;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../actions/codap-actions":620,"../stores/graph-store":665,"../stores/palette-store":670,"../stores/simulation-store":671,"../stores/undo-redo-ui-store":672,"../utils/escape-reg-ex":675,"../utils/time-units":688,"../utils/translate":689,"iframe-phone":17}],654:[function(require,module,exports){
var GraphPrimitive;

module.exports = GraphPrimitive = (function() {
  GraphPrimitive.counters = {};

  GraphPrimitive.reset_counters = function() {
    return GraphPrimitive.counters = {};
  };

  GraphPrimitive.nextID = function(type) {
    if (!GraphPrimitive.counters[type]) {
      GraphPrimitive.counters[type] = 0;
    }
    GraphPrimitive.counters[type]++;
    return type + "-" + GraphPrimitive.counters[type];
  };

  GraphPrimitive.prototype.type = 'GraphPrimitive';

  function GraphPrimitive() {
    this.id = GraphPrimitive.nextID(this.type);
    this.key = this.id;
  }

  return GraphPrimitive;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbW9kZWxzL2dyYXBoLXByaW1pdGl2ZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9tb2RlbHMvZ3JhcGgtcHJpbWl0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxJQUFBOztBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQXVCO0VBQ3JCLGNBQUMsQ0FBQSxRQUFELEdBQVc7O0VBQ1gsY0FBQyxDQUFBLGNBQUQsR0FBaUIsU0FBQTtXQUNmLGNBQWMsQ0FBQyxRQUFmLEdBQTBCO0VBRFg7O0VBR2pCLGNBQUMsQ0FBQSxNQUFELEdBQVMsU0FBQyxJQUFEO0lBQ1AsSUFBRyxDQUFJLGNBQWMsQ0FBQyxRQUFTLENBQUEsSUFBQSxDQUEvQjtNQUNFLGNBQWMsQ0FBQyxRQUFTLENBQUEsSUFBQSxDQUF4QixHQUFnQyxFQURsQzs7SUFFQSxjQUFjLENBQUMsUUFBUyxDQUFBLElBQUEsQ0FBeEI7V0FDRyxJQUFELEdBQU0sR0FBTixHQUFTLGNBQWMsQ0FBQyxRQUFTLENBQUEsSUFBQTtFQUo1Qjs7MkJBTVQsSUFBQSxHQUFNOztFQUVPLHdCQUFBO0lBQ1gsSUFBQyxDQUFBLEVBQUQsR0FBTSxjQUFjLENBQUMsTUFBZixDQUFzQixJQUFDLENBQUEsSUFBdkI7SUFDTixJQUFDLENBQUEsR0FBRCxHQUFNLElBQUMsQ0FBQTtFQUZJIn0=

},{}],655:[function(require,module,exports){
var GraphPrimitive, Link, LinkColors, Relation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GraphPrimitive = require('./graph-primitive');

Relation = require("./relationship");

LinkColors = require("../utils/link-colors");

module.exports = Link = (function(superClass) {
  extend(Link, superClass);

  Link.defaultColor = LinkColors["default"];

  Link.defaultRelation = new Relation({
    formula: "1 * in"
  });

  function Link(options) {
    var base, base1, ref;
    this.options = options != null ? options : {};
    if ((base = this.options).color == null) {
      base.color = Link.defaultColor;
    }
    if ((base1 = this.options).title == null) {
      base1.title = '';
    }
    ref = this.options, this.sourceNode = ref.sourceNode, this.sourceTerminal = ref.sourceTerminal, this.targetNode = ref.targetNode, this.targetTerminal = ref.targetTerminal, this.color = ref.color, this.title = ref.title;
    if (this.options.transferNode) {
      this.transferNode = this.options.transferNode;
      this.transferNode.setTransferLink(this);
    }
    this.relation = this._makeRelation(this.options.relation);
    this.reasoning = this.options.reasoning || "";
    this.jsPlumbConnection = null;
    Link.__super__.constructor.call(this);
  }

  Link.prototype.type = 'Link';

  Link.prototype._makeRelation = function(relationObj) {
    var relation;
    if (!(relationObj instanceof Relation)) {
      relation = new Relation(relationObj || {});
    } else {
      relation = relationObj;
    }
    return relation;
  };

  Link.prototype.defaultRelation = function() {
    return new Relation({});
  };

  Link.prototype.terminalKey = function() {
    return this.sourceNode.key + " ------> " + this.targetNode.key;
  };

  Link.prototype.nodeKey = function() {
    return this.sourceNode + " ---" + this.key + "---> " + this.targetNode;
  };

  Link.prototype.outs = function() {
    return [this.targetNode];
  };

  Link.prototype.ins = function() {
    return [this.sourceNode];
  };

  Link.prototype.toExport = function() {
    var link;
    link = {
      "title": this.title,
      "color": this.color,
      "sourceNode": this.sourceNode.key,
      "sourceTerminal": this.sourceTerminal,
      "targetNode": this.targetNode.key,
      "targetTerminal": this.targetTerminal,
      "relation": this.relation.toExport(),
      "reasoning": this.reasoning
    };
    if (this.transferNode) {
      link.transferNode = this.transferNode.key;
    }
    return link;
  };

  return Link;

})(GraphPrimitive);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbW9kZWxzL2xpbmsuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbW9kZWxzL2xpbmsuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsMENBQUE7RUFBQTs7O0FBQUEsY0FBQSxHQUFpQixPQUFBLENBQVEsbUJBQVI7O0FBQ2pCLFFBQUEsR0FBaUIsT0FBQSxDQUFRLGdCQUFSOztBQUNqQixVQUFBLEdBQWlCLE9BQUEsQ0FBUSxzQkFBUjs7QUFFakIsTUFBTSxDQUFDLE9BQVAsR0FBdUI7OztFQUVyQixJQUFDLENBQUEsWUFBRCxHQUFnQixVQUFVLEVBQUMsT0FBRDs7RUFDMUIsSUFBQyxDQUFBLGVBQUQsR0FBbUIsSUFBSSxRQUFKLENBQ2pCO0lBQUEsT0FBQSxFQUFTLFFBQVQ7R0FEaUI7O0VBR04sY0FBQyxPQUFEO0FBQ1gsUUFBQTtJQURZLElBQUMsQ0FBQSw0QkFBRCxVQUFTOztVQUNiLENBQUMsUUFBUyxJQUFJLENBQUM7OztXQUNmLENBQUMsUUFBUzs7SUFFbEIsTUFHSSxJQUFDLENBQUEsT0FITCxFQUNFLElBQUMsQ0FBQSxpQkFBQSxVQURILEVBQ2UsSUFBQyxDQUFBLHFCQUFBLGNBRGhCLEVBQ2dDLElBQUMsQ0FBQSxpQkFBQSxVQURqQyxFQUM2QyxJQUFDLENBQUEscUJBQUEsY0FEOUMsRUFFRSxJQUFDLENBQUEsWUFBQSxLQUZILEVBRVUsSUFBQyxDQUFBLFlBQUE7SUFFWCxJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsWUFBWjtNQUNFLElBQUMsQ0FBQSxZQUFELEdBQWdCLElBQUMsQ0FBQSxPQUFPLENBQUM7TUFDekIsSUFBQyxDQUFBLFlBQVksQ0FBQyxlQUFkLENBQThCLElBQTlCLEVBRkY7O0lBR0EsSUFBQyxDQUFBLFFBQUQsR0FBWSxJQUFDLENBQUEsYUFBRCxDQUFlLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBeEI7SUFDWixJQUFDLENBQUEsU0FBRCxHQUFhLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxJQUFzQjtJQUNuQyxJQUFDLENBQUEsaUJBQUQsR0FBcUI7SUFDckIsb0NBQUE7RUFkVzs7aUJBZ0JiLElBQUEsR0FBTTs7aUJBRU4sYUFBQSxHQUFlLFNBQUMsV0FBRDtBQUNiLFFBQUE7SUFBQSxJQUFBLENBQU8sQ0FBQyxXQUFBLFlBQXVCLFFBQXhCLENBQVA7TUFDRSxRQUFBLEdBQVcsSUFBSSxRQUFKLENBQWMsV0FBQSxJQUFlLEVBQTdCLEVBRGI7S0FBQSxNQUFBO01BR0UsUUFBQSxHQUFXLFlBSGI7O0FBSUEsV0FBTztFQUxNOztpQkFPZixlQUFBLEdBQWlCLFNBQUE7V0FDZixJQUFJLFFBQUosQ0FBYSxFQUFiO0VBRGU7O2lCQUdqQixXQUFBLEdBQWEsU0FBQTtXQUNSLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBYixHQUFpQixXQUFqQixHQUE0QixJQUFDLENBQUEsVUFBVSxDQUFDO0VBRC9COztpQkFHYixPQUFBLEdBQVMsU0FBQTtXQUNKLElBQUMsQ0FBQSxVQUFGLEdBQWEsTUFBYixHQUFtQixJQUFDLENBQUEsR0FBcEIsR0FBd0IsT0FBeEIsR0FBK0IsSUFBQyxDQUFBO0VBRDNCOztpQkFHVCxJQUFBLEdBQU0sU0FBQTtXQUNKLENBQUMsSUFBQyxDQUFBLFVBQUY7RUFESTs7aUJBR04sR0FBQSxHQUFLLFNBQUE7V0FDSCxDQUFDLElBQUMsQ0FBQSxVQUFGO0VBREc7O2lCQUdMLFFBQUEsR0FBVSxTQUFBO0FBQ1IsUUFBQTtJQUFBLElBQUEsR0FDRTtNQUFBLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBVjtNQUNBLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FEVjtNQUVBLFlBQUEsRUFBYyxJQUFDLENBQUEsVUFBVSxDQUFDLEdBRjFCO01BR0EsZ0JBQUEsRUFBa0IsSUFBQyxDQUFBLGNBSG5CO01BSUEsWUFBQSxFQUFjLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FKMUI7TUFLQSxnQkFBQSxFQUFrQixJQUFDLENBQUEsY0FMbkI7TUFNQSxVQUFBLEVBQVksSUFBQyxDQUFBLFFBQVEsQ0FBQyxRQUFWLENBQUEsQ0FOWjtNQU9BLFdBQUEsRUFBYSxJQUFDLENBQUEsU0FQZDs7SUFRRixJQUF5QyxJQUFDLENBQUEsWUFBMUM7TUFBQSxJQUFJLENBQUMsWUFBTCxHQUFvQixJQUFDLENBQUEsWUFBWSxDQUFDLElBQWxDOztXQUNBO0VBWFE7Ozs7R0E5Q3dCIn0=

},{"../utils/link-colors":685,"./graph-primitive":654,"./relationship":658}],656:[function(require,module,exports){
var Colors, GraphPrimitive, Node, SEMIQUANT_MAX, SEMIQUANT_MIN, tr, urlParams,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GraphPrimitive = require('./graph-primitive');

Colors = require('../utils/colors');

tr = require('../utils/translate');

urlParams = require('../utils/url-params');

SEMIQUANT_MIN = 0;

SEMIQUANT_MAX = 100;

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

module.exports = Node = (function(superClass) {
  extend(Node, superClass);

  Node.fields = ['title', 'image', 'color', 'paletteItem', 'initialValue', 'min', 'max', 'isAccumulator', 'allowNegativeValues', 'combineMethod', 'valueDefinedSemiQuantitatively', 'frames'];

  function Node(nodeSpec, key) {
    var accumulatorScaleUrlParam, ref, ref1, ref10, ref11, ref12, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    if (nodeSpec == null) {
      nodeSpec = {};
    }
    Node.__super__.constructor.call(this);
    if (key) {
      this.key = key;
    }
    this.links = [];
    this.x = (ref = nodeSpec.x) != null ? ref : 0, this.y = (ref1 = nodeSpec.y) != null ? ref1 : 0, this.title = (ref2 = nodeSpec.title) != null ? ref2 : tr("~NODE.UNTITLED"), this.codapID = (ref3 = nodeSpec.codapID) != null ? ref3 : null, this.codapName = (ref4 = nodeSpec.codapName) != null ? ref4 : null, this.image = nodeSpec.image, this.isAccumulator = (ref5 = nodeSpec.isAccumulator) != null ? ref5 : false, this.allowNegativeValues = (ref6 = nodeSpec.allowNegativeValues) != null ? ref6 : false, this.valueDefinedSemiQuantitatively = (ref7 = nodeSpec.valueDefinedSemiQuantitatively) != null ? ref7 : true, this.paletteItem = nodeSpec.paletteItem, this.frames = (ref8 = nodeSpec.frames) != null ? ref8 : [], this.addedThisSession = (ref9 = nodeSpec.addedThisSession) != null ? ref9 : false;
    accumulatorScaleUrlParam = (urlParams.collectorScale && Number(urlParams.collectorScale)) || 1;
    this.accumulatorInputScale = accumulatorScaleUrlParam > 0 ? accumulatorScaleUrlParam : 1;
    this._min = (ref10 = nodeSpec.min) != null ? ref10 : SEMIQUANT_MIN;
    this._max = (ref11 = nodeSpec.max) != null ? ref11 : SEMIQUANT_MAX;
    this._initialValue = (ref12 = nodeSpec.initialValue) != null ? ref12 : 50;
    if (this.color == null) {
      this.color = Colors.choices[0].value;
    }
    this.isInDependentCycle = false;
    this._collectorImageProps = null;
  }

  Node.property('initialValue', {
    get: function() {
      if (!this.valueDefinedSemiQuantitatively) {
        return this._initialValue;
      } else {
        return this.mapQuantToSemiquant(this._initialValue);
      }
    },
    set: function(val) {
      if (!this.valueDefinedSemiQuantitatively) {
        return this._initialValue = val;
      } else {
        return this._initialValue = this.mapSemiquantToQuant(val);
      }
    }
  });

  Node.property('min', {
    get: function() {
      if (!this.valueDefinedSemiQuantitatively) {
        if (this.isAccumulator && !this.allowNegativeValues) {
          return Math.max(0, this._min);
        } else {
          return this._min;
        }
      } else {
        return SEMIQUANT_MIN;
      }
    },
    set: function(val) {
      if (!this.valueDefinedSemiQuantitatively) {
        return this._min = val;
      }
    }
  });

  Node.property('max', {
    get: function() {
      if (!this.valueDefinedSemiQuantitatively) {
        return this._max;
      } else {
        return SEMIQUANT_MAX;
      }
    },
    set: function(val) {
      if (!this.valueDefinedSemiQuantitatively) {
        return this._max = val;
      }
    }
  });

  Node.prototype.type = 'Node';

  Node.prototype.isTransfer = false;

  Node.prototype.addLink = function(link) {
    if (link.sourceNode === this || link.targetNode === this) {
      if (_.contains(this.links, link)) {
        throw new Error("Duplicate link for Node:" + this.id);
      } else {
        return this.links.push(link);
      }
    } else {
      throw new Error("Bad link for Node:" + this.id);
    }
  };

  Node.prototype.removeLink = function(link) {
    if (link.sourceNode === this || link.targetNode === this) {
      return _.remove(this.links, function(testLink) {
        return testLink === link;
      });
    } else {
      throw new Error("Bad link for Node:" + this.id);
    }
  };

  Node.prototype.outLinks = function(relationType) {
    if (relationType == null) {
      relationType = null;
    }
    return _.filter(this.links, (function(_this) {
      return function(link) {
        return (link.sourceNode === _this) && (relationType === null || relationType === link.relation.type);
      };
    })(this));
  };

  Node.prototype.inLinks = function(relationType) {
    if (relationType == null) {
      relationType = null;
    }
    return _.filter(this.links, (function(_this) {
      return function(link) {
        return (link.targetNode === _this) && (relationType === null || relationType === link.relation.type);
      };
    })(this));
  };

  Node.prototype.inNodes = function() {
    return _.map(this.inLinks(), function(link) {
      return link.sourceNode;
    });
  };

  Node.prototype.isDependent = function(onlyConsiderDefinedRelations) {
    var j, len, link, ref, ref1;
    if (onlyConsiderDefinedRelations) {
      ref = this.inLinks();
      for (j = 0, len = ref.length; j < len; j++) {
        link = ref[j];
        if (link.relation && link.relation.isDefined) {
          return true;
        }
      }
      return false;
    } else {
      return ((ref1 = this.inLinks()) != null ? ref1.length : void 0) > 0;
    }
  };

  Node.prototype.checkIsInIndependentCycle = function() {
    var hasIndependentAncestor, isOwnGrandpa, original, visit, visitedNodes;
    visitedNodes = [];
    original = this;
    isOwnGrandpa = false;
    visit = function(node) {
      var j, len, link, ref, ref1, upstreamNode;
      visitedNodes.push(node);
      ref = node.inLinks();
      for (j = 0, len = ref.length; j < len; j++) {
        link = ref[j];
        if (!((ref1 = link.relation) != null ? ref1.isDefined : void 0)) {
          continue;
        }
        upstreamNode = link.sourceNode;
        if (upstreamNode.isAccumulator) {
          return true;
        }
        if (!upstreamNode.isDependent(true)) {
          return true;
        }
        if (upstreamNode === original) {
          isOwnGrandpa = true;
        }
        if (!_.contains(visitedNodes, upstreamNode)) {
          if (visit(upstreamNode)) {
            return true;
          }
        }
      }
    };
    hasIndependentAncestor = visit(this);
    return this.isInDependentCycle = !hasIndependentAncestor && isOwnGrandpa;
  };

  Node.prototype.infoString = function() {
    var link, linkNamer, outs;
    linkNamer = function(link) {
      return " --" + link.title + "-->[" + link.targetNode.title + "]";
    };
    outs = (function() {
      var j, len, ref, results;
      ref = this.outLinks();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        link = ref[j];
        results.push(linkNamer(link));
      }
      return results;
    }).call(this);
    return this.title + " " + outs;
  };

  Node.prototype.downstreamNodes = function() {
    var visit, visitedNodes;
    visitedNodes = [];
    visit = function(node) {
      log.info("visiting node: " + node.id);
      visitedNodes.push(node);
      return _.each(node.outLinks(), function(link) {
        var downstreamNode;
        downstreamNode = link.targetNode;
        if (!_.contains(visitedNodes, downstreamNode)) {
          return visit(downstreamNode);
        }
      });
    };
    visit(this);
    return _.without(visitedNodes, this);
  };

  Node.prototype.normalizeValues = function(keys) {
    if (isNaN(this.min)) {
      this.min = 0;
    }
    if (isNaN(this.max)) {
      this.max = 0;
    }
    if (_.contains(keys, "max")) {
      this.min = Math.min(this.min, this.max);
    } else {
      this.max = Math.max(this.max, this.min);
    }
    this.initialValue = Math.max(this.min, Math.min(this.max, this.initialValue));
    if (!this.isAccumulator) {
      return this._collectorImageProps = null;
    }
  };

  Node.prototype.collectorImageProps = function() {
    var col, i, j, row;
    if (!this._collectorImageProps) {
      this._collectorImageProps = [];
      for (i = j = 0; j <= 8; i = j += 2) {
        row = Math.trunc(i / 3);
        col = i - row * 3;
        this._collectorImageProps.push({
          left: Math.random() * 10 + col * 20,
          top: Math.random() * 10 + row * 20,
          rotation: Math.random() * 60 - 30
        });
      }
    }
    return this._collectorImageProps;
  };

  Node.prototype.mapQuantToSemiquant = function(val) {
    return SEMIQUANT_MIN + (val - this._min) / (this._max - this._min) * (SEMIQUANT_MAX - SEMIQUANT_MIN);
  };

  Node.prototype.mapSemiquantToQuant = function(val) {
    return this._min + (val - SEMIQUANT_MIN) / (SEMIQUANT_MAX - SEMIQUANT_MIN) * (this._max - this._min);
  };

  Node.prototype.toExport = function() {
    var result;
    result = {
      key: this.key,
      data: {
        title: this.title,
        codapName: this.codapName,
        codapID: this.codapID,
        x: this.x,
        y: this.y,
        paletteItem: this.paletteItem,
        initialValue: this.initialValue,
        min: this._min,
        max: this._max,
        isAccumulator: this.isAccumulator,
        allowNegativeValues: this.allowNegativeValues,
        valueDefinedSemiQuantitatively: this.valueDefinedSemiQuantitatively,
        frames: _.clone(this.frames)
      }
    };
    if (this.combineMethod != null) {
      result.combineMethod = this.combineMethod;
    }
    return result;
  };

  Node.prototype.canEditInitialValue = function() {
    return !this.isDependent(true) || this.isAccumulator || this.isInDependentCycle;
  };

  Node.prototype.canEditValueWhileRunning = function() {
    return !this.isDependent(true);
  };

  Node.prototype.paletteItemIs = function(paletteItem) {
    return paletteItem.uuid === this.paletteItem;
  };

  return Node;

})(GraphPrimitive);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../utils/colors":673,"../utils/translate":689,"../utils/url-params":691,"./graph-primitive":654}],657:[function(require,module,exports){
var RelationFactory, Relationship, tr;

tr = require("../utils/translate");

Relationship = require("./relationship");

module.exports = RelationFactory = (function() {
  function RelationFactory() {}

  RelationFactory.increase = {
    type: "range",
    id: "increase",
    prefixIco: "inc",
    text: "increase",
    uiText: tr("~NODE-RELATION-EDIT.INCREASES"),
    formulaFrag: "1 *",
    magnitude: 1,
    isCustomRelationship: false,
    func: function(scalarFunc) {
      return function(scope) {
        return scalarFunc(scope);
      };
    }
  };

  RelationFactory.decrease = {
    type: "range",
    id: "decrease",
    prefixIco: "dec",
    text: "decrease",
    uiText: tr("~NODE-RELATION-EDIT.DECREASES"),
    formulaFrag: "maxIn -",
    magnitude: -1,
    isCustomRelationship: false,
    func: function(scalarFunc) {
      return function(scope) {
        return scope.maxIn - scalarFunc(scope);
      };
    }
  };

  RelationFactory.vary = {
    type: "range",
    id: "vary",
    prefixIco: "var",
    text: "vary",
    uiText: tr("~NODE-RELATION-EDIT.VARIES"),
    formulaFrag: "0",
    magnitude: 1,
    isCustomRelationship: true,
    func: function(scalarFunc) {
      return function(scope) {
        return scalarFunc(scope);
      };
    }
  };

  RelationFactory.aboutTheSame = {
    type: "range",
    id: "aboutTheSame",
    text: "about the same",
    uiText: tr("~NODE-RELATION-EDIT.ABOUT_THE_SAME"),
    postfixIco: "the-same",
    formulaFrag: "in",
    magnitude: 2,
    gradual: false,
    func: function(scope) {
      return scope["in"];
    }
  };

  RelationFactory.aLot = {
    type: "range",
    id: "aLot",
    text: "a lot",
    uiText: tr("~NODE-RELATION-EDIT.A_LOT"),
    postfixIco: "a-lot",
    formulaFrag: "min(in * 2, maxOut)",
    magnitude: 4,
    gradual: false,
    func: function(scope) {
      return Math.min(scope["in"] * 2, scope.maxOut);
    }
  };

  RelationFactory.aLittle = {
    type: "range",
    id: "aLittle",
    text: "a little",
    uiText: tr("~NODE-RELATION-EDIT.A_LITTLE"),
    postfixIco: "a-little",
    formulaFrag: "(in+(maxOut/2)) / 2",
    magnitude: 1,
    gradual: false,
    func: function(scope) {
      return (scope["in"] + (scope.maxOut / 2)) / 2;
    }
  };

  RelationFactory.moreAndMore = {
    type: "range",
    id: "moreAndMore",
    text: "more and more",
    uiText: tr("~NODE-RELATION-EDIT.MORE_AND_MORE"),
    postfixIco: "more-and-more",
    formulaFrag: "min(exp(in/21.7)-1, maxOut)",
    magnitude: 2,
    gradual: 1,
    func: function(scope) {
      return Math.min(Math.exp(scope["in"] / 21.7) - 1, scope.maxOut);
    }
  };

  RelationFactory.lessAndLess = {
    type: "range",
    id: "lessAndLess",
    text: "less and less",
    uiText: tr("~NODE-RELATION-EDIT.LESS_AND_LESS"),
    postfixIco: "less-and-less",
    formulaFrag: "21.7 * log(max(1,in))",
    magnitude: 2,
    gradual: -1,
    func: function(scope) {
      return 21.7 * Math.log(Math.max(1, scope["in"]));
    }
  };

  RelationFactory.custom = {
    type: "range",
    id: "custom",
    text: "as described below:",
    uiText: tr("~NODE-RELATION-EDIT.CUSTOM"),
    postfixIco: "cus",
    formulaFrag: "",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {}
  };

  RelationFactory.added = {
    type: "accumulator",
    id: "added",
    text: tr("~NODE-RELATION-EDIT.ADDED_TO"),
    postfixIco: "added-to",
    formula: "+in",
    magnitude: 1,
    gradual: 0,
    func: function(scope) {
      return scope["in"];
    },
    forDualAccumulator: false
  };

  RelationFactory.subtracted = {
    type: "accumulator",
    id: "subtracted",
    text: tr("~NODE-RELATION-EDIT.SUBTRACTED_FROM"),
    postfixIco: "subtracted-from",
    formula: "-in",
    magnitude: -1,
    gradual: 0,
    func: function(scope) {
      return -scope["in"];
    },
    forDualAccumulator: false
  };

  RelationFactory.setInitialValue = {
    type: "initial-value",
    id: "setInitialValue",
    text: tr("~NODE-RELATION-EDIT.SETS_INITIAL"),
    postfixIco: "initial-value",
    formula: "initial-value",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {},
    forDualAccumulator: false,
    forSoloAccumulatorOnly: true,
    hideAdditionalText: true
  };

  RelationFactory.transferred = {
    type: "transfer",
    id: "transferred",
    text: tr("~NODE-RELATION-EDIT.TRANSFERRED_TO"),
    postfixIco: "transferred",
    formula: "in",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {
      return scope["in"];
    },
    forDualAccumulator: true
  };

  RelationFactory.all = {
    type: "transfer-modifier",
    id: "all",
    text: tr("~NODE-RELATION-EDIT.ALL"),
    postfixIco: "all",
    formula: "in",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {
      return scope["in"];
    }
  };

  RelationFactory.most = {
    type: "transfer-modifier",
    id: "most",
    text: tr("~NODE-RELATION-EDIT.MOST"),
    postfixIco: "most",
    formula: "in * 0.75",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {
      return scope["in"] * 0.75;
    }
  };

  RelationFactory.half = {
    type: "transfer-modifier",
    id: "half",
    text: tr("~NODE-RELATION-EDIT.HALF"),
    postfixIco: "half",
    formula: "in * 0.5",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {
      return scope["in"] * 0.5;
    }
  };

  RelationFactory.some = {
    type: "transfer-modifier",
    id: "some",
    text: tr("~NODE-RELATION-EDIT.SOME"),
    postfixIco: "some",
    formula: "in * 0.25",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {
      return scope["in"] * 0.25;
    }
  };

  RelationFactory.aLittleBit = {
    type: "transfer-modifier",
    id: "aLittleBit",
    text: tr("~NODE-RELATION-EDIT.A_LITTLE_BIT"),
    postfixIco: "a-little-bit",
    formula: "in * 0.03",
    magnitude: 0,
    gradual: 0,
    func: function(scope) {
      return scope["in"] * 0.03;
    }
  };

  RelationFactory.iconName = function(incdec, amount) {
    return "icon-" + incdec.prefixIco + "-" + amount.postfixIco;
  };

  RelationFactory.basicVectors = {
    increase: RelationFactory.increase,
    decrease: RelationFactory.decrease
  };

  RelationFactory.vectors = {
    increase: RelationFactory.increase,
    decrease: RelationFactory.decrease,
    vary: RelationFactory.vary
  };

  RelationFactory.scalars = {
    aboutTheSame: RelationFactory.aboutTheSame,
    aLot: RelationFactory.aLot,
    aLittle: RelationFactory.aLittle,
    moreAndMore: RelationFactory.moreAndMore,
    lessAndLess: RelationFactory.lessAndLess
  };

  RelationFactory.accumulators = {
    added: RelationFactory.added,
    subtracted: RelationFactory.subtracted,
    setInitialValue: RelationFactory.setInitialValue,
    transferred: RelationFactory.transferred
  };

  RelationFactory.transferModifiers = {
    all: RelationFactory.all,
    most: RelationFactory.most,
    half: RelationFactory.half,
    some: RelationFactory.some,
    aLittleBit: RelationFactory.aLittleBit
  };

  RelationFactory.CreateRelation = function(options) {
    return new Relationship(options);
  };

  RelationFactory.fromSelections = function(vector, scalar, existingData) {
    var formula, func, magnitude, name;
    if ((vector != null) && vector.isCustomRelationship) {
      scalar = this.custom;
    } else if (scalar === this.custom) {
      scalar = this.aboutTheSame;
    }
    if (scalar != null) {
      name = vector.text + " " + scalar.text;
      formula = vector.formulaFrag + " " + scalar.formulaFrag;
      func = vector.func(scalar.func);
      magnitude = vector.magnitude * scalar.magnitude;
    }
    return new Relationship({
      type: 'range',
      text: name,
      formula: formula,
      func: func,
      magnitude: magnitude,
      customData: existingData
    });
  };

  RelationFactory.selectionsFromRelation = function(relation) {
    var accumulator, gradual, magnitude, scalar, transferModifier, vector;
    vector = _.find(this.vectors, function(v) {
      return _.startsWith(relation.formula, v.formulaFrag);
    });
    scalar = _.find(this.scalars, function(s) {
      return _.endsWith(relation.formula, s.formulaFrag);
    });
    accumulator = _.find(this.accumulators, function(s) {
      return relation.formula === s.formula;
    });
    transferModifier = _.find(this.transferModifiers, function(s) {
      return relation.formula === s.formula;
    });
    if (vector != null) {
      if (vector.isCustomRelationship) {
        scalar = this.custom;
      } else if (scalar === this.custom) {
        scalar = void 0;
      }
    }
    magnitude = 0;
    gradual = 0;
    if (vector && scalar) {
      magnitude = vector.magnitude * scalar.magnitude;
      gradual = scalar.gradual;
    } else if (accumulator || transferModifier) {
      magnitude = (accumulator || transferModifier).magnitude;
    }
    return {
      vector: vector,
      scalar: scalar,
      accumulator: accumulator,
      transferModifier: transferModifier,
      magnitude: magnitude,
      gradual: gradual
    };
  };

  RelationFactory.thicknessFromRelation = function(relation) {
    var dt;
    dt = 1;
    switch (relation.formula) {
      case this.all.formula:
        return 1 + 4 * dt;
      case this.most.formula:
        return 1 + 3 * dt;
      case this.half.formula:
        return 1 + 2 * dt;
      case this.some.formula:
        return 1 + 1 * dt;
      case this.aLittleBit.formula:
        return 1;
      default:
        return 1;
    }
  };

  return RelationFactory;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../utils/translate":689,"./relationship":658}],658:[function(require,module,exports){
var Relationship, math, tr;

math = require('mathjs');

tr = require("../utils/translate");

module.exports = Relationship = (function() {
  Relationship.errValue = -1;

  Relationship.defaultFunc = function(scope) {
    return scope["in"];
  };

  Relationship.defaultErrHandler = function(error, expr, vars) {
    log.error("Error in eval: " + Error);
    log.error("Expression:    " + expr);
    return log.error("vars=" + vars);
  };

  function Relationship(opts) {
    var formula;
    this.opts = opts != null ? opts : {};
    this.type = this.opts.type || "range";
    this.text = this.opts.text;
    this.uiText = this.opts.uiText;
    formula = this.opts.formula;
    this.func = this.opts.func;
    this.errHandler = this.opts.errHandler || Relationship.defaultErrHandler;
    this.isDefined = (this.opts.formula != null) || (this.opts.func != null);
    this.isRange = this.type === "range";
    this.isAccumulator = this.type === "accumulator";
    this.isTransfer = this.type === "transfer";
    this.isTransferModifier = this.type === "transfer-modifier";
    this.hasError = false;
    this.setFormula(formula);
    this.dataPoints;
    this.customData = this.opts.customData;
    this.isCustomRelationship = false;
  }

  Relationship.prototype.setFormula = function(newf) {
    this.formula = newf;
    return this.checkFormula();
  };

  Relationship.prototype.checkFormula = function() {
    if (this.isDefined) {
      this.evaluate(1, 1);
      if (!this.hasError && (this.func == null)) {
        return this.func = (math.compile(this.formula))["eval"];
      }
    }
  };

  Relationship.prototype.evaluate = function(inV, outV, maxIn, maxOut) {
    var error, result, roundedInV, scope;
    if (maxIn == null) {
      maxIn = 100;
    }
    if (maxOut == null) {
      maxOut = 100;
    }
    result = Relationship.errValue;
    scope = {
      "in": inV,
      out: outV,
      maxIn: maxIn,
      maxOut: maxOut
    };
    if (this.customData) {
      roundedInV = Math.round(inV);
      if (roundedInV > (maxIn - 1)) {
        roundedInV = maxIn - 1;
      }
      if (!this.dataPoints) {
        this.updateCustomData(this.customdata);
      }
      if (this.dataPoints[roundedInV] != null) {
        result = this.dataPoints[roundedInV].y;
      } else {
        result = 0;
      }
    } else if (this.func) {
      result = this.func(scope);
    } else {
      try {
        result = math["eval"](this.formula, scope);
      } catch (error1) {
        error = error1;
        this.hasError = true;
        this.errHandler(error, this.formula, inV, outV);
      }
    }
    return result;
  };

  Relationship.prototype.updateCustomData = function(source) {
    var points;
    if (source != null) {
      this.customData = source;
    }
    points = _.map(this.customData, function(point) {
      var x, y;
      x = _.first(point);
      y = _.last(point);
      return {
        y: y,
        x: x
      };
    });
    return this.dataPoints = _.indexBy(points, 'x');
  };

  Relationship.prototype.toExport = function() {
    return {
      type: this.type,
      text: this.text,
      formula: this.formula,
      customData: this.customData
    };
  };

  return Relationship;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbW9kZWxzL3JlbGF0aW9uc2hpcC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9tb2RlbHMvcmVsYXRpb25zaGlwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsUUFBUjs7QUFDUCxFQUFBLEdBQU8sT0FBQSxDQUFRLG9CQUFSOztBQUVQLE1BQU0sQ0FBQyxPQUFQLEdBQXVCO0VBRXJCLFlBQUMsQ0FBQSxRQUFELEdBQW9CLENBQUM7O0VBQ3JCLFlBQUMsQ0FBQSxXQUFELEdBQWMsU0FBQyxLQUFEO1dBQ1osS0FBSyxFQUFDLEVBQUQ7RUFETzs7RUFJZCxZQUFDLENBQUEsaUJBQUQsR0FBb0IsU0FBQyxLQUFELEVBQU8sSUFBUCxFQUFZLElBQVo7SUFDbEIsR0FBRyxDQUFDLEtBQUosQ0FBVSxpQkFBQSxHQUFrQixLQUE1QjtJQUNBLEdBQUcsQ0FBQyxLQUFKLENBQVUsaUJBQUEsR0FBa0IsSUFBNUI7V0FDQSxHQUFHLENBQUMsS0FBSixDQUFVLE9BQUEsR0FBUSxJQUFsQjtFQUhrQjs7RUFLUCxzQkFBQyxJQUFEO0FBQ1gsUUFBQTtJQURZLElBQUMsQ0FBQSxzQkFBRCxPQUFNO0lBQ2xCLElBQUMsQ0FBQSxJQUFELEdBQWUsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLElBQWM7SUFDN0IsSUFBQyxDQUFBLElBQUQsR0FBZSxJQUFDLENBQUEsSUFBSSxDQUFDO0lBQ3JCLElBQUMsQ0FBQSxNQUFELEdBQWUsSUFBQyxDQUFBLElBQUksQ0FBQztJQUNyQixPQUFBLEdBQWUsSUFBQyxDQUFBLElBQUksQ0FBQztJQUNyQixJQUFDLENBQUEsSUFBRCxHQUFlLElBQUMsQ0FBQSxJQUFJLENBQUM7SUFDckIsSUFBQyxDQUFBLFVBQUQsR0FBZSxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQU4sSUFBb0IsWUFBWSxDQUFDO0lBQ2hELElBQUMsQ0FBQSxTQUFELEdBQWUsMkJBQUEsSUFBa0I7SUFDakMsSUFBQyxDQUFBLE9BQUQsR0FBaUIsSUFBQyxDQUFBLElBQUQsS0FBUztJQUMxQixJQUFDLENBQUEsYUFBRCxHQUFpQixJQUFDLENBQUEsSUFBRCxLQUFTO0lBQzFCLElBQUMsQ0FBQSxVQUFELEdBQWlCLElBQUMsQ0FBQSxJQUFELEtBQVM7SUFDMUIsSUFBQyxDQUFBLGtCQUFELEdBQXNCLElBQUMsQ0FBQSxJQUFELEtBQVM7SUFDL0IsSUFBQyxDQUFBLFFBQUQsR0FBZTtJQUNmLElBQUMsQ0FBQSxVQUFELENBQVksT0FBWjtJQUNBLElBQUMsQ0FBQTtJQUNELElBQUMsQ0FBQSxVQUFELEdBQWUsSUFBQyxDQUFBLElBQUksQ0FBQztJQUNyQixJQUFDLENBQUEsb0JBQUQsR0FBd0I7RUFoQmI7O3lCQWtCYixVQUFBLEdBQVksU0FBQyxJQUFEO0lBQ1YsSUFBQyxDQUFBLE9BQUQsR0FBVztXQUNYLElBQUMsQ0FBQSxZQUFELENBQUE7RUFGVTs7eUJBSVosWUFBQSxHQUFjLFNBQUE7SUFDWixJQUFHLElBQUMsQ0FBQSxTQUFKO01BQ0UsSUFBQyxDQUFBLFFBQUQsQ0FBVSxDQUFWLEVBQWEsQ0FBYjtNQUNBLElBQUcsQ0FBSSxJQUFDLENBQUEsUUFBTCxJQUFzQixtQkFBekI7ZUFDRSxJQUFDLENBQUEsSUFBRCxHQUFRLENBQUMsSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFDLENBQUEsT0FBZCxDQUFELENBQXVCLEVBQUMsSUFBRCxHQURqQztPQUZGOztFQURZOzt5QkFNZCxRQUFBLEdBQVUsU0FBQyxHQUFELEVBQUssSUFBTCxFQUFXLEtBQVgsRUFBc0IsTUFBdEI7QUFDUixRQUFBOztNQURtQixRQUFNOzs7TUFBSyxTQUFPOztJQUNyQyxNQUFBLEdBQVMsWUFBWSxDQUFDO0lBQ3RCLEtBQUEsR0FDRTtNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUksR0FBSjtNQUNBLEdBQUEsRUFBSyxJQURMO01BRUEsS0FBQSxFQUFPLEtBRlA7TUFHQSxNQUFBLEVBQVEsTUFIUjs7SUFJRixJQUFHLElBQUMsQ0FBQSxVQUFKO01BQ0UsVUFBQSxHQUFhLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBWDtNQUNiLElBQUcsVUFBQSxHQUFhLENBQUMsS0FBQSxHQUFNLENBQVAsQ0FBaEI7UUFDRSxVQUFBLEdBQWMsS0FBQSxHQUFNLEVBRHRCOztNQUVBLElBQUcsQ0FBSSxJQUFDLENBQUEsVUFBUjtRQUF3QixJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBQyxDQUFBLFVBQW5CLEVBQXhCOztNQUNBLElBQUcsbUNBQUg7UUFDRSxNQUFBLEdBQVMsSUFBQyxDQUFBLFVBQVcsQ0FBQSxVQUFBLENBQVcsQ0FBQyxFQURuQztPQUFBLE1BQUE7UUFFSyxNQUFBLEdBQVMsRUFGZDtPQUxGO0tBQUEsTUFRSyxJQUFHLElBQUMsQ0FBQSxJQUFKO01BQ0gsTUFBQSxHQUFTLElBQUMsQ0FBQSxJQUFELENBQU0sS0FBTixFQUROO0tBQUEsTUFBQTtBQUdIO1FBQ0UsTUFBQSxHQUFTLElBQUksRUFBQyxJQUFELEVBQUosQ0FBVSxJQUFDLENBQUEsT0FBWCxFQUFvQixLQUFwQixFQURYO09BQUEsY0FBQTtRQUVNO1FBQ0osSUFBQyxDQUFBLFFBQUQsR0FBWTtRQUNaLElBQUMsQ0FBQSxVQUFELENBQVksS0FBWixFQUFtQixJQUFDLENBQUEsT0FBcEIsRUFBNkIsR0FBN0IsRUFBa0MsSUFBbEMsRUFKRjtPQUhHOztXQVFMO0VBdkJROzt5QkF5QlYsZ0JBQUEsR0FBa0IsU0FBQyxNQUFEO0FBQ2hCLFFBQUE7SUFBQSxJQUFHLGNBQUg7TUFDRSxJQUFDLENBQUEsVUFBRCxHQUFjLE9BRGhCOztJQUdBLE1BQUEsR0FBUyxDQUFDLENBQUMsR0FBRixDQUFNLElBQUMsQ0FBQSxVQUFQLEVBQW1CLFNBQUMsS0FBRDtBQUMxQixVQUFBO01BQUEsQ0FBQSxHQUFJLENBQUMsQ0FBQyxLQUFGLENBQVEsS0FBUjtNQUNKLENBQUEsR0FBSSxDQUFDLENBQUMsSUFBRixDQUFPLEtBQVA7YUFDSjtRQUFFLENBQUEsRUFBRyxDQUFMO1FBQVEsQ0FBQSxFQUFHLENBQVg7O0lBSDBCLENBQW5CO1dBSVQsSUFBQyxDQUFBLFVBQUQsR0FBYyxDQUFDLENBQUMsT0FBRixDQUFVLE1BQVYsRUFBa0IsR0FBbEI7RUFSRTs7eUJBVWxCLFFBQUEsR0FBVSxTQUFBO1dBQ1I7TUFBQSxJQUFBLEVBQWMsSUFBQyxDQUFBLElBQWY7TUFDQSxJQUFBLEVBQWMsSUFBQyxDQUFBLElBRGY7TUFFQSxPQUFBLEVBQWMsSUFBQyxDQUFBLE9BRmY7TUFHQSxVQUFBLEVBQWMsSUFBQyxDQUFBLFVBSGY7O0VBRFEifQ==

},{"../utils/translate":689,"mathjs":20}],659:[function(require,module,exports){
var DiagramNode, Importer, Link, SelectionManager, tr;

Importer = require('../utils/importer');

Link = require('./link');

DiagramNode = require('./node');

tr = require("../utils/translate");

module.exports = SelectionManager = (function() {
  SelectionManager.NodeTitleEditing = "NodeTitleEditing";

  SelectionManager.NodeInspection = "NodeInspection";

  SelectionManager.LinkTitleEditing = "LinkTitleEditing";

  SelectionManager.LinkInspection = "LinkInspection";

  function SelectionManager() {
    this.selections = [];
    this.selectionListeners = [];
  }

  SelectionManager.prototype.addSelectionListener = function(listener) {
    log.info("adding selection listener " + listener);
    return this.selectionListeners.push(listener);
  };

  SelectionManager.prototype._notifySelectionChange = function() {
    var i, len, listener, ref, results;
    log.info("notifiying listeners");
    ref = this.selectionListeners;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      listener = ref[i];
      results.push(listener(this));
    }
    return results;
  };

  SelectionManager.prototype.addToSelection = function(graphprimitive, context) {
    var entry;
    entry = {
      graphprimitive: graphprimitive,
      context: context,
      key: graphprimitive.key
    };
    if (!this.isSelected(graphprimitive, context)) {
      return this.selections.push(entry);
    }
  };

  SelectionManager.prototype.selectOnly = function(graphprimitive, context, multipleSelectionsAllowed) {
    if (!this.isSelected(graphprimitive, context)) {
      if (!multipleSelectionsAllowed) {
        this._clearSelection(context);
      }
      return this.addToSelection(graphprimitive, context);
    }
  };

  SelectionManager.prototype.selection = function(context) {
    var where;
    where = {};
    if (context) {
      where.context = context;
    }
    return _.chain(this.selections).where(where).map(function(obj) {
      return obj.graphprimitive;
    }).value();
  };

  SelectionManager.prototype._clearSelection = function(context) {
    if (context == null) {
      context = null;
    }
    this._deselect({
      context: context
    });
    return this._notifySelectionChange();
  };

  SelectionManager.prototype.clearSelection = function(context) {
    if (context == null) {
      context = null;
    }
    this._clearSelection(context);
    return this._notifySelectionChange();
  };

  SelectionManager.prototype.clearLinkInspection = function() {
    return this._clearSelection(SelectionManager.LinkInspection);
  };

  SelectionManager.prototype.clearSelectionFor = function(graphprimitive, context) {
    if (context == null) {
      context = null;
    }
    return this._deselect({
      key: graphprimitive.key,
      context: context
    });
  };

  SelectionManager.prototype.isSelected = function(graphprimitive, context) {
    var found, where;
    where = {
      key: graphprimitive.key
    };
    if (context) {
      where.context = context;
    }
    found = _.chain(this.selections).where(where).value();
    return found.length > 0;
  };

  SelectionManager.prototype.selectNodeForTitleEditing = function(graphprimitive) {
    this._selectForTitleEditing(graphprimitive, SelectionManager.NodeTitleEditing);
    this._clearSelection(SelectionManager.LinkTitleEditing);
    return this._notifySelectionChange();
  };

  SelectionManager.prototype.selectLinkForTitleEditing = function(graphprimitive) {
    this._selectForTitleEditing(graphprimitive, SelectionManager.LinkTitleEditing);
    this._clearSelection(SelectionManager.NodeTitleEditing);
    return this._notifySelectionChange();
  };

  SelectionManager.prototype._selectForTitleEditing = function(graphprimitive, context) {
    this.selectOnly(graphprimitive, context);
    if (!this.isSelectedForInspection(graphprimitive)) {
      return this.clearInspection();
    }
  };

  SelectionManager.prototype.clearInspection = function() {
    this.clearNodeInspection();
    return this.clearLinkInspection();
  };

  SelectionManager.prototype.clearTitleEditing = function() {
    this._clearSelection(SelectionManager.NodeTitleEditing);
    return this._clearSelection(SelectionManager.LinkTitleEditing);
  };

  SelectionManager.prototype.isSelectedForTitleEditing = function(graphprimitive) {
    return this.isSelected(graphprimitive, SelectionManager.NodeTitleEditing) || this.isSelected(graphprimitive, SelectionManager.LinkTitleEditing);
  };

  SelectionManager.prototype.getNodeTitleEditing = function() {
    return this.selection(SelectionManager.NodeTitleEditing);
  };

  SelectionManager.prototype.selectNodeForInspection = function(graphprimitive, multipleSelectionsAllowed) {
    this.selectOnly(graphprimitive, SelectionManager.NodeInspection, multipleSelectionsAllowed);
    if (!multipleSelectionsAllowed) {
      this.clearLinkInspection();
    }
    if (!this.isSelectedForTitleEditing(graphprimitive)) {
      this.clearTitleEditing();
    }
    return this._notifySelectionChange();
  };

  SelectionManager.prototype.clearNodeInspection = function() {
    return this._clearSelection(SelectionManager.NodeInspection);
  };

  SelectionManager.prototype.isSelectedForInspection = function(graphprimitive) {
    return this.isSelected(graphprimitive, SelectionManager.NodeInspection) || this.isSelected(graphprimitive, SelectionManager.LinkInspection);
  };

  SelectionManager.prototype.getNodeInspection = function() {
    return this.selection(SelectionManager.NodeInspection);
  };

  SelectionManager.prototype.getLinkInspection = function() {
    return this.selection(SelectionManager.LinkInspection);
  };

  SelectionManager.prototype.getLinkTitleEditing = function() {
    return this.selection(SelectionManager.LinkTitleEditing);
  };

  SelectionManager.prototype.selectLinkForInspection = function(graphprimitive, multipleSelectionsAllowed) {
    this.selectOnly(graphprimitive, SelectionManager.LinkInspection, multipleSelectionsAllowed);
    if (!multipleSelectionsAllowed) {
      this.clearNodeInspection();
    }
    if (!this.isSelectedForTitleEditing(graphprimitive)) {
      this.clearTitleEditing();
    }
    return this._notifySelectionChange();
  };

  SelectionManager.prototype._deselect = function(opts) {
    var pickNonEmpty, removeCritereon;
    pickNonEmpty = _.partial(_.pick, _, _.identity);
    removeCritereon = pickNonEmpty(opts);
    log.info(removeCritereon);
    if (removeCritereon.context || removeCritereon.key) {
      log.info("removing " + removeCritereon.key);
      log.info("in collection " + (_.pluck(this.selections, 'key')));
      _.remove(this.selections, removeCritereon);
      return log.info("in collection " + (_.pluck(this.selections, 'key')));
    } else {
      return this.selections = [];
    }
  };

  return SelectionManager;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbW9kZWxzL3NlbGVjdGlvbi1tYW5hZ2VyLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL21vZGVscy9zZWxlY3Rpb24tbWFuYWdlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxRQUFBLEdBQWMsT0FBQSxDQUFRLG1CQUFSOztBQUNkLElBQUEsR0FBYyxPQUFBLENBQVEsUUFBUjs7QUFDZCxXQUFBLEdBQWMsT0FBQSxDQUFRLFFBQVI7O0FBQ2QsRUFBQSxHQUFjLE9BQUEsQ0FBUSxvQkFBUjs7QUFHZCxNQUFNLENBQUMsT0FBUCxHQUF1QjtFQUNyQixnQkFBQyxDQUFBLGdCQUFELEdBQXNCOztFQUN0QixnQkFBQyxDQUFBLGNBQUQsR0FBc0I7O0VBQ3RCLGdCQUFDLENBQUEsZ0JBQUQsR0FBc0I7O0VBQ3RCLGdCQUFDLENBQUEsY0FBRCxHQUFzQjs7RUFFVCwwQkFBQTtJQUNYLElBQUMsQ0FBQSxVQUFELEdBQWM7SUFDZCxJQUFDLENBQUEsa0JBQUQsR0FBc0I7RUFGWDs7NkJBSWIsb0JBQUEsR0FBc0IsU0FBQyxRQUFEO0lBQ3BCLEdBQUcsQ0FBQyxJQUFKLENBQVMsNEJBQUEsR0FBNkIsUUFBdEM7V0FDQSxJQUFDLENBQUEsa0JBQWtCLENBQUMsSUFBcEIsQ0FBeUIsUUFBekI7RUFGb0I7OzZCQUt0QixzQkFBQSxHQUF3QixTQUFBO0FBQ3RCLFFBQUE7SUFBQSxHQUFHLENBQUMsSUFBSixDQUFTLHNCQUFUO0FBQ0E7QUFBQTtTQUFBLHFDQUFBOzttQkFDRSxRQUFBLENBQVMsSUFBVDtBQURGOztFQUZzQjs7NkJBS3hCLGNBQUEsR0FBZ0IsU0FBQyxjQUFELEVBQWlCLE9BQWpCO0FBQ2QsUUFBQTtJQUFBLEtBQUEsR0FBUTtNQUFDLGNBQUEsRUFBZ0IsY0FBakI7TUFBaUMsT0FBQSxFQUFTLE9BQTFDO01BQW1ELEdBQUEsRUFBSyxjQUFjLENBQUMsR0FBdkU7O0lBQ1IsSUFBQSxDQUFPLElBQUMsQ0FBQSxVQUFELENBQVksY0FBWixFQUE0QixPQUE1QixDQUFQO2FBQ0UsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLEtBQWpCLEVBREY7O0VBRmM7OzZCQUtoQixVQUFBLEdBQVksU0FBQyxjQUFELEVBQWlCLE9BQWpCLEVBQTBCLHlCQUExQjtJQUNWLElBQUEsQ0FBTyxJQUFDLENBQUEsVUFBRCxDQUFZLGNBQVosRUFBNEIsT0FBNUIsQ0FBUDtNQUNFLElBQUEsQ0FBaUMseUJBQWpDO1FBQUEsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsT0FBakIsRUFBQTs7YUFDQSxJQUFDLENBQUEsY0FBRCxDQUFnQixjQUFoQixFQUFnQyxPQUFoQyxFQUZGOztFQURVOzs2QkFLWixTQUFBLEdBQVcsU0FBQyxPQUFEO0FBQ1QsUUFBQTtJQUFBLEtBQUEsR0FBUTtJQUNSLElBQTJCLE9BQTNCO01BQUEsS0FBSyxDQUFDLE9BQU4sR0FBZ0IsUUFBaEI7O1dBQ0EsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsVUFBVCxDQUNBLENBQUMsS0FERCxDQUNPLEtBRFAsQ0FFQSxDQUFDLEdBRkQsQ0FFSyxTQUFDLEdBQUQ7YUFDSCxHQUFHLENBQUM7SUFERCxDQUZMLENBSUEsQ0FBQyxLQUpELENBQUE7RUFIUzs7NkJBU1gsZUFBQSxHQUFpQixTQUFDLE9BQUQ7O01BQUMsVUFBUTs7SUFDeEIsSUFBQyxDQUFBLFNBQUQsQ0FBVztNQUFDLE9BQUEsRUFBUSxPQUFUO0tBQVg7V0FDQSxJQUFDLENBQUEsc0JBQUQsQ0FBQTtFQUZlOzs2QkFJakIsY0FBQSxHQUFnQixTQUFDLE9BQUQ7O01BQUMsVUFBUTs7SUFDdkIsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsT0FBakI7V0FDQSxJQUFDLENBQUEsc0JBQUQsQ0FBQTtFQUZjOzs2QkFJaEIsbUJBQUEsR0FBcUIsU0FBQTtXQUNuQixJQUFDLENBQUEsZUFBRCxDQUFpQixnQkFBZ0IsQ0FBQyxjQUFsQztFQURtQjs7NkJBR3JCLGlCQUFBLEdBQWtCLFNBQUMsY0FBRCxFQUFpQixPQUFqQjs7TUFBaUIsVUFBUTs7V0FDekMsSUFBQyxDQUFBLFNBQUQsQ0FBVztNQUFDLEdBQUEsRUFBSSxjQUFjLENBQUMsR0FBcEI7TUFBeUIsT0FBQSxFQUFRLE9BQWpDO0tBQVg7RUFEZ0I7OzZCQUdsQixVQUFBLEdBQVksU0FBQyxjQUFELEVBQWlCLE9BQWpCO0FBQ1YsUUFBQTtJQUFBLEtBQUEsR0FBUTtNQUFDLEdBQUEsRUFBSyxjQUFjLENBQUMsR0FBckI7O0lBQ1IsSUFBMkIsT0FBM0I7TUFBQSxLQUFLLENBQUMsT0FBTixHQUFnQixRQUFoQjs7SUFDQSxLQUFBLEdBQVEsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsVUFBVCxDQUNSLENBQUMsS0FETyxDQUNELEtBREMsQ0FFUixDQUFDLEtBRk8sQ0FBQTtXQUdSLEtBQUssQ0FBQyxNQUFOLEdBQWU7RUFOTDs7NkJBUVoseUJBQUEsR0FBMkIsU0FBQyxjQUFEO0lBQ3pCLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixjQUF4QixFQUF3QyxnQkFBZ0IsQ0FBQyxnQkFBekQ7SUFDQSxJQUFDLENBQUEsZUFBRCxDQUFpQixnQkFBZ0IsQ0FBQyxnQkFBbEM7V0FDQSxJQUFDLENBQUEsc0JBQUQsQ0FBQTtFQUh5Qjs7NkJBSzNCLHlCQUFBLEdBQTJCLFNBQUMsY0FBRDtJQUN6QixJQUFDLENBQUEsc0JBQUQsQ0FBd0IsY0FBeEIsRUFBd0MsZ0JBQWdCLENBQUMsZ0JBQXpEO0lBQ0EsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsZ0JBQWdCLENBQUMsZ0JBQWxDO1dBQ0EsSUFBQyxDQUFBLHNCQUFELENBQUE7RUFIeUI7OzZCQUszQixzQkFBQSxHQUF3QixTQUFDLGNBQUQsRUFBaUIsT0FBakI7SUFDdEIsSUFBQyxDQUFBLFVBQUQsQ0FBWSxjQUFaLEVBQTRCLE9BQTVCO0lBRUEsSUFBQSxDQUFPLElBQUMsQ0FBQSx1QkFBRCxDQUF5QixjQUF6QixDQUFQO2FBQ0UsSUFBQyxDQUFBLGVBQUQsQ0FBQSxFQURGOztFQUhzQjs7NkJBTXhCLGVBQUEsR0FBaUIsU0FBQTtJQUNmLElBQUMsQ0FBQSxtQkFBRCxDQUFBO1dBQ0EsSUFBQyxDQUFBLG1CQUFELENBQUE7RUFGZTs7NkJBSWpCLGlCQUFBLEdBQW1CLFNBQUE7SUFDakIsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsZ0JBQWdCLENBQUMsZ0JBQWxDO1dBQ0EsSUFBQyxDQUFBLGVBQUQsQ0FBaUIsZ0JBQWdCLENBQUMsZ0JBQWxDO0VBRmlCOzs2QkFJbkIseUJBQUEsR0FBMkIsU0FBQyxjQUFEO1dBQ3pCLElBQUMsQ0FBQSxVQUFELENBQVksY0FBWixFQUEyQixnQkFBZ0IsQ0FBQyxnQkFBNUMsQ0FBQSxJQUNFLElBQUMsQ0FBQSxVQUFELENBQVksY0FBWixFQUEyQixnQkFBZ0IsQ0FBQyxnQkFBNUM7RUFGdUI7OzZCQUkzQixtQkFBQSxHQUFxQixTQUFBO1dBQ25CLElBQUMsQ0FBQSxTQUFELENBQVcsZ0JBQWdCLENBQUMsZ0JBQTVCO0VBRG1COzs2QkFHckIsdUJBQUEsR0FBeUIsU0FBQyxjQUFELEVBQWlCLHlCQUFqQjtJQUV2QixJQUFDLENBQUEsVUFBRCxDQUFZLGNBQVosRUFBNEIsZ0JBQWdCLENBQUMsY0FBN0MsRUFBNkQseUJBQTdEO0lBQ0EsSUFBQSxDQUE4Qix5QkFBOUI7TUFBQSxJQUFDLENBQUEsbUJBQUQsQ0FBQSxFQUFBOztJQUdBLElBQUEsQ0FBTyxJQUFDLENBQUEseUJBQUQsQ0FBMkIsY0FBM0IsQ0FBUDtNQUNFLElBQUMsQ0FBQSxpQkFBRCxDQUFBLEVBREY7O1dBR0EsSUFBQyxDQUFBLHNCQUFELENBQUE7RUFUdUI7OzZCQVd6QixtQkFBQSxHQUFxQixTQUFBO1dBQ25CLElBQUMsQ0FBQSxlQUFELENBQWlCLGdCQUFnQixDQUFDLGNBQWxDO0VBRG1COzs2QkFHckIsdUJBQUEsR0FBeUIsU0FBQyxjQUFEO1dBQ3ZCLElBQUMsQ0FBQSxVQUFELENBQVksY0FBWixFQUEyQixnQkFBZ0IsQ0FBQyxjQUE1QyxDQUFBLElBQ0UsSUFBQyxDQUFBLFVBQUQsQ0FBWSxjQUFaLEVBQTJCLGdCQUFnQixDQUFDLGNBQTVDO0VBRnFCOzs2QkFJekIsaUJBQUEsR0FBbUIsU0FBQTtXQUNqQixJQUFDLENBQUEsU0FBRCxDQUFXLGdCQUFnQixDQUFDLGNBQTVCO0VBRGlCOzs2QkFHbkIsaUJBQUEsR0FBbUIsU0FBQTtXQUNqQixJQUFDLENBQUEsU0FBRCxDQUFXLGdCQUFnQixDQUFDLGNBQTVCO0VBRGlCOzs2QkFHbkIsbUJBQUEsR0FBcUIsU0FBQTtXQUNuQixJQUFDLENBQUEsU0FBRCxDQUFXLGdCQUFnQixDQUFDLGdCQUE1QjtFQURtQjs7NkJBR3JCLHVCQUFBLEdBQXlCLFNBQUMsY0FBRCxFQUFpQix5QkFBakI7SUFDdkIsSUFBQyxDQUFBLFVBQUQsQ0FBWSxjQUFaLEVBQTRCLGdCQUFnQixDQUFDLGNBQTdDLEVBQTZELHlCQUE3RDtJQUNBLElBQUEsQ0FBOEIseUJBQTlCO01BQUEsSUFBQyxDQUFBLG1CQUFELENBQUEsRUFBQTs7SUFHQSxJQUFBLENBQU8sSUFBQyxDQUFBLHlCQUFELENBQTJCLGNBQTNCLENBQVA7TUFDRSxJQUFDLENBQUEsaUJBQUQsQ0FBQSxFQURGOztXQUdBLElBQUMsQ0FBQSxzQkFBRCxDQUFBO0VBUnVCOzs2QkFVekIsU0FBQSxHQUFXLFNBQUMsSUFBRDtBQUNULFFBQUE7SUFBQSxZQUFBLEdBQWtCLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLElBQVosRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBQyxDQUFDLFFBQXZCO0lBQ2xCLGVBQUEsR0FBa0IsWUFBQSxDQUFhLElBQWI7SUFDbEIsR0FBRyxDQUFDLElBQUosQ0FBUyxlQUFUO0lBQ0EsSUFBRyxlQUFlLENBQUMsT0FBaEIsSUFBMkIsZUFBZSxDQUFDLEdBQTlDO01BQ0UsR0FBRyxDQUFDLElBQUosQ0FBUyxXQUFBLEdBQVksZUFBZSxDQUFDLEdBQXJDO01BQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxnQkFBQSxHQUFnQixDQUFDLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBQyxDQUFBLFVBQVQsRUFBcUIsS0FBckIsQ0FBRCxDQUF6QjtNQUNBLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBQyxDQUFBLFVBQVYsRUFBc0IsZUFBdEI7YUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLGdCQUFBLEdBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsVUFBVCxFQUFxQixLQUFyQixDQUFELENBQXpCLEVBSkY7S0FBQSxNQUFBO2FBTUUsSUFBQyxDQUFBLFVBQUQsR0FBYyxHQU5oQjs7RUFKUyJ9

},{"../utils/importer":679,"../utils/translate":689,"./link":655,"./node":656}],660:[function(require,module,exports){
var RangeIntegrationFunction, SetAccumulatorValueFunction, SetInitialAccumulatorValueFunction, Simulation, combineInputs, filterFinalValue, getTransferLimit, isScaledTransferNode, isUnscaledTransferNode, scaleInput;

isScaledTransferNode = function(node) {
  var ref, ref1, sourceNode, targetNode;
  if (!node.isTransfer) {
    return false;
  }
  if (node.inLinks('transfer-modifier').length) {
    return false;
  }
  sourceNode = (ref = node.transferLink) != null ? ref.sourceNode : void 0;
  targetNode = (ref1 = node.transferLink) != null ? ref1.targetNode : void 0;
  return !(sourceNode != null ? sourceNode.inLinks().length : void 0) && !((targetNode != null ? targetNode.inLinks().length : void 0) > 1);
};

isUnscaledTransferNode = function(node) {
  return node.isTransfer && !isScaledTransferNode(node);
};

scaleInput = function(val, nodeIn, nodeOut) {
  if (nodeIn.valueDefinedSemiQuantitatively !== nodeOut.valueDefinedSemiQuantitatively) {
    if (nodeIn.valueDefinedSemiQuantitatively) {
      return nodeOut.mapSemiquantToQuant(val);
    } else {
      return nodeIn.mapQuantToSemiquant(val);
    }
  } else {
    return val;
  }
};

combineInputs = function(inValues, useScaledProduct) {
  var denominator, numerator;
  if (!(inValues != null ? inValues.length : void 0)) {
    return null;
  }
  if (inValues.length === 1) {
    return inValues[0];
  }
  if (useScaledProduct) {
    numerator = _.reduce(inValues, (function(prod, value) {
      return prod * value;
    }), 1);
    denominator = Math.pow(100, inValues.length - 1);
  } else {
    numerator = _.reduce(inValues, (function(sum, value) {
      return sum + value;
    }), 0);
    denominator = inValues.length;
  }
  return numerator / denominator;
};

getTransferLimit = function(transferNode) {
  var ref, sourceNode;
  sourceNode = transferNode != null ? transferNode.transferLink.sourceNode : void 0;
  if (sourceNode) {
    return (ref = sourceNode.previousValue) != null ? ref : sourceNode.initialValue;
  } else {
    return 0;
  }
};

filterFinalValue = function(value) {
  var shouldLimitMinValue;
  value = this.capNodeValues ? Math.min(this.max, value) : value;
  shouldLimitMinValue = this.capNodeValues || (this.isAccumulator && !this.allowNegativeValues);
  if (shouldLimitMinValue) {
    return Math.max(this.min, value);
  } else {
    return value;
  }
};

RangeIntegrationFunction = function(incrementAccumulators) {
  var inValues, links, ref, startValue, useScaledProduct, value;
  if (this.currentValue != null) {
    return this.currentValue;
  }
  startValue = (ref = this.previousValue) != null ? ref : this.initialValue;
  if (this.isAccumulator && !incrementAccumulators) {
    return startValue;
  }
  links = this.inLinks('range').concat(this.inLinks('transfer-modifier'));
  inValues = [];
  _.each(links, (function(_this) {
    return function(link) {
      var inV, outV, ref1, sourceNode;
      if (!link.relation.isDefined) {
        return;
      }
      sourceNode = link.sourceNode;
      inV = (ref1 = sourceNode.previousValue) != null ? ref1 : sourceNode.initialValue;
      inV = scaleInput(inV, sourceNode, _this);
      outV = startValue;
      return inValues.push(link.relation.evaluate(inV, outV, link.sourceNode.max, _this.max));
    };
  })(this));
  useScaledProduct = this.combineMethod != null ? this.combineMethod === 'product' : this.isTransfer || !!(_.find(this.outLinks(), function(link) {
    return link.targetNode.isAccumulator;
  }));
  value = inValues.length ? combineInputs(inValues, useScaledProduct) : startValue;
  if (this.capNodeValues && isUnscaledTransferNode(this)) {
    value = Math.min(value, getTransferLimit(this));
  }
  value = this.filterFinalValue(value);
  return value;
};

SetInitialAccumulatorValueFunction = function() {
  var inValues, initialValueLinks;
  initialValueLinks = this.inLinks('initial-value');
  inValues = [];
  _.each(initialValueLinks, function(link) {
    var sourceNode;
    if (!link.relation.isDefined) {
      return;
    }
    sourceNode = link.sourceNode;
    return inValues.push(sourceNode.initialValue);
  });
  if (inValues.length) {
    return this.initialValue = combineInputs(inValues);
  }
};

SetAccumulatorValueFunction = function(nodeValues) {
  var deltaValue, inV, j, len, link, links, outV, ref, relation, sourceNode, startValue, targetNode, transferNode, transferValue;
  links = this.inLinks('accumulator').concat(this.inLinks('transfer')).concat(this.outLinks('transfer'));
  startValue = (ref = this.previousValue) != null ? ref : this.initialValue;
  if (!(links.length > 0)) {
    return startValue;
  }
  deltaValue = 0;
  for (j = 0, len = links.length; j < len; j++) {
    link = links[j];
    sourceNode = link.sourceNode, targetNode = link.targetNode, relation = link.relation, transferNode = link.transferNode;
    inV = nodeValues[sourceNode.key];
    outV = startValue;
    switch (relation.type) {
      case 'accumulator':
        deltaValue += relation.evaluate(inV, outV, sourceNode.max, this.max) / this.accumulatorInputScale;
        break;
      case 'transfer':
        transferValue = nodeValues[transferNode.key];
        if (isScaledTransferNode(transferNode)) {
          transferValue /= 100;
        }
        if (this.capNodeValues || (sourceNode.isAccumulator && !sourceNode.allowNegativeValues)) {
          transferValue = Math.min(transferValue, getTransferLimit(transferNode));
        }
        if (sourceNode === this) {
          deltaValue -= transferValue;
        } else if (targetNode === this) {
          deltaValue += transferValue;
        }
    }
  }
  return this.currentValue = this.filterFinalValue(startValue + deltaValue);
};

module.exports = Simulation = (function() {
  function Simulation(opts) {
    this.opts = opts != null ? opts : {};
    this.nodes = this.opts.nodes || [];
    this.duration = this.opts.duration || 10;
    this.capNodeValues = this.opts.capNodeValues || false;
    this.decorateNodes();
    this.onStart = this.opts.onStart || function(nodeNames) {
      return log.info("simulation stated: " + nodeNames);
    };
    this.onFrames = this.opts.onFrames || function(frames) {
      return log.info("simulation frames: " + frames);
    };
    this.onEnd = this.opts.onEnd || function() {
      return log.info("simulation end");
    };
    this.recalculateDesiredSteps = false;
    this.stopRun = false;
  }

  Simulation.prototype.decorateNodes = function() {
    return _.each(this.nodes, (function(_this) {
      return function(node) {
        node.capNodeValues = _this.capNodeValues;
        node.filterFinalValue = filterFinalValue.bind(node);
        node._cumulativeValue = 0;
        node.getCurrentValue = RangeIntegrationFunction.bind(node);
        node.setAccumulatorValue = SetAccumulatorValueFunction.bind(node);
        return node.setInitialAccumulatorValue = SetInitialAccumulatorValueFunction.bind(node);
      };
    })(this));
  };

  Simulation.prototype.initializeValues = function(node) {
    node.currentValue = null;
    return node.previousValue = null;
  };

  Simulation.prototype.nextStep = function(node) {
    node.previousValue = node.currentValue;
    return node.currentValue = null;
  };

  Simulation.prototype.evaluateNode = function(node, firstTime) {
    return node.currentValue = node.getCurrentValue(firstTime);
  };

  Simulation.prototype.generateFrame = function(time) {
    var frame, nodes;
    nodes = _.map(this.nodes, function(node) {
      return {
        title: node.title,
        value: node.currentValue
      };
    });
    frame = {
      time: time,
      nodes: nodes
    };
    return this.framesBundle.push(frame);
  };

  Simulation.prototype.stop = function() {
    return this.stopRun = true;
  };

  Simulation.prototype.run = function() {
    var collectorNodes, nodeNames, nodeValues, step, time;
    this.stopRun = false;
    time = 0;
    this.framesBundle = [];
    _.each(this.nodes, (function(_this) {
      return function(node) {
        return _this.initializeValues(node);
      };
    })(this));
    nodeNames = _.pluck(this.nodes, 'title');
    this.onStart(nodeNames);
    nodeValues = {};
    collectorNodes = _.filter(this.nodes, function(node) {
      return node.isAccumulator;
    });
    _.each(collectorNodes, function(node) {
      return node.setInitialAccumulatorValue();
    });
    step = (function(_this) {
      return function() {
        var i, j, k;
        if (time !== 0) {
          _.each(collectorNodes, function(node) {
            return node.setAccumulatorValue(nodeValues);
          });
        }
        for (i = j = 0; j < 10; i = ++j) {
          _.each(_this.nodes, function(node) {
            return _this.nextStep(node);
          });
          _.each(_this.nodes, function(node) {
            return _this.evaluateNode(node, i === 0);
          });
        }
        for (i = k = 0; k < 20; i = ++k) {
          _.each(_this.nodes, function(node) {
            return _this.nextStep(node);
          });
          _.each(_this.nodes, function(node) {
            return node._cumulativeValue += _this.evaluateNode(node);
          });
        }
        _.each(_this.nodes, function(node) {
          nodeValues[node.key] = node.currentValue = node._cumulativeValue / 20;
          return node._cumulativeValue = 0;
        });
        return _this.generateFrame(time++);
      };
    })(this);
    while (time < this.duration) {
      step();
    }
    this.onFrames(this.framesBundle);
    return this.onEnd();
  };

  return Simulation;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{}],661:[function(require,module,exports){
var Node, Transfer, tr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Node = require('./node');

tr = require("../utils/translate");

module.exports = Transfer = (function(superClass) {
  extend(Transfer, superClass);

  function Transfer() {
    return Transfer.__super__.constructor.apply(this, arguments);
  }

  Transfer.prototype.type = 'Transfer';

  Transfer.prototype.isTransfer = true;

  Transfer.prototype.setTransferLink = function(link) {
    this.transferLink = link;
    return this.title = this.computeTitle();
  };

  Transfer.prototype.computeTitle = function() {
    if (this.transferLink) {
      return tr('~TRANSFER_NODE.TITLE', {
        sourceTitle: this.transferLink.sourceNode.title,
        targetTitle: this.transferLink.targetNode.title
      });
    } else {
      return void 0;
    }
  };

  return Transfer;

})(Node);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvbW9kZWxzL3RyYW5zZmVyLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL21vZGVscy90cmFuc2Zlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxrQkFBQTtFQUFBOzs7QUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLFFBQVI7O0FBQ1AsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFFTCxNQUFNLENBQUMsT0FBUCxHQUF1Qjs7Ozs7OztxQkFFckIsSUFBQSxHQUFNOztxQkFDTixVQUFBLEdBQVk7O3FCQUVaLGVBQUEsR0FBaUIsU0FBQyxJQUFEO0lBQ2YsSUFBQyxDQUFBLFlBQUQsR0FBZ0I7V0FDaEIsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUEsWUFBRCxDQUFBO0VBRk07O3FCQUlqQixZQUFBLEdBQWMsU0FBQTtJQUNaLElBQUcsSUFBQyxDQUFBLFlBQUo7YUFDRSxFQUFBLENBQUcsc0JBQUgsRUFBMkI7UUFBRSxXQUFBLEVBQWEsSUFBQyxDQUFBLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBeEM7UUFDRyxXQUFBLEVBQWEsSUFBQyxDQUFBLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FEekM7T0FBM0IsRUFERjtLQUFBLE1BQUE7YUFJRSxPQUpGOztFQURZOzs7O0dBVHdCIn0=

},{"../utils/translate":689,"./node":656}],662:[function(require,module,exports){
var AppSettingsActions, AppSettingsStore, Complexity, HashParams, ImportActions, mixin;

HashParams = require('../utils/hash-parameters');

ImportActions = require('../actions/import-actions');

AppSettingsActions = Reflux.createActions(["setComplexity", "showMinigraphs", "relationshipSymbols"]);

Complexity = {
  diagramOnly: 0,
  basic: 1,
  expanded: 2,
  collectors: 3,
  DEFAULT: 3
};

AppSettingsStore = Reflux.createStore({
  listenables: [AppSettingsActions, ImportActions],
  init: function() {
    var complexity;
    complexity = HashParams.getParam('simplified') ? Complexity.diagramOnly : Complexity.DEFAULT;
    return this.settings = {
      showingSettingsDialog: false,
      complexity: complexity,
      showingMinigraphs: false,
      relationshipSymbols: false
    };
  },
  onShowMinigraphs: function(show) {
    this.settings.showingMinigraphs = show;
    return this.notifyChange();
  },
  onSetComplexity: function(val) {
    this.settings.complexity = val;
    if (val === 0) {
      this.settings.showingMinigraphs = false;
    }
    return this.notifyChange();
  },
  onRelationshipSymbols: function(show) {
    this.settings.relationshipSymbols = show;
    return this.notifyChange();
  },
  notifyChange: function() {
    return this.trigger(_.clone(this.settings));
  },
  onImport: function(data) {
    _.merge(this.settings, data.settings);
    return this.notifyChange();
  },
  serialize: function() {
    return {
      complexity: this.settings.complexity,
      showingMinigraphs: this.settings.showingMinigraphs,
      relationshipSymbols: this.settings.relationshipSymbols
    };
  }
});

AppSettingsStore.Complexity = Complexity;

mixin = {
  getInitialState: function() {
    return _.clone(AppSettingsStore.settings);
  },
  componentDidMount: function() {
    return this.unsubscribe = AppSettingsStore.listen(this.onAppSettingsChange);
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onAppSettingsChange: function(newData) {
    return this.setState(_.clone(newData));
  }
};

module.exports = {
  actions: AppSettingsActions,
  store: AppSettingsStore,
  mixin: mixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL2FwcC1zZXR0aW5ncy1zdG9yZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9zdG9yZXMvYXBwLXNldHRpbmdzLXN0b3JlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFVBQUEsR0FBa0IsT0FBQSxDQUFRLDBCQUFSOztBQUNsQixhQUFBLEdBQWtCLE9BQUEsQ0FBUSwyQkFBUjs7QUFFbEIsa0JBQUEsR0FBcUIsTUFBTSxDQUFDLGFBQVAsQ0FDbkIsQ0FDRSxlQURGLEVBRUUsZ0JBRkYsRUFHRSxxQkFIRixDQURtQjs7QUFRckIsVUFBQSxHQUFhO0VBQ1gsV0FBQSxFQUFhLENBREY7RUFFWCxLQUFBLEVBQU8sQ0FGSTtFQUdYLFFBQUEsRUFBVSxDQUhDO0VBSVgsVUFBQSxFQUFZLENBSkQ7RUFLWCxPQUFBLEVBQVMsQ0FMRTs7O0FBUWIsZ0JBQUEsR0FBcUIsTUFBTSxDQUFDLFdBQVAsQ0FDbkI7RUFBQSxXQUFBLEVBQWEsQ0FBQyxrQkFBRCxFQUFxQixhQUFyQixDQUFiO0VBRUEsSUFBQSxFQUFNLFNBQUE7QUFDSixRQUFBO0lBQUEsVUFBQSxHQUFnQixVQUFVLENBQUMsUUFBWCxDQUFvQixZQUFwQixDQUFILEdBQ1gsVUFBVSxDQUFDLFdBREEsR0FHWCxVQUFVLENBQUM7V0FFYixJQUFDLENBQUEsUUFBRCxHQUNFO01BQUEscUJBQUEsRUFBdUIsS0FBdkI7TUFDQSxVQUFBLEVBQVksVUFEWjtNQUVBLGlCQUFBLEVBQW1CLEtBRm5CO01BR0EsbUJBQUEsRUFBcUIsS0FIckI7O0VBUEUsQ0FGTjtFQWNBLGdCQUFBLEVBQWtCLFNBQUMsSUFBRDtJQUNoQixJQUFDLENBQUEsUUFBUSxDQUFDLGlCQUFWLEdBQThCO1dBQzlCLElBQUMsQ0FBQSxZQUFELENBQUE7RUFGZ0IsQ0FkbEI7RUFrQkEsZUFBQSxFQUFpQixTQUFDLEdBQUQ7SUFDZixJQUFDLENBQUEsUUFBUSxDQUFDLFVBQVYsR0FBdUI7SUFDdkIsSUFBRyxHQUFBLEtBQU8sQ0FBVjtNQUNFLElBQUMsQ0FBQSxRQUFRLENBQUMsaUJBQVYsR0FBOEIsTUFEaEM7O1dBRUEsSUFBQyxDQUFBLFlBQUQsQ0FBQTtFQUplLENBbEJqQjtFQXdCQSxxQkFBQSxFQUF1QixTQUFDLElBQUQ7SUFDckIsSUFBQyxDQUFBLFFBQVEsQ0FBQyxtQkFBVixHQUFnQztXQUNoQyxJQUFDLENBQUEsWUFBRCxDQUFBO0VBRnFCLENBeEJ2QjtFQTRCQSxZQUFBLEVBQWMsU0FBQTtXQUNaLElBQUMsQ0FBQSxPQUFELENBQVMsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsUUFBVCxDQUFUO0VBRFksQ0E1QmQ7RUErQkEsUUFBQSxFQUFVLFNBQUMsSUFBRDtJQUNSLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBQyxDQUFBLFFBQVQsRUFBbUIsSUFBSSxDQUFDLFFBQXhCO1dBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBQTtFQUZRLENBL0JWO0VBbUNBLFNBQUEsRUFBVyxTQUFBO1dBQ1Q7TUFBQSxVQUFBLEVBQVksSUFBQyxDQUFBLFFBQVEsQ0FBQyxVQUF0QjtNQUNBLGlCQUFBLEVBQW1CLElBQUMsQ0FBQSxRQUFRLENBQUMsaUJBRDdCO01BRUEsbUJBQUEsRUFBcUIsSUFBQyxDQUFBLFFBQVEsQ0FBQyxtQkFGL0I7O0VBRFMsQ0FuQ1g7Q0FEbUI7O0FBeUNyQixnQkFBZ0IsQ0FBQyxVQUFqQixHQUE4Qjs7QUFFOUIsS0FBQSxHQUNFO0VBQUEsZUFBQSxFQUFpQixTQUFBO1dBQ2YsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxnQkFBZ0IsQ0FBQyxRQUF6QjtFQURlLENBQWpCO0VBR0EsaUJBQUEsRUFBbUIsU0FBQTtXQUNqQixJQUFDLENBQUEsV0FBRCxHQUFlLGdCQUFnQixDQUFDLE1BQWpCLENBQXdCLElBQUMsQ0FBQSxtQkFBekI7RUFERSxDQUhuQjtFQU1BLG9CQUFBLEVBQXNCLFNBQUE7V0FDcEIsSUFBQyxDQUFBLFdBQUQsQ0FBQTtFQURvQixDQU50QjtFQVNBLG1CQUFBLEVBQXFCLFNBQUMsT0FBRDtXQUNuQixJQUFDLENBQUEsUUFBRCxDQUFVLENBQUMsQ0FBQyxLQUFGLENBQVEsT0FBUixDQUFWO0VBRG1CLENBVHJCOzs7QUFZRixNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsT0FBQSxFQUFTLGtCQUFUO0VBQ0EsS0FBQSxFQUFPLGdCQURQO0VBRUEsS0FBQSxFQUFPLEtBRlAifQ==

},{"../actions/import-actions":622,"../utils/hash-parameters":678}],663:[function(require,module,exports){
var CodapActions, CodapConnect, codapStore, mixin;

CodapConnect = require('../models/codap-connect');

CodapActions = require('../actions/codap-actions');

codapStore = Reflux.createStore({
  listenables: [CodapActions],
  init: function() {
    var codapConnect;
    codapConnect = CodapConnect.instance('building-models');
    this.codapHasLoaded = false;
    return this.hideUndoRedo = false;
  },
  onCodapLoaded: function() {
    this.codapHasLoaded = true;
    return this.notifyChange();
  },
  onHideUndoRedo: function() {
    this.hideUndoRedo = true;
    return this.notifyChange();
  },
  notifyChange: function() {
    var data;
    data = {
      codapHasLoaded: this.codapHasLoaded,
      hideUndoRedo: this.hideUndoRedo
    };
    return this.trigger(data);
  }
});

mixin = {
  getInitialState: function() {
    return {
      codapHasLoaded: codapStore.codapHasLoaded,
      hideUndoRedo: codapStore.hideUndoRedo
    };
  },
  componentDidMount: function() {
    return this.unsubscribe = codapStore.listen(this.onCodapStateChange);
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onCodapStateChange: function(status) {
    return this.setState({
      codapHasLoaded: status.codapHasLoaded,
      hideUndoRedo: status.hideUndoRedo
    });
  }
};

module.exports = {
  actions: CodapActions,
  store: codapStore,
  mixin: mixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL2NvZGFwLXN0b3JlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3N0b3Jlcy9jb2RhcC1zdG9yZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxZQUFBLEdBQWUsT0FBQSxDQUFRLHlCQUFSOztBQUNmLFlBQUEsR0FBZSxPQUFBLENBQVEsMEJBQVI7O0FBRWYsVUFBQSxHQUFlLE1BQU0sQ0FBQyxXQUFQLENBQ2I7RUFBQSxXQUFBLEVBQWEsQ0FBQyxZQUFELENBQWI7RUFFQSxJQUFBLEVBQU0sU0FBQTtBQUNKLFFBQUE7SUFBQSxZQUFBLEdBQWUsWUFBWSxDQUFDLFFBQWIsQ0FBc0IsaUJBQXRCO0lBQ2YsSUFBQyxDQUFBLGNBQUQsR0FBa0I7V0FDbEIsSUFBQyxDQUFBLFlBQUQsR0FBa0I7RUFIZCxDQUZOO0VBT0EsYUFBQSxFQUFlLFNBQUE7SUFDYixJQUFDLENBQUEsY0FBRCxHQUFrQjtXQUNsQixJQUFDLENBQUEsWUFBRCxDQUFBO0VBRmEsQ0FQZjtFQVdBLGNBQUEsRUFBZ0IsU0FBQTtJQUNkLElBQUMsQ0FBQSxZQUFELEdBQWdCO1dBQ2hCLElBQUMsQ0FBQSxZQUFELENBQUE7RUFGYyxDQVhoQjtFQWVBLFlBQUEsRUFBYyxTQUFBO0FBQ1osUUFBQTtJQUFBLElBQUEsR0FDRTtNQUFBLGNBQUEsRUFBZ0IsSUFBQyxDQUFBLGNBQWpCO01BQ0EsWUFBQSxFQUFnQixJQUFDLENBQUEsWUFEakI7O1dBRUYsSUFBQyxDQUFBLE9BQUQsQ0FBUyxJQUFUO0VBSlksQ0FmZDtDQURhOztBQXNCZixLQUFBLEdBQ0U7RUFBQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLGNBQUEsRUFBZ0IsVUFBVSxDQUFDLGNBQTNCO01BQ0EsWUFBQSxFQUFnQixVQUFVLENBQUMsWUFEM0I7O0VBRGUsQ0FBakI7RUFJQSxpQkFBQSxFQUFtQixTQUFBO1dBQ2pCLElBQUMsQ0FBQSxXQUFELEdBQWUsVUFBVSxDQUFDLE1BQVgsQ0FBa0IsSUFBQyxDQUFBLGtCQUFuQjtFQURFLENBSm5CO0VBT0Esb0JBQUEsRUFBc0IsU0FBQTtXQUNwQixJQUFDLENBQUEsV0FBRCxDQUFBO0VBRG9CLENBUHRCO0VBVUEsa0JBQUEsRUFBb0IsU0FBQyxNQUFEO1dBQ2xCLElBQUMsQ0FBQSxRQUFELENBQ0U7TUFBQSxjQUFBLEVBQWdCLE1BQU0sQ0FBQyxjQUF2QjtNQUNBLFlBQUEsRUFBZ0IsTUFBTSxDQUFDLFlBRHZCO0tBREY7RUFEa0IsQ0FWcEI7OztBQWVGLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxPQUFBLEVBQVMsWUFBVDtFQUNBLEtBQUEsRUFBTyxVQURQO0VBRUEsS0FBQSxFQUFPLEtBRlAifQ==

},{"../actions/codap-actions":620,"../models/codap-connect":653}],664:[function(require,module,exports){
var GoogleDrive, GoogleDriveIO, GoogleFileActions, GoogleFileStore, GraphStore, HashParams, PaletteStore, mixin, tr, waitForAuthCheck;

GoogleDriveIO = require('../utils/google-drive-io');

GraphStore = require('./graph-store');

PaletteStore = require('./palette-store');

HashParams = require("../utils/hash-parameters");

tr = require('../utils/translate');

GoogleFileActions = Reflux.createActions(["showSaveDialog", "newFile", "openFile", "rename", "setIsPublic", "saveFile", "close", "revertToOriginal", "revertToLastSave", "connectToApi", "addAfterAuthHandler"]);

GoogleFileStore = Reflux.createStore({
  listenables: [GoogleFileActions],
  init: function() {
    this.gapiLoaded = false;
    this.fileId = null;
    this.lastFilename = null;
    this.action = tr("~FILE.CHECKING_AUTH");
    this.isPublic = false;
    this.docLink = null;
    return this.showingSaveDialog = false;
  },
  notifyChange: function() {
    return this.trigger({
      gapiLoaded: this.gapiLoaded,
      fileId: this.fileId,
      filename: this.filename,
      action: this.action,
      isPublic: this.isPublic,
      docLink: this.docLink,
      showingSaveDialog: this.showingSaveDialog
    });
  },
  onShowSaveDialog: function() {
    this.showingSaveDialog = true;
    return this.notifyChange();
  },
  onNewFile: function() {
    if (confirm(tr("~FILE.CONFIRM"))) {
      GraphStore.store.deleteAll();
      HashParams.clearParam('googleDoc');
      HashParams.clearParam('publicUrl');
      this.fileId = null;
      return this.notifyChange();
    }
  },
  onClose: function() {
    this.showingSaveDialog = false;
    return this.notifyChange();
  },
  onOpenFile: function() {
    return GoogleDrive.filePicker((function(_this) {
      return function(err, fileSpec) {
        if (err) {
          return alert(err);
        } else if (fileSpec) {
          _this.action = tr("~FILE.DOWNLOADING");
          return _this.loadFile(fileSpec);
        }
      };
    })(this));
  },
  onRename: function(filename) {
    if (filename.length > 0) {
      GraphStore.store.setFilename(filename);
      HashParams.clearParam('publicUrl');
      HashParams.clearParam('googleDoc');
      this.notifyChange();
    }
    return filename;
  },
  onSetIsPublic: function(isPublic) {
    this.isPublic = isPublic;
    if (!isPublic) {
      HashParams.clearParam('publicUrl');
    }
    return this.notifyChange();
  },
  onSaveFile: function() {
    var data, filename;
    filename = GraphStore.store.filename;
    if (filename.length > 0) {
      this.action = tr("~FILE.UPLOADING");
      this.fileId = this.lastFilename === filename ? this.fileId : null;
      this.lastFilename = filename;
      data = GraphStore.store.toJsonString(PaletteStore.store.palette);
      return GoogleDrive.upload({
        fileName: filename,
        fileId: this.fileId
      }, data, (function(_this) {
        return function(err, fileSpec) {
          if (err) {
            alert(err);
            _this.action = null;
          } else {
            _this.fileId = fileSpec.id;
            _this.action = null;
            _this.docLink = null;
            if (_this.isPublic) {
              GoogleDrive.makePublic(fileSpec.id);
              _this.docLink = "http://cors.io/?u=" + fileSpec.webContentLink;
              HashParams.setParam("publicUrl", _this.docLink);
            } else {
              HashParams.setParam("googleDoc", _this.fileId);
            }
            GraphStore.store.setSaved();
          }
          _this.showingSaveDialog = false;
          return _this.notifyChange();
        };
      })(this));
    }
  },
  onRevertToOriginal: function() {
    if (confirm(tr("~FILE.CONFIRM_ORIGINAL_REVERT"))) {
      GraphStore.store.revertToOriginal();
      return this.notifyChange();
    }
  },
  onRevertToLastSave: function() {
    if (confirm(tr("~FILE.CONFIRM_LAST_SAVE_REVERT"))) {
      GraphStore.store.revertToLastSave();
      return this.notifyChange();
    }
  },
  onAddAfterAuthHandler: function(callback) {
    this.afterLoadCallbacks || (this.afterLoadCallbacks = []);
    return this.afterLoadCallbacks.push(callback);
  },
  onConnectToApi: function() {
    this.afterLoadCallbacks || (this.afterLoadCallbacks = []);
    this.gapiLoaded = true;
    this.action = null;
    this.notifyChange();
    _.each(this.afterLoadCallbacks, (function(_this) {
      return function(callback) {
        return callback(_this);
      };
    })(this));
    return this.afterLoadCallbacks = null;
  },
  loadPublicUrl: function(url) {
    var authorized, callback;
    authorized = false;
    callback = function(ignored, json) {
      return GraphStore.store.loadData(json);
    };
    return GoogleDrive.downloadFromUrl(url, callback, authorized);
  },
  loadFile: function(fileSpec) {
    var context;
    context = this;
    return GoogleDrive.download(fileSpec, (function(_this) {
      return function(err, data) {
        if (err) {
          alert(err);
          _this.action = null;
        } else {
          _this.fileId = fileSpec.id;
          _this.action = null;
          _this.lastFilename = data.filename;
          GraphStore.store.deleteAll();
          GraphStore.store.loadData(data);
          GraphStore.store.setFilename(data.filename);
          HashParams.setParam('googleDoc', _this.fileId);
        }
        return _this.notifyChange();
      };
    })(this));
  }
});

GoogleDrive = new GoogleDriveIO();

waitForAuthCheck = function() {
  var ref;
  if (typeof gapi !== "undefined" && gapi !== null ? (ref = gapi.auth) != null ? ref.authorize : void 0 : void 0) {
    return GoogleDrive.authorize(true, function() {
      return GoogleFileActions.connectToApi();
    });
  } else {
    return setTimeout(waitForAuthCheck, 10);
  }
};

waitForAuthCheck();

mixin = {
  getInitialState: function() {
    return {
      gapiLoaded: false,
      fileId: null,
      filename: this.filename,
      action: tr("~FILE.CHECKING_AUTH"),
      isPublic: false,
      docLink: null,
      showingSaveDialog: false
    };
  },
  componentDidMount: function() {
    return this.unsubscribe = GoogleFileStore.listen(this.onGoogleChange);
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onGoogleChange: function(newData) {
    return this.setState(_.clone(newData));
  }
};

module.exports = {
  actions: GoogleFileActions,
  store: GoogleFileStore,
  mixin: mixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL2dvb2dsZS1maWxlLXN0b3JlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3N0b3Jlcy9nb29nbGUtZmlsZS1zdG9yZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxhQUFBLEdBQWdCLE9BQUEsQ0FBUSwwQkFBUjs7QUFDaEIsVUFBQSxHQUFnQixPQUFBLENBQVEsZUFBUjs7QUFDaEIsWUFBQSxHQUFnQixPQUFBLENBQVEsaUJBQVI7O0FBQ2hCLFVBQUEsR0FBZ0IsT0FBQSxDQUFRLDBCQUFSOztBQUVoQixFQUFBLEdBQUssT0FBQSxDQUFRLG9CQUFSOztBQUVMLGlCQUFBLEdBQW9CLE1BQU0sQ0FBQyxhQUFQLENBQXFCLENBQ3ZDLGdCQUR1QyxFQUNyQixTQURxQixFQUNWLFVBRFUsRUFFdkMsUUFGdUMsRUFFN0IsYUFGNkIsRUFFZCxVQUZjLEVBRUYsT0FGRSxFQUd2QyxrQkFIdUMsRUFHbkIsa0JBSG1CLEVBR0MsY0FIRCxFQUl2QyxxQkFKdUMsQ0FBckI7O0FBT3BCLGVBQUEsR0FBa0IsTUFBTSxDQUFDLFdBQVAsQ0FDaEI7RUFBQSxXQUFBLEVBQWEsQ0FBQyxpQkFBRCxDQUFiO0VBRUEsSUFBQSxFQUFNLFNBQUE7SUFDSixJQUFDLENBQUEsVUFBRCxHQUFxQjtJQUNyQixJQUFDLENBQUEsTUFBRCxHQUFxQjtJQUNyQixJQUFDLENBQUEsWUFBRCxHQUFxQjtJQUNyQixJQUFDLENBQUEsTUFBRCxHQUFxQixFQUFBLENBQUcscUJBQUg7SUFDckIsSUFBQyxDQUFBLFFBQUQsR0FBcUI7SUFDckIsSUFBQyxDQUFBLE9BQUQsR0FBcUI7V0FDckIsSUFBQyxDQUFBLGlCQUFELEdBQXFCO0VBUGpCLENBRk47RUFZQSxZQUFBLEVBQWMsU0FBQTtXQUNaLElBQUMsQ0FBQSxPQUFELENBQ0U7TUFBQSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBQWI7TUFDQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BRFQ7TUFFQSxRQUFBLEVBQVUsSUFBQyxDQUFBLFFBRlg7TUFHQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BSFQ7TUFJQSxRQUFBLEVBQVUsSUFBQyxDQUFBLFFBSlg7TUFLQSxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BTFY7TUFNQSxpQkFBQSxFQUFtQixJQUFDLENBQUEsaUJBTnBCO0tBREY7RUFEWSxDQVpkO0VBc0JBLGdCQUFBLEVBQWtCLFNBQUE7SUFDaEIsSUFBQyxDQUFBLGlCQUFELEdBQXFCO1dBQ3JCLElBQUMsQ0FBQSxZQUFELENBQUE7RUFGZ0IsQ0F0QmxCO0VBMEJBLFNBQUEsRUFBVyxTQUFBO0lBQ1QsSUFBRyxPQUFBLENBQVEsRUFBQSxDQUFHLGVBQUgsQ0FBUixDQUFIO01BQ0UsVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFqQixDQUFBO01BQ0EsVUFBVSxDQUFDLFVBQVgsQ0FBc0IsV0FBdEI7TUFDQSxVQUFVLENBQUMsVUFBWCxDQUFzQixXQUF0QjtNQUNBLElBQUMsQ0FBQSxNQUFELEdBQVU7YUFDVixJQUFDLENBQUEsWUFBRCxDQUFBLEVBTEY7O0VBRFMsQ0ExQlg7RUFrQ0EsT0FBQSxFQUFTLFNBQUE7SUFDUCxJQUFDLENBQUEsaUJBQUQsR0FBcUI7V0FDckIsSUFBQyxDQUFBLFlBQUQsQ0FBQTtFQUZPLENBbENUO0VBc0NBLFVBQUEsRUFBWSxTQUFBO1dBQ1YsV0FBVyxDQUFDLFVBQVosQ0FBdUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEdBQUQsRUFBTSxRQUFOO1FBQ3JCLElBQUcsR0FBSDtpQkFDRSxLQUFBLENBQU0sR0FBTixFQURGO1NBQUEsTUFFSyxJQUFHLFFBQUg7VUFDSCxLQUFDLENBQUEsTUFBRCxHQUFVLEVBQUEsQ0FBRyxtQkFBSDtpQkFDVixLQUFDLENBQUEsUUFBRCxDQUFVLFFBQVYsRUFGRzs7TUFIZ0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXZCO0VBRFUsQ0F0Q1o7RUE4Q0EsUUFBQSxFQUFVLFNBQUMsUUFBRDtJQUNSLElBQUcsUUFBUSxDQUFDLE1BQVQsR0FBa0IsQ0FBckI7TUFDRSxVQUFVLENBQUMsS0FBSyxDQUFDLFdBQWpCLENBQTZCLFFBQTdCO01BQ0EsVUFBVSxDQUFDLFVBQVgsQ0FBc0IsV0FBdEI7TUFDQSxVQUFVLENBQUMsVUFBWCxDQUFzQixXQUF0QjtNQUNBLElBQUMsQ0FBQSxZQUFELENBQUEsRUFKRjs7QUFLQSxXQUFPO0VBTkMsQ0E5Q1Y7RUFzREEsYUFBQSxFQUFlLFNBQUMsUUFBRDtJQUNiLElBQUMsQ0FBQSxRQUFELEdBQVk7SUFDWixJQUFHLENBQUksUUFBUDtNQUNFLFVBQVUsQ0FBQyxVQUFYLENBQXNCLFdBQXRCLEVBREY7O1dBRUEsSUFBQyxDQUFBLFlBQUQsQ0FBQTtFQUphLENBdERmO0VBNERBLFVBQUEsRUFBWSxTQUFBO0FBQ1YsUUFBQTtJQUFBLFFBQUEsR0FBVyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBQzVCLElBQUcsUUFBUSxDQUFDLE1BQVQsR0FBa0IsQ0FBckI7TUFDRSxJQUFDLENBQUEsTUFBRCxHQUFVLEVBQUEsQ0FBRyxpQkFBSDtNQUdWLElBQUMsQ0FBQSxNQUFELEdBQWEsSUFBQyxDQUFBLFlBQUQsS0FBaUIsUUFBcEIsR0FBa0MsSUFBQyxDQUFBLE1BQW5DLEdBQStDO01BQ3pELElBQUMsQ0FBQSxZQUFELEdBQWdCO01BQ2hCLElBQUEsR0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLFlBQWpCLENBQThCLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBakQ7YUFFUCxXQUFXLENBQUMsTUFBWixDQUFtQjtRQUFDLFFBQUEsRUFBVSxRQUFYO1FBQXFCLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFBOUI7T0FBbkIsRUFBMEQsSUFBMUQsRUFBZ0UsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLEdBQUQsRUFBTSxRQUFOO1VBQzlELElBQUcsR0FBSDtZQUNFLEtBQUEsQ0FBTSxHQUFOO1lBQ0EsS0FBQyxDQUFBLE1BQUQsR0FBVSxLQUZaO1dBQUEsTUFBQTtZQUlFLEtBQUMsQ0FBQSxNQUFELEdBQVUsUUFBUSxDQUFDO1lBQ25CLEtBQUMsQ0FBQSxNQUFELEdBQVU7WUFDVixLQUFDLENBQUEsT0FBRCxHQUFXO1lBQ1gsSUFBRyxLQUFDLENBQUEsUUFBSjtjQUNFLFdBQVcsQ0FBQyxVQUFaLENBQXVCLFFBQVEsQ0FBQyxFQUFoQztjQUVBLEtBQUMsQ0FBQSxPQUFELEdBQVcsb0JBQUEsR0FBcUIsUUFBUSxDQUFDO2NBQ3pDLFVBQVUsQ0FBQyxRQUFYLENBQW9CLFdBQXBCLEVBQWlDLEtBQUMsQ0FBQSxPQUFsQyxFQUpGO2FBQUEsTUFBQTtjQU1FLFVBQVUsQ0FBQyxRQUFYLENBQW9CLFdBQXBCLEVBQWlDLEtBQUMsQ0FBQSxNQUFsQyxFQU5GOztZQU9BLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBakIsQ0FBQSxFQWRGOztVQWVBLEtBQUMsQ0FBQSxpQkFBRCxHQUFxQjtpQkFDckIsS0FBQyxDQUFBLFlBQUQsQ0FBQTtRQWpCOEQ7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWhFLEVBUkY7O0VBRlUsQ0E1RFo7RUF5RkEsa0JBQUEsRUFBb0IsU0FBQTtJQUNsQixJQUFHLE9BQUEsQ0FBUSxFQUFBLENBQUcsK0JBQUgsQ0FBUixDQUFIO01BQ0UsVUFBVSxDQUFDLEtBQUssQ0FBQyxnQkFBakIsQ0FBQTthQUNBLElBQUMsQ0FBQSxZQUFELENBQUEsRUFGRjs7RUFEa0IsQ0F6RnBCO0VBOEZBLGtCQUFBLEVBQW9CLFNBQUE7SUFDbEIsSUFBRyxPQUFBLENBQVEsRUFBQSxDQUFHLGdDQUFILENBQVIsQ0FBSDtNQUNFLFVBQVUsQ0FBQyxLQUFLLENBQUMsZ0JBQWpCLENBQUE7YUFDQSxJQUFDLENBQUEsWUFBRCxDQUFBLEVBRkY7O0VBRGtCLENBOUZwQjtFQW1HQSxxQkFBQSxFQUF1QixTQUFDLFFBQUQ7SUFDckIsSUFBQyxDQUFBLHVCQUFELElBQUMsQ0FBQSxxQkFBdUI7V0FDeEIsSUFBQyxDQUFBLGtCQUFrQixDQUFDLElBQXBCLENBQXlCLFFBQXpCO0VBRnFCLENBbkd2QjtFQXVHQSxjQUFBLEVBQWdCLFNBQUE7SUFDZCxJQUFDLENBQUEsdUJBQUQsSUFBQyxDQUFBLHFCQUF1QjtJQUN4QixJQUFDLENBQUEsVUFBRCxHQUFjO0lBQ2QsSUFBQyxDQUFBLE1BQUQsR0FBYztJQUNkLElBQUMsQ0FBQSxZQUFELENBQUE7SUFDQSxDQUFDLENBQUMsSUFBRixDQUFPLElBQUMsQ0FBQSxrQkFBUixFQUE0QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRDtlQUMxQixRQUFBLENBQVMsS0FBVDtNQUQwQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBNUI7V0FFQSxJQUFDLENBQUEsa0JBQUQsR0FBc0I7RUFQUixDQXZHaEI7RUFpSEEsYUFBQSxFQUFlLFNBQUMsR0FBRDtBQUNiLFFBQUE7SUFBQSxVQUFBLEdBQWE7SUFDYixRQUFBLEdBQVcsU0FBQyxPQUFELEVBQVMsSUFBVDthQUNULFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBakIsQ0FBMEIsSUFBMUI7SUFEUztXQUdYLFdBQVcsQ0FBQyxlQUFaLENBQTRCLEdBQTVCLEVBQWlDLFFBQWpDLEVBQTJDLFVBQTNDO0VBTGEsQ0FqSGY7RUF3SEEsUUFBQSxFQUFVLFNBQUMsUUFBRDtBQUNSLFFBQUE7SUFBQSxPQUFBLEdBQVU7V0FDVixXQUFXLENBQUMsUUFBWixDQUFxQixRQUFyQixFQUErQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsR0FBRCxFQUFNLElBQU47UUFDN0IsSUFBRyxHQUFIO1VBQ0UsS0FBQSxDQUFNLEdBQU47VUFDQSxLQUFDLENBQUEsTUFBRCxHQUFVLEtBRlo7U0FBQSxNQUFBO1VBSUUsS0FBQyxDQUFBLE1BQUQsR0FBVSxRQUFRLENBQUM7VUFDbkIsS0FBQyxDQUFBLE1BQUQsR0FBVTtVQUNWLEtBQUMsQ0FBQSxZQUFELEdBQWdCLElBQUksQ0FBQztVQUNyQixVQUFVLENBQUMsS0FBSyxDQUFDLFNBQWpCLENBQUE7VUFDQSxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQWpCLENBQTBCLElBQTFCO1VBQ0EsVUFBVSxDQUFDLEtBQUssQ0FBQyxXQUFqQixDQUE2QixJQUFJLENBQUMsUUFBbEM7VUFDQSxVQUFVLENBQUMsUUFBWCxDQUFvQixXQUFwQixFQUFpQyxLQUFDLENBQUEsTUFBbEMsRUFWRjs7ZUFXQSxLQUFDLENBQUEsWUFBRCxDQUFBO01BWjZCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUEvQjtFQUZRLENBeEhWO0NBRGdCOztBQXlJbEIsV0FBQSxHQUFjLElBQUksYUFBSixDQUFBOztBQUdkLGdCQUFBLEdBQW1CLFNBQUE7QUFDakIsTUFBQTtFQUFBLGtGQUFhLENBQUUsMkJBQWY7V0FDRSxXQUFXLENBQUMsU0FBWixDQUFzQixJQUF0QixFQUE0QixTQUFBO2FBQzFCLGlCQUFpQixDQUFDLFlBQWxCLENBQUE7SUFEMEIsQ0FBNUIsRUFERjtHQUFBLE1BQUE7V0FJRSxVQUFBLENBQVcsZ0JBQVgsRUFBNkIsRUFBN0IsRUFKRjs7QUFEaUI7O0FBTW5CLGdCQUFBLENBQUE7O0FBRUEsS0FBQSxHQUNFO0VBQUEsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxVQUFBLEVBQW1CLEtBQW5CO01BQ0EsTUFBQSxFQUFtQixJQURuQjtNQUVBLFFBQUEsRUFBbUIsSUFBQyxDQUFBLFFBRnBCO01BR0EsTUFBQSxFQUFtQixFQUFBLENBQUcscUJBQUgsQ0FIbkI7TUFJQSxRQUFBLEVBQW1CLEtBSm5CO01BS0EsT0FBQSxFQUFrQixJQUxsQjtNQU1BLGlCQUFBLEVBQW1CLEtBTm5COztFQURlLENBQWpCO0VBU0EsaUJBQUEsRUFBbUIsU0FBQTtXQUNqQixJQUFDLENBQUEsV0FBRCxHQUFlLGVBQWUsQ0FBQyxNQUFoQixDQUF1QixJQUFDLENBQUEsY0FBeEI7RUFERSxDQVRuQjtFQVlBLG9CQUFBLEVBQXNCLFNBQUE7V0FDcEIsSUFBQyxDQUFBLFdBQUQsQ0FBQTtFQURvQixDQVp0QjtFQWVBLGNBQUEsRUFBZ0IsU0FBQyxPQUFEO1dBQ2QsSUFBQyxDQUFBLFFBQUQsQ0FBVSxDQUFDLENBQUMsS0FBRixDQUFRLE9BQVIsQ0FBVjtFQURjLENBZmhCOzs7QUFrQkYsTUFBTSxDQUFDLE9BQVAsR0FDRTtFQUFBLE9BQUEsRUFBUyxpQkFBVDtFQUNBLEtBQUEsRUFBTyxlQURQO0VBRUEsS0FBQSxFQUFPLEtBRlAifQ==

},{"../utils/google-drive-io":676,"../utils/hash-parameters":678,"../utils/translate":689,"./graph-store":665,"./palette-store":670}],665:[function(require,module,exports){
var AppSettingsStore, CodapActions, CodapConnect, DEFAULT_CONTEXT_NAME, GraphActions, GraphStore, Importer, InspectorPanelStore, Link, Migrations, NodeModel, PaletteDeleteStore, PaletteStore, RelationFactory, SelectionManager, SimulationStore, TransferModel, UndoRedo, mixin, tr;

Importer = require('../utils/importer');

Link = require('../models/link');

NodeModel = require('../models/node');

TransferModel = require('../models/transfer');

UndoRedo = require('../utils/undo-redo');

SelectionManager = require('../models/selection-manager');

PaletteStore = require("../stores/palette-store");

tr = require("../utils/translate");

Migrations = require("../data/migrations/migrations");

PaletteDeleteStore = require("../stores/palette-delete-dialog-store");

AppSettingsStore = require("../stores/app-settings-store");

SimulationStore = require("../stores/simulation-store");

GraphActions = require("../actions/graph-actions");

CodapActions = require('../actions/codap-actions');

InspectorPanelStore = require("../stores/inspector-panel-store");

CodapConnect = require('../models/codap-connect');

RelationFactory = require("../models/relation-factory");

DEFAULT_CONTEXT_NAME = 'building-models';

GraphStore = Reflux.createStore({
  init: function(context) {
    this.linkKeys = {};
    this.nodeKeys = {};
    this.loadListeners = [];
    this.filename = null;
    this.filenameListeners = [];
    this.undoRedoManager = UndoRedo.instance({
      debug: false,
      context: context
    });
    this.selectionManager = new SelectionManager();
    PaletteDeleteStore.store.listen(this.paletteDelete.bind(this));
    SimulationStore.actions.createExperiment.listen(this.resetSimulation.bind(this));
    SimulationStore.actions.setDuration.listen(this.resetSimulation.bind(this));
    SimulationStore.actions.capNodeValues.listen(this.resetSimulation.bind(this));
    SimulationStore.actions.simulationFramesCreated.listen(this.updateSimulationData.bind(this));
    this.usingCODAP = false;
    this.codapStandaloneMode = false;
    return this.lastRunModel = "";
  },
  resetSimulation: function() {
    var j, len, node, ref;
    ref = this.getNodes();
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      node.frames = [];
    }
    return this.updateListeners();
  },
  _trimSimulation: function() {
    var excessFrames, j, len, node, ref;
    ref = this.getNodes();
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      excessFrames = node.frames.length - 2 * SimulationStore.store.simulationDuration();
      if (excessFrames > 0) {
        node.frames.splice(0, excessFrames);
      }
    }
  },
  updateSimulationData: function(data) {
    var frame, i, j, k, len, len1, node, nodes, ref, ref1;
    nodes = this.getNodes();
    for (j = 0, len = data.length; j < len; j++) {
      frame = data[j];
      ref = frame.nodes;
      for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
        node = ref[i];
        if ((ref1 = nodes[i]) != null) {
          ref1.frames.push(node.value);
        }
      }
    }
  },
  paletteDelete: function(status) {
    var deleted, j, len, node, paletteItem, ref, replacement;
    deleted = status.deleted, paletteItem = status.paletteItem, replacement = status.replacement;
    if (deleted && paletteItem && replacement) {
      ref = this.getNodes();
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        if (node.paletteItemIs(paletteItem)) {
          this.changeNode({
            image: replacement.image,
            paletteItem: replacement.uuid
          }, node);
        }
      }
    }
  },
  undo: function(fromCODAP) {
    if (fromCODAP || !this.usingCODAP) {
      return this.undoRedoManager.undo();
    } else {
      return CodapActions.sendUndoToCODAP();
    }
  },
  redo: function(fromCODAP) {
    if (fromCODAP || !this.usingCODAP) {
      return this.undoRedoManager.redo();
    } else {
      return CodapActions.sendRedoToCODAP();
    }
  },
  setSaved: function() {
    return this.undoRedoManager.save();
  },
  revertToOriginal: function() {
    return this.undoRedoManager.revertToOriginal();
  },
  revertToLastSave: function() {
    return this.undoRedoManager.revertToLastSave();
  },
  setUsingCODAP: function(usingCODAP) {
    this.usingCODAP = usingCODAP;
  },
  setCodapStandaloneMode: function(codapStandaloneMode) {
    this.codapStandaloneMode = codapStandaloneMode;
  },
  addChangeListener: function(listener) {
    log.info("adding change listener");
    return this.undoRedoManager.addChangeListener(listener);
  },
  addFilenameListener: function(listener) {
    log.info("adding filename listener " + listener);
    return this.filenameListeners.push(listener);
  },
  setFilename: function(filename) {
    var j, len, listener, ref, results;
    this.filename = filename;
    ref = this.filenameListeners;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      listener = ref[j];
      results.push(listener(filename));
    }
    return results;
  },
  getLinks: function() {
    var key, ref, results, value;
    ref = this.linkKeys;
    results = [];
    for (key in ref) {
      value = ref[key];
      results.push(value);
    }
    return results;
  },
  getNodes: function() {
    var key, ref, results, value;
    ref = this.nodeKeys;
    results = [];
    for (key in ref) {
      value = ref[key];
      results.push(value);
    }
    return results;
  },
  hasLink: function(link) {
    return this.linkKeys[link.terminalKey()] != null;
  },
  hasNode: function(node) {
    return this.nodeKeys[node.key] != null;
  },
  importLink: function(linkSpec) {
    var link, sourceNode, targetNode, transferNode;
    sourceNode = this.nodeKeys[linkSpec.sourceNode];
    targetNode = this.nodeKeys[linkSpec.targetNode];
    if (linkSpec.transferNode) {
      transferNode = this.nodeKeys[linkSpec.transferNode];
    }
    linkSpec.sourceNode = sourceNode;
    linkSpec.targetNode = targetNode;
    if (transferNode) {
      linkSpec.transferNode = transferNode;
    }
    link = new Link(linkSpec);
    this.addLink(link);
    return link;
  },
  addLink: function(link) {
    this.endNodeEdit();
    return this.undoRedoManager.createAndExecuteCommand('addLink', {
      execute: (function(_this) {
        return function() {
          return _this._addLink(link);
        };
      })(this),
      undo: (function(_this) {
        return function() {
          return _this._removeLink(link);
        };
      })(this)
    });
  },
  _addLink: function(link) {
    if (!(link.sourceNode === link.targetNode || this.hasLink(link))) {
      this.linkKeys[link.terminalKey()] = link;
      this.nodeKeys[link.sourceNode.key].addLink(link);
      this.nodeKeys[link.targetNode.key].addLink(link);
    }
    this._graphUpdated();
    return this.updateListeners();
  },
  removeLink: function(link) {
    this.endNodeEdit();
    return this.undoRedoManager.createAndExecuteCommand('removeLink', {
      execute: (function(_this) {
        return function() {
          _this._removeLink(link);
          if (link.transferNode != null) {
            return _this._removeTransfer(link);
          }
        };
      })(this),
      undo: (function(_this) {
        return function() {
          if (link.transferNode != null) {
            _this._addTransfer(link);
          }
          return _this._addLink(link);
        };
      })(this)
    });
  },
  _removeLink: function(link) {
    var ref, ref1;
    delete this.linkKeys[link.terminalKey()];
    if ((ref = this.nodeKeys[link.sourceNode.key]) != null) {
      ref.removeLink(link);
    }
    if ((ref1 = this.nodeKeys[link.targetNode.key]) != null) {
      ref1.removeLink(link);
    }
    this._graphUpdated();
    return this.updateListeners();
  },
  isUniqueTitle: function(title, skipNode, nodes) {
    var nonUniqueNode;
    if (nodes == null) {
      nodes = this.getNodes();
    }
    nonUniqueNode = function(otherNode) {
      var sameTitle;
      sameTitle = otherNode.title === title;
      if (skipNode) {
        return sameTitle && otherNode !== skipNode;
      } else {
        return sameTitle;
      }
    };
    return !_.find(nodes, nonUniqueNode);
  },
  ensureUniqueTitle: function(node, newTitle) {
    var endsWithNumber, index, matches, nodes, template;
    if (newTitle == null) {
      newTitle = node.title;
    }
    nodes = this.getNodes();
    if (!this.isUniqueTitle(newTitle, node, nodes)) {
      index = 2;
      endsWithNumber = / (\d+)$/;
      matches = newTitle.match(endsWithNumber);
      if (matches) {
        index = parseInt(matches[1], 10) + 1;
        newTitle = newTitle.replace(endsWithNumber, '');
      }
      template = newTitle + " %{index}";
      while (true) {
        newTitle = tr(template, {
          index: index++
        });
        if (this.isUniqueTitle(newTitle, node, nodes)) {
          break;
        }
      }
    }
    return newTitle;
  },
  addNode: function(node) {
    this.endNodeEdit();
    node.title = this.ensureUniqueTitle(node);
    return this.undoRedoManager.createAndExecuteCommand('addNode', {
      execute: (function(_this) {
        return function() {
          return _this._addNode(node);
        };
      })(this),
      undo: (function(_this) {
        return function() {
          return _this._removeNode(node);
        };
      })(this)
    });
  },
  removeNode: function(nodeKey) {
    var links, node, ref, transferLinks, transferRelation;
    this.endNodeEdit();
    node = this.nodeKeys[nodeKey];
    transferRelation = (ref = node.transferLink) != null ? ref.relation : void 0;
    links = node.links.slice();
    transferLinks = [];
    _.each(links, function(link) {
      var ref1;
      if ((link != null ? (ref1 = link.transferNode) != null ? ref1.key : void 0 : void 0) != null) {
        return transferLinks.push(link);
      }
    });
    return this.undoRedoManager.createAndExecuteCommand('removeNode', {
      execute: (function(_this) {
        return function() {
          var j, k, len, len1, link, ref1;
          if ((ref1 = node.transferLink) != null) {
            ref1.relation = node.transferLink.defaultRelation();
          }
          for (j = 0, len = links.length; j < len; j++) {
            link = links[j];
            _this._removeLink(link);
          }
          for (k = 0, len1 = transferLinks.length; k < len1; k++) {
            link = transferLinks[k];
            _this._removeTransfer(link);
          }
          return _this._removeNode(node);
        };
      })(this),
      undo: (function(_this) {
        return function() {
          var j, k, len, len1, link, ref1, results;
          if ((ref1 = node.transferLink) != null) {
            ref1.relation = transferRelation;
          }
          _this._addNode(node);
          for (j = 0, len = transferLinks.length; j < len; j++) {
            link = transferLinks[j];
            _this._addTransfer(link);
          }
          results = [];
          for (k = 0, len1 = links.length; k < len1; k++) {
            link = links[k];
            results.push(_this._addLink(link));
          }
          return results;
        };
      })(this)
    });
  },
  _addNode: function(node) {
    if (!this.hasNode(node)) {
      this.nodeKeys[node.key] = node;
      this._graphUpdated();
      return this.updateListeners();
    }
  },
  _removeNode: function(node) {
    delete this.nodeKeys[node.key];
    this._graphUpdated();
    return this.updateListeners();
  },
  _addTransfer: function(link) {
    var source, target;
    if (link.transferNode == null) {
      source = link.sourceNode;
      target = link.targetNode;
      link.transferNode = new TransferModel({
        x: source.x + ((target.x - source.x) / 2),
        y: source.y + ((target.y - source.y) / 2)
      });
      link.transferNode.setTransferLink(link);
    }
    return this._addNode(link.transferNode);
  },
  _removeTransfer: function(tLink) {
    var links, transfer;
    transfer = tLink.transferNode;
    if (!transfer) {
      return;
    }
    links = this.getLinks();
    _.each(links, (function(_this) {
      return function(link) {
        if (link.sourceNode === transfer || link.targetNode === transfer) {
          return _this.removeLink(link);
        }
      };
    })(this));
    return this._removeNode(transfer);
  },
  _graphUpdated: function() {
    var key, node, ref, results;
    ref = this.nodeKeys;
    results = [];
    for (key in ref) {
      node = ref[key];
      results.push(node.checkIsInIndependentCycle());
    }
    return results;
  },
  moveNodeCompleted: function(nodeKey, leftDiff, topDiff) {
    this.endNodeEdit();
    return this.undoRedoManager.createAndExecuteCommand('moveNode', {
      execute: (function(_this) {
        return function() {
          return _this.moveNode(nodeKey, 0, 0);
        };
      })(this),
      undo: (function(_this) {
        return function() {
          return _this.moveNode(nodeKey, -leftDiff, -topDiff);
        };
      })(this),
      redo: (function(_this) {
        return function() {
          return _this.moveNode(nodeKey, leftDiff, topDiff);
        };
      })(this)
    });
  },
  moveNode: function(nodeKey, leftDiff, topDiff) {
    var node;
    node = this.nodeKeys[nodeKey];
    if (!node) {
      return;
    }
    node.x = node.x + leftDiff;
    node.y = node.y + topDiff;
    return this.updateListeners();
  },
  selectedNodes: function() {
    return this.selectionManager.getNodeInspection() || [];
  },
  selectedLinks: function() {
    return this.selectionManager.getLinkInspection() || [];
  },
  editingNode: function() {
    return this.selectionManager.selection(SelectionManager.NodeTitleEditing)[0] || null;
  },
  editNode: function(nodeKey) {
    return this.selectionManager.selectNodeForTitleEditing(this.nodeKeys[nodeKey]);
  },
  selectNode: function(nodeKey) {
    this.endNodeEdit();
    return this.selectionManager.selectNodeForInspection(this.nodeKeys[nodeKey]);
  },
  _notifyNodeChanged: function(node) {
    this._maybeChangeSelectedItem(node);
    return this.updateListeners();
  },
  changeNode: function(data, node) {
    var _node, accumulatorChanged, changedLinks, j, k, key, len, len1, link, nodeChanged, nodes, originalData, originalRelations, results;
    _node = node || this.selectedNodes();
    nodes = [].concat(_node);
    results = [];
    for (j = 0, len = nodes.length; j < len; j++) {
      node = nodes[j];
      if (node) {
        originalData = {
          title: node.title,
          image: node.image,
          paletteItem: node.paletteItem,
          color: node.color,
          initialValue: node.initialValue,
          value: node.value || node.initialValue,
          min: node.min,
          max: node.max,
          isAccumulator: node.isAccumulator,
          allowNegativeValues: node.allowNegativeValues,
          combineMethod: node.combineMethod,
          valueDefinedSemiQuantitatively: node.valueDefinedSemiQuantitatively
        };
        nodeChanged = false;
        for (key in data) {
          if (data.hasOwnProperty(key)) {
            if (data[key] !== originalData[key]) {
              nodeChanged = true;
            }
          }
        }
        if (nodeChanged) {
          accumulatorChanged = (data.isAccumulator != null) && (!!data.isAccumulator !== !!originalData.isAccumulator);
          if (accumulatorChanged) {
            changedLinks = [].concat(node.inLinks()).concat(_.filter(node.outLinks(), function(link) {
              return link.relation.type === 'transfer' || link.relation.type === 'initial-value';
            }));
            originalRelations = {};
            for (k = 0, len1 = changedLinks.length; k < len1; k++) {
              link = changedLinks[k];
              originalRelations[link.key] = link.relation;
            }
          }
          this.undoRedoManager.startCommandBatch();
          this.undoRedoManager.createAndExecuteCommand('changeNode', {
            execute: (function(_this) {
              return function() {
                var l, len2;
                if (accumulatorChanged) {
                  for (l = 0, len2 = changedLinks.length; l < len2; l++) {
                    link = changedLinks[l];
                    _this._changeLink(link, {
                      relation: link.defaultRelation()
                    });
                  }
                }
                return _this._changeNode(node, data);
              };
            })(this),
            undo: (function(_this) {
              return function() {
                var l, len2;
                _this._changeNode(node, originalData);
                if (accumulatorChanged) {
                  for (l = 0, len2 = changedLinks.length; l < len2; l++) {
                    link = changedLinks[l];
                    _this._changeLink(link, {
                      relation: originalRelations[link.key]
                    });
                  }
                }
              };
            })(this)
          });
          results.push(this.undoRedoManager.endCommandBatch());
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  _changeNode: function(node, data, notifyCodap) {
    var codapConnect, j, key, len, prev, ref;
    if (notifyCodap == null) {
      notifyCodap = true;
    }
    log.info("Change for " + node.title);
    ref = NodeModel.fields;
    for (j = 0, len = ref.length; j < len; j++) {
      key = ref[j];
      if (data.hasOwnProperty(key)) {
        log.info("Change " + key + " for " + node.title);
        prev = node[key];
        node[key] = data[key];
        if (key === 'title') {
          if (notifyCodap && this.usingCODAP) {
            codapConnect = CodapConnect.instance(DEFAULT_CONTEXT_NAME);
            codapConnect.sendRenameAttribute(node.key, prev);
          }
          this._maybeChangeTransferTitle(node);
        }
      }
    }
    node.normalizeValues(_.keys(data));
    return this._notifyNodeChanged(node);
  },
  changeNodeProperty: function(property, value, node) {
    var data;
    data = {};
    data[property] = value;
    return this.changeNode(data, node);
  },
  changeNodeWithKey: function(key, data) {
    var node;
    node = this.nodeKeys[key];
    if (node) {
      return this.changeNode(data, node);
    }
  },
  startNodeEdit: function() {
    return this.undoRedoManager.startCommandBatch("changeNode");
  },
  endNodeEdit: function() {
    return this.undoRedoManager.endCommandBatch();
  },
  clickLink: function(link, multipleSelectionsAllowed) {
    var isDoubleClick, now, singleClickHandler;
    now = (new Date()).getTime();
    isDoubleClick = now - (this.lastClickLinkTime || 0) <= 250;
    this.lastClickLinkTime = now;
    clearTimeout(this.lastClickLinkTimeout);
    if (isDoubleClick) {
      this.selectionManager.selectNodeForInspection(link.targetNode);
      return InspectorPanelStore.actions.openInspectorPanel('relations', {
        link: link
      });
    } else {
      singleClickHandler = (function(_this) {
        return function() {
          if (_this.selectionManager.isSelected(link)) {
            return _this.selectionManager.selectLinkForTitleEditing(link);
          } else {
            return _this.selectionManager.selectLinkForInspection(link, multipleSelectionsAllowed);
          }
        };
      })(this);
      return this.lastClickLinkTimeout = setTimeout(singleClickHandler, 250);
    }
  },
  editLink: function(link) {
    return this.selectionManager.selectLinkForTitleEditing(link);
  },
  changeLink: function(link, changes) {
    var originalData;
    if (changes == null) {
      changes = {};
    }
    if (changes.deleted) {
      return this.removeSelectedLinks();
    } else if (link) {
      originalData = {
        title: link.title,
        color: link.color,
        relation: link.relation,
        reasoning: link.reasoning
      };
      this.undoRedoManager.startCommandBatch();
      this.undoRedoManager.createAndExecuteCommand('changeLink', {
        execute: (function(_this) {
          return function() {
            return _this._changeLink(link, changes);
          };
        })(this),
        undo: (function(_this) {
          return function() {
            return _this._changeLink(link, originalData);
          };
        })(this)
      });
      return this.undoRedoManager.endCommandBatch();
    }
  },
  _maybeChangeSelectedItem: function(item) {
    if (this.selectionManager.isSelected(item)) {
      return this.selectionManager._notifySelectionChange();
    }
  },
  _maybeChangeRelation: function(link, relation) {
    if (relation && relation.isTransfer) {
      return this._addTransfer(link);
    } else {
      return this._removeTransfer(link);
    }
  },
  _maybeChangeTransferTitle: function(changedNode) {
    var key, node, ref, results, transferLink;
    ref = this.nodeKeys;
    results = [];
    for (key in ref) {
      node = ref[key];
      transferLink = node.transferLink;
      if (transferLink && ((transferLink.sourceNode === changedNode) || (transferLink.targetNode === changedNode))) {
        results.push(this.changeNodeWithKey(key, {
          title: node.computeTitle()
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  _changeLink: function(link, changes) {
    var j, key, len, ref;
    log.info("Change  for " + link.title);
    ref = ['title', 'color', 'relation', 'reasoning'];
    for (j = 0, len = ref.length; j < len; j++) {
      key = ref[j];
      if (changes[key] != null) {
        log.info("Change " + key + " for " + link.title);
        link[key] = changes[key];
      }
    }
    this._maybeChangeRelation(link, changes.relation);
    this._maybeChangeSelectedItem(link);
    this._graphUpdated();
    return this.updateListeners();
  },
  _nameForNode: function(node) {
    return this.nodeKeys[node];
  },
  newLinkFromEvent: function(info) {
    var endKey, endTerminal, newLink, startKey, startTerminal;
    newLink = {};
    startKey = $(info.source).data('node-key') || 'undefined';
    endKey = $(info.target).data('node-key') || 'undefined';
    startTerminal = info.connection.endpoints[0].anchor.type === "Top" ? "a" : "b";
    endTerminal = info.connection.endpoints[1].anchor.type === "Top" ? "a" : "b";
    this.importLink({
      sourceNode: startKey,
      targetNode: endKey,
      sourceTerminal: startTerminal,
      targetTerminal: endTerminal,
      color: info.color,
      title: info.title
    });
    return true;
  },
  deleteAll: function() {
    var node;
    for (node in this.nodeKeys) {
      this.removeNode(node);
    }
    this.setFilename('New Model');
    return this.undoRedoManager.clearHistory();
  },
  removeSelectedNodes: function() {
    var j, len, node, nodeKey, results, selectedNodeKeys;
    selectedNodeKeys = (function() {
      var j, len, ref, results;
      ref = this.selectedNodes();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        results.push(node.key);
      }
      return results;
    }).call(this);
    results = [];
    for (j = 0, len = selectedNodeKeys.length; j < len; j++) {
      nodeKey = selectedNodeKeys[j];
      results.push(this.removeNode(nodeKey));
    }
    return results;
  },
  removeSelectedLinks: function() {
    var j, len, ref, results, selectedLink;
    ref = this.selectedLinks();
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      selectedLink = ref[j];
      results.push(this.removeLink(selectedLink));
    }
    return results;
  },
  deleteSelected: function() {
    log.info("Deleting selected items");
    this.undoRedoManager.startCommandBatch();
    this.removeSelectedLinks();
    this.removeSelectedNodes();
    this.undoRedoManager.endCommandBatch();
    return this.selectionManager.clearSelection();
  },
  removeLinksForNode: function(node) {
    var j, len, link, ref, results;
    ref = node.links;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      link = ref[j];
      results.push(this.removeLink(link));
    }
    return results;
  },
  getDescription: function(nodes, links) {
    var linkDescription, modelDescription, settings;
    settings = SimulationStore.store.settings;
    linkDescription = "";
    modelDescription = "steps:" + settings.duration + "|cap:" + settings.capNodeValues + "|";
    _.each(links, function(link) {
      var capValue, isCappedAccumulator, ref, source, target, transfer;
      if (!((source = link.sourceNode) && (target = link.targetNode))) {
        return;
      }
      linkDescription += source.x + "," + source.y + ";";
      linkDescription += link.relation.formula + ";";
      linkDescription += target.x + "," + target.y + "|";
      if (link.relation.isDefined) {
        isCappedAccumulator = source.isAccumulator && !source.allowNegativeValues;
        capValue = isCappedAccumulator ? ':cap' : '';
        modelDescription += source.key + ":" + source.initialValue + capValue + ";";
        modelDescription += link.relation.formula + ";";
        if (link.relation.type === 'transfer') {
          transfer = link.transferNode;
          if (transfer) {
            modelDescription += transfer.key + ":" + transfer.initialValue + ";";
          }
        }
        return modelDescription += "" + target.key + (target.isAccumulator ? ':' + ((ref = target.value) != null ? ref : target.initialValue) : '') + "|";
      }
    });
    linkDescription += nodes.length;
    return {
      links: linkDescription,
      model: modelDescription
    };
  },
  getMinimumComplexity: function() {
    var links, minComplexity;
    minComplexity = 0;
    links = this.getLinks();
    _.each(links, function(link) {
      var linkComplexity, ref, relation, source, target;
      if (!((source = link.sourceNode) && (target = link.targetNode))) {
        return;
      }
      if (source.isAccumulator || target.isAccumulator) {
        return minComplexity = 3;
      } else if ((ref = link.relation) != null ? ref.formula : void 0) {
        relation = RelationFactory.selectionsFromRelation(link.relation);
        if (relation.scalar.id === "aboutTheSame") {
          linkComplexity = 1;
        } else {
          linkComplexity = 2;
        }
        if (linkComplexity > minComplexity) {
          return minComplexity = linkComplexity;
        }
      }
    });
    return minComplexity;
  },
  loadData: function(data) {
    var importer;
    log.info("json success");
    importer = new Importer(this, AppSettingsStore.store, PaletteStore);
    importer.importData(data);
    return this.undoRedoManager.clearHistory();
  },
  loadDataFromUrl: (function(_this) {
    return function(url) {
      log.info("loading local data");
      log.info("url " + url);
      return $.ajax({
        url: url,
        dataType: 'json',
        success: function(data) {
          return _this.loadData(data);
        },
        error: function(xhr, status, err) {
          return log.error(url, status, err.toString());
        }
      });
    };
  })(this),
  serialize: function(palette) {
    var data, key, link, linkExports, node, nodeExports, settings;
    nodeExports = (function() {
      var ref, results;
      ref = this.nodeKeys;
      results = [];
      for (key in ref) {
        node = ref[key];
        results.push(node.toExport());
      }
      return results;
    }).call(this);
    linkExports = (function() {
      var ref, results;
      ref = this.linkKeys;
      results = [];
      for (key in ref) {
        link = ref[key];
        results.push(link.toExport());
      }
      return results;
    }).call(this);
    settings = AppSettingsStore.store.serialize();
    settings.simulation = SimulationStore.store.serialize();
    data = {
      version: Migrations.latestVersion(),
      filename: this.filename,
      palette: palette,
      nodes: nodeExports,
      links: linkExports,
      settings: settings
    };
    return data;
  },
  toJsonString: function(palette) {
    return JSON.stringify(this.serialize(palette));
  },
  getGraphState: function() {
    var description, links, nodes;
    nodes = this.getNodes();
    links = this.getLinks();
    description = this.getDescription(nodes, links);
    return {
      nodes: nodes,
      links: links,
      description: description
    };
  },
  updateListeners: function() {
    var graphState;
    graphState = this.getGraphState();
    GraphActions.graphChanged.trigger(graphState);
    if (this.lastRunModel !== graphState.description.model) {
      this._trimSimulation();
      SimulationStore.actions.runSimulation();
      this.lastRunModel = graphState.description.model;
    }
  }
});

mixin = {
  getInitialState: function() {
    return GraphStore.getGraphState();
  },
  componentDidMount: function() {
    return this.unsubscribe = GraphActions.graphChanged.listen(this.onGraphChanged);
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onGraphChanged: function(state) {
    var ref;
    this.setState(state);
    return (ref = this.diagramToolkit) != null ? ref.repaint() : void 0;
  }
};

module.exports = {
  store: GraphStore,
  mixin: mixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../actions/codap-actions":620,"../actions/graph-actions":621,"../data/migrations/migrations":648,"../models/codap-connect":653,"../models/link":655,"../models/node":656,"../models/relation-factory":657,"../models/selection-manager":659,"../models/transfer":661,"../stores/app-settings-store":662,"../stores/inspector-panel-store":667,"../stores/palette-delete-dialog-store":669,"../stores/palette-store":670,"../stores/simulation-store":671,"../utils/importer":679,"../utils/translate":689,"../utils/undo-redo":690}],666:[function(require,module,exports){
var PaletteStore, imageDialogActions, listenerMixin, store;

PaletteStore = require('./palette-store');

imageDialogActions = Reflux.createActions(["open", "close", "update", "cancel"]);

store = Reflux.createStore({
  listenables: [imageDialogActions],
  init: function() {
    this.enableListening();
    return this.initValues();
  },
  initValues: function() {
    this.showingDialog = false;
    this.keepShowing = false;
    this.callback = function() {
      return void 0;
    };
    this.resetPaletteItem();
    return this._updateChanges();
  },
  resetPaletteItem: function() {
    return this.paletteItem = null;
  },
  enableListening: function() {
    return PaletteStore.store.listen(this.onPaletteSelect);
  },
  onOpen: function(callback) {
    if (callback == null) {
      callback = false;
    }
    this.keepShowing = true;
    this.resetPaletteItem();
    this.showingDialog = true;
    this.callback = null;
    if (callback) {
      this.callback = callback;
      this.keepShowing = false;
    }
    return this._updateChanges();
  },
  onPaletteSelect: function(status) {
    this.paletteItem = status.selectedPaletteItem;
    return this.finish();
  },
  close: function() {
    this.showingDialog = false;
    return this.resetPaletteItem();
  },
  onClose: function() {
    this.close();
    return this._updateChanges();
  },
  onUpdate: function(data) {
    if (this.paletteItem) {
      this.paletteItem = _.merge(this.paletteItem, data);
    } else {

    }
    this.paletteItem || (this.paletteItem = data);
    return this._updateChanges();
  },
  onCancel: function() {
    this.resetPaletteItem();
    return this.finish();
  },
  invoke_callback: function() {
    if (typeof this.callback === "function") {
      this.callback(this.paletteItem);
    }
    return this.callback = null;
  },
  finish: function() {
    this._updateChanges();
    this.invoke_callback();
    this.callback = null;
    this.resetPaletteItem();
    this._updateChanges();
    if (!this.keepShowing) {
      return imageDialogActions.close.trigger();
    }
  },
  _updateChanges: function() {
    var data;
    data = {
      showingDialog: this.showingDialog,
      keepShowing: this.keepShowing,
      paletteItem: this.paletteItem
    };
    return this.trigger(data);
  }
});

listenerMixin = {
  actions: imageDialogActions,
  getInitialState: function() {
    return {
      showingDialog: store.showingDialog,
      keepShowing: store.keepShowing,
      paletteItem: store.paletteItem,
      selectedImage: store.paletteItem
    };
  },
  componentDidMount: function() {
    return this.unsubscribe = store.listen(this.onChange);
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onChange: function(status) {
    return this.setState({
      showingDialog: status.showingDialog,
      keepShowing: status.keepShowing,
      paletteItem: status.paletteItem,
      selectedImage: status.paletteItem
    });
  }
};

module.exports = {
  store: store,
  actions: imageDialogActions,
  mixin: listenerMixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL2ltYWdlLWRpYWxvZy1zdG9yZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9zdG9yZXMvaW1hZ2UtZGlhbG9nLXN0b3JlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxJQUFBOztBQUFBLFlBQUEsR0FBZSxPQUFBLENBQVEsaUJBQVI7O0FBRWYsa0JBQUEsR0FBcUIsTUFBTSxDQUFDLGFBQVAsQ0FBcUIsQ0FDdEMsTUFEc0MsRUFDOUIsT0FEOEIsRUFDckIsUUFEcUIsRUFDWCxRQURXLENBQXJCOztBQUtyQixLQUFBLEdBQVEsTUFBTSxDQUFDLFdBQVAsQ0FDTjtFQUFBLFdBQUEsRUFBYSxDQUFFLGtCQUFGLENBQWI7RUFFQSxJQUFBLEVBQU0sU0FBQTtJQUNKLElBQUMsQ0FBQSxlQUFELENBQUE7V0FDQSxJQUFDLENBQUEsVUFBRCxDQUFBO0VBRkksQ0FGTjtFQU1BLFVBQUEsRUFBWSxTQUFBO0lBQ1YsSUFBQyxDQUFBLGFBQUQsR0FBb0I7SUFDcEIsSUFBQyxDQUFBLFdBQUQsR0FBb0I7SUFDcEIsSUFBQyxDQUFBLFFBQUQsR0FBb0IsU0FBQTthQUFHO0lBQUg7SUFFcEIsSUFBQyxDQUFBLGdCQUFELENBQUE7V0FDQSxJQUFDLENBQUEsY0FBRCxDQUFBO0VBTlUsQ0FOWjtFQWNBLGdCQUFBLEVBQWtCLFNBQUE7V0FDaEIsSUFBQyxDQUFBLFdBQUQsR0FBZTtFQURDLENBZGxCO0VBaUJBLGVBQUEsRUFBaUIsU0FBQTtXQUNmLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBbkIsQ0FBMEIsSUFBQyxDQUFBLGVBQTNCO0VBRGUsQ0FqQmpCO0VBb0JBLE1BQUEsRUFBUSxTQUFDLFFBQUQ7O01BQUMsV0FBUzs7SUFDaEIsSUFBQyxDQUFBLFdBQUQsR0FBZTtJQUNmLElBQUMsQ0FBQSxnQkFBRCxDQUFBO0lBQ0EsSUFBQyxDQUFBLGFBQUQsR0FBaUI7SUFFakIsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUNaLElBQUcsUUFBSDtNQUNFLElBQUMsQ0FBQSxRQUFELEdBQVk7TUFDWixJQUFDLENBQUEsV0FBRCxHQUFlLE1BRmpCOztXQUdBLElBQUMsQ0FBQSxjQUFELENBQUE7RUFUTSxDQXBCUjtFQStCQSxlQUFBLEVBQWlCLFNBQUMsTUFBRDtJQUNmLElBQUMsQ0FBQSxXQUFELEdBQWUsTUFBTSxDQUFDO1dBQ3RCLElBQUMsQ0FBQSxNQUFELENBQUE7RUFGZSxDQS9CakI7RUFtQ0EsS0FBQSxFQUFPLFNBQUE7SUFDTCxJQUFDLENBQUEsYUFBRCxHQUFpQjtXQUNqQixJQUFDLENBQUEsZ0JBQUQsQ0FBQTtFQUZLLENBbkNQO0VBdUNBLE9BQUEsRUFBUyxTQUFBO0lBQ1AsSUFBQyxDQUFBLEtBQUQsQ0FBQTtXQUNBLElBQUMsQ0FBQSxjQUFELENBQUE7RUFGTyxDQXZDVDtFQTJDQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0lBQ1IsSUFBRyxJQUFDLENBQUEsV0FBSjtNQUNFLElBQUMsQ0FBQSxXQUFELEdBQWUsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsV0FBVCxFQUFzQixJQUF0QixFQURqQjtLQUFBLE1BQUE7QUFBQTs7SUFHQSxJQUFDLENBQUEsZ0JBQUQsSUFBQyxDQUFBLGNBQWdCO1dBQ2pCLElBQUMsQ0FBQSxjQUFELENBQUE7RUFMUSxDQTNDVjtFQWtEQSxRQUFBLEVBQVUsU0FBQTtJQUNSLElBQUMsQ0FBQSxnQkFBRCxDQUFBO1dBQ0EsSUFBQyxDQUFBLE1BQUQsQ0FBQTtFQUZRLENBbERWO0VBc0RBLGVBQUEsRUFBaUIsU0FBQTs7TUFDZixJQUFDLENBQUEsU0FBVSxJQUFDLENBQUE7O1dBQ1osSUFBQyxDQUFBLFFBQUQsR0FBWTtFQUZHLENBdERqQjtFQTBEQSxNQUFBLEVBQVEsU0FBQTtJQUNOLElBQUMsQ0FBQSxjQUFELENBQUE7SUFDQSxJQUFDLENBQUEsZUFBRCxDQUFBO0lBQ0EsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUNaLElBQUMsQ0FBQSxnQkFBRCxDQUFBO0lBQ0EsSUFBQyxDQUFBLGNBQUQsQ0FBQTtJQUNBLElBQUEsQ0FBTyxJQUFDLENBQUEsV0FBUjthQUNFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxPQUF6QixDQUFBLEVBREY7O0VBTk0sQ0ExRFI7RUFtRUEsY0FBQSxFQUFnQixTQUFBO0FBQ2QsUUFBQTtJQUFBLElBQUEsR0FDRTtNQUFBLGFBQUEsRUFBZSxJQUFDLENBQUEsYUFBaEI7TUFDQSxXQUFBLEVBQWEsSUFBQyxDQUFBLFdBRGQ7TUFFQSxXQUFBLEVBQWEsSUFBQyxDQUFBLFdBRmQ7O1dBS0YsSUFBQyxDQUFBLE9BQUQsQ0FBUyxJQUFUO0VBUGMsQ0FuRWhCO0NBRE07O0FBOEVSLGFBQUEsR0FDRTtFQUFBLE9BQUEsRUFBUyxrQkFBVDtFQUVBLGVBQUEsRUFBaUIsU0FBQTtXQUNmO01BQUEsYUFBQSxFQUFlLEtBQUssQ0FBQyxhQUFyQjtNQUNBLFdBQUEsRUFBYSxLQUFLLENBQUMsV0FEbkI7TUFFQSxXQUFBLEVBQWEsS0FBSyxDQUFDLFdBRm5CO01BR0EsYUFBQSxFQUFlLEtBQUssQ0FBQyxXQUhyQjs7RUFEZSxDQUZqQjtFQVFBLGlCQUFBLEVBQW1CLFNBQUE7V0FDakIsSUFBQyxDQUFBLFdBQUQsR0FBZSxLQUFLLENBQUMsTUFBTixDQUFhLElBQUMsQ0FBQSxRQUFkO0VBREUsQ0FSbkI7RUFXQSxvQkFBQSxFQUFzQixTQUFBO1dBQ3BCLElBQUMsQ0FBQSxXQUFELENBQUE7RUFEb0IsQ0FYdEI7RUFjQSxRQUFBLEVBQVUsU0FBQyxNQUFEO1dBQ1IsSUFBQyxDQUFBLFFBQUQsQ0FDRTtNQUFBLGFBQUEsRUFBZSxNQUFNLENBQUMsYUFBdEI7TUFDQSxXQUFBLEVBQWEsTUFBTSxDQUFDLFdBRHBCO01BRUEsV0FBQSxFQUFhLE1BQU0sQ0FBQyxXQUZwQjtNQUdBLGFBQUEsRUFBZSxNQUFNLENBQUMsV0FIdEI7S0FERjtFQURRLENBZFY7OztBQXFCRixNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsS0FBQSxFQUFPLEtBQVA7RUFDQSxPQUFBLEVBQVMsa0JBRFQ7RUFFQSxLQUFBLEVBQU8sYUFGUCJ9

},{"./palette-store":670}],667:[function(require,module,exports){
var InspectorPanelActions, InspectorPanelStore, mixin;

InspectorPanelActions = Reflux.createActions(["openInspectorPanel", "closeInspectorPanel"]);

InspectorPanelStore = Reflux.createStore({
  listenables: [InspectorPanelActions],
  init: function() {
    return this.settings = {
      nowShowing: null,
      selectedLink: null
    };
  },
  onOpenInspectorPanel: function(nowShowing, options) {
    this.settings.nowShowing = nowShowing;
    if ((options != null ? options.link : void 0) != null) {
      this.settings.selectedLink = options.link;
    }
    return this.notifyChange();
  },
  onCloseInspectorPanel: function() {
    this.settings.nowShowing = null;
    return this.notifyChange();
  },
  notifyChange: function() {
    return this.trigger(_.clone(this.settings));
  }
});

mixin = {
  getInitialState: function() {
    return _.clone(InspectorPanelStore.settings);
  },
  componentDidMount: function() {
    return this.inspectorPanelUnsubscribe = InspectorPanelStore.listen(this.onInspectorPanelStoreChange);
  },
  componentWillUnmount: function() {
    return this.inspectorPanelUnsubscribe();
  },
  onInspectorPanelStoreChange: function(newData) {
    return this.setState(_.clone(newData));
  }
};

module.exports = {
  actions: InspectorPanelActions,
  store: InspectorPanelStore,
  mixin: mixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL2luc3BlY3Rvci1wYW5lbC1zdG9yZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9zdG9yZXMvaW5zcGVjdG9yLXBhbmVsLXN0b3JlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBOztBQUFBLHFCQUFBLEdBQXdCLE1BQU0sQ0FBQyxhQUFQLENBQ3RCLENBQ0Usb0JBREYsRUFFRSxxQkFGRixDQURzQjs7QUFPeEIsbUJBQUEsR0FBc0IsTUFBTSxDQUFDLFdBQVAsQ0FDcEI7RUFBQSxXQUFBLEVBQWEsQ0FBQyxxQkFBRCxDQUFiO0VBRUEsSUFBQSxFQUFNLFNBQUE7V0FDSixJQUFDLENBQUEsUUFBRCxHQUNFO01BQUEsVUFBQSxFQUFZLElBQVo7TUFDQSxZQUFBLEVBQWMsSUFEZDs7RUFGRSxDQUZOO0VBT0Esb0JBQUEsRUFBc0IsU0FBQyxVQUFELEVBQWEsT0FBYjtJQUNwQixJQUFDLENBQUEsUUFBUSxDQUFDLFVBQVYsR0FBdUI7SUFDdkIsSUFBeUMsaURBQXpDO01BQUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxZQUFWLEdBQXlCLE9BQU8sQ0FBQyxLQUFqQzs7V0FDQSxJQUFDLENBQUEsWUFBRCxDQUFBO0VBSG9CLENBUHRCO0VBWUEscUJBQUEsRUFBdUIsU0FBQTtJQUNyQixJQUFDLENBQUEsUUFBUSxDQUFDLFVBQVYsR0FBdUI7V0FDdkIsSUFBQyxDQUFBLFlBQUQsQ0FBQTtFQUZxQixDQVp2QjtFQWdCQSxZQUFBLEVBQWMsU0FBQTtXQUNaLElBQUMsQ0FBQSxPQUFELENBQVMsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsUUFBVCxDQUFUO0VBRFksQ0FoQmQ7Q0FEb0I7O0FBb0J0QixLQUFBLEdBQ0U7RUFBQSxlQUFBLEVBQWlCLFNBQUE7V0FDZixDQUFDLENBQUMsS0FBRixDQUFRLG1CQUFtQixDQUFDLFFBQTVCO0VBRGUsQ0FBakI7RUFHQSxpQkFBQSxFQUFtQixTQUFBO1dBQ2pCLElBQUMsQ0FBQSx5QkFBRCxHQUE2QixtQkFBbUIsQ0FBQyxNQUFwQixDQUEyQixJQUFDLENBQUEsMkJBQTVCO0VBRFosQ0FIbkI7RUFNQSxvQkFBQSxFQUFzQixTQUFBO1dBQ3BCLElBQUMsQ0FBQSx5QkFBRCxDQUFBO0VBRG9CLENBTnRCO0VBU0EsMkJBQUEsRUFBNkIsU0FBQyxPQUFEO1dBQzNCLElBQUMsQ0FBQSxRQUFELENBQVUsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxPQUFSLENBQVY7RUFEMkIsQ0FUN0I7OztBQVlGLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxPQUFBLEVBQVMscUJBQVQ7RUFDQSxLQUFBLEVBQU8sbUJBRFA7RUFFQSxLQUFBLEVBQU8sS0FGUCJ9

},{}],668:[function(require,module,exports){
var GraphActions, PaletteStore, mixin, nodeActions, nodeStore;

PaletteStore = require('./palette-store');

GraphActions = require('../actions/graph-actions');

nodeActions = Reflux.createActions(["nodesChanged"]);

nodeStore = Reflux.createStore({
  listenables: [nodeActions],
  init: function() {
    this.nodes = [];
    this.paletteItemHasNodes = false;
    this.selectedPaletteItem = null;
    PaletteStore.store.listen(this.paletteChanged);
    return GraphActions.graphChanged.listen(this.graphChanged);
  },
  onNodesChanged: function(nodes) {
    this.nodes = nodes;
    return this.internalUpdate();
  },
  graphChanged: function(status) {
    this.nodes = status.nodes;
    return this.internalUpdate();
  },
  paletteChanged: function() {
    this.selectedPaletteItem = PaletteStore.store.selectedPaletteItem;
    return this.internalUpdate();
  },
  internalUpdate: function() {
    this.paletteItemHasNodes = false;
    if (!this.selectedPaletteItem) {
      return;
    }
    _.each(this.nodes, (function(_this) {
      return function(node) {
        if (node.paletteItemIs(_this.selectedPaletteItem)) {
          return _this.paletteItemHasNodes = true;
        }
      };
    })(this));
    return this.notifyChange();
  },
  notifyChange: function() {
    var data;
    data = {
      nodes: this.nodes,
      paletteItemHasNodes: this.paletteItemHasNodes
    };
    return this.trigger(data);
  }
});

mixin = {
  getInitialState: function() {
    return {
      nodes: nodeStore.nodes,
      paletteItemHasNodes: nodeStore.paletteItemHasNodes
    };
  },
  componentDidMount: function() {
    return this.unsubscribe = nodeStore.listen(this.onNodesChange);
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onNodesChange: function(status) {
    return this.setState({
      paletteItemHasNodes: status.paletteItemHasNodes
    });
  }
};

module.exports = {
  actions: nodeActions,
  store: nodeStore,
  mixin: mixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL25vZGVzLXN0b3JlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3N0b3Jlcy9ub2Rlcy1zdG9yZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxZQUFBLEdBQXFCLE9BQUEsQ0FBUSxpQkFBUjs7QUFDckIsWUFBQSxHQUFxQixPQUFBLENBQVEsMEJBQVI7O0FBRXJCLFdBQUEsR0FBYyxNQUFNLENBQUMsYUFBUCxDQUNaLENBQ0UsY0FERixDQURZOztBQU1kLFNBQUEsR0FBYyxNQUFNLENBQUMsV0FBUCxDQUNaO0VBQUEsV0FBQSxFQUFhLENBQUMsV0FBRCxDQUFiO0VBRUEsSUFBQSxFQUFNLFNBQUE7SUFDSixJQUFDLENBQUEsS0FBRCxHQUF1QjtJQUN2QixJQUFDLENBQUEsbUJBQUQsR0FBdUI7SUFDdkIsSUFBQyxDQUFBLG1CQUFELEdBQXVCO0lBRXZCLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBbkIsQ0FBMEIsSUFBQyxDQUFBLGNBQTNCO1dBQ0EsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUExQixDQUFrQyxJQUFDLENBQUEsWUFBbkM7RUFOSSxDQUZOO0VBVUEsY0FBQSxFQUFnQixTQUFDLEtBQUQ7SUFDZCxJQUFDLENBQUEsS0FBRCxHQUFTO1dBQ1QsSUFBQyxDQUFBLGNBQUQsQ0FBQTtFQUZjLENBVmhCO0VBY0EsWUFBQSxFQUFjLFNBQUMsTUFBRDtJQUNaLElBQUMsQ0FBQSxLQUFELEdBQVMsTUFBTSxDQUFDO1dBQ2hCLElBQUMsQ0FBQSxjQUFELENBQUE7RUFGWSxDQWRkO0VBa0JBLGNBQUEsRUFBZ0IsU0FBQTtJQUNkLElBQUMsQ0FBQSxtQkFBRCxHQUF1QixZQUFZLENBQUMsS0FBSyxDQUFDO1dBQzFDLElBQUMsQ0FBQSxjQUFELENBQUE7RUFGYyxDQWxCaEI7RUFzQkEsY0FBQSxFQUFnQixTQUFBO0lBQ2QsSUFBQyxDQUFBLG1CQUFELEdBQXVCO0lBQ3ZCLElBQUEsQ0FBYyxJQUFDLENBQUEsbUJBQWY7QUFBQSxhQUFBOztJQUNBLENBQUMsQ0FBQyxJQUFGLENBQU8sSUFBQyxDQUFBLEtBQVIsRUFBZSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtRQUNiLElBQUcsSUFBSSxDQUFDLGFBQUwsQ0FBbUIsS0FBQyxDQUFBLG1CQUFwQixDQUFIO2lCQUNFLEtBQUMsQ0FBQSxtQkFBRCxHQUF1QixLQUR6Qjs7TUFEYTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZjtXQUdBLElBQUMsQ0FBQSxZQUFELENBQUE7RUFOYyxDQXRCaEI7RUE4QkEsWUFBQSxFQUFjLFNBQUE7QUFDWixRQUFBO0lBQUEsSUFBQSxHQUNFO01BQUEsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFSO01BQ0EsbUJBQUEsRUFBcUIsSUFBQyxDQUFBLG1CQUR0Qjs7V0FFRixJQUFDLENBQUEsT0FBRCxDQUFTLElBQVQ7RUFKWSxDQTlCZDtDQURZOztBQXFDZCxLQUFBLEdBQ0U7RUFBQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLEtBQUEsRUFBTyxTQUFTLENBQUMsS0FBakI7TUFDQSxtQkFBQSxFQUFxQixTQUFTLENBQUMsbUJBRC9COztFQURlLENBQWpCO0VBSUEsaUJBQUEsRUFBbUIsU0FBQTtXQUNqQixJQUFDLENBQUEsV0FBRCxHQUFlLFNBQVMsQ0FBQyxNQUFWLENBQWlCLElBQUMsQ0FBQSxhQUFsQjtFQURFLENBSm5CO0VBT0Esb0JBQUEsRUFBc0IsU0FBQTtXQUNwQixJQUFDLENBQUEsV0FBRCxDQUFBO0VBRG9CLENBUHRCO0VBVUEsYUFBQSxFQUFlLFNBQUMsTUFBRDtXQUNiLElBQUMsQ0FBQSxRQUFELENBRUU7TUFBQSxtQkFBQSxFQUFxQixNQUFNLENBQUMsbUJBQTVCO0tBRkY7RUFEYSxDQVZmOzs7QUFlRixNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsT0FBQSxFQUFTLFdBQVQ7RUFDQSxLQUFBLEVBQU8sU0FEUDtFQUVBLEtBQUEsRUFBTyxLQUZQIn0=

},{"../actions/graph-actions":621,"./palette-store":670}],669:[function(require,module,exports){
var PaletteStore, UndoRedo, listenerMixin, paletteDialogActions, store;

PaletteStore = require('./palette-store');

UndoRedo = require('../utils/undo-redo');

paletteDialogActions = Reflux.createActions(["open", "close", "delete", "cancel", "select"]);

store = Reflux.createStore({
  listenables: [paletteDialogActions],
  init: function() {
    this.initValues();
    return this.undoManger = UndoRedo.instance({
      debug: false
    });
  },
  initValues: function() {
    this.showing = false;
    this.deleted = false;
    this.showReplacement = false;
    this.replacement = null;
    return this._notifyChanges();
  },
  onOpen: function() {
    this.showing = true;
    this.paletteItem = PaletteStore.store.selectedPaletteItem;
    this.options = _.without(PaletteStore.store.palette, this.paletteItem);
    this.showReplacement = false;
    this.deleted = false;
    this.replacement = null;
    _.each((require('./nodes-store')).store.nodes, (function(_this) {
      return function(node) {
        if (node.paletteItemIs(_this.paletteItem)) {
          return _this.showReplacement = true;
        }
      };
    })(this));
    if (this.showReplacement) {
      this.replacement = this.options[0];
    }
    this.undoManger.startCommandBatch();
    return this._notifyChanges();
  },
  onClose: function() {
    return this.close();
  },
  onSelect: function(replacement) {
    if (replacement) {
      this.replacement = replacement;
      return this._notifyChanges();
    }
  },
  onCancel: function() {
    return this.close();
  },
  onDelete: function(item) {
    this.deleted = true;
    PaletteStore.actions["delete"](item);
    return this.close();
  },
  close: function() {
    this.showing = false;
    this._notifyChanges();
    this.undoManger.endCommandBatch();
    if (this.replacement && this.deleted) {
      return PaletteStore.actions.selectPaletteItem(this.replacement);
    } else if (!this.deleted) {
      this.undoManger.undo(true);
      return PaletteStore.actions.restoreSelection();
    }
  },
  _notifyChanges: function() {
    var data;
    data = {
      showing: this.showing,
      paletteItem: this.paletteItem,
      options: this.options,
      replacement: this.replacement,
      deleted: this.deleted,
      showReplacement: this.showReplacement
    };
    return this.trigger(data);
  }
});

listenerMixin = {
  actions: paletteDialogActions,
  getInitialState: function() {
    return {
      showing: store.showing,
      paletteItem: store.paletteItem,
      options: store.options,
      replacement: store.replacement,
      deleted: store.deleted,
      showReplacement: store.showReplacement
    };
  },
  componentDidMount: function() {
    return this.unsubscribe = store.listen(this.onChange);
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onChange: function(status) {
    return this.setState({
      showing: status.showing,
      paletteItem: status.paletteItem,
      options: status.options,
      replacement: status.replacement,
      deleted: status.deleted,
      showReplacement: status.showReplacement
    });
  }
};

module.exports = {
  store: store,
  actions: paletteDialogActions,
  mixin: listenerMixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL3BhbGV0dGUtZGVsZXRlLWRpYWxvZy1zdG9yZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9zdG9yZXMvcGFsZXR0ZS1kZWxldGUtZGlhbG9nLXN0b3JlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFlBQUEsR0FBZSxPQUFBLENBQVEsaUJBQVI7O0FBQ2YsUUFBQSxHQUFlLE9BQUEsQ0FBUSxvQkFBUjs7QUFFZixvQkFBQSxHQUF1QixNQUFNLENBQUMsYUFBUCxDQUFxQixDQUN4QyxNQUR3QyxFQUNoQyxPQURnQyxFQUN2QixRQUR1QixFQUNiLFFBRGEsRUFDSCxRQURHLENBQXJCOztBQUt2QixLQUFBLEdBQVEsTUFBTSxDQUFDLFdBQVAsQ0FDTjtFQUFBLFdBQUEsRUFBYSxDQUFFLG9CQUFGLENBQWI7RUFFQSxJQUFBLEVBQU0sU0FBQTtJQUNKLElBQUMsQ0FBQSxVQUFELENBQUE7V0FDQSxJQUFDLENBQUEsVUFBRCxHQUFjLFFBQVEsQ0FBQyxRQUFULENBQWtCO01BQUEsS0FBQSxFQUFNLEtBQU47S0FBbEI7RUFGVixDQUZOO0VBTUEsVUFBQSxFQUFZLFNBQUE7SUFDVixJQUFDLENBQUEsT0FBRCxHQUFtQjtJQUNuQixJQUFDLENBQUEsT0FBRCxHQUFtQjtJQUNuQixJQUFDLENBQUEsZUFBRCxHQUFtQjtJQUNuQixJQUFDLENBQUEsV0FBRCxHQUFtQjtXQUNuQixJQUFDLENBQUEsY0FBRCxDQUFBO0VBTFUsQ0FOWjtFQWFBLE1BQUEsRUFBUSxTQUFBO0lBQ04sSUFBQyxDQUFBLE9BQUQsR0FBbUI7SUFDbkIsSUFBQyxDQUFBLFdBQUQsR0FBbUIsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUN0QyxJQUFDLENBQUEsT0FBRCxHQUFtQixDQUFDLENBQUMsT0FBRixDQUFVLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBN0IsRUFBc0MsSUFBQyxDQUFBLFdBQXZDO0lBQ25CLElBQUMsQ0FBQSxlQUFELEdBQW1CO0lBQ25CLElBQUMsQ0FBQSxPQUFELEdBQW1CO0lBQ25CLElBQUMsQ0FBQSxXQUFELEdBQW1CO0lBRW5CLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxPQUFBLENBQVEsZUFBUixDQUFELENBQXlCLENBQUMsS0FBSyxDQUFDLEtBQXZDLEVBQThDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO1FBQzVDLElBQUcsSUFBSSxDQUFDLGFBQUwsQ0FBbUIsS0FBQyxDQUFBLFdBQXBCLENBQUg7aUJBQ0UsS0FBQyxDQUFBLGVBQUQsR0FBbUIsS0FEckI7O01BRDRDO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE5QztJQUlBLElBQUcsSUFBQyxDQUFBLGVBQUo7TUFDRSxJQUFDLENBQUEsV0FBRCxHQUFlLElBQUMsQ0FBQSxPQUFRLENBQUEsQ0FBQSxFQUQxQjs7SUFFQSxJQUFDLENBQUEsVUFBVSxDQUFDLGlCQUFaLENBQUE7V0FDQSxJQUFDLENBQUEsY0FBRCxDQUFBO0VBZk0sQ0FiUjtFQThCQSxPQUFBLEVBQVMsU0FBQTtXQUNQLElBQUMsQ0FBQSxLQUFELENBQUE7RUFETyxDQTlCVDtFQWlDQSxRQUFBLEVBQVUsU0FBQyxXQUFEO0lBQ1IsSUFBRyxXQUFIO01BQ0UsSUFBQyxDQUFBLFdBQUQsR0FBZTthQUNmLElBQUMsQ0FBQSxjQUFELENBQUEsRUFGRjs7RUFEUSxDQWpDVjtFQXNDQSxRQUFBLEVBQVUsU0FBQTtXQUNSLElBQUMsQ0FBQSxLQUFELENBQUE7RUFEUSxDQXRDVjtFQXlDQSxRQUFBLEVBQVUsU0FBQyxJQUFEO0lBQ1IsSUFBQyxDQUFBLE9BQUQsR0FBVztJQUNYLFlBQVksQ0FBQyxPQUFPLEVBQUMsTUFBRCxFQUFwQixDQUE0QixJQUE1QjtXQUNBLElBQUMsQ0FBQSxLQUFELENBQUE7RUFIUSxDQXpDVjtFQThDQSxLQUFBLEVBQU8sU0FBQTtJQUNMLElBQUMsQ0FBQSxPQUFELEdBQVc7SUFDWCxJQUFDLENBQUEsY0FBRCxDQUFBO0lBQ0EsSUFBQyxDQUFBLFVBQVUsQ0FBQyxlQUFaLENBQUE7SUFDQSxJQUFHLElBQUMsQ0FBQSxXQUFELElBQWlCLElBQUMsQ0FBQSxPQUFyQjthQUNFLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQXJCLENBQXVDLElBQUMsQ0FBQSxXQUF4QyxFQURGO0tBQUEsTUFFSyxJQUFHLENBQUksSUFBQyxDQUFBLE9BQVI7TUFDSCxJQUFDLENBQUEsVUFBVSxDQUFDLElBQVosQ0FBaUIsSUFBakI7YUFDQSxZQUFZLENBQUMsT0FBTyxDQUFDLGdCQUFyQixDQUFBLEVBRkc7O0VBTkEsQ0E5Q1A7RUEwREEsY0FBQSxFQUFnQixTQUFBO0FBQ2QsUUFBQTtJQUFBLElBQUEsR0FDRTtNQUFBLE9BQUEsRUFBaUIsSUFBQyxDQUFBLE9BQWxCO01BQ0EsV0FBQSxFQUFpQixJQUFDLENBQUEsV0FEbEI7TUFFQSxPQUFBLEVBQWlCLElBQUMsQ0FBQSxPQUZsQjtNQUdBLFdBQUEsRUFBaUIsSUFBQyxDQUFBLFdBSGxCO01BSUEsT0FBQSxFQUFpQixJQUFDLENBQUEsT0FKbEI7TUFLQSxlQUFBLEVBQWlCLElBQUMsQ0FBQSxlQUxsQjs7V0FNRixJQUFDLENBQUEsT0FBRCxDQUFTLElBQVQ7RUFSYyxDQTFEaEI7Q0FETTs7QUFzRVIsYUFBQSxHQUNFO0VBQUEsT0FBQSxFQUFTLG9CQUFUO0VBRUEsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxPQUFBLEVBQWlCLEtBQUssQ0FBQyxPQUF2QjtNQUNBLFdBQUEsRUFBaUIsS0FBSyxDQUFDLFdBRHZCO01BRUEsT0FBQSxFQUFpQixLQUFLLENBQUMsT0FGdkI7TUFHQSxXQUFBLEVBQWlCLEtBQUssQ0FBQyxXQUh2QjtNQUlBLE9BQUEsRUFBaUIsS0FBSyxDQUFDLE9BSnZCO01BS0EsZUFBQSxFQUFpQixLQUFLLENBQUMsZUFMdkI7O0VBRGUsQ0FGakI7RUFVQSxpQkFBQSxFQUFtQixTQUFBO1dBQ2pCLElBQUMsQ0FBQSxXQUFELEdBQWUsS0FBSyxDQUFDLE1BQU4sQ0FBYSxJQUFDLENBQUEsUUFBZDtFQURFLENBVm5CO0VBYUEsb0JBQUEsRUFBc0IsU0FBQTtXQUNwQixJQUFDLENBQUEsV0FBRCxDQUFBO0VBRG9CLENBYnRCO0VBZ0JBLFFBQUEsRUFBVSxTQUFDLE1BQUQ7V0FDUixJQUFDLENBQUEsUUFBRCxDQUNFO01BQUEsT0FBQSxFQUFpQixNQUFNLENBQUMsT0FBeEI7TUFDQSxXQUFBLEVBQWlCLE1BQU0sQ0FBQyxXQUR4QjtNQUVBLE9BQUEsRUFBaUIsTUFBTSxDQUFDLE9BRnhCO01BR0EsV0FBQSxFQUFpQixNQUFNLENBQUMsV0FIeEI7TUFJQSxPQUFBLEVBQWlCLE1BQU0sQ0FBQyxPQUp4QjtNQUtBLGVBQUEsRUFBaUIsTUFBTSxDQUFDLGVBTHhCO0tBREY7RUFEUSxDQWhCVjs7O0FBeUJGLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7RUFBQSxLQUFBLEVBQU8sS0FBUDtFQUNBLE9BQUEsRUFBUyxvQkFEVDtFQUVBLEtBQUEsRUFBTyxhQUZQIn0=

},{"../utils/undo-redo":690,"./nodes-store":668,"./palette-store":670}],670:[function(require,module,exports){
var ImportActions, UndoRedo, initialLibrary, initialPalette, mixin, paletteActions, paletteStore, resizeImage, uuid;

resizeImage = require('../utils/resize-image');

initialPalette = require('../data/initial-palette');

initialLibrary = require('../data/internal-library');

UndoRedo = require('../utils/undo-redo');

ImportActions = require('../actions/import-actions');

uuid = require('uuid');

paletteActions = Reflux.createActions(["addToPalette", "selectPaletteIndex", "selectPaletteItem", "restoreSelection", "itemDropped", "update", "delete"]);

paletteStore = Reflux.createStore({
  listenables: [paletteActions, ImportActions],
  init: function() {
    this.initializeLibrary();
    this.initializePalette();
    this.blankMetadata = {
      source: 'external',
      title: 'blank',
      link: '',
      license: ''
    };
    this.imageMetadata = _.clone(this.blankMetadata, true);
    return this.undoManger = UndoRedo.instance({
      debug: false
    });
  },
  initializeLibrary: function() {
    var j, len, node, results;
    this.library = {};
    results = [];
    for (j = 0, len = initialLibrary.length; j < len; j++) {
      node = initialLibrary[j];
      results.push(this.addToLibrary(node));
    }
    return results;
  },
  initializePalette: function() {
    var j, len, node;
    this.palette = [];
    for (j = 0, len = initialPalette.length; j < len; j++) {
      node = initialPalette[j];
      this.addToPalette(node);
    }
    this.selectPaletteIndex(0);
    return this.updateChanges();
  },
  makeNodeSignature: function(node) {
    return node.image.substr(0, 400);
  },
  standardizeNode: function(node) {
    node.image || (node.image = "");
    node.key || (node.key = this.makeNodeSignature(node));
    node.uuid || (node.uuid = uuid.v4());
    return node.metadata || (node.metadata = _.clone(this.blankMetadata, true));
  },
  addToLibrary: function(node) {
    if (!this.inLibrary(node)) {
      this.standardizeNode(node);
      this.library[node.key] = node;
      resizeImage(node.image, function(dataUrl) {
        return node.image = dataUrl;
      });
      return log.info("library: " + this.library);
    }
  },
  onImport: function(data) {
    var j, p_item, ref;
    this.palette = [];
    if (data.palette) {
      ref = data.palette;
      for (j = ref.length - 1; j >= 0; j += -1) {
        p_item = ref[j];
        this.addToPalette(p_item);
      }
    }
    return this.updateChanges();
  },
  onUpdate: function(data) {
    if (this.selectedPaletteItem) {
      this.selectedPaletteItem = _.merge(this.selectedPaletteItem, data);
    } else {
      this.selectedPaletteItem = data;
    }
    return this.updateChanges();
  },
  onDelete: function(paletteItem) {
    if (paletteItem) {
      return this.undoManger.createAndExecuteCommand('deletePaletteItem', {
        execute: (function(_this) {
          return function() {
            _this.removePaletteItem(paletteItem);
            return _this.updateChanges();
          };
        })(this),
        undo: (function(_this) {
          return function() {
            _this.addToPalette(paletteItem);
            return _this.updateChanges();
          };
        })(this)
      });
    }
  },
  addToPalette: function(node) {
    this.addToLibrary(node);
    if (!this.inPalette(node)) {
      this.palette.push(node);
      this.moveToFront(this.palette.length - 1);
      return this.selectPaletteIndex(0);
    }
  },
  onAddToPalette: function(node) {
    return this.undoManger.createAndExecuteCommand('addPaletteItem', {
      execute: (function(_this) {
        return function() {
          _this.addToPalette(node);
          return _this.updateChanges();
        };
      })(this),
      undo: (function(_this) {
        return function() {
          _this.removePaletteItem(node);
          return _this.updateChanges();
        };
      })(this)
    });
  },
  onSelectPaletteIndex: function(index) {
    this.selectPaletteIndex(index);
    return this.updateChanges();
  },
  onSelectPaletteItem: function(item) {
    var index;
    index = _.indexOf(this.palette, item);
    this.selectPaletteIndex(index);
    return this.updateChanges();
  },
  selectPaletteIndex: function(index) {
    var effectiveIndex, maxIndex, ref;
    maxIndex = this.palette.length - 1;
    effectiveIndex = Math.min(maxIndex, index);
    this.lastSelection = this.selectedIndex = effectiveIndex;
    this.selectedPaletteItem = this.palette[effectiveIndex];
    return this.selectedPaletteImage = (ref = this.selectedPaletteItem) != null ? ref.image : void 0;
  },
  onRestoreSelection: function() {
    if (this.lastSelection > -1) {
      this.selectPaletteIndex(this.lastSelection);
    } else {
      this.selectPaletteIndex(0);
    }
    return this.updateChanges();
  },
  onSetImageMetadata: function(image, metadata) {
    var libraryItem;
    log.info("Set Image metadata called");
    this.addToLibrary(image);
    libraryItem = this.inLibrary(image);
    if (libraryItem) {
      libraryItem.metadata = metadata;
      this.imageMetadata = libraryItem.metadata;
      return this.updateChanges();
    } else {
      return alert("cant find library item");
    }
  },
  removePaletteItem: function(item) {
    var i;
    i = _.indexOf(this.palette, item);
    this.palette = _.without(this.palette, item);
    return this.selectPaletteIndex(i);
  },
  moveToFront: function(index) {
    return this.palette.splice(0, 0, this.palette.splice(index, 1)[0]);
  },
  inPalette: function(node) {
    return _.find(this.palette, {
      key: node.key || this.makeNodeSignature(node)
    });
  },
  findByUUID: function(uuid) {
    return _.find(this.palette, {
      uuid: uuid
    });
  },
  inLibrary: function(node) {
    return this.library[node.key];
  },
  updateChanges: function() {
    var data;
    data = {
      palette: this.palette,
      library: this.library,
      selectedPaletteIndex: this.selectedIndex,
      selectedPaletteItem: this.selectedPaletteItem,
      selectedPaletteImage: this.selectedPaletteImage,
      imageMetadata: this.imageMetadata
    };
    log.info("Sending changes to listeners: " + (JSON.stringify(data)));
    return this.trigger(data);
  }
});

mixin = {
  getInitialState: function() {
    return {
      palette: paletteStore.palette,
      library: paletteStore.library,
      selectedPaletteItem: paletteStore.selectedPaletteItem,
      selectedPaletteIndex: paletteStore.selectedPaletteIndex,
      selectedPaletteImage: paletteStore.selectedPaletteImage,
      imageMetadata: paletteStore.imageMetadata
    };
  },
  componentDidMount: function() {
    return this.paletteUnsubscribe = paletteStore.listen(this.onPaletteChange);
  },
  componentWillUnmount: function() {
    return this.paletteUnsubscribe();
  },
  onPaletteChange: function(status) {
    return this.setState({
      palette: status.palette,
      library: status.library,
      selectedPaletteIndex: status.selectedPaletteIndex,
      selectedPaletteItem: status.selectedPaletteItem,
      selectedPaletteImage: status.selectedPaletteImage,
      imageMetadata: status.imageMetadata
    });
  }
};

module.exports = {
  actions: paletteActions,
  store: paletteStore,
  mixin: mixin
};

window.PaletteStore = module.exports;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../actions/import-actions":622,"../data/initial-palette":623,"../data/internal-library":624,"../utils/resize-image":687,"../utils/undo-redo":690,"uuid":619}],671:[function(require,module,exports){
var AppSettingsStore, GraphActions, ImportActions, Simulation, SimulationActions, SimulationStore, TimeUnits, mixin, tr;

AppSettingsStore = require('./app-settings-store');

ImportActions = require('../actions/import-actions');

GraphActions = require('../actions/graph-actions');

Simulation = require("../models/simulation");

TimeUnits = require('../utils/time-units');

tr = require('../utils/translate');

SimulationActions = Reflux.createActions(["expandSimulationPanel", "collapseSimulationPanel", "runSimulation", "setDuration", "setStepUnits", "simulationStarted", "simulationFramesCreated", "recordingFramesCreated", "simulationEnded", "capNodeValues", "recordStream", "recordOne", "recordPeriod", "stopRecording", "recordingDidStart", "recordingDidEnd", "createExperiment", "toggledCollectorTo", "setExperimentNumber"]);

SimulationActions.runSimulation = Reflux.createAction({
  sync: true
});

SimulationStore = Reflux.createStore({
  listenables: [SimulationActions, AppSettingsStore.actions, ImportActions, GraphActions],
  init: function() {
    var defaultDuration, timeUnitOptions, unit;
    this.defaultUnit = TimeUnits.defaultUnit;
    this.unitName = TimeUnits.toString(this.defaultUnit, true);
    this.defaultCollectorUnit = TimeUnits.defaultCollectorUnit;
    defaultDuration = 50;
    timeUnitOptions = (function() {
      var i, len, ref, results;
      ref = TimeUnits.units;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        results.push({
          name: TimeUnits.toString(unit, true),
          unit: unit
        });
      }
      return results;
    })();
    this.nodes = [];
    this.currentSimulation = null;
    this.settings = {
      simulationPanelExpanded: false,
      duration: defaultDuration,
      experimentNumber: 1,
      experimentFrame: 0,
      stepUnits: this.defaultUnit,
      stepUnitsName: this.unitName,
      timeUnitOptions: timeUnitOptions,
      capNodeValues: false,
      modelIsRunning: false,
      modelIsRunnable: false,
      graphHasCollector: false,
      isRecording: false,
      isRecordingOne: false,
      isRecordingStream: false,
      isRecordingPeriod: false
    };
    this._updateModelIsRunnable();
    return this._updateGraphHasCollector();
  },
  onSetExperimentNumber: function(nextExperimentNumber) {
    this.settings.experimentNumber = nextExperimentNumber;
    return this.notifyChange();
  },
  onSetComplexity: function(complexity) {
    if (complexity === AppSettingsStore.store.Complexity.diagramOnly) {
      return SimulationActions.collapseSimulationPanel();
    }
  },
  onExpandSimulationPanel: function() {
    this.settings.simulationPanelExpanded = true;
    this.settings.modelIsRunning = true;
    this._updateModelIsRunnable();
    return this.notifyChange();
  },
  onCollapseSimulationPanel: function() {
    this.settings.simulationPanelExpanded = false;
    this.settings.modelIsRunning = false;
    this._stopRecording();
    return this.notifyChange();
  },
  onGraphChanged: function(data) {
    this.nodes = data.nodes;
    this._updateModelIsRunnable();
    this.settings.graphHasCollector = this._updateGraphHasCollector();
    return this.notifyChange();
  },
  _updateUnitNames: function() {
    var pluralize, unit;
    pluralize = this.settings.duration !== 1;
    this.settings.timeUnitOptions = (function() {
      var i, len, ref, results;
      ref = TimeUnits.units;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        results.push({
          name: TimeUnits.toString(unit, pluralize),
          unit: unit
        });
      }
      return results;
    })();
    return this.settings.stepUnitsName = TimeUnits.toString(this.settings.stepUnits, pluralize);
  },
  onSetDuration: function(n) {
    this.settings.duration = Math.max(1, Math.min(n, 5000));
    this._updateUnitNames();
    return this.notifyChange();
  },
  onSetStepUnits: function(unit, hasCollectors) {
    if (hasCollectors == null) {
      hasCollectors = false;
    }
    this.settings.stepUnits = unit.unit;
    if (hasCollectors || this._hasCollectors()) {
      this.defaultCollectorUnit = unit.unit;
    }
    this._updateUnitNames();
    return this.notifyChange();
  },
  onImport: function(data) {
    var hasCollectors;
    _.merge(this.settings, data.settings.simulation);
    hasCollectors = _.filter(data.nodes, function(node) {
      return node.data.isAccumulator;
    }).length > 0;
    this.onSetStepUnits({
      unit: data.settings.simulation.stepUnits
    }, hasCollectors);
    return this.notifyChange();
  },
  onCapNodeValues: function(cap) {
    this.settings.capNodeValues = cap;
    return this.notifyChange();
  },
  onRunSimulation: function() {
    return this._runSimulation();
  },
  stepUnits: function() {
    if (this.settings.graphHasCollector) {
      return this.settings.stepUnits;
    } else {
      return this.defaultUnit;
    }
  },
  simulationDuration: function() {
    return this.settings.duration + (this.settings.graphHasCollector ? 1 : 0);
  },
  simulationStepCount: function() {
    if (this.settings.graphHasCollector) {
      return this.settings.duration + 1;
    }
    if (this.settings.isRecordingPeriod) {
      return this.settings.duration;
    }
    return 1;
  },
  _runSimulation: function() {
    if (this.settings.modelIsRunnable) {
      this.settings.modelIsRunning = true;
      this.notifyChange();
      this.currentSimulation = new Simulation({
        nodes: this.nodes,
        duration: this.simulationStepCount(),
        capNodeValues: this.settings.capNodeValues,
        onFrames: (function(_this) {
          return function(frames) {
            var framesNoTime;
            SimulationActions.simulationFramesCreated(frames);
            if (_this.settings.isRecording) {
              framesNoTime = _.map(frames, function(frame) {
                frame.time = _this.settings.experimentFrame++;
                if (!_this.settings.graphHasCollector) {
                  ++frame.time;
                }
                return frame;
              });
              return SimulationActions.recordingFramesCreated(framesNoTime);
            }
          };
        })(this),
        onStart: (function(_this) {
          return function(nodeNames) {
            SimulationActions.simulationStarted(nodeNames);
            if (_this.settings.isRecording) {
              return SimulationActions.recordingDidStart(nodeNames);
            }
          };
        })(this),
        onEnd: function() {
          return SimulationActions.simulationEnded();
        }
      });
      return this.currentSimulation.run();
    }
  },
  onSimulationStarted: function() {
    return this.notifyChange();
  },
  onSimulationEnded: function() {
    this.settings.modelIsRunning = false;
    return this.notifyChange();
  },
  _startRecording: function() {
    return this.settings.isRecording = true;
  },
  _stopRecording: function() {
    this.settings.isRecording = false;
    this.settings.isRecordingOne = false;
    this.settings.isRecordingStream = false;
    this.settings.isRecordingPeriod = false;
    return SimulationActions.recordingDidEnd();
  },
  onCreateExperiment: function() {
    this.settings.experimentNumber++;
    this.settings.experimentFrame = 0;
    return this.notifyChange();
  },
  onStopRecording: function() {
    this._stopRecording();
    return this.notifyChange();
  },
  onRecordOne: function() {
    var stopRecording;
    this._startRecording();
    this.settings.isRecordingOne = true;
    this._runSimulation();
    stopRecording = function() {
      return SimulationActions.stopRecording();
    };
    this.timeout = setTimeout(stopRecording, 500);
    return this.notifyChange();
  },
  onRecordStream: function() {
    this._startRecording();
    this.settings.isRecordingStream = true;
    return this.notifyChange();
  },
  onRecordPeriod: function() {
    var stopRecording;
    this._startRecording();
    this.settings.isRecordingPeriod = true;
    this._runSimulation();
    stopRecording = function() {
      return SimulationActions.stopRecording();
    };
    this.timeout = setTimeout(stopRecording, 500);
    return this.notifyChange();
  },
  onToggledCollectorTo: function(checked) {
    var node, numCollectors;
    numCollectors = ((function() {
      var i, len, ref, results;
      ref = this.nodes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        if (node.isAccumulator) {
          results.push(node);
        }
      }
      return results;
    }).call(this)).length;
    if (checked && numCollectors === 1) {
      return this.onSetStepUnits({
        unit: this.defaultCollectorUnit
      });
    } else if (!checked && numCollectors === 0) {
      return this.onSetStepUnits({
        unit: this.defaultUnit
      });
    }
  },
  _isModelRunnable: function() {
    var i, j, len, len1, link, node, ref, ref1;
    if (!this.settings.simulationPanelExpanded) {
      return false;
    }
    ref = this.nodes;
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      ref1 = node.links;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        link = ref1[j];
        if (link.relation.isDefined) {
          return true;
        }
      }
    }
    return false;
  },
  _updateModelIsRunnable: function() {
    return this.settings.modelIsRunnable = this._isModelRunnable();
  },
  _hasCollectors: function(nodes) {
    var i, len, node, ref;
    ref = this.nodes;
    for (i = 0, len = ref.length; i < len; i++) {
      node = ref[i];
      if (node.isAccumulator) {
        return true;
      }
    }
    return false;
  },
  _updateGraphHasCollector: function() {
    var hasCollectors;
    hasCollectors = this._hasCollectors();
    if (hasCollectors !== this.settings.graphHasCollector) {
      this._stopRecording();
    }
    return this.settings.graphHasCollector = hasCollectors;
  },
  _getErrorMessage: function() {
    return tr("~DOCUMENT.ACTIONS.NO_DEFINED_LINKS");
  },
  notifyChange: function() {
    return this.trigger(_.clone(this.settings));
  },
  importSettings: function(data) {
    _.merge(this.settings, data);
    return this.notifyChange();
  },
  serialize: function() {
    return {
      duration: this.settings.duration,
      stepUnits: this.settings.stepUnits,
      capNodeValues: this.settings.capNodeValues
    };
  }
});

mixin = {
  getInitialState: function() {
    return _.clone(SimulationStore.settings);
  },
  componentDidMount: function() {
    return this.simulationUnsubscribe = SimulationStore.listen(this.onSimulationStoreChange);
  },
  componentWillUnmount: function() {
    return this.simulationUnsubscribe();
  },
  onSimulationStoreChange: function(newData) {
    return this.setState(_.clone(newData));
  }
};

module.exports = {
  actions: SimulationActions,
  store: SimulationStore,
  mixin: mixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../actions/graph-actions":621,"../actions/import-actions":622,"../models/simulation":660,"../utils/time-units":688,"../utils/translate":689,"./app-settings-store":662}],672:[function(require,module,exports){
var undoRedoUIActions, undoRedoUIMixin, undoRedoUIStore;

undoRedoUIActions = Reflux.createActions(["setCanUndoRedo"]);

undoRedoUIStore = Reflux.createStore({
  listenables: [undoRedoUIActions],
  init: function(context) {
    this.canUndo = false;
    return this.canRedo = false;
  },
  onSetCanUndoRedo: function(canUndo, canRedo) {
    this.canUndo = canUndo;
    this.canRedo = canRedo;
    return this.notifyChange();
  },
  notifyChange: function() {
    var data;
    data = {
      canUndo: this.canUndo,
      canRedo: this.canRedo
    };
    return this.trigger(data);
  }
});

undoRedoUIMixin = {
  getInitialState: function() {
    return {
      canUndo: undoRedoUIStore.canUndo,
      canRedo: undoRedoUIStore.canRedo
    };
  },
  componentDidMount: function() {
    var GraphStore, ref, ref1;
    this.unsubscribe = undoRedoUIStore.listen(this.onUndoRedoUIStateChange);
    GraphStore = require('./graph-store');
    return GraphStore != null ? (ref = GraphStore.store) != null ? (ref1 = ref.undoRedoManager) != null ? ref1.addChangeListener(this.onUndoRedoUIStateChange) : void 0 : void 0 : void 0;
  },
  componentWillUnmount: function() {
    return this.unsubscribe();
  },
  onUndoRedoUIStateChange: function(state) {
    return this.setState({
      canUndo: state.canUndo,
      canRedo: state.canRedo
    });
  }
};

module.exports = {
  actions: undoRedoUIActions,
  store: undoRedoUIStore,
  mixin: undoRedoUIMixin
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvc3RvcmVzL3VuZG8tcmVkby11aS1zdG9yZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS9zdG9yZXMvdW5kby1yZWRvLXVpLXN0b3JlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBOztBQUFBLGlCQUFBLEdBQW9CLE1BQU0sQ0FBQyxhQUFQLENBQ2xCLENBQ0UsZ0JBREYsQ0FEa0I7O0FBTXBCLGVBQUEsR0FBa0IsTUFBTSxDQUFDLFdBQVAsQ0FDaEI7RUFBQSxXQUFBLEVBQWEsQ0FBQyxpQkFBRCxDQUFiO0VBRUEsSUFBQSxFQUFNLFNBQUMsT0FBRDtJQUNKLElBQUMsQ0FBQSxPQUFELEdBQVc7V0FDWCxJQUFDLENBQUEsT0FBRCxHQUFXO0VBRlAsQ0FGTjtFQU1BLGdCQUFBLEVBQWtCLFNBQUMsT0FBRCxFQUFVLE9BQVY7SUFDaEIsSUFBQyxDQUFBLE9BQUQsR0FBVztJQUNYLElBQUMsQ0FBQSxPQUFELEdBQVc7V0FDWCxJQUFDLENBQUEsWUFBRCxDQUFBO0VBSGdCLENBTmxCO0VBV0EsWUFBQSxFQUFjLFNBQUE7QUFDWixRQUFBO0lBQUEsSUFBQSxHQUNFO01BQUEsT0FBQSxFQUFTLElBQUMsQ0FBQSxPQUFWO01BQ0EsT0FBQSxFQUFTLElBQUMsQ0FBQSxPQURWOztXQUVGLElBQUMsQ0FBQSxPQUFELENBQVMsSUFBVDtFQUpZLENBWGQ7Q0FEZ0I7O0FBa0JsQixlQUFBLEdBQ0U7RUFBQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLE9BQUEsRUFBUyxlQUFlLENBQUMsT0FBekI7TUFDQSxPQUFBLEVBQVMsZUFBZSxDQUFDLE9BRHpCOztFQURlLENBQWpCO0VBSUEsaUJBQUEsRUFBbUIsU0FBQTtBQUNqQixRQUFBO0lBQUEsSUFBQyxDQUFBLFdBQUQsR0FBZSxlQUFlLENBQUMsTUFBaEIsQ0FBdUIsSUFBQyxDQUFBLHVCQUF4QjtJQUVmLFVBQUEsR0FBYSxPQUFBLENBQVEsZUFBUjs4R0FDcUIsQ0FBRSxpQkFBcEMsQ0FBc0QsSUFBQyxDQUFBLHVCQUF2RDtFQUppQixDQUpuQjtFQVVBLG9CQUFBLEVBQXNCLFNBQUE7V0FDcEIsSUFBQyxDQUFBLFdBQUQsQ0FBQTtFQURvQixDQVZ0QjtFQWFBLHVCQUFBLEVBQXlCLFNBQUMsS0FBRDtXQUN2QixJQUFDLENBQUEsUUFBRCxDQUNFO01BQUEsT0FBQSxFQUFTLEtBQUssQ0FBQyxPQUFmO01BQ0EsT0FBQSxFQUFTLEtBQUssQ0FBQyxPQURmO0tBREY7RUFEdUIsQ0FiekI7OztBQWtCRixNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsT0FBQSxFQUFTLGlCQUFUO0VBQ0EsS0FBQSxFQUFPLGVBRFA7RUFFQSxLQUFBLEVBQU8sZUFGUCJ9

},{"./graph-store":665}],673:[function(require,module,exports){
var colors, tr;

tr = require('./translate');

colors = {
  yellow: {
    name: tr("~COLOR.YELLOW"),
    value: "#f7be33"
  },
  darkBlue: {
    name: tr("~COLOR.DARK_BLUE"),
    value: "#105262"
  },
  medBlue: {
    name: tr("~COLOR.MED_BLUE"),
    value: "#72c0cc"
  },
  lightGray: {
    name: tr("~COLOR.LIGHT_GRAY"),
    value: "#aaa"
  },
  mediumGray: {
    name: tr("~COLOR.MED_GRAY"),
    value: "#787878"
  },
  darkGray: {
    name: tr("~COLOR.DARK_GRAY"),
    value: "#444"
  },
  data: {
    name: tr("~COLOR.DATA"),
    value: "#e99373"
  }
};

module.exports = {
  colors: colors,
  choices: [colors.yellow, colors.darkBlue, colors.medBlue]
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvY29sb3JzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3V0aWxzL2NvbG9ycy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxFQUFBLEdBQUssT0FBQSxDQUFRLGFBQVI7O0FBRUwsTUFBQSxHQUNFO0VBQUEsTUFBQSxFQUNFO0lBQUEsSUFBQSxFQUFNLEVBQUEsQ0FBRyxlQUFILENBQU47SUFDQSxLQUFBLEVBQU8sU0FEUDtHQURGO0VBR0EsUUFBQSxFQUNFO0lBQUEsSUFBQSxFQUFNLEVBQUEsQ0FBRyxrQkFBSCxDQUFOO0lBQ0EsS0FBQSxFQUFPLFNBRFA7R0FKRjtFQU1BLE9BQUEsRUFDRTtJQUFBLElBQUEsRUFBTSxFQUFBLENBQUcsaUJBQUgsQ0FBTjtJQUNBLEtBQUEsRUFBTyxTQURQO0dBUEY7RUFTQSxTQUFBLEVBQ0U7SUFBQSxJQUFBLEVBQU0sRUFBQSxDQUFHLG1CQUFILENBQU47SUFDQSxLQUFBLEVBQU8sTUFEUDtHQVZGO0VBWUEsVUFBQSxFQUNFO0lBQUEsSUFBQSxFQUFNLEVBQUEsQ0FBRyxpQkFBSCxDQUFOO0lBQ0EsS0FBQSxFQUFPLFNBRFA7R0FiRjtFQWVBLFFBQUEsRUFDRTtJQUFBLElBQUEsRUFBTSxFQUFBLENBQUcsa0JBQUgsQ0FBTjtJQUNBLEtBQUEsRUFBTyxNQURQO0dBaEJGO0VBa0JBLElBQUEsRUFDRTtJQUFBLElBQUEsRUFBTSxFQUFBLENBQUcsYUFBSCxDQUFOO0lBQ0EsS0FBQSxFQUFPLFNBRFA7R0FuQkY7OztBQXNCRixNQUFNLENBQUMsT0FBUCxHQUNFO0VBQUEsTUFBQSxFQUFRLE1BQVI7RUFDQSxPQUFBLEVBQVMsQ0FBQyxNQUFNLENBQUMsTUFBUixFQUFnQixNQUFNLENBQUMsUUFBdkIsRUFBaUMsTUFBTSxDQUFDLE9BQXhDLENBRFQifQ==

},{"./translate":689}],674:[function(require,module,exports){
var hasValidImageExtension, resizeImage;

resizeImage = require('./resize-image');

hasValidImageExtension = require('../utils/has-valid-image-extension');

module.exports = function(e, callback) {
  var file, i, len, reader, ref, results, url;
  if (e.dataTransfer.files.length > 0) {
    ref = e.dataTransfer.files;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      file = ref[i];
      if (hasValidImageExtension(file.name)) {
        reader = new FileReader();
        reader.addEventListener('loadend', function(e) {
          return resizeImage(e.target.result, function(dataUrl) {
            return callback({
              name: file.name,
              title: (file.name.split('.'))[0],
              image: dataUrl,
              metadata: {
                source: 'external',
                title: (file.name.split('.'))[0]
              }
            });
          });
        });
        results.push(reader.readAsDataURL(file));
      } else {
        results.push(void 0);
      }
    }
    return results;
  } else {
    url = e.dataTransfer.getData('URL');
    if (hasValidImageExtension(url)) {
      return callback({
        name: '',
        title: '',
        image: url,
        metadata: {
          source: 'external',
          link: url
        }
      });
    }
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvZHJvcC1pbWFnZS1oYW5kbGVyLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3V0aWxzL2Ryb3AtaW1hZ2UtaGFuZGxlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxXQUFBLEdBQWMsT0FBQSxDQUFRLGdCQUFSOztBQUNkLHNCQUFBLEdBQXlCLE9BQUEsQ0FBUSxvQ0FBUjs7QUFFekIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQyxDQUFELEVBQUksUUFBSjtBQUNmLE1BQUE7RUFBQSxJQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQXJCLEdBQThCLENBQWpDO0FBQ0U7QUFBQTtTQUFBLHFDQUFBOztNQUNFLElBQUcsc0JBQUEsQ0FBdUIsSUFBSSxDQUFDLElBQTVCLENBQUg7UUFDRSxNQUFBLEdBQVMsSUFBSSxVQUFKLENBQUE7UUFDVCxNQUFNLENBQUMsZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsU0FBQyxDQUFEO2lCQUNqQyxXQUFBLENBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFyQixFQUE2QixTQUFDLE9BQUQ7bUJBQzNCLFFBQUEsQ0FDRTtjQUFBLElBQUEsRUFBTSxJQUFJLENBQUMsSUFBWDtjQUNBLEtBQUEsRUFBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBVixDQUFnQixHQUFoQixDQUFELENBQXNCLENBQUEsQ0FBQSxDQUQ3QjtjQUVBLEtBQUEsRUFBTyxPQUZQO2NBR0EsUUFBQSxFQUNFO2dCQUFBLE1BQUEsRUFBUSxVQUFSO2dCQUNBLEtBQUEsRUFBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBVixDQUFnQixHQUFoQixDQUFELENBQXNCLENBQUEsQ0FBQSxDQUQ3QjtlQUpGO2FBREY7VUFEMkIsQ0FBN0I7UUFEaUMsQ0FBbkM7cUJBU0EsTUFBTSxDQUFDLGFBQVAsQ0FBcUIsSUFBckIsR0FYRjtPQUFBLE1BQUE7NkJBQUE7O0FBREY7bUJBREY7R0FBQSxNQUFBO0lBZUUsR0FBQSxHQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBZixDQUF1QixLQUF2QjtJQUNOLElBQUcsc0JBQUEsQ0FBdUIsR0FBdkIsQ0FBSDthQUNFLFFBQUEsQ0FDRTtRQUFBLElBQUEsRUFBTSxFQUFOO1FBQ0EsS0FBQSxFQUFPLEVBRFA7UUFFQSxLQUFBLEVBQU8sR0FGUDtRQUdBLFFBQUEsRUFDRTtVQUFBLE1BQUEsRUFBUSxVQUFSO1VBQ0EsSUFBQSxFQUFNLEdBRE47U0FKRjtPQURGLEVBREY7S0FoQkY7O0FBRGUifQ==

},{"../utils/has-valid-image-extension":677,"./resize-image":687}],675:[function(require,module,exports){
exports.escapeRegExpRE = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;

exports.escapeRegExp = function(str) {
  return str.replace(exports.escapeRegExpRE, "\\$&");
};

exports.createEscapedRegExp = function(str, flags) {
  return new RegExp(exports.escapeRegExp(str), flags);
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvZXNjYXBlLXJlZy1leC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS91dGlscy9lc2NhcGUtcmVnLWV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRSxPQUFPLENBQUMsY0FBUixHQUF5Qjs7QUFFekIsT0FBTyxDQUFDLFlBQVIsR0FBdUIsU0FBQyxHQUFEO1NBQ3JCLEdBQUcsQ0FBQyxPQUFKLENBQVksT0FBTyxDQUFDLGNBQXBCLEVBQW9DLE1BQXBDO0FBRHFCOztBQUd2QixPQUFPLENBQUMsbUJBQVIsR0FBOEIsU0FBQyxHQUFELEVBQU0sS0FBTjtTQUM1QixJQUFJLE1BQUosQ0FBVyxPQUFPLENBQUMsWUFBUixDQUFxQixHQUFyQixDQUFYLEVBQXNDLEtBQXRDO0FBRDRCIn0=

},{}],676:[function(require,module,exports){
var GoogleDriveIO;

module.exports = GoogleDriveIO = (function() {
  function GoogleDriveIO() {}

  GoogleDriveIO.prototype.APP_ID = '1095918012594';

  GoogleDriveIO.prototype.DEVELOPER_KEY = 'AIzaSyAUobrEXqtbZHBvr24tamdE6JxmPYTRPEA';

  GoogleDriveIO.prototype.CLIENT_ID = '1095918012594-svs72eqfalasuc4t1p1ps1m8r9b8psso.apps.googleusercontent.com';

  GoogleDriveIO.prototype.SCOPES = 'https://www.googleapis.com/auth/drive';

  GoogleDriveIO.prototype.authorized = false;

  GoogleDriveIO.prototype.token = null;

  GoogleDriveIO.prototype.authorize = function(immediate, callback) {
    var args;
    if (this.token) {
      return callback(null, this.token);
    } else {
      args = {
        'client_id': this.CLIENT_ID,
        'scope': this.SCOPES,
        'immediate': immediate || false
      };
      return gapi.auth.authorize(args, (function(_this) {
        return function(token) {
          var err;
          if (token && !token.error) {
            _this.token = token;
          }
          if (callback) {
            err = (!token ? 'Unable to authorize' : token.error ? token.error : null);
            _this.authorized = err === null;
            return callback(err, token);
          }
        };
      })(this));
    }
  };

  GoogleDriveIO.prototype.makeMultipartBody = function(parts, boundary) {
    var part;
    return (((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = parts.length; i < len; i++) {
        part = parts[i];
        results.push("\r\n--" + boundary + "\r\nContent-Type: application/json\r\n\r\n" + part);
      }
      return results;
    })()).join('')) + ("\r\n--" + boundary + "--");
  };

  GoogleDriveIO.prototype.sendFile = function(fileSpec, contents, callback) {
    var boundary, metadata, method, path, ref, request;
    boundary = '-------314159265358979323846';
    metadata = JSON.stringify({
      title: fileSpec.fileName,
      mimeType: 'application/json'
    });
    ref = fileSpec.fileId ? ['PUT', "/upload/drive/v2/files/" + fileSpec.fileId] : ['POST', '/upload/drive/v2/files'], method = ref[0], path = ref[1];
    request = gapi.client.request({
      path: path,
      method: method,
      params: {
        uploadType: 'multipart',
        alt: 'json'
      },
      headers: {
        'Content-Type': 'multipart/mixed; boundary="' + boundary + '"'
      },
      body: this.makeMultipartBody([metadata, contents], boundary)
    });
    return request.execute(function(file) {
      if (callback) {
        if (file) {
          return callback(null, file);
        } else {
          return callback('Unabled to upload file');
        }
      }
    });
  };

  GoogleDriveIO.prototype.upload = function(fileSpec, contents, callback) {
    return this.authorize(this.authorized, (function(_this) {
      return function(err) {
        if (!err) {
          return gapi.client.load('drive', 'v2', function() {
            return _this.sendFile(fileSpec, contents, callback);
          });
        } else {
          return callback("No authorization. Upload failed for file: " + fileSpec.fileName);
        }
      };
    })(this));
  };

  GoogleDriveIO.prototype.makePublic = function(fileId) {
    var perms, request;
    perms = {
      'value': '',
      'type': 'anyone',
      'role': 'reader'
    };
    request = gapi.client.drive.permissions.insert({
      'fileId': fileId,
      'resource': perms
    });
    return request.execute(function(resp) {
      if (resp.code && resp.code !== 200) {
        return alert("there was a problem sharing your document.");
      }
    });
  };

  GoogleDriveIO.prototype.download = function(fileSpec, callback) {
    return this.authorize(this.authorized, (function(_this) {
      return function(err, token) {
        if (err) {
          return callback(err);
        } else {
          return gapi.client.load('drive', 'v2', function() {
            var request;
            request = gapi.client.drive.files.get({
              fileId: fileSpec.id
            });
            return request.execute(function(file) {
              if (file != null ? file.downloadUrl : void 0) {
                return _this._downloadFromUrl(file.downloadUrl, token, callback);
              } else {
                return callback("Unable to get download url");
              }
            });
          });
        }
      };
    })(this));
  };

  GoogleDriveIO.prototype.downloadFromUrl = function(url, callback, authorize) {
    if (authorize == null) {
      authorize = true;
    }
    if (authorize) {
      return this.authorize(this.authorized, (function(_this) {
        return function(err, token) {
          return _this._downloadFromUrl(url, token, callack);
        };
      })(this));
    } else {
      return this._downloadFromUrl(url, null, callback);
    }
  };

  GoogleDriveIO.prototype._downloadFromUrl = function(url, token, callback) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    if (token) {
      xhr.setRequestHeader('Authorization', "Bearer " + token.access_token);
    }
    xhr.onload = function() {
      var e, json;
      try {
        json = JSON.parse(xhr.responseText);
      } catch (error) {
        e = error;
        callback(e);
        return;
      }
      return callback(null, json);
    };
    xhr.onerror = function() {
      return callback("Unable to download " + url);
    };
    return xhr.send();
  };

  GoogleDriveIO.prototype.filePicker = function(callback) {
    return this.authorize(this.authorized, function(err, token) {
      if (err) {
        return callback(err);
      } else {
        return gapi.load('picker', {
          callback: function() {
            var picker, pickerCallback;
            pickerCallback = function(data, etc) {
              return callback(null, data.action === 'picked' ? data.docs[0] : null);
            };
            picker = new google.picker.PickerBuilder().addView(google.picker.ViewId.DOCS).setOAuthToken(token.access_token).setCallback(pickerCallback).build();
            return picker.setVisible(true);
          }
        });
      }
    });
  };

  return GoogleDriveIO;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvZ29vZ2xlLWRyaXZlLWlvLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3V0aWxzL2dvb2dsZS1kcml2ZS1pby5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUF1Qjs7OzBCQUVyQixNQUFBLEdBQVM7OzBCQUNULGFBQUEsR0FBZTs7MEJBQ2YsU0FBQSxHQUFXOzswQkFDWCxNQUFBLEdBQVE7OzBCQUVSLFVBQUEsR0FBWTs7MEJBRVosS0FBQSxHQUFPOzswQkFFUCxTQUFBLEdBQVcsU0FBQyxTQUFELEVBQVksUUFBWjtBQUNULFFBQUE7SUFBQSxJQUFHLElBQUMsQ0FBQSxLQUFKO2FBQ0UsUUFBQSxDQUFTLElBQVQsRUFBZSxJQUFDLENBQUEsS0FBaEIsRUFERjtLQUFBLE1BQUE7TUFHRSxJQUFBLEdBQ0U7UUFBQSxXQUFBLEVBQWEsSUFBQyxDQUFBLFNBQWQ7UUFDQSxPQUFBLEVBQVMsSUFBQyxDQUFBLE1BRFY7UUFFQSxXQUFBLEVBQWEsU0FBQSxJQUFhLEtBRjFCOzthQUdGLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBVixDQUFvQixJQUFwQixFQUEwQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsS0FBRDtBQUN4QixjQUFBO1VBQUEsSUFBRyxLQUFBLElBQVUsQ0FBSSxLQUFLLENBQUMsS0FBdkI7WUFDRSxLQUFDLENBQUEsS0FBRCxHQUFTLE1BRFg7O1VBRUEsSUFBRyxRQUFIO1lBQ0UsR0FBQSxHQUFNLENBQUksQ0FBSSxLQUFQLEdBQ0wscUJBREssR0FFQyxLQUFLLENBQUMsS0FBVCxHQUNILEtBQUssQ0FBQyxLQURILEdBR0gsSUFMSTtZQU9OLEtBQUMsQ0FBQSxVQUFELEdBQWMsR0FBQSxLQUFPO21CQUNyQixRQUFBLENBQVMsR0FBVCxFQUFjLEtBQWQsRUFURjs7UUFId0I7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTFCLEVBUEY7O0VBRFM7OzBCQXNCWCxpQkFBQSxHQUFtQixTQUFDLEtBQUQsRUFBUSxRQUFSO0FBQ2pCLFFBQUE7V0FBQSxDQUFDOztBQUFDO1dBQUEsdUNBQUE7O3FCQUNBLFFBQUEsR0FBUyxRQUFULEdBQWtCLDRDQUFsQixHQUE4RDtBQUQ5RDs7UUFBRCxDQUVBLENBQUMsSUFGRCxDQUVNLEVBRk4sQ0FBRCxDQUFBLEdBRWEsQ0FBQSxRQUFBLEdBQVMsUUFBVCxHQUFrQixJQUFsQjtFQUhJOzswQkFLbkIsUUFBQSxHQUFVLFNBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIsUUFBckI7QUFDUixRQUFBO0lBQUEsUUFBQSxHQUFXO0lBQ1gsUUFBQSxHQUFXLElBQUksQ0FBQyxTQUFMLENBQ1Q7TUFBQSxLQUFBLEVBQU8sUUFBUSxDQUFDLFFBQWhCO01BQ0EsUUFBQSxFQUFVLGtCQURWO0tBRFM7SUFJWCxNQUFvQixRQUFRLENBQUMsTUFBWixHQUNmLENBQUMsS0FBRCxFQUFRLHlCQUFBLEdBQTBCLFFBQVEsQ0FBQyxNQUEzQyxDQURlLEdBR2YsQ0FBQyxNQUFELEVBQVMsd0JBQVQsQ0FIRixFQUFDLGVBQUQsRUFBUztJQUtULE9BQUEsR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQVosQ0FDUjtNQUFBLElBQUEsRUFBTSxJQUFOO01BQ0EsTUFBQSxFQUFRLE1BRFI7TUFFQSxNQUFBLEVBQVE7UUFBQyxVQUFBLEVBQVksV0FBYjtRQUEwQixHQUFBLEVBQUssTUFBL0I7T0FGUjtNQUdBLE9BQUEsRUFBUztRQUFDLGNBQUEsRUFBZ0IsNkJBQUEsR0FBZ0MsUUFBaEMsR0FBMkMsR0FBNUQ7T0FIVDtNQUlBLElBQUEsRUFBTSxJQUFDLENBQUEsaUJBQUQsQ0FBbUIsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFuQixFQUF5QyxRQUF6QyxDQUpOO0tBRFE7V0FPVixPQUFPLENBQUMsT0FBUixDQUFnQixTQUFDLElBQUQ7TUFDZCxJQUFHLFFBQUg7UUFDRSxJQUFHLElBQUg7aUJBQ0UsUUFBQSxDQUFTLElBQVQsRUFBZSxJQUFmLEVBREY7U0FBQSxNQUFBO2lCQUdFLFFBQUEsQ0FBUyx3QkFBVCxFQUhGO1NBREY7O0lBRGMsQ0FBaEI7RUFsQlE7OzBCQXlCVixNQUFBLEdBQVEsU0FBQyxRQUFELEVBQVcsUUFBWCxFQUFxQixRQUFyQjtXQUNOLElBQUMsQ0FBQSxTQUFELENBQVcsSUFBQyxDQUFBLFVBQVosRUFBd0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEdBQUQ7UUFDdEIsSUFBRyxDQUFJLEdBQVA7aUJBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFaLENBQWlCLE9BQWpCLEVBQTBCLElBQTFCLEVBQWdDLFNBQUE7bUJBQUcsS0FBQyxDQUFBLFFBQUQsQ0FBVSxRQUFWLEVBQW9CLFFBQXBCLEVBQThCLFFBQTlCO1VBQUgsQ0FBaEMsRUFERjtTQUFBLE1BQUE7aUJBR0UsUUFBQSxDQUFTLDRDQUFBLEdBQTZDLFFBQVEsQ0FBQyxRQUEvRCxFQUhGOztNQURzQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBeEI7RUFETTs7MEJBT1IsVUFBQSxHQUFZLFNBQUMsTUFBRDtBQUNWLFFBQUE7SUFBQSxLQUFBLEdBQ0U7TUFBQSxPQUFBLEVBQVMsRUFBVDtNQUNBLE1BQUEsRUFBUSxRQURSO01BRUEsTUFBQSxFQUFRLFFBRlI7O0lBSUYsT0FBQSxHQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUE5QixDQUNSO01BQUEsUUFBQSxFQUFVLE1BQVY7TUFDQSxVQUFBLEVBQVksS0FEWjtLQURRO1dBSVYsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsU0FBQyxJQUFEO01BQ2QsSUFBRyxJQUFJLENBQUMsSUFBTCxJQUFjLElBQUksQ0FBQyxJQUFMLEtBQWUsR0FBaEM7ZUFDRSxLQUFBLENBQU0sNENBQU4sRUFERjs7SUFEYyxDQUFoQjtFQVZVOzswQkFjWixRQUFBLEdBQVUsU0FBQyxRQUFELEVBQVcsUUFBWDtXQUNSLElBQUMsQ0FBQSxTQUFELENBQVcsSUFBQyxDQUFBLFVBQVosRUFBd0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEdBQUQsRUFBTSxLQUFOO1FBQ3RCLElBQUcsR0FBSDtpQkFDRSxRQUFBLENBQVMsR0FBVCxFQURGO1NBQUEsTUFBQTtpQkFHRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQVosQ0FBaUIsT0FBakIsRUFBMEIsSUFBMUIsRUFBZ0MsU0FBQTtBQUM5QixnQkFBQTtZQUFBLE9BQUEsR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBeEIsQ0FDUjtjQUFBLE1BQUEsRUFBUSxRQUFRLENBQUMsRUFBakI7YUFEUTttQkFFVixPQUFPLENBQUMsT0FBUixDQUFnQixTQUFDLElBQUQ7Y0FDZCxtQkFBRyxJQUFJLENBQUUsb0JBQVQ7dUJBQ0UsS0FBQyxDQUFBLGdCQUFELENBQWtCLElBQUksQ0FBQyxXQUF2QixFQUFvQyxLQUFwQyxFQUEyQyxRQUEzQyxFQURGO2VBQUEsTUFBQTt1QkFHRSxRQUFBLENBQVMsNEJBQVQsRUFIRjs7WUFEYyxDQUFoQjtVQUg4QixDQUFoQyxFQUhGOztNQURzQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBeEI7RUFEUTs7MEJBY1YsZUFBQSxHQUFpQixTQUFDLEdBQUQsRUFBTSxRQUFOLEVBQWdCLFNBQWhCOztNQUFnQixZQUFVOztJQUN6QyxJQUFHLFNBQUg7YUFDRSxJQUFDLENBQUEsU0FBRCxDQUFXLElBQUMsQ0FBQSxVQUFaLEVBQXdCLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxHQUFELEVBQU0sS0FBTjtpQkFDdEIsS0FBQyxDQUFBLGdCQUFELENBQWtCLEdBQWxCLEVBQXVCLEtBQXZCLEVBQThCLE9BQTlCO1FBRHNCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF4QixFQURGO0tBQUEsTUFBQTthQUlFLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixHQUFsQixFQUF1QixJQUF2QixFQUE2QixRQUE3QixFQUpGOztFQURlOzswQkFPakIsZ0JBQUEsR0FBa0IsU0FBQyxHQUFELEVBQU0sS0FBTixFQUFhLFFBQWI7QUFDaEIsUUFBQTtJQUFBLEdBQUEsR0FBTSxJQUFJLGNBQUosQ0FBQTtJQUNOLEdBQUcsQ0FBQyxJQUFKLENBQVMsS0FBVCxFQUFnQixHQUFoQjtJQUNBLElBQUcsS0FBSDtNQUNFLEdBQUcsQ0FBQyxnQkFBSixDQUFxQixlQUFyQixFQUFzQyxTQUFBLEdBQVUsS0FBSyxDQUFDLFlBQXRELEVBREY7O0lBRUEsR0FBRyxDQUFDLE1BQUosR0FBYSxTQUFBO0FBQ1gsVUFBQTtBQUFBO1FBQ0UsSUFBQSxHQUFPLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBRyxDQUFDLFlBQWYsRUFEVDtPQUFBLGFBQUE7UUFFTTtRQUNKLFFBQUEsQ0FBUyxDQUFUO0FBQ0EsZUFKRjs7YUFLQSxRQUFBLENBQVMsSUFBVCxFQUFlLElBQWY7SUFOVztJQU9iLEdBQUcsQ0FBQyxPQUFKLEdBQWMsU0FBQTthQUNaLFFBQUEsQ0FBUyxxQkFBQSxHQUFzQixHQUEvQjtJQURZO1dBRWQsR0FBRyxDQUFDLElBQUosQ0FBQTtFQWRnQjs7MEJBZ0JsQixVQUFBLEdBQVksU0FBQyxRQUFEO1dBQ1YsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFDLENBQUEsVUFBWixFQUF3QixTQUFDLEdBQUQsRUFBTSxLQUFOO01BQ3RCLElBQUcsR0FBSDtlQUNFLFFBQUEsQ0FBUyxHQUFULEVBREY7T0FBQSxNQUFBO2VBR0UsSUFBSSxDQUFDLElBQUwsQ0FBVSxRQUFWLEVBQW9CO1VBQUEsUUFBQSxFQUFVLFNBQUE7QUFDNUIsZ0JBQUE7WUFBQSxjQUFBLEdBQWlCLFNBQUMsSUFBRCxFQUFPLEdBQVA7cUJBQ2YsUUFBQSxDQUFTLElBQVQsRUFBa0IsSUFBSSxDQUFDLE1BQUwsS0FBZSxRQUFsQixHQUFnQyxJQUFJLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBMUMsR0FBa0QsSUFBakU7WUFEZTtZQUVqQixNQUFBLEdBQVMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWxCLENBQUEsQ0FDUCxDQUFDLE9BRE0sQ0FDRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUR2QixDQUVQLENBQUMsYUFGTSxDQUVRLEtBQUssQ0FBQyxZQUZkLENBR1AsQ0FBQyxXQUhNLENBR00sY0FITixDQUlQLENBQUMsS0FKTSxDQUFBO21CQUtULE1BQU0sQ0FBQyxVQUFQLENBQWtCLElBQWxCO1VBUjRCLENBQVY7U0FBcEIsRUFIRjs7SUFEc0IsQ0FBeEI7RUFEVSJ9

},{}],677:[function(require,module,exports){
var tr;

tr = require('./translate');

module.exports = function(imageName) {
  var extension, link, ref, valid;
  link = document.createElement('a');
  link.setAttribute('href', imageName);
  ref = link.pathname.split('.'), extension = ref[ref.length - 1];
  valid = (['gif', 'png', 'jpg', 'jpeg'].indexOf(extension.toLowerCase())) !== -1;
  if (!valid) {
    alert(tr("~DROP.ONLY_IMAGES_ALLOWED"));
  }
  return valid;
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvaGFzLXZhbGlkLWltYWdlLWV4dGVuc2lvbi5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS91dGlscy9oYXMtdmFsaWQtaW1hZ2UtZXh0ZW5zaW9uLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsYUFBUjs7QUFFTCxNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFDLFNBQUQ7QUFDZixNQUFBO0VBQUEsSUFBQSxHQUFPLFFBQVEsQ0FBQyxhQUFULENBQXVCLEdBQXZCO0VBQ1AsSUFBSSxDQUFDLFlBQUwsQ0FBa0IsTUFBbEIsRUFBMEIsU0FBMUI7RUFDQSxNQUFtQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQWQsQ0FBb0IsR0FBcEIsQ0FBbkIsRUFBTTtFQUNOLEtBQUEsR0FBUSxDQUFDLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLEVBQXNCLE1BQXRCLENBQTZCLENBQUMsT0FBOUIsQ0FBc0MsU0FBUyxDQUFDLFdBQVYsQ0FBQSxDQUF0QyxDQUFELENBQUEsS0FBcUUsQ0FBQztFQUM5RSxJQUFHLENBQUksS0FBUDtJQUNFLEtBQUEsQ0FBTSxFQUFBLENBQUcsMkJBQUgsQ0FBTixFQURGOztTQUVBO0FBUGUifQ==

},{"./translate":689}],678:[function(require,module,exports){
var HashParameters, PARAM_TOKEN, VALUE_TOKEN;

PARAM_TOKEN = /[?|&]/g;

VALUE_TOKEN = "=";

HashParameters = (function() {
  function HashParameters() {
    this.parameters = {};
  }

  HashParameters.prototype.decode = function(string) {
    return decodeURIComponent(string);
  };

  HashParameters.prototype.encode = function(string) {
    return encodeURIComponent(string);
  };

  HashParameters.prototype.fromLocationHash = function() {
    var hash, keyPairs;
    this.parameters = {};
    hash = this.readHash();
    keyPairs = hash.split(PARAM_TOKEN);
    return _.each(keyPairs, (function(_this) {
      return function(pair) {
        var key, ref, value;
        if (pair.match(VALUE_TOKEN)) {
          ref = pair.split(VALUE_TOKEN), key = ref[0], value = ref[1];
          return _this.parameters[key] = _this.decode(value);
        }
      };
    })(this));
  };

  HashParameters.prototype.updateLocationhash = function() {
    var keys, strings;
    keys = _.keys(this.parameters);
    strings = _.map(keys, (function(_this) {
      return function(key) {
        var value;
        value = _this.parameters[key];
        return [key, _this.encode(value)].join(VALUE_TOKEN);
      };
    })(this));
    return this.writeHash(strings.join('&'));
  };

  HashParameters.prototype.setParam = function(key, value) {
    this.parameters[key] = value;
    return this.updateLocationhash();
  };

  HashParameters.prototype.getParam = function(key) {
    this.fromLocationHash();
    return this.parameters[key];
  };

  HashParameters.prototype.clearParam = function(key) {
    delete this.parameters[key];
    return this.updateLocationhash();
  };

  HashParameters.prototype.writeHash = function(string) {
    if (window && window.location) {
      if (string.length < 1) {
        return window.location.hash = "";
      } else {
        return window.location.hash = "?" + string;
      }
    }
  };

  HashParameters.prototype.readHash = function() {
    var hash;
    if (window && window.location) {
      return hash = window.location.hash.substring(1);
    } else {
      return "";
    }
  };

  return HashParameters;

})();

module.exports = new HashParameters();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvaGFzaC1wYXJhbWV0ZXJzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3V0aWxzL2hhc2gtcGFyYW1ldGVycy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxXQUFBLEdBQWM7O0FBQ2QsV0FBQSxHQUFjOztBQUVSO0VBQ1Msd0JBQUE7SUFDWCxJQUFDLENBQUEsVUFBRCxHQUFjO0VBREg7OzJCQUdiLE1BQUEsR0FBUSxTQUFDLE1BQUQ7V0FDTixrQkFBQSxDQUFtQixNQUFuQjtFQURNOzsyQkFHUixNQUFBLEdBQVEsU0FBQyxNQUFEO1dBQ04sa0JBQUEsQ0FBbUIsTUFBbkI7RUFETTs7MkJBR1IsZ0JBQUEsR0FBa0IsU0FBQTtBQUNoQixRQUFBO0lBQUEsSUFBQyxDQUFBLFVBQUQsR0FBYztJQUNkLElBQUEsR0FBTyxJQUFDLENBQUEsUUFBRCxDQUFBO0lBRVAsUUFBQSxHQUFXLElBQUksQ0FBQyxLQUFMLENBQVcsV0FBWDtXQUNYLENBQUMsQ0FBQyxJQUFGLENBQU8sUUFBUCxFQUFpQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtBQUNmLFlBQUE7UUFBQSxJQUFHLElBQUksQ0FBQyxLQUFMLENBQVcsV0FBWCxDQUFIO1VBQ0UsTUFBZSxJQUFJLENBQUMsS0FBTCxDQUFXLFdBQVgsQ0FBZixFQUFDLFlBQUQsRUFBTTtpQkFDTixLQUFDLENBQUEsVUFBVyxDQUFBLEdBQUEsQ0FBWixHQUFtQixLQUFDLENBQUEsTUFBRCxDQUFRLEtBQVIsRUFGckI7O01BRGU7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCO0VBTGdCOzsyQkFVbEIsa0JBQUEsR0FBb0IsU0FBQTtBQUNsQixRQUFBO0lBQUEsSUFBQSxHQUFPLENBQUMsQ0FBQyxJQUFGLENBQU8sSUFBQyxDQUFBLFVBQVI7SUFDUCxPQUFBLEdBQVUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxJQUFOLEVBQVksQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLEdBQUQ7QUFDcEIsWUFBQTtRQUFBLEtBQUEsR0FBUSxLQUFDLENBQUEsVUFBVyxDQUFBLEdBQUE7ZUFDcEIsQ0FBQyxHQUFELEVBQU0sS0FBQyxDQUFBLE1BQUQsQ0FBUSxLQUFSLENBQU4sQ0FBcUIsQ0FBQyxJQUF0QixDQUEyQixXQUEzQjtNQUZvQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWjtXQUdWLElBQUMsQ0FBQSxTQUFELENBQVcsT0FBTyxDQUFDLElBQVIsQ0FBYSxHQUFiLENBQVg7RUFMa0I7OzJCQU9wQixRQUFBLEdBQVUsU0FBQyxHQUFELEVBQUssS0FBTDtJQUNSLElBQUMsQ0FBQSxVQUFXLENBQUEsR0FBQSxDQUFaLEdBQW1CO1dBQ25CLElBQUMsQ0FBQSxrQkFBRCxDQUFBO0VBRlE7OzJCQUlWLFFBQUEsR0FBVSxTQUFDLEdBQUQ7SUFDUixJQUFDLENBQUEsZ0JBQUQsQ0FBQTtBQUNBLFdBQU8sSUFBQyxDQUFBLFVBQVcsQ0FBQSxHQUFBO0VBRlg7OzJCQUlWLFVBQUEsR0FBWSxTQUFDLEdBQUQ7SUFDVixPQUFPLElBQUMsQ0FBQSxVQUFXLENBQUEsR0FBQTtXQUNuQixJQUFDLENBQUEsa0JBQUQsQ0FBQTtFQUZVOzsyQkFJWixTQUFBLEdBQVcsU0FBQyxNQUFEO0lBQ1QsSUFBRyxNQUFBLElBQVcsTUFBTSxDQUFDLFFBQXJCO01BQ0UsSUFBRyxNQUFNLENBQUMsTUFBUCxHQUFnQixDQUFuQjtlQUNFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBaEIsR0FBdUIsR0FEekI7T0FBQSxNQUFBO2VBR0UsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFoQixHQUF1QixHQUFBLEdBQUksT0FIN0I7T0FERjs7RUFEUzs7MkJBT1gsUUFBQSxHQUFVLFNBQUE7QUFDUixRQUFBO0lBQUEsSUFBRyxNQUFBLElBQVcsTUFBTSxDQUFDLFFBQXJCO2FBRUUsSUFBQSxHQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQXJCLENBQStCLENBQS9CLEVBRlQ7S0FBQSxNQUFBO2FBSUUsR0FKRjs7RUFEUTs7Ozs7O0FBUVosTUFBTSxDQUFDLE9BQVAsR0FBaUIsSUFBSSxjQUFKLENBQUEifQ==

},{}],679:[function(require,module,exports){
var DiagramNode, ImportActions, Migrations, MySystemImporter, TransferNode;

Migrations = require('../data/migrations/migrations');

DiagramNode = require('../models/node');

TransferNode = require('../models/transfer');

ImportActions = require('../actions/import-actions');

module.exports = MySystemImporter = (function() {
  function MySystemImporter(graphStore, settings, paletteStore) {
    this.graphStore = graphStore;
    this.settings = settings;
    this.paletteStore = paletteStore;
    void 0;
  }

  MySystemImporter.prototype.importData = function(data) {
    Migrations.update(data);
    ImportActions["import"].trigger(data);
    this.importNodes(data.nodes);
    this.importLinks(data.links);
    return this.graphStore.setFilename(data.filename || 'New Model');
  };

  MySystemImporter.prototype.importNode = function(nodeSpec) {
    var data, key, ref;
    data = nodeSpec.data;
    key = nodeSpec.key;
    if (data.paletteItem) {
      data.image = (ref = this.paletteStore.store.findByUUID(data.paletteItem)) != null ? ref.image : void 0;
    }
    if (/^Transfer/.test(nodeSpec.key)) {
      return new TransferNode(data, key);
    } else {
      return new DiagramNode(data, key);
    }
  };

  MySystemImporter.prototype.importNodes = function(importNodes) {
    var i, len, node, nodespec;
    for (i = 0, len = importNodes.length; i < len; i++) {
      nodespec = importNodes[i];
      node = this.importNode(nodespec);
      this.graphStore.addNode(node);
    }
  };

  MySystemImporter.prototype.importLinks = function(links) {
    var i, len, link;
    for (i = 0, len = links.length; i < len; i++) {
      link = links[i];
      this.graphStore.importLink(link);
    }
  };

  return MySystemImporter;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvaW1wb3J0ZXIuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvaW1wb3J0ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsVUFBQSxHQUFzQixPQUFBLENBQVEsK0JBQVI7O0FBQ3RCLFdBQUEsR0FBc0IsT0FBQSxDQUFRLGdCQUFSOztBQUN0QixZQUFBLEdBQXNCLE9BQUEsQ0FBUSxvQkFBUjs7QUFDdEIsYUFBQSxHQUFzQixPQUFBLENBQVEsMkJBQVI7O0FBRXRCLE1BQU0sQ0FBQyxPQUFQLEdBQXVCO0VBRVIsMEJBQUMsVUFBRCxFQUFjLFFBQWQsRUFBeUIsWUFBekI7SUFBQyxJQUFDLENBQUEsYUFBRDtJQUFhLElBQUMsQ0FBQSxXQUFEO0lBQVcsSUFBQyxDQUFBLGVBQUQ7SUFDcEM7RUFEVzs7NkJBR2IsVUFBQSxHQUFZLFNBQUMsSUFBRDtJQUNWLFVBQVUsQ0FBQyxNQUFYLENBQWtCLElBQWxCO0lBRUEsYUFBYSxFQUFDLE1BQUQsRUFBTyxDQUFDLE9BQXJCLENBQTZCLElBQTdCO0lBQ0EsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFJLENBQUMsS0FBbEI7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFhLElBQUksQ0FBQyxLQUFsQjtXQUNBLElBQUMsQ0FBQSxVQUFVLENBQUMsV0FBWixDQUF3QixJQUFJLENBQUMsUUFBTCxJQUFpQixXQUF6QztFQU5VOzs2QkFRWixVQUFBLEdBQVksU0FBQyxRQUFEO0FBQ1YsUUFBQTtJQUFBLElBQUEsR0FBTyxRQUFRLENBQUM7SUFDaEIsR0FBQSxHQUFNLFFBQVEsQ0FBQztJQUNmLElBQUcsSUFBSSxDQUFDLFdBQVI7TUFDRSxJQUFJLENBQUMsS0FBTCw2RUFBNkQsQ0FBRSxlQURqRTs7SUFFQSxJQUFHLFdBQVcsQ0FBQyxJQUFaLENBQWlCLFFBQVEsQ0FBQyxHQUExQixDQUFIO2FBQ0UsSUFBSSxZQUFKLENBQWlCLElBQWpCLEVBQXVCLEdBQXZCLEVBREY7S0FBQSxNQUFBO2FBR0UsSUFBSSxXQUFKLENBQWdCLElBQWhCLEVBQXNCLEdBQXRCLEVBSEY7O0VBTFU7OzZCQVVaLFdBQUEsR0FBYSxTQUFDLFdBQUQ7QUFDWCxRQUFBO0FBQUEsU0FBQSw2Q0FBQTs7TUFDRSxJQUFBLEdBQU8sSUFBQyxDQUFBLFVBQUQsQ0FBWSxRQUFaO01BQ1AsSUFBQyxDQUFBLFVBQVUsQ0FBQyxPQUFaLENBQW9CLElBQXBCO0FBRkY7RUFEVzs7NkJBTWIsV0FBQSxHQUFhLFNBQUMsS0FBRDtBQUNYLFFBQUE7QUFBQSxTQUFBLHVDQUFBOztNQUNFLElBQUMsQ0FBQSxVQUFVLENBQUMsVUFBWixDQUF1QixJQUF2QjtBQURGO0VBRFcifQ==

},{"../actions/import-actions":622,"../data/migrations/migrations":648,"../models/node":656,"../models/transfer":661}],680:[function(require,module,exports){
var DiagramToolkit, LinkColors;

LinkColors = require("../utils/link-colors");

module.exports = DiagramToolkit = (function() {
  function DiagramToolkit(domContext, options) {
    this.domContext = domContext;
    this.options = options != null ? options : {};
    this.type = "jsPlumbWrappingDiagramToolkit";
    this.color = this.options.color || LinkColors.defaultLight;
    this.lineWidth = this.options.lineWidth || 1;
    this.lineWidth = 1;
    this.lineWidthVariation = 4;
    this.kit = jsPlumb.getInstance({
      Container: this.domContext
    });
    this.kit.importDefaults({
      Connector: [
        "Bezier", {
          curviness: 80
        }
      ],
      Anchor: [
        "Continuous", {
          faces: ["top", "left", "right"]
        }
      ],
      DragOptions: {
        cursor: 'pointer',
        zIndex: 2000
      },
      ConnectionsDetachable: true,
      DoNotThrowErrors: false
    });
    this.registerListeners();
    this.flowNodeModifierAnchors = [[0, 0.4, -1, 0, 8, 0], [1, 0.7, 1, 0, -8, 0]];
    this.flowNodeFlowAnchors = [[0.1, 0.6, -1, 0, 16, 0], [1, 0.6, 1, 0, -16, 0]];
    this.flowNodeLinkAnchors = [[0.3, 0, 0, -1, 0, 12], [0.5, 0, 0, -1, 0, 12], [0.7, 0, 0, -1, 0, 12], [0, 0.25, -1, 0, 8, 0], [0, 0.75, -1, 0, 8, 0], [0.3, 1, 0, 1, 0, 0], [0.5, 1, 0, 1, 0, 0], [0.7, 1, 0, 1, 0, 0], [1, 0.25, 1, 0, -8, 0], [1, 0.4, 1, 0, -8, 0], [1, 0.8, 1, 0, -8, 0]];
    this.standardAnchors = [
      "Continuous", {
        faces: ["top", "left", "right"]
      }
    ];
  }

  DiagramToolkit.prototype.registerListeners = function() {
    this.kit.bind('connection', this.handleConnect.bind(this));
    this.kit.bind('beforeDrag', (function(_this) {
      return function(source) {
        _this.$currentSource = $(source.source);
        _this.$currentSource.addClass("show-drag");
        return true;
      };
    })(this));
    return this.kit.bind(['connectionAborted', 'beforeDrop'], (function(_this) {
      return function(args) {
        _this.$currentSource.removeClass("show-drag");
        return true;
      };
    })(this));
  };

  DiagramToolkit.prototype.handleConnect = function(info, evnt) {
    var base;
    if (typeof (base = this.options).handleConnect === "function") {
      base.handleConnect(info, evnt);
    }
    return true;
  };

  DiagramToolkit.prototype.handleClick = function(connection, evnt) {
    var base;
    return typeof (base = this.options).handleClick === "function" ? base.handleClick(connection, evnt) : void 0;
  };

  DiagramToolkit.prototype.handleDoubleClick = function(connection, evnt) {
    var base;
    return typeof (base = this.options).handleDoubleClick === "function" ? base.handleDoubleClick(connection, evnt) : void 0;
  };

  DiagramToolkit.prototype.handleLabelClick = function(label, evnt) {
    var base;
    return typeof (base = this.options).handleDoubleClick === "function" ? base.handleDoubleClick(label.component, evnt) : void 0;
  };

  DiagramToolkit.prototype.handleDisconnect = function(info, evnt) {
    var base;
    return (typeof (base = this.options).handleDisconnect === "function" ? base.handleDisconnect(info, evnt) : void 0) || true;
  };

  DiagramToolkit.prototype.repaint = function() {
    return this.kit.repaintEverything();
  };

  DiagramToolkit.prototype._endpointOptions = function(style, size, cssClass) {
    var results;
    results = [
      style, {
        width: size,
        height: size,
        cssClass: cssClass
      }
    ];
    return results;
  };

  DiagramToolkit.prototype.makeSource = function(div, clientClasses) {
    var addHoverState, classes, endpoints;
    classes = 'node-link-button' + (clientClasses ? " " + clientClasses : '');
    endpoints = this.kit.addEndpoint(div, {
      isSource: true,
      dropOptions: {
        activeClass: "dragActive"
      },
      anchor: "Bottom",
      connectorStyle: {
        strokeStyle: "#666"
      },
      endpoint: this._endpointOptions("Rectangle", 26, classes),
      connectorOverlays: [
        [
          "Arrow", {
            location: 1.0,
            width: 10,
            length: 10
          }
        ]
      ],
      maxConnections: -1
    });
    addHoverState = function(endpoint) {
      endpoint.bind("mouseover", function() {
        return $(endpoint.element).parent().addClass("show-hover");
      });
      return endpoint.bind("mouseout", function() {
        return $(endpoint.element).parent().removeClass("show-hover");
      });
    };
    if (endpoints != null ? endpoints.element : void 0) {
      return addHoverState(endpoints);
    } else if (endpoints != null ? endpoints.length : void 0) {
      return _.forEach(endpoints, addHoverState);
    }
  };

  DiagramToolkit.prototype.makeTarget = function(div, style) {
    var size;
    size = 55;
    return this.kit.addEndpoint(div, {
      isTarget: true,
      isSource: false,
      anchor: "Center",
      endpoint: this._endpointOptions("Rectangle", size, style),
      paintStyle: {
        fillStyle: "transparent"
      },
      maxConnections: -1,
      dropOptions: {
        activeClass: "dragActive",
        hoverClass: "droppable"
      }
    });
  };

  DiagramToolkit.prototype.clear = function() {
    if (this.kit) {
      this.kit.deleteEveryEndpoint();
      this.kit.reset();
      return this.registerListeners();
    } else {
      return log.info("No kit defined");
    }
  };

  DiagramToolkit.prototype._paintStyle = function(color) {
    return {
      strokeStyle: color || this.color,
      lineWidth: this.lineWidth,
      outlineColor: "rgb(0,240,10)",
      outlineWidth: "10px"
    };
  };

  DiagramToolkit.prototype._overlays = function(label, selected, editingLabel, thickness, finalColor, variableWidth, arrowFoldback, changeIndicator, link, hideArrow) {
    var results;
    if (editingLabel == null) {
      editingLabel = true;
    }
    results = [];
    if (!hideArrow) {
      results.push([
        "Arrow", {
          location: 1.0,
          length: 10,
          variableWidth: variableWidth,
          width: 9 + thickness,
          foldback: arrowFoldback
        }
      ]);
    }
    if (changeIndicator && variableWidth !== 0) {
      results.push([
        "Label", {
          location: 0.1,
          label: changeIndicator || '',
          cssClass: "link-indicator" + (changeIndicator === '+' ? ' increase' : ' decrease')
        }
      ]);
    } else if (changeIndicator) {
      results.push([
        "Label", {
          location: 0.9,
          label: changeIndicator || '',
          cssClass: "link-indicator" + (changeIndicator === '+' ? ' increase' : ' decrease')
        }
      ]);
    }
    if (editingLabel) {
      results.push([
        "Custom", {
          create: this._createEditLabel(link, label),
          location: 0.5,
          id: "customOverlay"
        }
      ]);
    } else if ((label != null ? label.length : void 0) > 0) {
      results.push([
        "Label", {
          location: 0.5,
          events: {
            click: this.handleLabelClick.bind(this)
          },
          label: label || '',
          cssClass: "label" + (selected ? ' selected' : '')
        }
      ]);
    }
    return results;
  };

  DiagramToolkit.prototype._gradient = function(startColor, endColor, offset) {
    var result;
    result = {
      stops: [[0.0, startColor], [1.0, endColor]]
    };
    return result;
  };

  DiagramToolkit.prototype._createEditLabel = function(link, label) {
    var style, width;
    width = label.length < 13 ? 90 : label.length < 19 ? 130 : 200;
    style = {
      width: width
    };
    return (function(_this) {
      return function() {
        var _self;
        _self = _this;
        return $("<input>").val(label).css(style).show(function() {
          return $(this).focus();
        }).change(function() {
          var base;
          return typeof (base = _self.options).handleLabelEdit === "function" ? base.handleLabelEdit(link, this.value) : void 0;
        });
      };
    })(this);
  };

  DiagramToolkit.prototype._clean_borked_endpoints = function() {
    return $('._jsPlumb_endpoint:not(.jsplumb-draggable)').remove();
  };

  DiagramToolkit.prototype.addLink = function(opts) {
    var arrowFoldback, changeIndicator, connection, fadedColor, finalColor, fixedColor, isLinkToFlowNode, isModifierToFlowNode, isTransferFromFlowNode, isTransferToFlowNode, linkRelation, linkSource, linkTarget, paintStyle, ref, ref1, ref2, ref3, sourceAnchors, startColor, targetAnchors, thickness, variableWidthMagnitude;
    paintStyle = this._paintStyle(LinkColors["default"]);
    paintStyle.outlineColor = "none";
    paintStyle.outlineWidth = 4;
    startColor = LinkColors["default"];
    finalColor = LinkColors["default"];
    fixedColor = LinkColors["default"];
    fadedColor = LinkColors.defaultFaded;
    changeIndicator = '';
    thickness = Math.abs(opts.magnitude);
    if (!thickness) {
      thickness = 1;
    }
    if (opts.isDashed) {
      paintStyle.dashstyle = "4 2";
      fixedColor = fixedColor = LinkColors.dashed;
    }
    if (opts.isSelected) {
      paintStyle.outlineColor = LinkColors.selectedOutline;
    }
    if (opts.isSelected && opts.isDashed) {
      paintStyle.dashstyle = void 0;
    }
    if (opts.magnitude < 0) {
      fixedColor = LinkColors.decrease;
      fadedColor = LinkColors.decreaseFaded;
      changeIndicator = '\u2013';
    }
    if (opts.magnitude > 0) {
      fixedColor = LinkColors.increase;
      fadedColor = LinkColors.increaseFaded;
      changeIndicator = '+';
    }
    if (opts.color !== LinkColors["default"]) {
      fixedColor = opts.color;
      thickness = 2;
    }
    if (opts.thickness) {
      thickness = opts.thickness;
    }
    paintStyle.lineWidth = thickness;
    startColor = finalColor;
    if (opts.useGradient) {
      startColor = finalColor = fixedColor;
      if (opts.gradual < 0) {
        finalColor = fadedColor;
      }
      if (opts.gradual > 0) {
        startColor = fadedColor;
      }
      paintStyle.gradient = this._gradient(startColor, finalColor);
    }
    paintStyle.strokeStyle = fixedColor;
    paintStyle.vertical = true;
    variableWidthMagnitude = 0;
    arrowFoldback = 0.6;
    if (opts.gradual && opts.useVariableThickness) {
      variableWidthMagnitude = this.lineWidthVariation * opts.gradual;
      arrowFoldback = 0.8;
      this.kit.importDefaults({
        Connector: [
          "Bezier", {
            curviness: 120,
            variableWidth: variableWidthMagnitude
          }
        ]
      });
      if (opts.gradual > 0) {
        thickness = thickness * this.lineWidthVariation;
      }
    }
    if ((opts.showIndicators != null) && !opts.showIndicators) {
      changeIndicator = null;
    }
    if (opts.isTransfer) {
      this.kit.importDefaults({
        Connector: ["Flowchart", {}]
      });
    }
    linkSource = (ref = opts.linkModel) != null ? ref.sourceNode : void 0;
    linkTarget = (ref1 = opts.linkModel) != null ? ref1.targetNode : void 0;
    linkRelation = (ref2 = opts.linkModel) != null ? ref2.relation : void 0;
    isLinkToFlowNode = linkTarget != null ? linkTarget.isTransfer : void 0;
    isModifierToFlowNode = (linkRelation != null ? linkRelation.isTransferModifier : void 0) || (linkTarget != null ? linkTarget.isTransfer : void 0) && ((ref3 = linkTarget.transferLink) != null ? ref3.sourceNode : void 0) === linkSource;
    isTransferToFlowNode = opts.isTransfer && opts.fromSource;
    isTransferFromFlowNode = opts.isTransfer && !opts.fromSource;
    sourceAnchors = isTransferFromFlowNode ? this.flowNodeFlowAnchors : this.standardAnchors;
    targetAnchors = isTransferToFlowNode ? this.flowNodeFlowAnchors : isModifierToFlowNode ? this.flowNodeModifierAnchors : isLinkToFlowNode ? this.flowNodeLinkAnchors : this.standardAnchors;
    connection = this.kit.connect({
      source: opts.source,
      target: opts.target,
      anchors: [sourceAnchors, targetAnchors],
      paintStyle: paintStyle,
      overlays: this._overlays(opts.label, opts.isSelected, opts.isEditing, thickness, fixedColor, variableWidthMagnitude, arrowFoldback, changeIndicator, opts.linkModel, opts.hideArrow),
      endpoint: this._endpointOptions("Rectangle", thickness, 'node-link-endpoint')
    });
    connection.bind('click', this.handleClick.bind(this));
    connection.bind('dblclick', this.handleDoubleClick.bind(this));
    connection.linkModel = opts.linkModel;
    opts.linkModel.jsPlumbConnection = connection;
    return this.kit.importDefaults({
      Connector: [
        "Bezier", {
          curviness: 60,
          variableWidth: null
        }
      ]
    });
  };

  DiagramToolkit.prototype.setSuspendDrawing = function(shouldwestop) {
    if (!shouldwestop) {
      this._clean_borked_endpoints();
    }
    return this.kit.setSuspendDrawing(shouldwestop, !shouldwestop);
  };

  DiagramToolkit.prototype.suspendDrawing = function() {
    return this.setSuspendDrawing(true);
  };

  DiagramToolkit.prototype.resumeDrawing = function() {
    return this.setSuspendDrawing(false);
  };

  return DiagramToolkit;

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../utils/link-colors":685}],681:[function(require,module,exports){
module.exports={
    "~MENU.SAVE": "Save …",
    "~MENU.OPEN": "Open …",
    "~MENU.NEW": "New …",
    "~MENU.SAVE_AS": "Save as …",
    "~MENU.REVERT_TO_ORIGINAL": "Revert To Original",
    "~MENU.REVERT_TO_LAST_SAVE": "Revert To Last Save",
    "~MENU.UNTITLED_MODEL": "Untitled model",

    "~GOOGLE_SAVE.TITLE": "Save Document",
    "~GOOGLE_SAVE.MAKE_PUBLIC": "make public (read-only)",

    "~OPEN_IN_CODAP.TITLE": "Open in CODAP",
    "~OPEN_IN_CODAP.DISABLED": "Please save your diagram before opening in CODAP.",
    "~PUBLIC_LINK.OPEN": "Open public link",

    "~NODE.UNTITLED": "Untitled",
    "~NODE.SIMULATION.VALUE": "Value",
    "~NODE-EDIT.TITLE": "Name",
    "~NODE-EDIT.COLOR": "Color",
    "~NODE-EDIT.IMAGE": "Image",
    "~NODE-EDIT.BUILT_IN": "Built-In",
    "~NODE-EDIT.DROPPED": "Dropped",
    "~NODE-EDIT.REMOTE": "Remote",
    "~NODE-EDIT.ADD_REMOTE": "Add remote",
    "~NODE-EDIT.DELETE": "Delete",


    "~NODE-VALUE-EDIT.INITIAL-VALUE": "Initial Value",
    "~NODE-VALUE-EDIT.DEFINING_WITH_NUMBERS": "You are defining values with numbers.",
    "~NODE-VALUE-EDIT.DEFINING_WITH_WORDS": "You are defining values with words.",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_WORDS": "Switch to define with words.",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_NUMBERS": "Switch to define with numbers.",
    "~NODE-VALUE-EDIT.IS_ACCUMULATOR": "Collector",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE": "Can go below zero",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_UNCHECKED_TOOLTIP": "Click to allow negative values",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_CHECKED_TOOLTIP": "Click to prevent negative values",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_DISABLED_TOOLTIP": "Disabled for all collectors by \"Limit values\" simulation setting",
    "~NODE-VALUE-EDIT.LOW": "Low",
    "~NODE-VALUE-EDIT.HIGH": "High",
    "~NODE-VALUE-EDIT.DEPENDENT_VARIABLE": "This node is a dependent variable",


    "~NODE-RELATION-EDIT.COMBINATION_METHOD": "Combine variables using:",
    "~NODE-RELATION-EDIT.ARITHMETIC_MEAN": "average",
    "~NODE-RELATION-EDIT.SCALED_PRODUCT": "limiting factor",
    "~NODE-RELATION-EDIT.UNSELECTED": "Select an option...",
    "~NODE-RELATION-EDIT.AN_INCREASE_IN": "An increase in",
    "~NODE-RELATION-EDIT.CAUSES": "causes",
    "~NODE-RELATION-EDIT.TO": "to",
    "~NODE-RELATION-EDIT.INCREASES": "increase",
    "~NODE-RELATION-EDIT.DECREASES": "decrease",
    "~NODE-RELATION-EDIT.VARIES": "vary",
    "~NODE-RELATION-EDIT.BY": "by",
    "~NODE-RELATION-EDIT.ABOUT_THE_SAME": "about the same",
    "~NODE-RELATION-EDIT.A_LOT": "a lot",
    "~NODE-RELATION-EDIT.A_LITTLE": "a little",
    "~NODE-RELATION-EDIT.MORE_AND_MORE": "more and more",
    "~NODE-RELATION-EDIT.LESS_AND_LESS": "less and less",
    "~NODE-RELATION-EDIT.CUSTOM": "as described below:",
    "~NODE-RELATION-EDIT.CUSTOM_HINT": "Draw relationship here",
    "~NODE-RELATION-EDIT.BECAUSE": "Why do you think so?",
    "~NODE-RELATION-EDIT.BECAUSE_PLACEHOLDER": "Write your response here",
    "~NODE-RELATION-EDIT.IS": "is",
    "~NODE-RELATION-EDIT.ADDED_TO": "added to",
    "~NODE-RELATION-EDIT.SUBTRACTED_FROM": "subtracted from",
    "~NODE-RELATION-EDIT.SETS_INITIAL": "sets the initial value of",
    "~NODE-RELATION-EDIT.TRANSFERRED_TO": "transferred to",
    "~NODE-RELATION-EDIT.EACH": "each",
    "~NODE-RELATION-EDIT.ALL": "All",
    "~NODE-RELATION-EDIT.MOST": "Most",
    "~NODE-RELATION-EDIT.HALF": "Half",
    "~NODE-RELATION-EDIT.SOME": "Some",
    "~NODE-RELATION-EDIT.A_LITTLE_BIT": "A little bit",
    "~NODE-RELATION-EDIT.OF": "of",
    "~NODE-RELATION-EDIT.WILL_FLOW_TO": "will flow to",

    "~TRANSFER_NODE.TITLE": "flow from %{sourceTitle} to %{targetTitle}",

    "~LINK-EDIT.DELETE": "✖ Delete Link",
    "~LINK-EDIT.TITLE": "Title",
    "~LINK-EDIT.COLOR": "Color",

    "~ADD-NEW-IMAGE.TITLE": "Add new image",
    "~ADD-NEW-IMAGE.IMAGE-SEARCH-TAB": "Image Search",
    "~ADD-NEW-IMAGE.MY-COMPUTER-TAB": "My Computer",
    "~ADD-NEW-IMAGE.LINK-TAB": "Link",


    "~PALETTE-INSPECTOR.ADD_IMAGE": "New Image",
    "~PALETTE-INSPECTOR.ADD_IMAGE_SHORT": "New",
    "~PALETTE-INSPECTOR.ABOUT_IMAGE": "About This Image",
    "~PALETTE-INSPECTOR.DELETE": "Delete Image",
    "~PALETTE-INSPECTOR.REPLACE": "Replace Image",


    "~PALETTE-DIALOG.TITLE": "Delete image?",
    "~PALETTE-DIALOG.DELETE": "Delete",
    "~PALETTE-DIALOG.REPLACE": "and replace with",
    "~PALETTE-DIALOG.OK": "ok",
    "~PALETTE-DIALOG.CANCEL": "✖ cancel",


    "~METADATA.TITLE": "Title",
    "~METADATA.LINK": "Link",
    "~METADATA.CREDIT": "Credit",


    "~IMAGE-BROWSER.PREVIEW": "Preview Your Image",
    "~IMAGE-BROWSER.ADD_IMAGE": "Add Image",
    "~IMAGE-BROWSER.SEARCH_HEADER": "Search for images",
    "~IMAGE-BROWSER.SEARCH_BUTTON_LABEL": "Search",
    "~IMAGE-BROWSER.NO_IMAGES_FOUND": "Sorry, no images found.",
    "~IMAGE-BROWSER.TRY_ANOTHER_SEARCH": "Try another search, or browse images below.",
    "~IMAGE-BROWSER.SEARCHING": "Searching openclipart.org for %{page} of \"%{query}\"",
    "~IMAGE-BROWSER.SEARCHING_FIRST_PAGE": "first page",
    "~IMAGE-BROWSER.SEARCHING_PAGE": "page %{page}",
    "~IMAGE-BROWSER.NO_EXTERNAL_FOUND": "No openclipart.org results found for \"%{query}.\"",
    "~IMAGE-BROWSER.ALREADY-IN-PALETTE": "Already in palette",
    "~IMAGE-BROWSER.PREVIOUS": "‹ Previous",
    "~IMAGE-BROWSER.NEXT": "Next ›",

    "~IMAGE-BROWSER.PLEASE_DROP_IMAGE": "Please drop an image or enter an image url",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_BROWSER": "Drop image from browser here",
    "~IMAGE-BROWSER.TYPE_OR_PASTE_LINK": "Or type or paste a link to the image you want to use:",
    "~IMAGE-BROWSER.IMAGE_URL": "Image URL",
    "~IMAGE-BROWSER.PREVIEW_IMAGE": "Preview Image",
    "~IMAGE-BROWSER.PLEASE_DROP_FILE": "Please select or drop a file",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_DESKTOP": "Drop image from desktop here",
    "~IMAGE-BROWSER.CHOOSE_FILE": "Or choose a file from your desktop:",
    "~IMAGE-BROWSER.PROVIDER_MESSAGE": "Image search courtesy of openclipart.org",

    "~COLOR.YELLOW": "Yellow",
    "~COLOR.DARK_BLUE": "Dark Blue",
    "~COLOR.LIGHT_BLUE": "Light Blue",
    "~COLOR.MED_BLUE": "Blue",
    "~COLOR.DARK_GRAY": "Dark Gray",
    "~COLOR.LIGHT_GRAY": "Light Gray",
    "~COLOR.MEDIUM_GRAY": "Gray",
    "~COLOR.DATA": "Codap Orange",


    "~FILE.CHECKING_AUTH": "Checking authorization...",
    "~FILE.CONFIRM": "Are you sure?",
    "~FILE.DOWNLOADING": "Downloading...",
    "~FILE.FILENAME": "Filename",
    "~FILE.UPLOADING": "Uploading...",
    "~FILE.CONFIRM_ORIGINAL_REVERT": "Are you sure you want to revert to the original version?",
    "~FILE.CONFIRM_LAST_SAVE_REVERT": "Are you sure you want to revert to the last save?",

    "~DOCUMENT.ACTIONS.SIMULATE": "Simulate",
    "~DOCUMENT.ACTIONS.RUN": "Run",
    "~DOCUMENT.ACTIONS.DATA.RECORD-1": "Record 1",
    "~DOCUMENT.ACTIONS.DATA.POINT": "Data Point",
    "~DOCUMENT.ACTIONS.DATA.RECORD": "Record",
    "~DOCUMENT.ACTIONS.DATA.STREAM": "Data Stream",
    "~DOCUMENT.ACTIONS.DATA.STOP": "Stop",
    "~DOCUMENT.ACTIONS.DATA.RECORDING": "Recording",
    "~DOCUMENT.ACTIONS.SAVE_TO_GRAPHS": "Save to graphs",
    "~DOCUMENT.ACTIONS.SHOW_MINI_GRAPHS": "Show mini-graphs",
    "~DOCUMENT.ACTIONS.QUICK_TEST": "Quick-test mode",
    "~DOCUMENT.ACTIONS.UNDO": "Undo",
    "~DOCUMENT.ACTIONS.REDO": "Redo",
    "~DOCUMENT.ACTIONS.NO_DEFINED_LINKS": "There must be at least one link with a defined relationship.",

    "~SIMULATION.SIMULATION_SETTINGS": "Simulation Settings",
    "~SIMULATION.DIAGRAM_SETTINGS": "Diagram settings",
    "~SIMULATION.VIEW_SETTINGS": "View settings",
    "~SIMULATION.STEP_UNIT": "Each calculation is 1",
    "~SIMULATION.DURATION": "Calculations per run",
    "~SIMULATION.CAP_VALUES": "Limit values to min/max range",
    "~SIMULATION.COMPLEXITY.DIAGRAM_ONLY": "Diagram only tools",
    "~SIMULATION.COMPLEXITY.BASIC": "Basic (increases/decreases) relationships",
    "~SIMULATION.COMPLEXITY.EXPANDED": "Expanded set of relationships including custom graphs",
    "~SIMULATION.COMPLEXITY.COLLECTORS": "Include collectors",
    "~SIMULATION.RELATIONSHIP_SYMBOLS": "Show relationship symbols",

    "~DROP.ONLY_IMAGES_ALLOWED": "Sorry, only images are allowed.",

    "~DROPZONE.DROP_IMAGES_HERE": "Drop image here",
    "~DROPZONE.SQUARES_LOOK_BEST": "(Squares look best.)",

    "~RELATIONSHIP.NO_RELATION": "No relation defined",

    "~CODAP.INTERACTIVE_FRAME.TITLE": "SageModeler",
    "~CODAP.SIMULATION.RUN": "run",
    "~CODAP.SIMULATION.EXPERIMENT": "Exp.#",
    "~CODAP.SIMULATION.STEPS": "steps",
    "~CODAP.SIMULATION.STEPS.DESCRIPTION": "Number of steps in the simulation.",

    "~TIME.STEP": "Step",
    "~TIME.SECOND": "Second",
    "~TIME.MINUTE": "Minute",
    "~TIME.HOUR": "Hour",
    "~TIME.DAY": "Day",
    "~TIME.WEEK": "Week",
    "~TIME.MONTH": "Month",
    "~TIME.YEAR": "Year",

    "~TIME.STEP.PLURAL": "Steps",
    "~TIME.SECOND.PLURAL": "Seconds",
    "~TIME.MINUTE.PLURAL": "Minutes",
    "~TIME.HOUR.PLURAL": "Hours",
    "~TIME.DAY.PLURAL": "Days",
    "~TIME.WEEK.PLURAL": "Weeks",
    "~TIME.MONTH.PLURAL": "Months",
    "~TIME.YEAR.PLURAL": "Years"
}


},{}],682:[function(require,module,exports){
module.exports={
    "~MENU.SAVE": "שמור",
    "~MENU.OPEN": "פתח",
    "~MENU.NEW": "חדש",
    "~MENU.SAVE_AS": "שמור בשם",
    "~MENU.REVERT_TO_ORIGINAL": "החזר למקור",
    "~MENU.REVERT_TO_LAST_SAVE": "החזר לגרסא האחרונה שנשמרה",
    "~MENU.UNTITLED_MODEL": "מודל ללא שם",
    "~GOOGLE_SAVE.TITLE": "שמור מסמך",
    "~GOOGLE_SAVE.MAKE_PUBLIC": "הפוך לציבורי (קריאה בלבד)",
    "~OPEN_IN_CODAP.TITLE": "פתח ב-CODAP",
    "~OPEN_IN_CODAP.DISABLED": "בבקשה שמור את המסמך לפני פתיחה ב-CODAP",
    "~PUBLIC_LINK.OPEN": "פתח קישור ציבורי",
    "~NODE.UNTITLED": "ללא שם",
    "~NODE.SIMULATION.VALUE": "ערך",
    "~NODE-EDIT.TITLE": "שם",
    "~NODE-EDIT.COLOR": "צבע",
    "~NODE-EDIT.IMAGE": "תמונה",
    "~NODE-EDIT.BUILT_IN": "משולב",
    "~NODE-EDIT.DROPPED": "מודבק",
    "~NODE-EDIT.REMOTE": "מרחוק",
    "~NODE-EDIT.ADD_REMOTE": "הוסף מרחוק",
    "~NODE-EDIT.DELETE": "מחק",
    "~NODE-VALUE-EDIT.INITIAL-VALUE": "ערך ראשוני",
    "~NODE-VALUE-EDIT.DEFINING_WITH_NUMBERS": "הגדרת ערכים עם מספרים",
    "~NODE-VALUE-EDIT.DEFINING_WITH_WORDS": "הגדרת ערכים עם מילים",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_WORDS": "החלף להגדרה עם מילים",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_NUMBERS": "החלף להגדרה עם מספרים",
    "~NODE-VALUE-EDIT.IS_ACCUMULATOR": "מצבור",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE": "ערכים יכולים לרדת מתחת לאפס",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_UNCHECKED_TOOLTIP": "לחץ על מנת לאפשר ערכים שליליים",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_CHECKED_TOOLTIP": "לחץ על מנת למנוע ערכים שליליים",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_DISABLED_TOOLTIP": "הגבל לכל המצבורים בעזרתהגדרת סימולציה 'הגבל ערכים'",
    "~NODE-VALUE-EDIT.LOW": "נמוך",
    "~NODE-VALUE-EDIT.HIGH": "גבוה",
    "~NODE-VALUE-EDIT.DEPENDENT_VARIABLE": "משתנה זה הינו משתנה תלוי",
    "~NODE-RELATION-EDIT.COMBINATION_METHOD": "חבר משתנה בעזרת",
    "~NODE-RELATION-EDIT.ARITHMETIC_MEAN": "ממוצע",
    "~NODE-RELATION-EDIT.SCALED_PRODUCT": "ערך מגביל",
    "~NODE-RELATION-EDIT.UNSELECTED": "בחר אפשרות",
    "~NODE-RELATION-EDIT.AN_INCREASE_IN": "עליה ב",
    "~NODE-RELATION-EDIT.CAUSES": "יגרום ל",
    "~NODE-RELATION-EDIT.TO": "\u200b",
    "~NODE-RELATION-EDIT.INCREASES": "לעלות",
    "~NODE-RELATION-EDIT.DECREASES": "לרדת",
    "~NODE-RELATION-EDIT.VARIES": "להשתנות",
    "~NODE-RELATION-EDIT.BY": "\u200b",
    "~NODE-RELATION-EDIT.ABOUT_THE_SAME": "באותו יחס",
    "~NODE-RELATION-EDIT.A_LOT": "בהרבה",
    "~NODE-RELATION-EDIT.A_LITTLE": "בקצת",
    "~NODE-RELATION-EDIT.MORE_AND_MORE": "יותר ויותר",
    "~NODE-RELATION-EDIT.LESS_AND_LESS": "פחות ופחות",
    "~NODE-RELATION-EDIT.CUSTOM": "כמתואר למטה",
    "~NODE-RELATION-EDIT.CUSTOM_HINT": "צייר יחס כאן",
    "~NODE-RELATION-EDIT.BECAUSE": "מפני ש",
    "~NODE-RELATION-EDIT.BECAUSE_PLACEHOLDER": "כתבו הסבר כאן",
    "~NODE-RELATION-EDIT.IS": "\u200b",
    "~NODE-RELATION-EDIT.ADDED_TO": "יתווסף ל",
    "~NODE-RELATION-EDIT.SUBTRACTED_FROM": "יוחסר מ",
    "~NODE-RELATION-EDIT.TRANSFERRED_TO": "יעבור ל",
    "~NODE-RELATION-EDIT.EACH": "בכל",
    "~NODE-RELATION-EDIT.ALL": "הכל",
    "~NODE-RELATION-EDIT.MOST": "רוב",
    "~NODE-RELATION-EDIT.HALF": "חצי",
    "~NODE-RELATION-EDIT.SOME": "חלק מסוים",
    "~NODE-RELATION-EDIT.A_LITTLE_BIT": "מעט",
    "~NODE-RELATION-EDIT.OF": "מ",
    "~NODE-RELATION-EDIT.WILL_FLOW_TO": "יזרום ל",
    "~TRANSFER_NODE.TITLE": "יזרום מ % אל %",
    "~LINK-EDIT.DELETE": "מחק קישור",
    "~LINK-EDIT.TITLE": "כותרת",
    "~LINK-EDIT.COLOR": "צבע",
    "~ADD-NEW-IMAGE.TITLE": "הוסף תמונה חדשה",
    "~ADD-NEW-IMAGE.IMAGE-SEARCH-TAB": "חיפוש תמונה",
    "~ADD-NEW-IMAGE.MY-COMPUTER-TAB": "המחשב שלי",
    "~ADD-NEW-IMAGE.LINK-TAB": "קישור",
    "~PALETTE-INSPECTOR.ADD_IMAGE": "תמונה חדשה",
    "~PALETTE-INSPECTOR.ADD_IMAGE_SHORT": "חדש",
    "~PALETTE-INSPECTOR.ABOUT_IMAGE": "לגבי תמונה זו",
    "~PALETTE-INSPECTOR.DELETE": "מחק תמונה",
    "~PALETTE-INSPECTOR.REPLACE": "החלף תמונה",
    "~PALETTE-DIALOG.TITLE": "אישור מחיקת תמונה",
    "~PALETTE-DIALOG.DELETE": "מחק",
    "~PALETTE-DIALOG.REPLACE": "והחלף עם",
    "~PALETTE-DIALOG.OK": "אישור",
    "~PALETTE-DIALOG.CANCEL": "ביטול",
    "~METADATA.TITLE": "כותרת",
    "~METADATA.LINK": "קישור",
    "~METADATA.CREDIT": "קרדיט",
    "~IMAGE-BROWSER.PREVIEW": "צפיה בתמונה",
    "~IMAGE-BROWSER.ADD_IMAGE": "הוסף תמונה",
    "~IMAGE-BROWSER.SEARCH_HEADER": "חיפוש תמונות",
    "~IMAGE-BROWSER.SEARCH_BUTTON_LABEL": "חפש",
    "~IMAGE-BROWSER.NO_IMAGES_FOUND": "סליחה, לא נמצאה תמונה מתאימה",
    "~IMAGE-BROWSER.TRY_ANOTHER_SEARCH": "נסה חיפוש נוסף, או חפש בתמונות מתחת",
    "~IMAGE-BROWSER.SEARCHING": "חפש במאגר התמונה openclipart.org את %",
    "~IMAGE-BROWSER.SEARCHING_FIRST_PAGE": "עמוד ראשון",
    "~IMAGE-BROWSER.SEARCHING_PAGE": "עמוד %",
    "~IMAGE-BROWSER.NO_EXTERNAL_FOUND": "לא נמצאו תוצאות ב-openclipart.org עבור %",
    "~IMAGE-BROWSER.ALREADY-IN-PALETTE": "כבר על הלוח",
    "~IMAGE-BROWSER.PREVIOUS": "הקודם",
    "~IMAGE-BROWSER.NEXT": "הבא",
    "~IMAGE-BROWSER.PLEASE_DROP_IMAGE": "בבקשה גרור ושחרר תמונה או הקלד קישור לתמונה",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_BROWSER": "גרור ושחרר תמונה מהדפדפן פה",
    "~IMAGE-BROWSER.TYPE_OR_PASTE_LINK": "או הקלד או הדבק קישור לתמונה הרצויה:",
    "~IMAGE-BROWSER.IMAGE_URL": "קישור לתמונה",
    "~IMAGE-BROWSER.PREVIEW_IMAGE": "צפיה בתמונה",
    "~IMAGE-BROWSER.PLEASE_DROP_FILE": "בבקשה בחר או גרור ושחרר קובץ",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_DESKTOP": "גרור ושחרר תמונה משולחן העבודה כאן",
    "~IMAGE-BROWSER.CHOOSE_FILE": "או בחר בקובץ משולחן העבודה:",
    "~IMAGE-BROWSER.PROVIDER_MESSAGE": "חיפוש תמונה באדיבות openclipart.org",
    "~COLOR.YELLOW": "צהוב",
    "~COLOR.DARK_BLUE": "כחול כהה",
    "~COLOR.LIGHT_BLUE": "כחול בהיר",
    "~COLOR.MED_BLUE": "כחול",
    "~COLOR.DARK_GRAY": "אפור כהה",
    "~COLOR.LIGHT_GRAY": "אפור בהיר",
    "~COLOR.MEDIUM_GRAY": "אפור",
    "~COLOR.DATA": "כתום",
    "~FILE.CHECKING_AUTH": "בודק אישור",
    "~FILE.CONFIRM": "אישור סופי",
    "~FILE.DOWNLOADING": "מוריד קובץ",
    "~FILE.FILENAME": "שם קובץ",
    "~FILE.UPLOADING": "מעלה קובץ",
    "~FILE.CONFIRM_ORIGINAL_REVERT": "אישור חזרה לגרסה המקורית",
    "~FILE.CONFIRM_LAST_SAVE_REVERT": "אישור חזרה לגרסה האחרונה שנשמרה",
    "~DOCUMENT.ACTIONS.SIMULATE": "הרץ סימולציה",
    "~DOCUMENT.ACTIONS.RUN": "הפעל",
    "~DOCUMENT.ACTIONS.DATA.RECORD-1": "הקלט",
    "~DOCUMENT.ACTIONS.DATA.POINT": "נקודה אחת",
    "~DOCUMENT.ACTIONS.DATA.RECORD": "הקלט",
    "~DOCUMENT.ACTIONS.DATA.STREAM": "זרם נתונים",
    "~DOCUMENT.ACTIONS.DATA.STOP": "עצור",
    "~DOCUMENT.ACTIONS.DATA.RECORDING": "הקלטה",
    "~DOCUMENT.ACTIONS.SAVE_TO_GRAPHS": "שמור בגרף",
    "~DOCUMENT.ACTIONS.SHOW_MINI_GRAPHS": "הצג במיני-גרף",
    "~DOCUMENT.ACTIONS.QUICK_TEST": "מצב בחינה מהיר",
    "~DOCUMENT.ACTIONS.UNDO": "בטל",
    "~DOCUMENT.ACTIONS.REDO": "עשה מחדש",
    "~DOCUMENT.ACTIONS.NO_DEFINED_LINKS": "צריך להיות לפחות קשר אחד עם יחס מוגדר",
    "~SIMULATION.SIMULATION_SETTINGS": "הגדרות סימולציה",
    "~SIMULATION.DIAGRAM_SETTINGS": "הגדרות ציור",
    "~SIMULATION.STEP_UNIT": "כל חישוב הוא אחד",
    "~SIMULATION.DURATION": "חישובים להרצה",
    "~SIMULATION.CAP_VALUES": "הגבל ערכים לטווח מינימום\\מקסימום",
    "~SIMULATION.RELATIONSHIP_SYMBOLS": "הצג סמלי שינוי יחס",
    "~DROP.ONLY_IMAGES_ALLOWED": "סליחה, מותר רק תמונות",
    "~DROPZONE.DROP_IMAGES_HERE": "גרור ושחרר תמונה כאן",
    "~DROPZONE.SQUARES_LOOK_BEST": "(ריבועים הכי מתאימים)",
    "~RELATIONSHIP.NO_RELATION": "לא הוגדר יחס",
    "~CODAP.INTERACTIVE_FRAME.TITLE": "SageModeler",
    "~CODAP.SIMULATION.RUN": "הפעל",
    "~CODAP.SIMULATION.EXPERIMENT": "מס' ניסוי",
    "~CODAP.SIMULATION.STEPS": "צעדים",
    "~CODAP.SIMULATION.STEPS.DESCRIPTION": "מספר הצעדים בסימולציה",
    "~TIME.STEP": "צעד",
    "~TIME.SECOND": "שניה",
    "~TIME.MINUTE": "דקה",
    "~TIME.HOUR": "שעה",
    "~TIME.DAY": "יום",
    "~TIME.WEEK": "שבוע",
    "~TIME.MONTH": "חודש",
    "~TIME.YEAR": "שנה",
    "~TIME.STEP.PLURAL": "צעדים",
    "~TIME.SECOND.PLURAL": "שניות",
    "~TIME.MINUTE.PLURAL": "דקות",
    "~TIME.HOUR.PLURAL": "שעות",
    "~TIME.DAY.PLURAL": "ימים",
    "~TIME.WEEK.PLURAL": "שבועות",
    "~TIME.MONTH.PLURAL": "חודשים",
    "~TIME.YEAR.PLURAL": "שנים",
    "~SIMULATION.VIEW_SETTINGS": "View settings",
    "~SIMULATION.COMPLEXITY.DIAGRAM_ONLY": "ציור בלבד ללא סימולציה",
    "~SIMULATION.COMPLEXITY.BASIC": "Basic (increases/decreases) relationships",
    "~SIMULATION.COMPLEXITY.EXPANDED": "Expanded set of relationships including custom graphs",
    "~SIMULATION.COMPLEXITY.COLLECTORS": "Include collectors"
}

},{}],683:[function(require,module,exports){
module.exports={
    "~MENU.SAVE": "Kaydet …",
    "~MENU.OPEN": "Aç …",
    "~MENU.NEW": "Yeni ...",
    "~MENU.SAVE_AS": "Farklı kaydet ...",
    "~MENU.REVERT_TO_ORIGINAL": "Orijinal haline dön",
    "~MENU.REVERT_TO_LAST_SAVE": "Son kaydedilen haline dön",
    "~MENU.UNTITLED_MODEL": "Başlıksız model",
    "~GOOGLE_SAVE.TITLE": "Dosyayı kaydet",
    "~GOOGLE_SAVE.MAKE_PUBLIC": "Herkese açık hale getir (read-only)",
    "~OPEN_IN_CODAP.TITLE": "CODAP ile aç",
    "~OPEN_IN_CODAP.DISABLED": "CODAP ile açmadan önce grafiği kaydediniz.",
    "~PUBLIC_LINK.OPEN": "Herkese açık linki aç",
    "~NODE.UNTITLED": "Başlıksız",
    "~NODE.SIMULATION.VALUE": "Değer",
    "~NODE-EDIT.TITLE": "İsim",
    "~NODE-EDIT.COLOR": "Renk",
    "~NODE-EDIT.IMAGE": "Resim",
    "~NODE-EDIT.BUILT_IN": "Hazır",
    "~NODE-EDIT.DROPPED": "Sürüklenen",
    "~NODE-EDIT.REMOTE": "Uzaktan Kontrol",
    "~NODE-EDIT.ADD_REMOTE": "Uzaktan Kontrol Ekle",
    "~NODE-EDIT.DELETE": "Sil",
    "~NODE-VALUE-EDIT.INITIAL-VALUE": "Başlangıç Değeri",
    "~NODE-VALUE-EDIT.DEFINING_WITH_NUMBERS": "Değerleri sayılarla tanımlıyorsunuz.",
    "~NODE-VALUE-EDIT.DEFINING_WITH_WORDS": "Değerleri kelimelerle tanımlıyorsunuz.",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_WORDS": "Kelimelerle tanımlamak için geçiş yapın.",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_NUMBERS": "Sayılarla tanımlamak için geçiş yapın.",
    "~NODE-VALUE-EDIT.IS_ACCUMULATOR": "Toplayıcı",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE": "Sıfırın altına düşebilir",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_UNCHECKED_TOOLTIP": "Negatif değerlere izin vermek için tıklayın",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_CHECKED_TOOLTIP": "Negatif değerleri engellemek için tıklayın",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_DISABLED_TOOLTIP": "Tüm toplayıcılar için \"Değerleri Sınırla\" seçeneği iptal edilmiştir",
    "~NODE-VALUE-EDIT.LOW": "Düşük",
    "~NODE-VALUE-EDIT.HIGH": "Yüksek",
    "~NODE-VALUE-EDIT.DEPENDENT_VARIABLE": "Bu düğüm bağımlı bir değişkendir",
    "~NODE-RELATION-EDIT.COMBINATION_METHOD": "Kullanarak değişkenleri birleştirin:",
    "~NODE-RELATION-EDIT.ARITHMETIC_MEAN": "Ortalama",
    "~NODE-RELATION-EDIT.SCALED_PRODUCT": "Sınırlayıcı etken",
    "~NODE-RELATION-EDIT.UNSELECTED": "Bir seçim yapınız...",
    "~NODE-RELATION-EDIT.AN_INCREASE_IN": "Bu değerdeki bir yükselme",
    "~NODE-RELATION-EDIT.CAUSES": "nedenler",
    "~NODE-RELATION-EDIT.TO": "kadar",
    "~NODE-RELATION-EDIT.INCREASES": "yükselme",
    "~NODE-RELATION-EDIT.DECREASES": "azalma",
    "~NODE-RELATION-EDIT.VARIES": "değişen",
    "~NODE-RELATION-EDIT.BY": "tarafından",
    "~NODE-RELATION-EDIT.ABOUT_THE_SAME": "yaklaşık aynı orandalar",
    "~NODE-RELATION-EDIT.A_LOT": "çok fazla",
    "~NODE-RELATION-EDIT.A_LITTLE": "biraz",
    "~NODE-RELATION-EDIT.MORE_AND_MORE": "gittikçe",
    "~NODE-RELATION-EDIT.LESS_AND_LESS": "gittikçe azalarak",
    "~NODE-RELATION-EDIT.CUSTOM": "aşağıda gösterildiği gibi:",
    "~NODE-RELATION-EDIT.CUSTOM_HINT": "İlişkiyi buraya çizin",
    "~NODE-RELATION-EDIT.BECAUSE": "Neden böyle olduğunu düşünüyorsunuz?",
    "~NODE-RELATION-EDIT.BECAUSE_PLACEHOLDER": "Cevabınızı buraya yazın",
    "~NODE-RELATION-EDIT.IS": "\u200b",
    "~NODE-RELATION-EDIT.ADDED_TO": "eklendiğinde",
    "~NODE-RELATION-EDIT.SUBTRACTED_FROM": "çıkarıldığında",
    "~NODE-RELATION-EDIT.TRANSFERRED_TO": "dönüştürüldüğünde",
    "~NODE-RELATION-EDIT.EACH": "her biri",
    "~NODE-RELATION-EDIT.ALL": "Hepsi",
    "~NODE-RELATION-EDIT.MOST": "Çoğu",
    "~NODE-RELATION-EDIT.HALF": "Yarısı",
    "~NODE-RELATION-EDIT.SOME": "Biraz",
    "~NODE-RELATION-EDIT.A_LITTLE_BIT": "Biraz",
    "~NODE-RELATION-EDIT.OF": "için",
    "~NODE-RELATION-EDIT.WILL_FLOW_TO": "-e (-a)  akacak",
    "~TRANSFER_NODE.TITLE": "Akış başlangıcı %{sourceTitle} olup akış bitiş noktası %{targetTitle} olacak",
    "~LINK-EDIT.DELETE": "✖ Bağlantıyı Sil",
    "~LINK-EDIT.TITLE": "Başlık",
    "~LINK-EDIT.COLOR": "Renk",
    "~ADD-NEW-IMAGE.TITLE": "Yeni resim ekle",
    "~ADD-NEW-IMAGE.IMAGE-SEARCH-TAB": "Resim ara",
    "~ADD-NEW-IMAGE.MY-COMPUTER-TAB": "Bilgisayarım",
    "~ADD-NEW-IMAGE.LINK-TAB": "Bağlantı",
    "~PALETTE-INSPECTOR.ADD_IMAGE": "Yeni Resim",
    "~PALETTE-INSPECTOR.ADD_IMAGE_SHORT": "Yeni",
    "~PALETTE-INSPECTOR.ABOUT_IMAGE": "Bu Resim Hakkında",
    "~PALETTE-INSPECTOR.DELETE": "Resmi Sil",
    "~PALETTE-INSPECTOR.REPLACE": "Resmi yeniden konumlandır\n",
    "~PALETTE-DIALOG.TITLE": "Resmi sil?",
    "~PALETTE-DIALOG.DELETE": "Sil",
    "~PALETTE-DIALOG.REPLACE": "ile konumlandır",
    "~PALETTE-DIALOG.OK": "Tamam",
    "~PALETTE-DIALOG.CANCEL": "✖ İptal",
    "~METADATA.TITLE": "Başlık",
    "~METADATA.LINK": "Bağlantı",
    "~METADATA.CREDIT": "Kaynak",
    "~IMAGE-BROWSER.PREVIEW": "Resim önizleme",
    "~IMAGE-BROWSER.ADD_IMAGE": "Resim Ekle",
    "~IMAGE-BROWSER.SEARCH_HEADER": "Resim ara",
    "~IMAGE-BROWSER.SEARCH_BUTTON_LABEL": "Ara",
    "~IMAGE-BROWSER.NO_IMAGES_FOUND": "Üzgünüz, resim bulunamadı",
    "~IMAGE-BROWSER.TRY_ANOTHER_SEARCH": "Başka bir arama yapın veya aşağıdaki resimlerden göz seçin.",
    "~IMAGE-BROWSER.SEARCHING": "openclipart.org %{page} sayfasından \"%{query} için aranıyor",
    "~IMAGE-BROWSER.SEARCHING_FIRST_PAGE": "İlk sayfa",
    "~IMAGE-BROWSER.SEARCHING_PAGE": "sayfa %{page}",
    "~IMAGE-BROWSER.NO_EXTERNAL_FOUND": "openclipart.org sayfasında \"%{query}.\" için sonuç bulunamadı",
    "~IMAGE-BROWSER.ALREADY-IN-PALETTE": "Zaten boya paletinde mevcut",
    "~IMAGE-BROWSER.PREVIOUS": "Önceki",
    "~IMAGE-BROWSER.NEXT": "Sıradaki",
    "~IMAGE-BROWSER.PLEASE_DROP_IMAGE": "Lütfen bir resim sürükleyiniz veya resim url’si giriniz",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_BROWSER": "Resmi tarayıcıdan buraya sürükleyin",
    "~IMAGE-BROWSER.TYPE_OR_PASTE_LINK": "Veya kullanmak istediğiniz resmin bağlantısını yazınız veya yapıştırınız:",
    "~IMAGE-BROWSER.IMAGE_URL": "Resim URL’si",
    "~IMAGE-BROWSER.PREVIEW_IMAGE": "Resim önizleme",
    "~IMAGE-BROWSER.PLEASE_DROP_FILE": "Lütfen bir dosya seçin ve buraya sürükleyin",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_DESKTOP": "Buraya masaüstünden bir resim sürükleyiniz",
    "~IMAGE-BROWSER.CHOOSE_FILE": "Veya masaüstünden bir dosya seçiniz:",
    "~IMAGE-BROWSER.PROVIDER_MESSAGE": "Resim arama openclipart.org izne ile sağlanmıştır",
    "~COLOR.YELLOW": "Sarı",
    "~COLOR.DARK_BLUE": "Koyu mavi",
    "~COLOR.LIGHT_BLUE": "Açık mavi",
    "~COLOR.MED_BLUE": "Mavi",
    "~COLOR.DARK_GRAY": "Koyu gri",
    "~COLOR.LIGHT_GRAY": "Açık gri",
    "~COLOR.MEDIUM_GRAY": "Gri",
    "~COLOR.DATA": "Codap Turuncu",
    "~FILE.CHECKING_AUTH": "Yetki kontrol ediliyor...",
    "~FILE.CONFIRM": "Emin misiniz?",
    "~FILE.DOWNLOADING": "İndiriliyor...",
    "~FILE.FILENAME": "Dosya adı",
    "~FILE.UPLOADING": "Yükleniyor...",
    "~FILE.CONFIRM_ORIGINAL_REVERT": "İlk haline geri döndürmek istediğinizden emin misiniz?",
    "~FILE.CONFIRM_LAST_SAVE_REVERT": "Son kaydedilen noktaya geri döndürmek istediğinizden emin misiniz?",
    "~DOCUMENT.ACTIONS.SIMULATE": "Test et",
    "~DOCUMENT.ACTIONS.RUN": "Çalıştır",
    "~DOCUMENT.ACTIONS.DATA.RECORD-1": "Kayıt 1",
    "~DOCUMENT.ACTIONS.DATA.POINT": "Veri noktası",
    "~DOCUMENT.ACTIONS.DATA.RECORD": "Kayıt",
    "~DOCUMENT.ACTIONS.DATA.STREAM": "Veri akışı",
    "~DOCUMENT.ACTIONS.DATA.STOP": "Durdur",
    "~DOCUMENT.ACTIONS.DATA.RECORDING": "Kaydediliyor",
    "~DOCUMENT.ACTIONS.SAVE_TO_GRAPHS": "Grafiklere kaydet",
    "~DOCUMENT.ACTIONS.SHOW_MINI_GRAPHS": "Küçük grafikleri göster",
    "~DOCUMENT.ACTIONS.QUICK_TEST": "Hızlı-test modu",
    "~DOCUMENT.ACTIONS.UNDO": "Geri al",
    "~DOCUMENT.ACTIONS.REDO": "İleri al",
    "~DOCUMENT.ACTIONS.NO_DEFINED_LINKS": "En az bir bağlantı ile ilişkinin tanımlanmış olması gerekmektedir.",
    "~SIMULATION.SIMULATION_SETTINGS": "Simülasyon ayarları",
    "~SIMULATION.DIAGRAM_SETTINGS": "Grafik ayarları",
    "~SIMULATION.STEP_UNIT": "Her hesaplama 1 olsun",
    "~SIMULATION.DURATION": "Her çalıştırmada yapılan hesap",
    "~SIMULATION.CAP_VALUES": "En az/en çok aralığında değerleri sınırlandırın",
    "~SIMULATION.RELATIONSHIP_SYMBOLS": "İlişki sembollerini göster",
    "~DROP.ONLY_IMAGES_ALLOWED": "Üzgünüz, yalnızca resimler kabul ediliyor.",
    "~DROPZONE.DROP_IMAGES_HERE": "Resmi buraya sürükleyin",
    "~DROPZONE.SQUARES_LOOK_BEST": "(En iyi şekilde kareler görülecektir.)",
    "~RELATIONSHIP.NO_RELATION": "İlişki tanımlanmadı",
    "~CODAP.INTERACTIVE_FRAME.TITLE": "SageModeler",
    "~CODAP.SIMULATION.RUN": "Çalıştır",
    "~CODAP.SIMULATION.EXPERIMENT": "Deneme.#",
    "~CODAP.SIMULATION.STEPS": "Adımlar",
    "~CODAP.SIMULATION.STEPS.DESCRIPTION": "Simülasyondaki basamak sayısı.",
    "~TIME.STEP": "Basamak",
    "~TIME.SECOND": "Saniye",
    "~TIME.MINUTE": "Dakika",
    "~TIME.HOUR": "Saat",
    "~TIME.DAY": "Gün",
    "~TIME.WEEK": "Hafta",
    "~TIME.MONTH": "Ay",
    "~TIME.YEAR": "Yıl",
    "~TIME.STEP.PLURAL": "Basamaklar",
    "~TIME.SECOND.PLURAL": "Saniyeler",
    "~TIME.MINUTE.PLURAL": "Dakikalar",
    "~TIME.HOUR.PLURAL": "Saatler",
    "~TIME.DAY.PLURAL": "Günler",
    "~TIME.WEEK.PLURAL": "Haftalar",
    "~TIME.MONTH.PLURAL": "Aylar",
    "~TIME.YEAR.PLURAL": "Yıllar",
    "~SIMULATION.VIEW_SETTINGS": "View settings",
    "~SIMULATION.COMPLEXITY.DIAGRAM_ONLY": "Yalnızca grafik için araçlar",
    "~SIMULATION.COMPLEXITY.BASIC": "Basic (increases/decreases) relationships",
    "~SIMULATION.COMPLEXITY.EXPANDED": "Expanded set of relationships including custom graphs",
    "~SIMULATION.COMPLEXITY.COLLECTORS": "Include collectors"
}

},{}],684:[function(require,module,exports){
module.exports={
    "~MENU.SAVE": "儲存檔案",
    "~MENU.OPEN": "開啟檔案",
    "~MENU.NEW": "新增檔案",
    "~MENU.SAVE_AS": "另存新檔",
    "~MENU.REVERT_TO_ORIGINAL": "回復到初始狀態",
    "~MENU.REVERT_TO_LAST_SAVE": "回復到上次儲存的狀態",
    "~MENU.UNTITLED_MODEL": "無標題模型",
    "~GOOGLE_SAVE.TITLE": "儲存文件",
    "~GOOGLE_SAVE.MAKE_PUBLIC": "公開(僅供檢視)",
    "~OPEN_IN_CODAP.TITLE": "在CODAP打開",
    "~OPEN_IN_CODAP.DISABLED": "在CODAP打開你的圖表之前，請先存檔。",
    "~PUBLIC_LINK.OPEN": "開啟共享連結",
    "~NODE.UNTITLED": "無標題",
    "~NODE.SIMULATION.VALUE": "值",
    "~NODE-EDIT.TITLE": "名稱",
    "~NODE-EDIT.COLOR": "顏色",
    "~NODE-EDIT.IMAGE": "圖像",
    "~NODE-EDIT.BUILT_IN": "嵌入",
    "~NODE-EDIT.DROPPED": "拖曳",
    "~NODE-EDIT.REMOTE": "遠端",
    "~NODE-EDIT.ADD_REMOTE": "加入遠端",
    "~NODE-EDIT.DELETE": "刪除",
    "~NODE-VALUE-EDIT.INITIAL-VALUE": "初始值",
    "~NODE-VALUE-EDIT.DEFINING_WITH_NUMBERS": "你正在用數字定義值.",
    "~NODE-VALUE-EDIT.DEFINING_WITH_WORDS": "你正在用文字定義值",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_WORDS": "改以文字去定義",
    "~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_NUMBERS": "改以數字去定義",
    "~NODE-VALUE-EDIT.IS_ACCUMULATOR": "累積量",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE": "可低於零",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_UNCHECKED_TOOLTIP": "點擊後數值可為負值",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_CHECKED_TOOLTIP": "點擊後數值不可為負值",
    "~NODE-VALUE-EDIT.RESTRICT_POSITIVE_DISABLED_TOOLTIP": "關閉模擬設定中的 \\\"極值\\\" 設定，即可勾選",
    "~NODE-VALUE-EDIT.LOW": "低",
    "~NODE-VALUE-EDIT.HIGH": "高",
    "~NODE-VALUE-EDIT.DEPENDENT_VARIABLE": "這個節點是一個依變數",
    "~NODE-RELATION-EDIT.COMBINATION_METHOD": "使用何種方式結合變數:",
    "~NODE-RELATION-EDIT.ARITHMETIC_MEAN": "平均",
    "~NODE-RELATION-EDIT.SCALED_PRODUCT": "限制因子",
    "~NODE-RELATION-EDIT.UNSELECTED": "選擇一個選項",
    "~NODE-RELATION-EDIT.AN_INCREASE_IN": "增加",
    "~NODE-RELATION-EDIT.CAUSES": "會造成",
    "~NODE-RELATION-EDIT.TO": "\u200b",
    "~NODE-RELATION-EDIT.INCREASES": "增加",
    "~NODE-RELATION-EDIT.DECREASES": "減少",
    "~NODE-RELATION-EDIT.VARIES": "變更",
    "~NODE-RELATION-EDIT.BY": "影響程度",
    "~NODE-RELATION-EDIT.ABOUT_THE_SAME": "差不多",
    "~NODE-RELATION-EDIT.A_LOT": "很多",
    "~NODE-RELATION-EDIT.A_LITTLE": "很少",
    "~NODE-RELATION-EDIT.MORE_AND_MORE": "越來越多",
    "~NODE-RELATION-EDIT.LESS_AND_LESS": "越來越少",
    "~NODE-RELATION-EDIT.CUSTOM": "如下描述:",
    "~NODE-RELATION-EDIT.CUSTOM_HINT": "在此處畫出一個關係",
    "~NODE-RELATION-EDIT.BECAUSE": "因為",
    "~NODE-RELATION-EDIT.BECAUSE_PLACEHOLDER": "在此處寫下你的解釋",
    "~NODE-RELATION-EDIT.IS": "\u200b",
    "~NODE-RELATION-EDIT.ADDED_TO": "增加",
    "~NODE-RELATION-EDIT.SUBTRACTED_FROM": "減少",
    "~NODE-RELATION-EDIT.TRANSFERRED_TO": "轉移至",
    "~NODE-RELATION-EDIT.EACH": "在每一",
    "~NODE-RELATION-EDIT.ALL": "全部",
    "~NODE-RELATION-EDIT.MOST": "大部分",
    "~NODE-RELATION-EDIT.HALF": "一半",
    "~NODE-RELATION-EDIT.SOME": "一些",
    "~NODE-RELATION-EDIT.A_LITTLE_BIT": "一點點",
    "~NODE-RELATION-EDIT.OF": "\u200b",
    "~NODE-RELATION-EDIT.WILL_FLOW_TO": "會轉移至",
    "~TRANSFER_NODE.TITLE": "flow from %{sourceTitle} to %{targetTitle}",
    "~LINK-EDIT.DELETE": "x刪除連結",
    "~LINK-EDIT.TITLE": "標題",
    "~LINK-EDIT.COLOR": "顏色",
    "~ADD-NEW-IMAGE.TITLE": "增加新的圖像",
    "~ADD-NEW-IMAGE.IMAGE-SEARCH-TAB": "圖像搜尋",
    "~ADD-NEW-IMAGE.MY-COMPUTER-TAB": "我的電腦",
    "~ADD-NEW-IMAGE.LINK-TAB": "連結",
    "~PALETTE-INSPECTOR.ADD_IMAGE": "新的圖像",
    "~PALETTE-INSPECTOR.ADD_IMAGE_SHORT": "新增",
    "~PALETTE-INSPECTOR.ABOUT_IMAGE": "關於這個圖像",
    "~PALETTE-INSPECTOR.DELETE": "刪除圖像",
    "~PALETTE-INSPECTOR.REPLACE": "取代圖像",
    "~PALETTE-DIALOG.TITLE": "刪除圖像?",
    "~PALETTE-DIALOG.DELETE": "刪除",
    "~PALETTE-DIALOG.REPLACE": "替換",
    "~PALETTE-DIALOG.OK": "ok",
    "~PALETTE-DIALOG.CANCEL": "X取消",
    "~METADATA.TITLE": "標題",
    "~METADATA.LINK": "連結",
    "~METADATA.CREDIT": "Credit",
    "~IMAGE-BROWSER.PREVIEW": "預覽你的圖像",
    "~IMAGE-BROWSER.ADD_IMAGE": "增加圖像",
    "~IMAGE-BROWSER.SEARCH_HEADER": "搜尋圖像",
    "~IMAGE-BROWSER.SEARCH_BUTTON_LABEL": "搜尋",
    "~IMAGE-BROWSER.NO_IMAGES_FOUND": "抱歉，找不到圖像",
    "~IMAGE-BROWSER.TRY_ANOTHER_SEARCH": "嘗試搜尋別的，或是瀏覽以下圖像",
    "~IMAGE-BROWSER.SEARCHING": "到openclipart.org尋找 %{page} of \"%{query}\"",
    "~IMAGE-BROWSER.SEARCHING_FIRST_PAGE": "第一頁",
    "~IMAGE-BROWSER.SEARCHING_PAGE": "頁面 %{page}",
    "~IMAGE-BROWSER.NO_EXTERNAL_FOUND": "在openclipart.org 找不到結果 for \"%{query}.\"",
    "~IMAGE-BROWSER.ALREADY-IN-PALETTE": "圖片已存在",
    "~IMAGE-BROWSER.PREVIOUS": "‹ 上一步",
    "~IMAGE-BROWSER.NEXT": "下一步 ›",
    "~IMAGE-BROWSER.PLEASE_DROP_IMAGE": "請放入圖片或輸入圖片網址",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_BROWSER": "從瀏覽器中放入圖像",
    "~IMAGE-BROWSER.TYPE_OR_PASTE_LINK": "鍵入或貼上您要使用的圖像連結:",
    "~IMAGE-BROWSER.IMAGE_URL": "圖像網址",
    "~IMAGE-BROWSER.PREVIEW_IMAGE": "預覽圖像",
    "~IMAGE-BROWSER.PLEASE_DROP_FILE": "請選擇或放入一個檔案 ",
    "~IMAGE-BROWSER.DROP_IMAGE_FROM_DESKTOP": "從桌面放入圖片",
    "~IMAGE-BROWSER.CHOOSE_FILE": "或是從桌面選擇一個檔案:",
    "~IMAGE-BROWSER.PROVIDER_MESSAGE": "圖片搜索由openclipart.org提供",
    "~COLOR.YELLOW": "黃色",
    "~COLOR.DARK_BLUE": "深藍",
    "~COLOR.LIGHT_BLUE": "淺藍",
    "~COLOR.MED_BLUE": "藍",
    "~COLOR.DARK_GRAY": "深灰",
    "~COLOR.LIGHT_GRAY": "淺灰",
    "~COLOR.MEDIUM_GRAY": "灰",
    "~COLOR.DATA": "Codap橙色",
    "~FILE.CHECKING_AUTH": "檢查授權...",
    "~FILE.CONFIRM": "你確定嗎?",
    "~FILE.DOWNLOADING": "下載中...",
    "~FILE.FILENAME": "檔案名稱",
    "~FILE.UPLOADING": "上傳中...",
    "~FILE.CONFIRM_ORIGINAL_REVERT": "你確定你想要轉換到原始檔案嗎?",
    "~FILE.CONFIRM_LAST_SAVE_REVERT": "你確定你想要轉換到上一個儲存版本嗎?",
    "~DOCUMENT.ACTIONS.SIMULATE": "模擬",
    "~DOCUMENT.ACTIONS.RUN": "執行",
    "~DOCUMENT.ACTIONS.DATA.RECORD-1": "紀錄1",
    "~DOCUMENT.ACTIONS.DATA.POINT": "資料點",
    "~DOCUMENT.ACTIONS.DATA.RECORD": "紀錄",
    "~DOCUMENT.ACTIONS.DATA.STREAM": "資料串",
    "~DOCUMENT.ACTIONS.DATA.STOP": "停止",
    "~DOCUMENT.ACTIONS.DATA.RECORDING": "紀錄中",
    "~DOCUMENT.ACTIONS.SAVE_TO_GRAPHS": "儲存至座標圖",
    "~DOCUMENT.ACTIONS.SHOW_MINI_GRAPHS": "顯示迷你圖",
    "~DOCUMENT.ACTIONS.QUICK_TEST": "快速測試模式",
    "~DOCUMENT.ACTIONS.UNDO": "復原",
    "~DOCUMENT.ACTIONS.REDO": "重複",
    "~DOCUMENT.ACTIONS.NO_DEFINED_LINKS": "必須至少有一個具有定義關係的鏈接。",
    "~SIMULATION.SIMULATION_SETTINGS": "模擬設定",
    "~SIMULATION.DIAGRAM_SETTINGS": "圖表設定",
    "~SIMULATION.STEP_UNIT": "每次計算為1",
    "~SIMULATION.DURATION": "每次執行的運算",
    "~SIMULATION.CAP_VALUES": "設定最小/最大值的範圍",
    "~SIMULATION.RELATIONSHIP_SYMBOLS": "顯示關係符號",
    "~DROP.ONLY_IMAGES_ALLOWED": "抱歉，只允許圖片。",
    "~DROPZONE.DROP_IMAGES_HERE": "在此處放入圖像",
    "~DROPZONE.SQUARES_LOOK_BEST": "(正方形看起來最好。)",
    "~RELATIONSHIP.NO_RELATION": "沒有關係被定義",
    "~CODAP.INTERACTIVE_FRAME.TITLE": "SageModeler",
    "~CODAP.SIMULATION.RUN": "執行",
    "~CODAP.SIMULATION.EXPERIMENT": "實驗.#",
    "~CODAP.SIMULATION.STEPS": "步驟",
    "~CODAP.SIMULATION.STEPS.DESCRIPTION": "在這個模擬中的步驟數",
    "~TIME.STEP": "步驟",
    "~TIME.SECOND": "秒",
    "~TIME.MINUTE": "分",
    "~TIME.HOUR": "小時",
    "~TIME.DAY": "天",
    "~TIME.WEEK": "週",
    "~TIME.MONTH": "月",
    "~TIME.YEAR": "年",
    "~TIME.STEP.PLURAL": "步驟",
    "~TIME.SECOND.PLURAL": "秒",
    "~TIME.MINUTE.PLURAL": "分",
    "~TIME.HOUR.PLURAL": "小時",
    "~TIME.DAY.PLURAL": "天",
    "~TIME.WEEK.PLURAL": "週",
    "~TIME.MONTH.PLURAL": "月",
    "~TIME.YEAR.PLURAL": "年",
    "~SIMULATION.VIEW_SETTINGS": "View settings",
    "~SIMULATION.COMPLEXITY.DIAGRAM_ONLY": "僅使用繪製模型工具",
    "~SIMULATION.COMPLEXITY.BASIC": "Basic (increases/decreases) relationships",
    "~SIMULATION.COMPLEXITY.EXPANDED": "Expanded set of relationships including custom graphs",
    "~SIMULATION.COMPLEXITY.COLLECTORS": "Include collectors"
}

},{}],685:[function(require,module,exports){
var RelationFactory, linkColors;

RelationFactory = require("../models/relation-factory");

linkColors = module.exports = {
  "default": '#777',
  defaultFaded: "rgba(120,120,120,0)",
  increase: "rgba(232,93,100,1)",
  decrease: "rgba(142,162,225,1)",
  transferModifier: "rgba(232,93,100,1)",
  transferPipe: "rgba(185,185,185,1)",
  increaseFaded: "rgba(232,93,100,0.2)",
  decreaseFaded: "rgba(142,162,225,0.2)",
  dashed: "#aaa",
  selectedOutline: "rgba(250,200,60,0.7)",
  customRelationship: "#778",
  defaultLight: '#233',
  fromLink: function(link) {
    var ref;
    if (((ref = link.relation) != null ? ref.formula : void 0) == null) {
      return linkColors["default"];
    }
    switch (link.relation.formula) {
      case RelationFactory.added.formula:
        return linkColors.increase;
      case RelationFactory.subtracted.formula:
        return linkColors.decrease;
      case RelationFactory.all.formula:
        return linkColors.increase;
      case RelationFactory.most.formula:
        return linkColors.increase;
      case RelationFactory.half.formula:
        return linkColors.increase;
      case RelationFactory.some.formula:
        return linkColors.increase;
      case RelationFactory.aLittleBit.formula:
        return linkColors.increase;
      default:
        return linkColors["default"];
    }
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvbGluay1jb2xvcnMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvbGluay1jb2xvcnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsZUFBQSxHQUFtQixPQUFBLENBQVEsNEJBQVI7O0FBRW5CLFVBQUEsR0FBYSxNQUFNLENBQUMsT0FBUCxHQUNYO0VBQUEsQ0FBQSxPQUFBLENBQUEsRUFBcUIsTUFBckI7RUFDQSxZQUFBLEVBQXNCLHFCQUR0QjtFQUVBLFFBQUEsRUFBc0Isb0JBRnRCO0VBR0EsUUFBQSxFQUFzQixxQkFIdEI7RUFJQSxnQkFBQSxFQUFzQixvQkFKdEI7RUFLQSxZQUFBLEVBQXNCLHFCQUx0QjtFQU1BLGFBQUEsRUFBc0Isc0JBTnRCO0VBT0EsYUFBQSxFQUFzQix1QkFQdEI7RUFRQSxNQUFBLEVBQXNCLE1BUnRCO0VBU0EsZUFBQSxFQUFzQixzQkFUdEI7RUFVQSxrQkFBQSxFQUFzQixNQVZ0QjtFQVdBLFlBQUEsRUFBc0IsTUFYdEI7RUFZQSxRQUFBLEVBQXNCLFNBQUMsSUFBRDtBQUNwQixRQUFBO0lBQUEsSUFBaUMsOERBQWpDO0FBQUEsYUFBTyxVQUFVLEVBQUMsT0FBRCxHQUFqQjs7QUFDQSxZQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBckI7QUFBQSxXQUNPLGVBQWUsQ0FBQyxLQUFLLENBQUMsT0FEN0I7ZUFDMEMsVUFBVSxDQUFDO0FBRHJELFdBRU8sZUFBZSxDQUFDLFVBQVUsQ0FBQyxPQUZsQztlQUUrQyxVQUFVLENBQUM7QUFGMUQsV0FHTyxlQUFlLENBQUMsR0FBRyxDQUFDLE9BSDNCO2VBR3dDLFVBQVUsQ0FBQztBQUhuRCxXQUlPLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FKNUI7ZUFJeUMsVUFBVSxDQUFDO0FBSnBELFdBS08sZUFBZSxDQUFDLElBQUksQ0FBQyxPQUw1QjtlQUt5QyxVQUFVLENBQUM7QUFMcEQsV0FNTyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BTjVCO2VBTXlDLFVBQVUsQ0FBQztBQU5wRCxXQU9PLGVBQWUsQ0FBQyxVQUFVLENBQUMsT0FQbEM7ZUFPK0MsVUFBVSxDQUFDO0FBUDFEO2VBUU8sVUFBVSxFQUFDLE9BQUQ7QUFSakI7RUFGb0IsQ0FadEIifQ==

},{"../models/relation-factory":657}],686:[function(require,module,exports){
var MAX_NUMBER_OF_PAGES, OpenClipArt;

MAX_NUMBER_OF_PAGES = 20;

module.exports = OpenClipArt = {
  jqXHR: null,
  search: function(query, options, callback) {
    var ref, url;
    if ((ref = OpenClipArt.jqXHR) != null) {
      ref.abort();
    }
    url = "https://openclipart.org/search/json/?query=" + (encodeURIComponent(query)) + "&sort=downloads&page=" + options.page + "&amount=24";
    return OpenClipArt.jqXHR = $.getJSON(url, function(data) {
      var i, item, len, numPages, page, ref1, ref2, ref3, results;
      results = [];
      page = Math.min((data != null ? (ref1 = data.info) != null ? ref1.current_page : void 0 : void 0) || 0, MAX_NUMBER_OF_PAGES);
      numPages = Math.min((data != null ? (ref2 = data.info) != null ? ref2.pages : void 0 : void 0) || 0, MAX_NUMBER_OF_PAGES);
      ref3 = data != null ? data.payload : void 0;
      for (i = 0, len = ref3.length; i < len; i++) {
        item = ref3[i];
        results.push({
          image: item.svg.png_thumb,
          metadata: {
            source: 'search',
            title: item.title,
            description: item.description,
            link: item.detail_link
          }
        });
      }
      return callback(results, page, numPages);
    });
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvb3Blbi1jbGlwYXJ0LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3V0aWxzL29wZW4tY2xpcGFydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxtQkFBQSxHQUFzQjs7QUFFdEIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsV0FBQSxHQUVmO0VBQUEsS0FBQSxFQUFPLElBQVA7RUFFQSxNQUFBLEVBQVEsU0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixRQUFqQjtBQUVOLFFBQUE7O1NBQWlCLENBQUUsS0FBbkIsQ0FBQTs7SUFFQSxHQUFBLEdBQU0sNkNBQUEsR0FBNkMsQ0FBQyxrQkFBQSxDQUFtQixLQUFuQixDQUFELENBQTdDLEdBQXVFLHVCQUF2RSxHQUE4RixPQUFPLENBQUMsSUFBdEcsR0FBMkc7V0FDakgsV0FBVyxDQUFDLEtBQVosR0FBb0IsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxHQUFWLEVBQWUsU0FBQyxJQUFEO0FBQ2pDLFVBQUE7TUFBQSxPQUFBLEdBQVU7TUFDVixJQUFBLEdBQU8sSUFBSSxDQUFDLEdBQUwsa0RBQW1CLENBQUUsK0JBQVosSUFBNEIsQ0FBckMsRUFBd0MsbUJBQXhDO01BQ1AsUUFBQSxHQUFXLElBQUksQ0FBQyxHQUFMLGtEQUFtQixDQUFFLHdCQUFaLElBQXFCLENBQTlCLEVBQWlDLG1CQUFqQztBQUNYO0FBQUEsV0FBQSxzQ0FBQTs7UUFDRSxPQUFPLENBQUMsSUFBUixDQUNFO1VBQUEsS0FBQSxFQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBaEI7VUFDQSxRQUFBLEVBQ0U7WUFBQSxNQUFBLEVBQVEsUUFBUjtZQUNBLEtBQUEsRUFBTyxJQUFJLENBQUMsS0FEWjtZQUVBLFdBQUEsRUFBYSxJQUFJLENBQUMsV0FGbEI7WUFHQSxJQUFBLEVBQU0sSUFBSSxDQUFDLFdBSFg7V0FGRjtTQURGO0FBREY7YUFRQSxRQUFBLENBQVMsT0FBVCxFQUFrQixJQUFsQixFQUF3QixRQUF4QjtJQVppQyxDQUFmO0VBTGQsQ0FGUiJ9

},{}],687:[function(require,module,exports){
module.exports = function(src, callback) {
  var fail, img, maxHeight, maxWidth;
  fail = function() {
    return callback(src);
  };
  if (typeof document !== "undefined" && document !== null) {
    maxWidth = 100;
    maxHeight = 100;
    img = document.createElement('img');
    img.setAttribute('crossOrigin', 'anonymous');
    img.src = src;
    img.onload = function() {
      var canvas, height, width;
      canvas = document.createElement('canvas');
      width = img.width, height = img.height;
      if (width > height) {
        if (width > maxWidth) {
          height *= maxWidth / width;
          width = maxWidth;
        }
      } else {
        if (height > maxHeight) {
          width *= maxHeight / height;
          height = maxHeight;
        }
      }
      canvas.width = width;
      canvas.height = height;
      canvas.getContext('2d').drawImage(img, 0, 0, width, height);
      return callback(canvas.toDataURL('image/png'));
    };
    return img.onerror = function(e) {
      return fail();
    };
  } else {
    return fail();
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvcmVzaXplLWltYWdlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3V0aWxzL3Jlc2l6ZS1pbWFnZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQyxHQUFELEVBQU0sUUFBTjtBQUVmLE1BQUE7RUFBQSxJQUFBLEdBQU8sU0FBQTtXQUNMLFFBQUEsQ0FBUyxHQUFUO0VBREs7RUFHUCxJQUFHLG9EQUFIO0lBQ0UsUUFBQSxHQUFXO0lBQ1gsU0FBQSxHQUFZO0lBRVosR0FBQSxHQUFNLFFBQVEsQ0FBQyxhQUFULENBQXVCLEtBQXZCO0lBQ04sR0FBRyxDQUFDLFlBQUosQ0FBaUIsYUFBakIsRUFBZ0MsV0FBaEM7SUFDQSxHQUFHLENBQUMsR0FBSixHQUFVO0lBQ1YsR0FBRyxDQUFDLE1BQUosR0FBYSxTQUFBO0FBQ1gsVUFBQTtNQUFBLE1BQUEsR0FBUyxRQUFRLENBQUMsYUFBVCxDQUF1QixRQUF2QjtNQUNSLGlCQUFELEVBQVE7TUFDUixJQUFHLEtBQUEsR0FBUSxNQUFYO1FBQ0UsSUFBRyxLQUFBLEdBQVEsUUFBWDtVQUNFLE1BQUEsSUFBVSxRQUFBLEdBQVc7VUFDckIsS0FBQSxHQUFRLFNBRlY7U0FERjtPQUFBLE1BQUE7UUFLRSxJQUFHLE1BQUEsR0FBUyxTQUFaO1VBQ0UsS0FBQSxJQUFTLFNBQUEsR0FBWTtVQUNyQixNQUFBLEdBQVMsVUFGWDtTQUxGOztNQVFBLE1BQU0sQ0FBQyxLQUFQLEdBQWU7TUFDZixNQUFNLENBQUMsTUFBUCxHQUFnQjtNQUNoQixNQUFNLENBQUMsVUFBUCxDQUFrQixJQUFsQixDQUF1QixDQUFDLFNBQXhCLENBQWtDLEdBQWxDLEVBQXVDLENBQXZDLEVBQTBDLENBQTFDLEVBQTZDLEtBQTdDLEVBQW9ELE1BQXBEO2FBRUEsUUFBQSxDQUFTLE1BQU0sQ0FBQyxTQUFQLENBQWlCLFdBQWpCLENBQVQ7SUFmVztXQWlCYixHQUFHLENBQUMsT0FBSixHQUFjLFNBQUMsQ0FBRDthQUNaLElBQUEsQ0FBQTtJQURZLEVBeEJoQjtHQUFBLE1BQUE7V0EyQkUsSUFBQSxDQUFBLEVBM0JGOztBQUxlIn0=

},{}],688:[function(require,module,exports){
var toSeconds, tr, units;

tr = require('./translate');

units = {
  STEP: 1
};

units.SECOND = 1;

units.MINUTE = 60 * units.SECOND;

units.HOUR = 60 * units.MINUTE;

units.DAY = 24 * units.HOUR;

units.WEEK = 7 * units.DAY;

units.MONTH = 30 * units.DAY;

units.YEAR = 365 * units.DAY;

toSeconds = function(n, unit) {
  return n * units[unit];
};

module.exports = {
  units: _.keys(units),
  defaultUnit: "STEP",
  defaultCollectorUnit: "STEP",
  toString: function(unit, plural) {
    var number;
    number = plural ? ".PLURAL" : "";
    return tr("~TIME." + unit + number);
  },
  stepsInTime: function(stepSize, stepUnit, period, periodUnit) {
    var periodInSeconds, stepSizeInSeconds;
    stepSizeInSeconds = toSeconds(stepSize, stepUnit);
    periodInSeconds = toSeconds(period, periodUnit);
    return Math.floor(periodInSeconds / stepSizeInSeconds);
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvdGltZS11bml0cy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS91dGlscy90aW1lLXVuaXRzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsYUFBUjs7QUFFTCxLQUFBLEdBQ007RUFBQSxJQUFBLEVBQU0sQ0FBTjs7O0FBQ04sS0FBSyxDQUFDLE1BQU4sR0FBZ0I7O0FBQ2hCLEtBQUssQ0FBQyxNQUFOLEdBQWUsRUFBQSxHQUFLLEtBQUssQ0FBQzs7QUFDMUIsS0FBSyxDQUFDLElBQU4sR0FBZSxFQUFBLEdBQUssS0FBSyxDQUFDOztBQUMxQixLQUFLLENBQUMsR0FBTixHQUFlLEVBQUEsR0FBSyxLQUFLLENBQUM7O0FBQzFCLEtBQUssQ0FBQyxJQUFOLEdBQWUsQ0FBQSxHQUFJLEtBQUssQ0FBQzs7QUFDekIsS0FBSyxDQUFDLEtBQU4sR0FBZSxFQUFBLEdBQUssS0FBSyxDQUFDOztBQUMxQixLQUFLLENBQUMsSUFBTixHQUFlLEdBQUEsR0FBTSxLQUFLLENBQUM7O0FBRTNCLFNBQUEsR0FBWSxTQUFDLENBQUQsRUFBSSxJQUFKO1NBQ1YsQ0FBQSxHQUFJLEtBQU0sQ0FBQSxJQUFBO0FBREE7O0FBR1osTUFBTSxDQUFDLE9BQVAsR0FFRTtFQUFBLEtBQUEsRUFBTyxDQUFDLENBQUMsSUFBRixDQUFPLEtBQVAsQ0FBUDtFQUVBLFdBQUEsRUFBYSxNQUZiO0VBSUEsb0JBQUEsRUFBc0IsTUFKdEI7RUFNQSxRQUFBLEVBQVUsU0FBQyxJQUFELEVBQU8sTUFBUDtBQUNSLFFBQUE7SUFBQSxNQUFBLEdBQVksTUFBSCxHQUFlLFNBQWYsR0FBOEI7V0FDdkMsRUFBQSxDQUFHLFFBQUEsR0FBUyxJQUFULEdBQWdCLE1BQW5CO0VBRlEsQ0FOVjtFQVVBLFdBQUEsRUFBYSxTQUFDLFFBQUQsRUFBVyxRQUFYLEVBQXFCLE1BQXJCLEVBQTZCLFVBQTdCO0FBQ1gsUUFBQTtJQUFBLGlCQUFBLEdBQW9CLFNBQUEsQ0FBVSxRQUFWLEVBQW9CLFFBQXBCO0lBQ3BCLGVBQUEsR0FBb0IsU0FBQSxDQUFVLE1BQVYsRUFBa0IsVUFBbEI7V0FDcEIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxlQUFBLEdBQWtCLGlCQUE3QjtFQUhXLENBVmIifQ==

},{"./translate":689}],689:[function(require,module,exports){
var defaultLang, languageFiles, translate, translations, urlParams, varRegExp;

urlParams = require('./url-params');

languageFiles = {
  'en-US': require('./lang/en-US'),
  'he': require('./lang/he'),
  'tr': require('./lang/tr'),
  'zh-TW': require('./lang/zh-TW')
};

translations = {};

_.each(languageFiles, function(langContents, langKey) {
  var dashLoc, lang;
  translations[langKey] = langContents;
  if ((dashLoc = langKey.indexOf('-')) > 0) {
    lang = langKey.substring(0, dashLoc);
    translations[lang] = langContents;
  }
});

defaultLang = urlParams.lang && translations[urlParams.lang] ? urlParams.lang : 'en';

varRegExp = /%\{\s*([^}\s]*)\s*\}/g;

translate = function(key, vars, lang) {
  var ref, translation;
  if (vars == null) {
    vars = {};
  }
  if (lang == null) {
    lang = defaultLang;
  }
  translation = (ref = translations[lang]) != null ? ref[key] : void 0;
  if (translation == null) {
    translation = key;
  }
  return translation.replace(varRegExp, function(match, key) {
    if (vars.hasOwnProperty(key)) {
      return vars[key];
    } else {
      return "'** UKNOWN KEY: " + key + " **";
    }
  });
};

module.exports = translate;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdXRpbHMvdHJhbnNsYXRlLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3V0aWxzL3RyYW5zbGF0ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxTQUFBLEdBQVksT0FBQSxDQUFRLGNBQVI7O0FBRVosYUFBQSxHQUFnQjtFQUNkLE9BQUEsRUFBUyxPQUFBLENBQVEsY0FBUixDQURLO0VBRWQsSUFBQSxFQUFNLE9BQUEsQ0FBUSxXQUFSLENBRlE7RUFHZCxJQUFBLEVBQU0sT0FBQSxDQUFRLFdBQVIsQ0FIUTtFQUlkLE9BQUEsRUFBUyxPQUFBLENBQVEsY0FBUixDQUpLOzs7QUFPaEIsWUFBQSxHQUFnQjs7QUFDaEIsQ0FBQyxDQUFDLElBQUYsQ0FBTyxhQUFQLEVBQXNCLFNBQUMsWUFBRCxFQUFlLE9BQWY7QUFDcEIsTUFBQTtFQUFBLFlBQWEsQ0FBQSxPQUFBLENBQWIsR0FBd0I7RUFFeEIsSUFBRyxDQUFDLE9BQUEsR0FBVSxPQUFPLENBQUMsT0FBUixDQUFnQixHQUFoQixDQUFYLENBQUEsR0FBbUMsQ0FBdEM7SUFDRSxJQUFBLEdBQU8sT0FBTyxDQUFDLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUIsT0FBckI7SUFDUCxZQUFhLENBQUEsSUFBQSxDQUFiLEdBQXFCLGFBRnZCOztBQUhvQixDQUF0Qjs7QUFTQSxXQUFBLEdBQWlCLFNBQVMsQ0FBQyxJQUFWLElBQW1CLFlBQWEsQ0FBQSxTQUFTLENBQUMsSUFBVixDQUFuQyxHQUF3RCxTQUFTLENBQUMsSUFBbEUsR0FBNEU7O0FBRTFGLFNBQUEsR0FBWTs7QUFFWixTQUFBLEdBQVksU0FBQyxHQUFELEVBQU0sSUFBTixFQUFlLElBQWY7QUFDVixNQUFBOztJQURnQixPQUFLOzs7SUFBSSxPQUFLOztFQUM5QixXQUFBLDJDQUFrQyxDQUFBLEdBQUE7RUFDbEMsSUFBeUIsbUJBQXpCO0lBQUEsV0FBQSxHQUFjLElBQWQ7O1NBQ0EsV0FBVyxDQUFDLE9BQVosQ0FBb0IsU0FBcEIsRUFBK0IsU0FBQyxLQUFELEVBQVEsR0FBUjtJQUM3QixJQUFHLElBQUksQ0FBQyxjQUFMLENBQW9CLEdBQXBCLENBQUg7YUFBZ0MsSUFBSyxDQUFBLEdBQUEsRUFBckM7S0FBQSxNQUFBO2FBQStDLGtCQUFBLEdBQW1CLEdBQW5CLEdBQXVCLE1BQXRFOztFQUQ2QixDQUEvQjtBQUhVOztBQU1aLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIn0=

},{"./lang/en-US":681,"./lang/he":682,"./lang/tr":683,"./lang/zh-TW":684,"./url-params":691}],690:[function(require,module,exports){
var CodapConnect, Command, CommandBatch, DEFAULT_CONTEXT_NAME, Manager, instance, instances;

CodapConnect = require('../models/codap-connect');

DEFAULT_CONTEXT_NAME = 'building-models';

Manager = (function() {
  function Manager(options) {
    if (options == null) {
      options = {};
    }
    this.debug = options.debug;
    this.commands = [];
    this.stackPosition = -1;
    this.savePosition = -1;
    this.changeListeners = [];
    this.currentBatch = null;
    this.endCommandBatch.listen(this._endComandBatch, this);
    this.undo.listen(this._undo, this);
    this.redo.listen(this._redo, this);
  }

  Manager.prototype.startCommandBatch = function(optionalName) {
    if (this.currentBatch && !this.currentBatch.matches(optionalName)) {
      this._endComandBatch();
    }
    if (!this.currentBatch) {
      return this.currentBatch = new CommandBatch(optionalName);
    }
  };

  Manager.prototype.endCommandBatch = Reflux.createAction();

  Manager.prototype._endComandBatch = function() {
    if (this.currentBatch) {
      if (this.currentBatch.commands.length > 0) {
        this.commands.push(this.currentBatch);
        this.stackPosition++;
      }
      return this.currentBatch = null;
    }
  };

  Manager.prototype.createAndExecuteCommand = function(name, methods) {
    var codapConnect, result;
    if (this.currentBatch && !this.currentBatch.matches(name)) {
      this._endComandBatch();
    }
    result = this.execute(new Command(name, methods));
    if ((!this.currentBatch) || (this.currentBatch.commands.length === 1)) {
      codapConnect = CodapConnect.instance(DEFAULT_CONTEXT_NAME);
      codapConnect.sendUndoableActionPerformed(name);
    }
    return result;
  };

  Manager.prototype.execute = function(command) {
    var result;
    this._clearRedo();
    result = command.execute(this.debug);
    if (this.currentBatch) {
      this.currentBatch.push(command);
    } else {
      this.commands.push(command);
      this.stackPosition++;
    }
    this._changed();
    if (this.debug) {
      this.log();
    }
    return result;
  };

  Manager.prototype.undo = Reflux.createAction();

  Manager.prototype._undo = function(drop) {
    var result;
    if (this.canUndo()) {
      result = this.commands[this.stackPosition].undo(this.debug);
      this.stackPosition--;
      if (drop) {
        this._clearRedo();
      }
      this._changed();
      if (this.debug) {
        this.log();
      }
      return result;
    } else {
      return false;
    }
  };

  Manager.prototype.canUndo = function() {
    return this.stackPosition >= 0;
  };

  Manager.prototype.redo = Reflux.createAction();

  Manager.prototype._redo = function() {
    var result;
    if (this.canRedo()) {
      this.stackPosition++;
      result = this.commands[this.stackPosition].redo(this.debug);
      this._changed();
      if (this.debug) {
        this.log();
      }
      return result;
    } else {
      return false;
    }
  };

  Manager.prototype.canRedo = function() {
    return this.stackPosition < this.commands.length - 1;
  };

  Manager.prototype.save = function() {
    this.savePosition = this.stackPosition;
    return this._changed();
  };

  Manager.prototype.clearHistory = function() {
    this.commands = [];
    this.stackPosition = -1;
    this.savePosition = -1;
    this._changed();
    if (this.debug) {
      return this.log();
    }
  };

  Manager.prototype.dirty = function() {
    return this.stackPosition !== this.savePosition;
  };

  Manager.prototype.saved = function() {
    return this.savePosition !== -1;
  };

  Manager.prototype.revertToOriginal = function() {
    var results;
    results = [];
    while (this.canUndo()) {
      results.push(this.undo());
    }
    return results;
  };

  Manager.prototype.revertToLastSave = function() {
    var results, results1;
    if (this.stackPosition > this.savePosition) {
      results = [];
      while (this.dirty()) {
        results.push(this.undo());
      }
      return results;
    } else if (this.stackPosition < this.savePosition) {
      results1 = [];
      while (this.dirty()) {
        results1.push(this.redo());
      }
      return results1;
    }
  };

  Manager.prototype.addChangeListener = function(listener) {
    return this.changeListeners.push(listener);
  };

  Manager.prototype.log = function() {
    log.info("Undo Stack: [" + ((_.pluck(this.commands.slice(0, this.stackPosition + 1), 'name')).join(', ')) + "]");
    return log.info("Redo Stack: [" + ((_.pluck(this.commands.slice(this.stackPosition + 1), 'name')).join(', ')) + "]");
  };

  Manager.prototype.clearRedo = function() {
    this._clearRedo();
    return this._changed();
  };

  Manager.prototype._clearRedo = function() {
    return this.commands = this.commands.slice(0, this.stackPosition + 1);
  };

  Manager.prototype._changed = function() {
    var i, len, listener, ref, results, status;
    if (this.changeListeners.length > 0) {
      status = {
        dirty: this.dirty(),
        canUndo: this.canUndo(),
        canRedo: this.canRedo(),
        saved: this.saved()
      };
      ref = this.changeListeners;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        listener = ref[i];
        results.push(listener(status));
      }
      return results;
    }
  };

  return Manager;

})();

Command = (function() {
  function Command(name1, methods1) {
    this.name = name1;
    this.methods = methods1;
    void 0;
  }

  Command.prototype._call = function(method, debug, via) {
    if (debug) {
      log.info(("Command: " + this.name + "." + method + "()") + (via ? " via " + via : ''));
    }
    if (this.methods.hasOwnProperty(method)) {
      return this.methods[method]();
    } else {
      throw new Error("Undefined " + method + " method for " + this.name + " command");
    }
  };

  Command.prototype.execute = function(debug) {
    return this._call('execute', debug);
  };

  Command.prototype.undo = function(debug) {
    return this._call('undo', debug);
  };

  Command.prototype.redo = function(debug) {
    if (this.methods.hasOwnProperty('redo')) {
      return this._call('redo', debug);
    } else {
      return this._call('execute', debug, 'redo');
    }
  };

  return Command;

})();

CommandBatch = (function() {
  function CommandBatch(name1) {
    this.name = name1;
    this.commands = [];
  }

  CommandBatch.prototype.push = function(command) {
    return this.commands.push(command);
  };

  CommandBatch.prototype.undo = function(debug) {
    var command, i, ref, results;
    ref = this.commands;
    results = [];
    for (i = ref.length - 1; i >= 0; i += -1) {
      command = ref[i];
      results.push(command.undo(debug));
    }
    return results;
  };

  CommandBatch.prototype.redo = function(debug) {
    var command, i, len, ref, results;
    ref = this.commands;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      command = ref[i];
      results.push(command.redo(debug));
    }
    return results;
  };

  CommandBatch.prototype.matches = function(name) {
    if (this.name && this.name !== name) {
      return false;
    }
    return true;
  };

  return CommandBatch;

})();

instances = {};

instance = function(opts) {
  var contextName, debug;
  if (opts == null) {
    opts = {};
  }
  contextName = opts.contextName, debug = opts.debug;
  contextName || (contextName = DEFAULT_CONTEXT_NAME);
  instances[contextName] || (instances[contextName] = new Manager(opts));
  return instances[contextName];
};

module.exports = {
  instance: instance,
  constructor: Manager,
  command: Command
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../models/codap-connect":653}],691:[function(require,module,exports){
// http://stackoverflow.com/a/2880929
var urlParams = {};
if (window && window.location && window.location.search) {
  (window.onpopstate = function () {
      var match,
          pl     = /\+/g,  // Regex for replacing addition symbol with a space
          search = /([^&=]+)=?([^&]*)/g,
          decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
          query  = window.location.search.substring(1);

      while ((match = search.exec(query)))
         urlParams[decode(match[1])] = decode(match[2]);
  })();
}

module.exports = urlParams;

},{}],692:[function(require,module,exports){
var AboutView, a, br, div, h2, i, p, ref;

ref = React.DOM, div = ref.div, a = ref.a, i = ref.i, h2 = ref.h2, p = ref.p, br = ref.br;

module.exports = AboutView = React.createClass({
  displayName: 'AboutView',
  componentWillMount: function() {
    var build_info, year;
    build_info = $('html').find("meta[name='build-info']").attr('content');
    year = build_info.split(' ')[0].split('-')[0];
    return this.setState({
      year: year
    });
  },
  getInitialState: function() {
    return {
      showing: false
    };
  },
  close: function() {
    return this.setState({
      showing: false
    });
  },
  open: function() {
    return this.setState({
      showing: true
    });
  },
  render: function() {
    return div({}, div({
      className: 'misc-actions'
    }, i({
      className: "icon-codap-help",
      onClick: this.open
    })), this.state.showing ? div({
      className: "BuildInfoView",
      onClick: this.close
    }, div({
      className: "content",
      onClick: function(e) {
        return e.stopPropagation();
      }
    }, div({
      className: "top",
      style: {
        textAlign: "right"
      }
    }, i({
      className: 'icon-codap-ex',
      style: {
        padding: 0,
        cursor: "pointer"
      },
      onClick: this.close
    })), div({
      className: "inner",
      style: {
        paddingTop: 0,
        textAlign: "center"
      }
    }, h2({}, "SageModeler"), p({}, "Copyright © " + this.state.year + " The Concord Consortium. All rights reserved."), p({}, "This open-source software is licensed under the ", a({
      href: "https://github.com/concord-consortium/building-models/blob/master/LICENSE",
      target: '_blank'
    }, "MIT license"), "."), p({}, "Please provide attribution to The Concord Consortium", br({}), "and the URL ", a({
      href: "https://concord.org/",
      target: '_blank'
    }, "https://concord.org"), ".")))) : void 0);
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvYWJvdXQtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9hYm91dC12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQXlCLEtBQUssQ0FBQyxHQUEvQixFQUFDLGFBQUQsRUFBTSxTQUFOLEVBQVMsU0FBVCxFQUFZLFdBQVosRUFBZ0IsU0FBaEIsRUFBbUI7O0FBRW5CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUEsR0FBWSxLQUFLLENBQUMsV0FBTixDQUUzQjtFQUFBLFdBQUEsRUFBYSxXQUFiO0VBRUEsa0JBQUEsRUFBb0IsU0FBQTtBQUNsQixRQUFBO0lBQUEsVUFBQSxHQUFhLENBQUEsQ0FBRSxNQUFGLENBQVMsQ0FBQyxJQUFWLENBQWUseUJBQWYsQ0FBeUMsQ0FBQyxJQUExQyxDQUErQyxTQUEvQztJQUNiLElBQUEsR0FBTyxVQUFVLENBQUMsS0FBWCxDQUFpQixHQUFqQixDQUFzQixDQUFBLENBQUEsQ0FBRSxDQUFDLEtBQXpCLENBQStCLEdBQS9CLENBQW9DLENBQUEsQ0FBQTtXQUMzQyxJQUFDLENBQUEsUUFBRCxDQUNFO01BQUEsSUFBQSxFQUFNLElBQU47S0FERjtFQUhrQixDQUZwQjtFQVFBLGVBQUEsRUFBaUIsU0FBQTtXQUNmO01BQUEsT0FBQSxFQUFTLEtBQVQ7O0VBRGUsQ0FSakI7RUFXQSxLQUFBLEVBQU8sU0FBQTtXQUNMLElBQUMsQ0FBQSxRQUFELENBQ0U7TUFBQSxPQUFBLEVBQVMsS0FBVDtLQURGO0VBREssQ0FYUDtFQWVBLElBQUEsRUFBTSxTQUFBO1dBQ0osSUFBQyxDQUFBLFFBQUQsQ0FDRTtNQUFBLE9BQUEsRUFBUyxJQUFUO0tBREY7RUFESSxDQWZOO0VBbUJBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsR0FBQSxDQUFJLEVBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsY0FBWjtLQUFKLEVBQ0UsQ0FBQSxDQUFFO01BQUMsU0FBQSxFQUFXLGlCQUFaO01BQStCLE9BQUEsRUFBUyxJQUFDLENBQUEsSUFBekM7S0FBRixDQURGLENBREYsRUFJSSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQVYsR0FDRyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsZUFBWjtNQUE2QixPQUFBLEVBQVMsSUFBQyxDQUFBLEtBQXZDO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsU0FBWjtNQUF1QixPQUFBLEVBQVMsU0FBQyxDQUFEO2VBQU0sQ0FBQyxDQUFDLGVBQUYsQ0FBQTtNQUFOLENBQWhDO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsS0FBWjtNQUFtQixLQUFBLEVBQU87UUFBQyxTQUFBLEVBQVcsT0FBWjtPQUExQjtLQUFKLEVBQ0UsQ0FBQSxDQUFFO01BQUMsU0FBQSxFQUFXLGVBQVo7TUFBNkIsS0FBQSxFQUFPO1FBQUMsT0FBQSxFQUFTLENBQVY7UUFBYSxNQUFBLEVBQVEsU0FBckI7T0FBcEM7TUFBcUUsT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUEvRTtLQUFGLENBREYsQ0FERixFQUdFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxPQUFaO01BQXFCLEtBQUEsRUFBTztRQUFDLFVBQUEsRUFBWSxDQUFiO1FBQWdCLFNBQUEsRUFBVyxRQUEzQjtPQUE1QjtLQUFKLEVBQ0UsRUFBQSxDQUFHLEVBQUgsRUFBTyxhQUFQLENBREYsRUFFRSxDQUFBLENBQUUsRUFBRixFQUNDLGNBQUEsR0FBZSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQXRCLEdBQTJCLCtDQUQ1QixDQUZGLEVBS0UsQ0FBQSxDQUFFLEVBQUYsRUFDQyxrREFERCxFQUVFLENBQUEsQ0FBRTtNQUFDLElBQUEsRUFBTSwyRUFBUDtNQUFvRixNQUFBLEVBQVEsUUFBNUY7S0FBRixFQUF5RyxhQUF6RyxDQUZGLEVBR0MsR0FIRCxDQUxGLEVBVUUsQ0FBQSxDQUFFLEVBQUYsRUFDQyxzREFERCxFQUVFLEVBQUEsQ0FBRyxFQUFILENBRkYsRUFHQyxjQUhELEVBSUUsQ0FBQSxDQUFFO01BQUMsSUFBQSxFQUFNLHNCQUFQO01BQStCLE1BQUEsRUFBUSxRQUF2QztLQUFGLEVBQW9ELHFCQUFwRCxDQUpGLEVBS0MsR0FMRCxDQVZGLENBSEYsQ0FERixDQURILEdBQUEsTUFKRDtFQURLLENBbkJSO0NBRjJCIn0=

},{}],693:[function(require,module,exports){
var AppSettingsStore, BuildInfoView, DocumentActions, GlobalNav, GraphView, ImageBrowser, ImageDialogStore, InspectorPanel, ModalPaletteDelete, NodeWell, Placeholder, Reflux, a, div, ref, tr;

Reflux = require('reflux');

tr = require('../utils/translate');

Placeholder = React.createFactory(require('./placeholder-view'));

GlobalNav = React.createFactory(require('./global-nav-view'));

GraphView = React.createFactory(require('./graph-view'));

NodeWell = React.createFactory(require('./node-well-view'));

InspectorPanel = React.createFactory(require('./inspector-panel-view'));

ImageBrowser = React.createFactory(require('./image-browser-view'));

DocumentActions = React.createFactory(require('./document-actions-view'));

ModalPaletteDelete = React.createFactory(require('./modal-palette-delete-view'));

BuildInfoView = React.createFactory(require('./build-info-view'));

window.HashParameters = require("../utils/hash-parameters");

ImageDialogStore = require('../stores/image-dialog-store');

AppSettingsStore = require('../stores/app-settings-store');

ref = React.DOM, div = ref.div, a = ref.a;

module.exports = React.createClass({
  displayName: 'WirefameApp',
  mixins: [ImageDialogStore.mixin, AppSettingsStore.mixin, require('../mixins/app-view')],
  getInitialState: function() {
    var iframed;
    try {
      iframed = window.self !== window.top;
    } catch (error) {
      iframed = true;
    }
    return this.getInitialAppViewState({
      iframed: iframed,
      username: 'Jane Doe',
      filename: tr("~MENU.UNTITLED_MODEL")
    });
  },
  selectionUpdated: function() {
    var ref1;
    return (ref1 = this.refs.inspectorPanel) != null ? ref1.nodeSelectionChanged() : void 0;
  },
  toggleImageBrowser: function() {
    return this.setState({
      showImageBrowser: !this.state.showImageBrowser
    });
  },
  render: function() {
    return div({
      className: 'app'
    }, div({
      className: this.state.iframed ? 'iframed-workspace' : 'workspace'
    }, !this.state.iframed ? GlobalNav({
      filename: this.state.filename,
      username: this.state.username,
      graphStore: this.props.graphStore,
      GraphStore: this.GraphStore
    }) : void 0, div({
      className: 'action-bar'
    }, NodeWell({
      palette: this.state.palette,
      toggleImageBrowser: this.toggleImageBrowser,
      graphStore: this.props.graphStore
    }), DocumentActions({
      graphStore: this.props.graphStore,
      diagramOnly: this.state.complexity === AppSettingsStore.store.Complexity.diagramOnly,
      iframed: this.state.iframed
    })), div({
      className: 'canvas'
    }, GraphView({
      graphStore: this.props.graphStore,
      selectionManager: this.props.graphStore.selectionManager,
      selectedLink: this.state.selectedLink
    })), InspectorPanel({
      node: this.state.selectedNode,
      link: this.state.selectedLink,
      onNodeChanged: this.onNodeChanged,
      onNodeDelete: this.onNodeDelete,
      palette: this.state.palette,
      diagramOnly: this.state.complexity === AppSettingsStore.store.Complexity.diagramOnly,
      toggleImageBrowser: this.toggleImageBrowser,
      graphStore: this.props.graphStore,
      ref: "inspectorPanel"
    }), this.state.showingDialog ? ImageBrowser({
      graphStore: this.props.graphStore
    }) : void 0, ModalPaletteDelete({})), this.state.iframed ? BuildInfoView({}) : void 0);
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvYXBwLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvYXBwLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztBQUNULEVBQUEsR0FBc0IsT0FBQSxDQUFRLG9CQUFSOztBQUV0QixXQUFBLEdBQXFCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxvQkFBUixDQUFwQjs7QUFDckIsU0FBQSxHQUFxQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsbUJBQVIsQ0FBcEI7O0FBQ3JCLFNBQUEsR0FBcUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLGNBQVIsQ0FBcEI7O0FBQ3JCLFFBQUEsR0FBcUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLGtCQUFSLENBQXBCOztBQUNyQixjQUFBLEdBQXFCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSx3QkFBUixDQUFwQjs7QUFDckIsWUFBQSxHQUFxQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsc0JBQVIsQ0FBcEI7O0FBQ3JCLGVBQUEsR0FBcUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHlCQUFSLENBQXBCOztBQUNyQixrQkFBQSxHQUFxQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsNkJBQVIsQ0FBcEI7O0FBQ3JCLGFBQUEsR0FBcUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLG1CQUFSLENBQXBCOztBQUVyQixNQUFNLENBQUMsY0FBUCxHQUF3QixPQUFBLENBQVEsMEJBQVI7O0FBRXhCLGdCQUFBLEdBQXNCLE9BQUEsQ0FBUSw4QkFBUjs7QUFDdEIsZ0JBQUEsR0FBc0IsT0FBQSxDQUFRLDhCQUFSOztBQUd0QixNQUFXLEtBQUssQ0FBQyxHQUFqQixFQUFDLGFBQUQsRUFBTTs7QUFFTixNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLGFBQWI7RUFFQSxNQUFBLEVBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFsQixFQUF5QixnQkFBZ0IsQ0FBQyxLQUExQyxFQUFpRCxPQUFBLENBQVEsb0JBQVIsQ0FBakQsQ0FGUjtFQUlBLGVBQUEsRUFBaUIsU0FBQTtBQUVmLFFBQUE7QUFBQTtNQUNFLE9BQUEsR0FBVSxNQUFNLENBQUMsSUFBUCxLQUFpQixNQUFNLENBQUMsSUFEcEM7S0FBQSxhQUFBO01BR0UsT0FBQSxHQUFVLEtBSFo7O1dBS0EsSUFBQyxDQUFBLHNCQUFELENBQ0U7TUFBQSxPQUFBLEVBQVMsT0FBVDtNQUNBLFFBQUEsRUFBVSxVQURWO01BRUEsUUFBQSxFQUFVLEVBQUEsQ0FBRyxzQkFBSCxDQUZWO0tBREY7RUFQZSxDQUpqQjtFQWdCQSxnQkFBQSxFQUFrQixTQUFBO0FBQ2hCLFFBQUE7MkRBQXdCLENBQUUsb0JBQTFCLENBQUE7RUFEZ0IsQ0FoQmxCO0VBbUJBLGtCQUFBLEVBQW9CLFNBQUE7V0FDbEIsSUFBQyxDQUFBLFFBQUQsQ0FBVTtNQUFBLGdCQUFBLEVBQWtCLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxnQkFBN0I7S0FBVjtFQURrQixDQW5CcEI7RUFzQkEsTUFBQSxFQUFRLFNBQUE7V0FDTCxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsS0FBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFjLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBVixHQUF1QixtQkFBdkIsR0FBZ0QsV0FBNUQ7S0FBSixFQUNJLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFkLEdBQ0csU0FBQSxDQUNDO01BQUEsUUFBQSxFQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBakI7TUFDQSxRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQURqQjtNQUVBLFVBQUEsRUFBWSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBRm5CO01BR0EsVUFBQSxFQUFZLElBQUMsQ0FBQSxVQUhiO0tBREQsQ0FESCxHQUFBLE1BREQsRUFRRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsWUFBWjtLQUFKLEVBQ0UsUUFBQSxDQUFTO01BQ1IsT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FEUjtNQUVSLGtCQUFBLEVBQW9CLElBQUMsQ0FBQSxrQkFGYjtNQUdSLFVBQUEsRUFBWSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBSFg7S0FBVCxDQURGLEVBTUUsZUFBQSxDQUNDO01BQUEsVUFBQSxFQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBbkI7TUFDQSxXQUFBLEVBQWEsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLEtBQXFCLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FEcEU7TUFFQSxPQUFBLEVBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUZoQjtLQURELENBTkYsQ0FSRixFQW9CRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsUUFBWjtLQUFKLEVBQ0UsU0FBQSxDQUFVO01BQ1QsVUFBQSxFQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFEVjtNQUVULGdCQUFBLEVBQWtCLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBVSxDQUFDLGdCQUYzQjtNQUdULFlBQUEsRUFBYyxJQUFDLENBQUEsS0FBSyxDQUFDLFlBSFo7S0FBVixDQURGLENBcEJGLEVBMEJFLGNBQUEsQ0FDQztNQUFBLElBQUEsRUFBTSxJQUFDLENBQUEsS0FBSyxDQUFDLFlBQWI7TUFDQSxJQUFBLEVBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxZQURiO01BRUEsYUFBQSxFQUFlLElBQUMsQ0FBQSxhQUZoQjtNQUdBLFlBQUEsRUFBYyxJQUFDLENBQUEsWUFIZjtNQUlBLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BSmhCO01BS0EsV0FBQSxFQUFhLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxLQUFxQixnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFdBTHBFO01BTUEsa0JBQUEsRUFBb0IsSUFBQyxDQUFBLGtCQU5yQjtNQU9BLFVBQUEsRUFBWSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBUG5CO01BUUEsR0FBQSxFQUFLLGdCQVJMO0tBREQsQ0ExQkYsRUFxQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFWLEdBQ0csWUFBQSxDQUNDO01BQUEsVUFBQSxFQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBbkI7S0FERCxDQURILEdBQUEsTUFyQ0QsRUF5Q0Usa0JBQUEsQ0FBbUIsRUFBbkIsQ0F6Q0YsQ0FERixFQTRDSSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQVYsR0FDRyxhQUFBLENBQWMsRUFBZCxDQURILEdBQUEsTUE1Q0Q7RUFESyxDQXRCUjtDQUZlIn0=

},{"../mixins/app-view":649,"../stores/app-settings-store":662,"../stores/image-dialog-store":666,"../utils/hash-parameters":678,"../utils/translate":689,"./build-info-view":694,"./document-actions-view":696,"./global-nav-view":700,"./graph-view":701,"./image-browser-view":702,"./inspector-panel-view":708,"./modal-palette-delete-view":714,"./node-well-view":721,"./placeholder-view":727,"reflux":596}],694:[function(require,module,exports){
var BuildInfoView, Migration, a, div, i, ref, table, tbody, td, tr;

ref = React.DOM, div = ref.div, a = ref.a, table = ref.table, tbody = ref.tbody, tr = ref.tr, td = ref.td, i = ref.i;

Migration = require("../data/migrations/migrations");

module.exports = BuildInfoView = React.createClass({
  displayName: 'BuildInfoView',
  componentWillMount: function() {
    var build_info, commit, commiter, date, ref1, tag;
    build_info = $('html').find("meta[name='build-info']").attr('content');
    ref1 = build_info.split(' '), date = ref1[0], tag = ref1[1], commit = ref1[2], commiter = ref1[3];
    return this.setState({
      commit: commit,
      date: date,
      tag: tag,
      commiter: commiter
    });
  },
  getInitialState: function() {
    return {
      commit: 'somegithub sha',
      date: '2015-12-16',
      dataVersion: Migration.latestVersion(),
      showing: false
    };
  },
  thisEncodedUrl: function() {
    return encodeURIComponent(window.location.toString());
  },
  link: function() {
    return "https://github.com/concord-consortium/building-models/commit/" + this.state.commit;
  },
  close: function() {
    return this.setState({
      showing: false
    });
  },
  open: function() {
    return this.setState({
      showing: true
    });
  },
  render: function() {
    var className;
    return div({
      className: 'build-info-bottom-bar'
    }, div({
      className: 'build-info-button',
      onClick: this.open
    }, "built on " + this.state.date), this.state.showing ? (className = "BuildInfoView", div({
      className: "BuildInfoView",
      onClick: this.close
    }, div({
      className: "content",
      onClick: function(e) {
        return e.stopPropagation();
      }
    }, div({
      className: "top",
      style: {
        textAlign: "right"
      }
    }, i({
      className: 'icon-codap-ex',
      style: {
        padding: 0,
        cursor: "pointer"
      },
      onClick: this.close
    })), table({}, tbody({}, tr({
      className: "date"
    }, td({
      className: "key"
    }, "released on:"), td({
      className: "value"
    }, this.state.date)), tr({
      className: "commit"
    }, td({
      className: "key"
    }, "commit:"), td({
      className: "value"
    }, a({
      href: this.link(),
      target: "_blank"
    }, this.state.commit))), tr({
      className: "tag"
    }, td({
      className: "key"
    }, "tag:"), td({
      className: "value"
    }, this.state.tag)), tr({
      className: "commit"
    }, td({
      className: "key"
    }, "commiter:"), td({
      className: "value"
    }, this.state.commiter)), tr({
      className: "buildInfo"
    }, td({
      className: "key"
    }, "data format version:"), td({
      className: "value"
    }, this.state.dataVersion))))))) : void 0);
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvYnVpbGQtaW5mby12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL2J1aWxkLWluZm8tdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxNQUFvQyxLQUFLLENBQUMsR0FBMUMsRUFBQyxhQUFELEVBQU0sU0FBTixFQUFTLGlCQUFULEVBQWdCLGlCQUFoQixFQUF1QixXQUF2QixFQUEyQixXQUEzQixFQUErQjs7QUFDL0IsU0FBQSxHQUFZLE9BQUEsQ0FBUSwrQkFBUjs7QUFFWixNQUFNLENBQUMsT0FBUCxHQUFpQixhQUFBLEdBQWdCLEtBQUssQ0FBQyxXQUFOLENBRS9CO0VBQUEsV0FBQSxFQUFhLGVBQWI7RUFFQSxrQkFBQSxFQUFvQixTQUFBO0FBQ2xCLFFBQUE7SUFBQSxVQUFBLEdBQWEsQ0FBQSxDQUFFLE1BQUYsQ0FBUyxDQUFDLElBQVYsQ0FBZSx5QkFBZixDQUF5QyxDQUFDLElBQTFDLENBQStDLFNBQS9DO0lBQ2IsT0FBNEIsVUFBVSxDQUFDLEtBQVgsQ0FBaUIsR0FBakIsQ0FBNUIsRUFBQyxjQUFELEVBQU0sYUFBTixFQUFVLGdCQUFWLEVBQWlCO1dBQ2pCLElBQUMsQ0FBQSxRQUFELENBQ0U7TUFBQSxNQUFBLEVBQVEsTUFBUjtNQUNBLElBQUEsRUFBTSxJQUROO01BRUEsR0FBQSxFQUFLLEdBRkw7TUFHQSxRQUFBLEVBQVUsUUFIVjtLQURGO0VBSGtCLENBRnBCO0VBV0EsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxNQUFBLEVBQVEsZ0JBQVI7TUFDQSxJQUFBLEVBQU0sWUFETjtNQUVBLFdBQUEsRUFBYSxTQUFTLENBQUMsYUFBVixDQUFBLENBRmI7TUFHQSxPQUFBLEVBQVMsS0FIVDs7RUFEZSxDQVhqQjtFQWlCQSxjQUFBLEVBQWdCLFNBQUE7V0FDZCxrQkFBQSxDQUFtQixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQWhCLENBQUEsQ0FBbkI7RUFEYyxDQWpCaEI7RUFvQkEsSUFBQSxFQUFNLFNBQUE7V0FDSiwrREFBQSxHQUFnRSxJQUFDLENBQUEsS0FBSyxDQUFDO0VBRG5FLENBcEJOO0VBdUJBLEtBQUEsRUFBTyxTQUFBO1dBQ0wsSUFBQyxDQUFBLFFBQUQsQ0FDRTtNQUFBLE9BQUEsRUFBUyxLQUFUO0tBREY7RUFESyxDQXZCUDtFQTJCQSxJQUFBLEVBQU0sU0FBQTtXQUNKLElBQUMsQ0FBQSxRQUFELENBQ0U7TUFBQSxPQUFBLEVBQVMsSUFBVDtLQURGO0VBREksQ0EzQk47RUErQkEsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBO1dBQUMsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLHVCQUFaO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsbUJBQVo7TUFBaUMsT0FBQSxFQUFRLElBQUMsQ0FBQSxJQUExQztLQUFKLEVBQXFELFdBQUEsR0FBWSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQXhFLENBREYsRUFFSSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQVYsR0FDRSxDQUFBLFNBQUEsR0FBWSxlQUFaLEVBQ0MsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGVBQVo7TUFBNkIsT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUF2QztLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFNBQVo7TUFBdUIsT0FBQSxFQUFTLFNBQUMsQ0FBRDtlQUFNLENBQUMsQ0FBQyxlQUFGLENBQUE7TUFBTixDQUFoQztLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLEtBQVo7TUFBbUIsS0FBQSxFQUFPO1FBQUMsU0FBQSxFQUFXLE9BQVo7T0FBMUI7S0FBSixFQUNFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyxlQUFaO01BQTZCLEtBQUEsRUFBTztRQUFDLE9BQUEsRUFBUyxDQUFWO1FBQWEsTUFBQSxFQUFRLFNBQXJCO09BQXBDO01BQXFFLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBL0U7S0FBRixDQURGLENBREYsRUFHRSxLQUFBLENBQU0sRUFBTixFQUNFLEtBQUEsQ0FBTSxFQUFOLEVBQ0UsRUFBQSxDQUFHO01BQUMsU0FBQSxFQUFXLE1BQVo7S0FBSCxFQUNFLEVBQUEsQ0FBRztNQUFDLFNBQUEsRUFBVyxLQUFaO0tBQUgsRUFBdUIsY0FBdkIsQ0FERixFQUVFLEVBQUEsQ0FBRztNQUFDLFNBQUEsRUFBVyxPQUFaO0tBQUgsRUFBeUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFoQyxDQUZGLENBREYsRUFLRSxFQUFBLENBQUc7TUFBQyxTQUFBLEVBQVcsUUFBWjtLQUFILEVBQ0UsRUFBQSxDQUFHO01BQUMsU0FBQSxFQUFXLEtBQVo7S0FBSCxFQUF1QixTQUF2QixDQURGLEVBRUUsRUFBQSxDQUFHO01BQUMsU0FBQSxFQUFXLE9BQVo7S0FBSCxFQUNFLENBQUEsQ0FBRTtNQUFDLElBQUEsRUFBTSxJQUFDLENBQUEsSUFBRCxDQUFBLENBQVA7TUFBZ0IsTUFBQSxFQUFRLFFBQXhCO0tBQUYsRUFBcUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUE1QyxDQURGLENBRkYsQ0FMRixFQVdFLEVBQUEsQ0FBRztNQUFDLFNBQUEsRUFBVyxLQUFaO0tBQUgsRUFDRSxFQUFBLENBQUc7TUFBQyxTQUFBLEVBQVcsS0FBWjtLQUFILEVBQXVCLE1BQXZCLENBREYsRUFFRSxFQUFBLENBQUc7TUFBQyxTQUFBLEVBQVcsT0FBWjtLQUFILEVBQXlCLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBaEMsQ0FGRixDQVhGLEVBZUUsRUFBQSxDQUFHO01BQUMsU0FBQSxFQUFXLFFBQVo7S0FBSCxFQUNFLEVBQUEsQ0FBRztNQUFDLFNBQUEsRUFBVyxLQUFaO0tBQUgsRUFBdUIsV0FBdkIsQ0FERixFQUVFLEVBQUEsQ0FBRztNQUFDLFNBQUEsRUFBVyxPQUFaO0tBQUgsRUFBeUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFoQyxDQUZGLENBZkYsRUFtQkUsRUFBQSxDQUFHO01BQUMsU0FBQSxFQUFXLFdBQVo7S0FBSCxFQUNFLEVBQUEsQ0FBRztNQUFDLFNBQUEsRUFBVyxLQUFaO0tBQUgsRUFBdUIsc0JBQXZCLENBREYsRUFFRSxFQUFBLENBQUc7TUFBQyxTQUFBLEVBQVcsT0FBWjtLQUFILEVBQXlCLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FBaEMsQ0FGRixDQW5CRixDQURGLENBSEYsQ0FERixDQURELENBREYsR0FBQSxNQUZEO0VBREssQ0EvQlI7Q0FGK0IifQ==

},{"../data/migrations/migrations":648}],695:[function(require,module,exports){
var Color, ColorChoice, div, tr;

div = React.DOM.div;

tr = require('../utils/translate');

Color = require('../utils/colors');

ColorChoice = React.createFactory(React.createClass({
  displayName: 'ColorChoice',
  selectColor: function() {
    return this.props.onChange(this.props.color);
  },
  render: function() {
    var className, name, value;
    name = this.props.color.name;
    value = this.props.color.value;
    className = 'color-choice';
    if (this.props.selected === value) {
      className = 'color-choice selected';
    }
    return div({
      className: className,
      onClick: this.selectColor
    }, div({
      className: 'color-swatch',
      style: {
        'backgroundColor': value
      }
    }), div({
      className: 'color-label'
    }, name));
  }
}));

module.exports = React.createClass({
  displayName: 'ColorPickerView',
  getInitialState: function() {
    return {
      opened: false
    };
  },
  select: function(color) {
    return this.props.onChange(color.value);
  },
  toggleOpen: function() {
    return this.setState({
      opened: !this.state.opened
    });
  },
  className: function() {
    if (this.state.opened) {
      return "color-picker opened";
    } else {
      return "color-picker closed";
    }
  },
  render: function() {
    var color;
    return div({
      className: this.className(),
      onClick: this.toggleOpen
    }, (function() {
      var i, len, ref, results;
      ref = Color.choices;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        color = ref[i];
        results.push(ColorChoice({
          key: color.name,
          color: color,
          selected: this.props.selected,
          onChange: this.select
        }));
      }
      return results;
    }).call(this));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvY29sb3ItcGlja2VyLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvY29sb3ItcGlja2VyLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUMsTUFBTyxLQUFLLENBQUM7O0FBQ2QsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFDTCxLQUFBLEdBQVEsT0FBQSxDQUFRLGlCQUFSOztBQUVSLFdBQUEsR0FBYyxLQUFLLENBQUMsYUFBTixDQUFvQixLQUFLLENBQUMsV0FBTixDQUNoQztFQUFBLFdBQUEsRUFBYSxhQUFiO0VBRUEsV0FBQSxFQUFhLFNBQUE7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsQ0FBZ0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUF2QjtFQURXLENBRmI7RUFLQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxJQUFBLEdBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDcEIsS0FBQSxHQUFRLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQ3JCLFNBQUEsR0FBWTtJQUNaLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLEtBQW1CLEtBQXRCO01BQ0UsU0FBQSxHQUFZLHdCQURkOztXQUdDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxTQUFaO01BQXVCLE9BQUEsRUFBUyxJQUFDLENBQUEsV0FBakM7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxjQUFaO01BQTRCLEtBQUEsRUFBTztRQUFDLGlCQUFBLEVBQW1CLEtBQXBCO09BQW5DO0tBQUosQ0FERixFQUVFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxhQUFaO0tBQUosRUFBZ0MsSUFBaEMsQ0FGRjtFQVBLLENBTFI7Q0FEZ0MsQ0FBcEI7O0FBa0JkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsaUJBQWI7RUFFQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLE1BQUEsRUFBUSxLQUFSOztFQURlLENBRmpCO0VBS0EsTUFBQSxFQUFRLFNBQUMsS0FBRDtXQUNOLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxDQUFnQixLQUFLLENBQUMsS0FBdEI7RUFETSxDQUxSO0VBUUEsVUFBQSxFQUFZLFNBQUE7V0FDVixJQUFDLENBQUEsUUFBRCxDQUNFO01BQUEsTUFBQSxFQUFTLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFwQjtLQURGO0VBRFUsQ0FSWjtFQVlBLFNBQUEsRUFBVyxTQUFBO0lBQ1QsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVY7YUFDRSxzQkFERjtLQUFBLE1BQUE7YUFHRSxzQkFIRjs7RUFEUyxDQVpYO0VBa0JBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtXQUFDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxJQUFDLENBQUEsU0FBRCxDQUFBLENBQVo7TUFBMEIsT0FBQSxFQUFTLElBQUMsQ0FBQSxVQUFwQztLQUFKOztBQUNDO0FBQUE7V0FBQSxxQ0FBQTs7cUJBQ0csV0FBQSxDQUFZO1VBQUMsR0FBQSxFQUFLLEtBQUssQ0FBQyxJQUFaO1VBQWtCLEtBQUEsRUFBTyxLQUF6QjtVQUFnQyxRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFqRDtVQUEyRCxRQUFBLEVBQVUsSUFBQyxDQUFBLE1BQXRFO1NBQVo7QUFESDs7aUJBREQ7RUFESyxDQWxCUjtDQUZlIn0=

},{"../utils/colors":673,"../utils/translate":689}],696:[function(require,module,exports){
var AboutView, AppSettingsStore, CodapStore, SimulationRunPanel, UndoRedoUIStore, br, div, i, ref, span, tr;

ref = React.DOM, div = ref.div, span = ref.span, i = ref.i, br = ref.br;

AboutView = React.createFactory(require('./about-view'));

AppSettingsStore = require('../stores/app-settings-store');

CodapStore = require('../stores/codap-store');

UndoRedoUIStore = require('../stores/undo-redo-ui-store');

tr = require('../utils/translate');

SimulationRunPanel = React.createFactory(require('./simulation-run-panel-view'));

module.exports = React.createClass({
  mixins: [CodapStore.mixin, UndoRedoUIStore.mixin, AppSettingsStore.mixin],
  displayName: 'DocumentActions',
  undoClicked: function() {
    return this.props.graphStore.undo();
  },
  redoClicked: function() {
    return this.props.graphStore.redo();
  },
  renderRunPanel: function() {
    if (!this.props.diagramOnly) {
      return SimulationRunPanel({});
    }
  },
  render: function() {
    var buttonClass;
    buttonClass = function(enabled) {
      if (!enabled) {
        return 'disabled';
      } else {
        return '';
      }
    };
    return div({
      className: 'document-actions'
    }, div({
      className: "misc-actions"
    }, this.renderRunPanel()), !this.state.hideUndoRedo ? div({
      className: 'misc-actions'
    }, i({
      className: "icon-codap-arrow-undo " + (buttonClass(this.state.canUndo)),
      onClick: this.undoClicked,
      disabled: !this.state.canUndo
    }), i({
      className: "icon-codap-arrow-redo " + (buttonClass(this.state.canRedo)),
      onClick: this.redoClicked,
      disabled: !this.state.canRedo
    })) : void 0, AboutView({}));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvZG9jdW1lbnQtYWN0aW9ucy12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL2RvY3VtZW50LWFjdGlvbnMtdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxNQUFxQixLQUFLLENBQUMsR0FBM0IsRUFBQyxhQUFELEVBQU0sZUFBTixFQUFZLFNBQVosRUFBZTs7QUFDZixTQUFBLEdBQW1CLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxjQUFSLENBQXBCOztBQUNuQixnQkFBQSxHQUFtQixPQUFBLENBQVEsOEJBQVI7O0FBQ25CLFVBQUEsR0FBbUIsT0FBQSxDQUFRLHVCQUFSOztBQUNuQixlQUFBLEdBQW1CLE9BQUEsQ0FBUSw4QkFBUjs7QUFDbkIsRUFBQSxHQUFtQixPQUFBLENBQVEsb0JBQVI7O0FBRW5CLGtCQUFBLEdBQXFCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSw2QkFBUixDQUFwQjs7QUFFckIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FFZjtFQUFBLE1BQUEsRUFBUSxDQUFFLFVBQVUsQ0FBQyxLQUFiLEVBQW9CLGVBQWUsQ0FBQyxLQUFwQyxFQUEyQyxnQkFBZ0IsQ0FBQyxLQUE1RCxDQUFSO0VBRUEsV0FBQSxFQUFhLGlCQUZiO0VBSUEsV0FBQSxFQUFhLFNBQUE7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFsQixDQUFBO0VBRFcsQ0FKYjtFQU9BLFdBQUEsRUFBYSxTQUFBO1dBQ1gsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBbEIsQ0FBQTtFQURXLENBUGI7RUFVQSxjQUFBLEVBQWdCLFNBQUE7SUFDZCxJQUFHLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFkO2FBQ0csa0JBQUEsQ0FBbUIsRUFBbkIsRUFESDs7RUFEYyxDQVZoQjtFQWNBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtJQUFBLFdBQUEsR0FBYyxTQUFDLE9BQUQ7TUFBYSxJQUFHLENBQUksT0FBUDtlQUFvQixXQUFwQjtPQUFBLE1BQUE7ZUFBb0MsR0FBcEM7O0lBQWI7V0FDYixHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsa0JBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxjQUFaO0tBQUosRUFDQyxJQUFDLENBQUEsY0FBRCxDQUFBLENBREQsQ0FERixFQUtDLENBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxZQUFkLEdBQ0csR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGNBQVo7S0FBSixFQUNFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyx3QkFBQSxHQUF3QixDQUFDLFdBQUEsQ0FBWSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQW5CLENBQUQsQ0FBcEM7TUFBbUUsT0FBQSxFQUFTLElBQUMsQ0FBQSxXQUE3RTtNQUEwRixRQUFBLEVBQVUsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQS9HO0tBQUYsQ0FERixFQUVFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyx3QkFBQSxHQUF3QixDQUFDLFdBQUEsQ0FBWSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQW5CLENBQUQsQ0FBcEM7TUFBbUUsT0FBQSxFQUFTLElBQUMsQ0FBQSxXQUE3RTtNQUEwRixRQUFBLEVBQVUsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQS9HO0tBQUYsQ0FGRixDQURILEdBQUEsTUFMRCxFQVdFLFNBQUEsQ0FBVSxFQUFWLENBWEY7RUFGSyxDQWRSO0NBRmUifQ==

},{"../stores/app-settings-store":662,"../stores/codap-store":663,"../stores/undo-redo-ui-store":672,"../utils/translate":689,"./about-view":692,"./simulation-run-panel-view":732}],697:[function(require,module,exports){
var Demo, DemoDropDown, DropDown, DropdownItem, div, i, li, ref, span, ul;

ref = React.DOM, div = ref.div, i = ref.i, span = ref.span, ul = ref.ul, li = ref.li;

DropdownItem = React.createFactory(React.createClass({
  displayName: 'DropdownItem',
  clicked: function() {
    return this.props.select(this.props.item);
  },
  render: function() {
    var className, name;
    className = "menuItem " + (this.props.isActionMenu && !this.props.item.action ? 'disabled' : '');
    name = this.props.item.name || this.props.item;
    return li({
      className: className,
      onClick: this.clicked
    }, name);
  }
}));

module.exports = DropDown = React.createClass({
  displayName: 'Dropdown',
  getDefaultProps: function() {
    return {
      isActionMenu: true,
      onSelect: function(item) {
        return log.info("Selected " + item);
      }
    };
  },
  getInitialState: function() {
    return {
      showingMenu: false,
      timeout: null
    };
  },
  blur: function() {
    var timeout;
    this.unblur();
    timeout = setTimeout(((function(_this) {
      return function() {
        return _this.setState({
          showingMenu: false
        });
      };
    })(this)), 500);
    return this.setState({
      timeout: timeout
    });
  },
  unblur: function() {
    if (this.state.timeout) {
      clearTimeout(this.state.timeout);
    }
    return this.setState({
      timeout: null
    });
  },
  select: function(item) {
    var nextState;
    nextState = !this.state.showingMenu;
    this.setState({
      showingMenu: nextState
    });
    if (!item) {
      return;
    }
    if (this.props.isActionMenu && item.action) {
      return item.action();
    } else {
      return this.props.onSelect(item);
    }
  },
  render: function() {
    var item, menuClass, select;
    menuClass = this.state.showingMenu ? 'menu-showing' : 'menu-hidden';
    select = (function(_this) {
      return function(item) {
        return function() {
          return _this.select(item);
        };
      };
    })(this);
    return div({
      className: 'menu'
    }, span({
      className: 'menu-anchor',
      onClick: (function(_this) {
        return function() {
          return _this.select(null);
        };
      })(this)
    }, this.props.anchor, i({
      className: 'icon-codap-arrow-expand'
    })), div({
      className: menuClass,
      onMouseLeave: this.blur,
      onMouseEnter: this.unblur
    }, ul({}, (function() {
      var j, len, ref1, results;
      ref1 = this.props.items;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        item = ref1[j];
        results.push(DropdownItem({
          key: item.name || item,
          item: item,
          select: this.select,
          isActionMenu: this.props.isActionMenu
        }));
      }
      return results;
    }).call(this))));
  }
});

DemoDropDown = React.createFactory(DropDown);

Demo = React.createClass({
  getInitialState: function() {
    return {
      nonActionMenuSelection: "Selection menu"
    };
  },
  onNonActionMenuSelect: function(item) {
    return this.setState({
      nonActionMenuSelection: item
    });
  },
  render: function() {
    return div({}, div({}, DemoDropDown({
      anchor: "Action Menu",
      items: [
        {
          name: "Action 1",
          action: function() {
            return alert("Action 1");
          }
        }, {
          name: "Action 2",
          action: function() {
            return alert("Action 2");
          }
        }, {
          name: "Disabled action"
        }
      ]
    })), div({}, DemoDropDown({
      isActionMenu: false,
      onSelect: this.onNonActionMenuSelect,
      anchor: this.state.nonActionMenuSelection,
      items: ["Option 1", "Option 2"]
    })));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvZHJvcGRvd24tdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9kcm9wZG93bi12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQXlCLEtBQUssQ0FBQyxHQUEvQixFQUFDLGFBQUQsRUFBTSxTQUFOLEVBQVMsZUFBVCxFQUFlLFdBQWYsRUFBbUI7O0FBRW5CLFlBQUEsR0FBZSxLQUFLLENBQUMsYUFBTixDQUFvQixLQUFLLENBQUMsV0FBTixDQUVqQztFQUFBLFdBQUEsRUFBYSxjQUFiO0VBRUEsT0FBQSxFQUFTLFNBQUE7V0FDUCxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBYyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQXJCO0VBRE8sQ0FGVDtFQUtBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtJQUFBLFNBQUEsR0FBWSxXQUFBLEdBQVcsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLFlBQVAsSUFBd0IsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUEzQyxHQUF1RCxVQUF2RCxHQUF1RSxFQUF4RTtJQUN2QixJQUFBLEdBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBWixJQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDO1dBQ2pDLEVBQUEsQ0FBRztNQUFDLFNBQUEsRUFBVyxTQUFaO01BQXVCLE9BQUEsRUFBUyxJQUFDLENBQUEsT0FBakM7S0FBSCxFQUErQyxJQUEvQztFQUhLLENBTFI7Q0FGaUMsQ0FBcEI7O0FBWWYsTUFBTSxDQUFDLE9BQVAsR0FBaUIsUUFBQSxHQUFXLEtBQUssQ0FBQyxXQUFOLENBRTFCO0VBQUEsV0FBQSxFQUFhLFVBQWI7RUFFQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLFlBQUEsRUFBYyxJQUFkO01BQ0EsUUFBQSxFQUFVLFNBQUMsSUFBRDtlQUNSLEdBQUcsQ0FBQyxJQUFKLENBQVMsV0FBQSxHQUFZLElBQXJCO01BRFEsQ0FEVjs7RUFEZSxDQUZqQjtFQU9BLGVBQUEsRUFBaUIsU0FBQTtXQUNmO01BQUEsV0FBQSxFQUFhLEtBQWI7TUFDQSxPQUFBLEVBQVMsSUFEVDs7RUFEZSxDQVBqQjtFQVdBLElBQUEsRUFBTSxTQUFBO0FBQ0osUUFBQTtJQUFBLElBQUMsQ0FBQSxNQUFELENBQUE7SUFDQSxPQUFBLEdBQVUsVUFBQSxDQUFXLENBQUUsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQUcsS0FBQyxDQUFBLFFBQUQsQ0FBVTtVQUFDLFdBQUEsRUFBYSxLQUFkO1NBQVY7TUFBSDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBRixDQUFYLEVBQWtELEdBQWxEO1dBQ1YsSUFBQyxDQUFBLFFBQUQsQ0FBVTtNQUFDLE9BQUEsRUFBUyxPQUFWO0tBQVY7RUFISSxDQVhOO0VBZ0JBLE1BQUEsRUFBUSxTQUFBO0lBQ04sSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQVY7TUFDRSxZQUFBLENBQWEsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFwQixFQURGOztXQUVBLElBQUMsQ0FBQSxRQUFELENBQVU7TUFBQyxPQUFBLEVBQVMsSUFBVjtLQUFWO0VBSE0sQ0FoQlI7RUFxQkEsTUFBQSxFQUFRLFNBQUMsSUFBRDtBQUNOLFFBQUE7SUFBQSxTQUFBLEdBQWEsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQ3hCLElBQUMsQ0FBQSxRQUFELENBQVU7TUFBQyxXQUFBLEVBQWEsU0FBZDtLQUFWO0lBQ0EsSUFBQSxDQUFjLElBQWQ7QUFBQSxhQUFBOztJQUNBLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxZQUFQLElBQXdCLElBQUksQ0FBQyxNQUFoQzthQUNFLElBQUksQ0FBQyxNQUFMLENBQUEsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsQ0FBZ0IsSUFBaEIsRUFIRjs7RUFKTSxDQXJCUjtFQThCQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxTQUFBLEdBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFWLEdBQTJCLGNBQTNCLEdBQStDO0lBQzNELE1BQUEsR0FBUyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUNMLFNBQUE7aUJBQUcsS0FBQyxDQUFBLE1BQUQsQ0FBUSxJQUFSO1FBQUg7TUFESztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7V0FFUixHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsTUFBWjtLQUFKLEVBQ0UsSUFBQSxDQUFLO01BQUMsU0FBQSxFQUFXLGFBQVo7TUFBMkIsT0FBQSxFQUFTLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxLQUFDLENBQUEsTUFBRCxDQUFRLElBQVI7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEM7S0FBTCxFQUNDLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFEUixFQUVFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyx5QkFBWjtLQUFGLENBRkYsQ0FERixFQUtFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxTQUFaO01BQXVCLFlBQUEsRUFBYyxJQUFDLENBQUEsSUFBdEM7TUFBNEMsWUFBQSxFQUFjLElBQUMsQ0FBQSxNQUEzRDtLQUFKLEVBQ0UsRUFBQSxDQUFHLEVBQUg7O0FBQ0M7QUFBQTtXQUFBLHNDQUFBOztxQkFBQyxZQUFBLENBQWE7VUFBQyxHQUFBLEVBQUssSUFBSSxDQUFDLElBQUwsSUFBYSxJQUFuQjtVQUF5QixJQUFBLEVBQU0sSUFBL0I7VUFBcUMsTUFBQSxFQUFRLElBQUMsQ0FBQSxNQUE5QztVQUFzRCxZQUFBLEVBQWMsSUFBQyxDQUFBLEtBQUssQ0FBQyxZQUEzRTtTQUFiO0FBQUQ7O2lCQURELENBREYsQ0FMRjtFQUpLLENBOUJSO0NBRjBCOztBQWlENUIsWUFBQSxHQUFlLEtBQUssQ0FBQyxhQUFOLENBQW9CLFFBQXBCOztBQUNmLElBQUEsR0FBTyxLQUFLLENBQUMsV0FBTixDQUNMO0VBQUEsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxzQkFBQSxFQUF3QixnQkFBeEI7O0VBRGUsQ0FBakI7RUFFQSxxQkFBQSxFQUF1QixTQUFDLElBQUQ7V0FDckIsSUFBQyxDQUFBLFFBQUQsQ0FBVTtNQUFDLHNCQUFBLEVBQXdCLElBQXpCO0tBQVY7RUFEcUIsQ0FGdkI7RUFJQSxNQUFBLEVBQVEsU0FBQTtXQUNMLEdBQUEsQ0FBSSxFQUFKLEVBQ0UsR0FBQSxDQUFJLEVBQUosRUFDRSxZQUFBLENBQWE7TUFDWixNQUFBLEVBQVEsYUFESTtNQUVaLEtBQUEsRUFBTztRQUNMO1VBQUMsSUFBQSxFQUFNLFVBQVA7VUFBbUIsTUFBQSxFQUFRLFNBQUE7bUJBQUcsS0FBQSxDQUFNLFVBQU47VUFBSCxDQUEzQjtTQURLLEVBRUw7VUFBQyxJQUFBLEVBQU0sVUFBUDtVQUFtQixNQUFBLEVBQVEsU0FBQTttQkFBRyxLQUFBLENBQU0sVUFBTjtVQUFILENBQTNCO1NBRkssRUFHTDtVQUFDLElBQUEsRUFBTSxpQkFBUDtTQUhLO09BRks7S0FBYixDQURGLENBREYsRUFXRSxHQUFBLENBQUksRUFBSixFQUNFLFlBQUEsQ0FBYTtNQUNaLFlBQUEsRUFBYyxLQURGO01BRVosUUFBQSxFQUFVLElBQUMsQ0FBQSxxQkFGQztNQUdaLE1BQUEsRUFBUSxJQUFDLENBQUEsS0FBSyxDQUFDLHNCQUhIO01BSVosS0FBQSxFQUFPLENBQ0wsVUFESyxFQUVMLFVBRkssQ0FKSztLQUFiLENBREYsQ0FYRjtFQURLLENBSlI7Q0FESyJ9

},{}],698:[function(require,module,exports){
var div, dropImageHandler, p, ref, tr;

dropImageHandler = require('../utils/drop-image-handler');

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, p = ref.p;

module.exports = React.createClass({
  displayName: 'DropZone',
  getInitialState: function() {
    return {
      canDrop: false
    };
  },
  onDragOver: function(e) {
    if (!this.state.canDrop) {
      this.setState({
        canDrop: true
      });
    }
    return e.preventDefault();
  },
  onDragLeave: function(e) {
    this.setState({
      canDrop: false
    });
    return e.preventDefault();
  },
  onDrop: function(e) {
    this.setState({
      canDrop: false
    });
    e.preventDefault();
    return dropImageHandler(e, (function(_this) {
      return function(file) {
        return _this.props.dropped(file);
      };
    })(this));
  },
  render: function() {
    return div({
      className: "dropzone " + (this.state.canDrop ? 'can-drop' : ''),
      onDragOver: this.onDragOver,
      onDrop: this.onDrop,
      onDragLeave: this.onDragLeave
    }, p({
      className: 'header'
    }, this.props.header || (tr("~DROPZONE.DROP_IMAGES_HERE"))), p({}, tr("~DROPZONE.SQUARES_LOOK_BEST")));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvZHJvcHpvbmUtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9kcm9wem9uZS12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGdCQUFBLEdBQW1CLE9BQUEsQ0FBUSw2QkFBUjs7QUFFbkIsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFFTCxNQUFXLEtBQUssQ0FBQyxHQUFqQixFQUFDLGFBQUQsRUFBTTs7QUFFTixNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUNmO0VBQUEsV0FBQSxFQUFhLFVBQWI7RUFFQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLE9BQUEsRUFBUyxLQUFUOztFQURlLENBRmpCO0VBS0EsVUFBQSxFQUFZLFNBQUMsQ0FBRDtJQUNWLElBQUcsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQWQ7TUFDRSxJQUFDLENBQUEsUUFBRCxDQUFVO1FBQUEsT0FBQSxFQUFTLElBQVQ7T0FBVixFQURGOztXQUVBLENBQUMsQ0FBQyxjQUFGLENBQUE7RUFIVSxDQUxaO0VBVUEsV0FBQSxFQUFhLFNBQUMsQ0FBRDtJQUNYLElBQUMsQ0FBQSxRQUFELENBQVU7TUFBQSxPQUFBLEVBQVMsS0FBVDtLQUFWO1dBQ0EsQ0FBQyxDQUFDLGNBQUYsQ0FBQTtFQUZXLENBVmI7RUFjQSxNQUFBLEVBQVEsU0FBQyxDQUFEO0lBQ04sSUFBQyxDQUFBLFFBQUQsQ0FBVTtNQUFBLE9BQUEsRUFBUyxLQUFUO0tBQVY7SUFDQSxDQUFDLENBQUMsY0FBRixDQUFBO1dBR0EsZ0JBQUEsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFDbEIsS0FBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLENBQWUsSUFBZjtNQURrQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEI7RUFMTSxDQWRSO0VBc0JBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFdBQUEsR0FBVyxDQUFJLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBVixHQUF1QixVQUF2QixHQUF1QyxFQUF4QyxDQUF2QjtNQUFxRSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBQWxGO01BQThGLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFBdkc7TUFBK0csV0FBQSxFQUFhLElBQUMsQ0FBQSxXQUE3SDtLQUFKLEVBQ0UsQ0FBQSxDQUFFO01BQUMsU0FBQSxFQUFXLFFBQVo7S0FBRixFQUF5QixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsSUFBaUIsQ0FBQyxFQUFBLENBQUcsNEJBQUgsQ0FBRCxDQUExQyxDQURGLEVBRUUsQ0FBQSxDQUFFLEVBQUYsRUFBTyxFQUFBLENBQUcsNkJBQUgsQ0FBUCxDQUZGO0VBREssQ0F0QlI7Q0FEZSJ9

},{"../utils/drop-image-handler":674,"../utils/translate":689}],699:[function(require,module,exports){
var SimulationStore, div, i, input, ref, span, tr;

SimulationStore = require('../stores/simulation-store');

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, span = ref.span, i = ref.i, input = ref.input;

module.exports = React.createClass({
  displayName: 'ExperimentView',
  mixins: [SimulationStore.mixin],
  increment: function() {
    if (!this.props.disabled) {
      return SimulationStore.actions.createExperiment();
    }
  },
  renderLabel: function() {
    var experimentLabel;
    experimentLabel = "Experiment #";
    return span({
      className: "experiment-label"
    }, experimentLabel);
  },
  renderCounter: function() {
    var count;
    count = this.state.experimentNumber || 211;
    return div({
      className: "experiment-counter",
      onClick: this.increment
    }, div({
      className: "count"
    }, count), div({
      className: "increment"
    }, "+"));
  },
  render: function() {
    var classes;
    classes = ["experiment-panel"];
    if (this.props.disabled) {
      classes.push('disabled');
    }
    return div({
      className: classes.join(" ")
    }, this.renderLabel(), this.renderCounter());
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvZXhwZXJpbWVudC1wYW5lbC12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL2V4cGVyaW1lbnQtcGFuZWwtdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxlQUFBLEdBQWtCLE9BQUEsQ0FBUSw0QkFBUjs7QUFDbEIsRUFBQSxHQUFrQixPQUFBLENBQVEsb0JBQVI7O0FBRWxCLE1BQXlCLEtBQUssQ0FBQyxHQUEvQixFQUFDLGFBQUQsRUFBTSxlQUFOLEVBQVksU0FBWixFQUFlOztBQUVmLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsZ0JBQWI7RUFFQSxNQUFBLEVBQVEsQ0FBRSxlQUFlLENBQUMsS0FBbEIsQ0FGUjtFQUtBLFNBQUEsRUFBVyxTQUFBO0lBQ1QsSUFBQSxDQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBZDthQUNFLGVBQWUsQ0FBQyxPQUFPLENBQUMsZ0JBQXhCLENBQUEsRUFERjs7RUFEUyxDQUxYO0VBU0EsV0FBQSxFQUFhLFNBQUE7QUFDWCxRQUFBO0lBQUEsZUFBQSxHQUFrQjtXQUNqQixJQUFBLENBQUs7TUFBQyxTQUFBLEVBQVcsa0JBQVo7S0FBTCxFQUFzQyxlQUF0QztFQUZVLENBVGI7RUFhQSxhQUFBLEVBQWUsU0FBQTtBQUNiLFFBQUE7SUFBQSxLQUFBLEdBQVEsSUFBQyxDQUFBLEtBQUssQ0FBQyxnQkFBUCxJQUEyQjtXQUNsQyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsb0JBQVo7TUFBa0MsT0FBQSxFQUFTLElBQUMsQ0FBQSxTQUE1QztLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLE9BQVo7S0FBSixFQUEwQixLQUExQixDQURGLEVBRUUsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFdBQVo7S0FBSixFQUE4QixHQUE5QixDQUZGO0VBRlksQ0FiZjtFQW9CQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxPQUFBLEdBQVUsQ0FBQyxrQkFBRDtJQUNWLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFWO01BQ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxVQUFiLEVBREY7O1dBRUMsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLE9BQU8sQ0FBQyxJQUFSLENBQWEsR0FBYixDQUFaO0tBQUosRUFDQyxJQUFDLENBQUEsV0FBRCxDQUFBLENBREQsRUFFQyxJQUFDLENBQUEsYUFBRCxDQUFBLENBRkQ7RUFKSyxDQXBCUjtDQUZlIn0=

},{"../stores/simulation-store":671,"../utils/translate":689}],700:[function(require,module,exports){
var AppSettingsActions, BuildInfoView, Dropdown, GoogleFileStore, ModalGoogleSave, OpenInCodap, UndoRedoUIStore, div, i, ref, span, tr;

ref = React.DOM, div = ref.div, i = ref.i, span = ref.span;

tr = require('../utils/translate');

Dropdown = React.createFactory(require('./dropdown-view'));

OpenInCodap = React.createFactory(require('./open-in-codap-view'));

ModalGoogleSave = React.createFactory(require('./modal-google-save-view'));

BuildInfoView = React.createFactory(require('./build-info-view'));

GoogleFileStore = require('../stores/google-file-store');

UndoRedoUIStore = require('../stores/undo-redo-ui-store');

AppSettingsActions = require('../stores/app-settings-store').actions;

module.exports = React.createClass({
  displayName: 'GlobalNav',
  mixins: [GoogleFileStore.mixin, UndoRedoUIStore.mixin],
  getInitialState: function() {
    return {
      dirty: false,
      saved: false
    };
  },
  componentDidMount: function() {
    return this.props.graphStore.addChangeListener(this.modelChanged);
  },
  modelChanged: function(status) {
    return this.setState({
      dirty: status.dirty,
      canUndo: status.canUndo,
      saved: status.saved
    });
  },
  render: function() {
    var options;
    options = [
      {
        name: tr("~MENU.NEW"),
        action: GoogleFileStore.actions.newFile
      }, {
        name: tr("~MENU.OPEN"),
        action: GoogleFileStore.actions.openFile
      }, {
        name: tr("~MENU.SAVE"),
        action: GoogleFileStore.actions.showSaveDialog
      }, {
        name: tr("~MENU.SAVE_AS"),
        action: false
      }, {
        name: tr("~MENU.REVERT_TO_ORIGINAL"),
        action: this.state.canUndo ? GoogleFileStore.actions.revertToOriginal : false
      }, {
        name: tr("~MENU.REVERT_TO_LAST_SAVE"),
        action: this.state.saved && this.state.dirty ? GoogleFileStore.actions.revertToLastSave : false
      }
    ];
    return div({
      className: 'global-nav'
    }, div({}, Dropdown({
      anchor: this.props.filename,
      items: options,
      className: 'global-nav-content-filename'
    }), this.state.dirty ? span({
      className: 'global-nav-file-status'
    }, 'Unsaved') : void 0), this.state.action ? div({}, i({
      className: "icon-codap-options spin"
    }), this.state.action) : void 0, ModalGoogleSave({
      showing: this.state.showingSaveDialog,
      onSave: GoogleFileStore.actions.saveFile,
      filename: this.props.filename,
      isPublic: this.state.isPublic,
      onRename: function(newName) {
        return GoogleFileStore.actions.rename(newName);
      },
      onClose: function() {
        return GoogleFileStore.actions.close();
      },
      setIsPublic: GoogleFileStore.actions.setIsPublic
    }), BuildInfoView({}), div({
      className: 'global-nav-name-and-help'
    }, OpenInCodap({
      disabled: this.state.dirty
    })));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvZ2xvYmFsLW5hdi12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL2dsb2JhbC1uYXYtdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxNQUFpQixLQUFLLENBQUMsR0FBdkIsRUFBQyxhQUFELEVBQU0sU0FBTixFQUFTOztBQUNULEVBQUEsR0FBSyxPQUFBLENBQVEsb0JBQVI7O0FBRUwsUUFBQSxHQUFxQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsaUJBQVIsQ0FBcEI7O0FBQ3JCLFdBQUEsR0FBcUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHNCQUFSLENBQXBCOztBQUNyQixlQUFBLEdBQXFCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSwwQkFBUixDQUFwQjs7QUFDckIsYUFBQSxHQUFxQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsbUJBQVIsQ0FBcEI7O0FBQ3JCLGVBQUEsR0FBcUIsT0FBQSxDQUFRLDZCQUFSOztBQUNyQixlQUFBLEdBQXFCLE9BQUEsQ0FBUSw4QkFBUjs7QUFDckIsa0JBQUEsR0FBcUIsT0FBQSxDQUFRLDhCQUFSLENBQXVDLENBQUM7O0FBRTdELE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsV0FBYjtFQUVBLE1BQUEsRUFBUSxDQUFFLGVBQWUsQ0FBQyxLQUFsQixFQUF5QixlQUFlLENBQUMsS0FBekMsQ0FGUjtFQUlBLGVBQUEsRUFBaUIsU0FBQTtXQUNmO01BQUEsS0FBQSxFQUFPLEtBQVA7TUFDQSxLQUFBLEVBQU8sS0FEUDs7RUFEZSxDQUpqQjtFQVFBLGlCQUFBLEVBQW1CLFNBQUE7V0FDakIsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFVLENBQUMsaUJBQWxCLENBQW9DLElBQUMsQ0FBQSxZQUFyQztFQURpQixDQVJuQjtFQVdBLFlBQUEsRUFBYyxTQUFDLE1BQUQ7V0FDWixJQUFDLENBQUEsUUFBRCxDQUNFO01BQUEsS0FBQSxFQUFPLE1BQU0sQ0FBQyxLQUFkO01BQ0EsT0FBQSxFQUFTLE1BQU0sQ0FBQyxPQURoQjtNQUVBLEtBQUEsRUFBTyxNQUFNLENBQUMsS0FGZDtLQURGO0VBRFksQ0FYZDtFQWlCQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxPQUFBLEdBQVU7TUFDUjtRQUFBLElBQUEsRUFBTSxFQUFBLENBQUcsV0FBSCxDQUFOO1FBQ0EsTUFBQSxFQUFRLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FEaEM7T0FEUSxFQUlSO1FBQUEsSUFBQSxFQUFNLEVBQUEsQ0FBRyxZQUFILENBQU47UUFDQSxNQUFBLEVBQVEsZUFBZSxDQUFDLE9BQU8sQ0FBQyxRQURoQztPQUpRLEVBT1I7UUFBQSxJQUFBLEVBQU0sRUFBQSxDQUFHLFlBQUgsQ0FBTjtRQUNBLE1BQUEsRUFBUSxlQUFlLENBQUMsT0FBTyxDQUFDLGNBRGhDO09BUFEsRUFVUjtRQUFBLElBQUEsRUFBTSxFQUFBLENBQUcsZUFBSCxDQUFOO1FBQ0EsTUFBQSxFQUFRLEtBRFI7T0FWUSxFQWFSO1FBQUEsSUFBQSxFQUFNLEVBQUEsQ0FBRywwQkFBSCxDQUFOO1FBQ0EsTUFBQSxFQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBVixHQUF1QixlQUFlLENBQUMsT0FBTyxDQUFDLGdCQUEvQyxHQUFxRSxLQUQ3RTtPQWJRLEVBZ0JSO1FBQUEsSUFBQSxFQUFNLEVBQUEsQ0FBRywyQkFBSCxDQUFOO1FBQ0EsTUFBQSxFQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxJQUFpQixJQUFDLENBQUEsS0FBSyxDQUFDLEtBQTNCLEdBQXNDLGVBQWUsQ0FBQyxPQUFPLENBQUMsZ0JBQTlELEdBQW9GLEtBRDVGO09BaEJROztXQW9CVCxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsWUFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJLEVBQUosRUFDRSxRQUFBLENBQVM7TUFBQyxNQUFBLEVBQVEsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFoQjtNQUEwQixLQUFBLEVBQU8sT0FBakM7TUFBMEMsU0FBQSxFQUFVLDZCQUFwRDtLQUFULENBREYsRUFFSSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVYsR0FDRyxJQUFBLENBQUs7TUFBQyxTQUFBLEVBQVcsd0JBQVo7S0FBTCxFQUE0QyxTQUE1QyxDQURILEdBQUEsTUFGRCxDQURGLEVBTUksSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFWLEdBQ0csR0FBQSxDQUFJLEVBQUosRUFDRSxDQUFBLENBQUU7TUFBQyxTQUFBLEVBQVcseUJBQVo7S0FBRixDQURGLEVBRUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUZSLENBREgsR0FBQSxNQU5ELEVBV0UsZUFBQSxDQUFnQjtNQUNmLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBSyxDQUFDLGlCQUREO01BRWYsTUFBQSxFQUFRLGVBQWUsQ0FBQyxPQUFPLENBQUMsUUFGakI7TUFHZixRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUhGO01BSWYsUUFBQSxFQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFKRjtNQUtmLFFBQUEsRUFBVSxTQUFDLE9BQUQ7ZUFDUixlQUFlLENBQUMsT0FBTyxDQUFDLE1BQXhCLENBQStCLE9BQS9CO01BRFEsQ0FMSztNQU9mLE9BQUEsRUFBUyxTQUFBO2VBQ1AsZUFBZSxDQUFDLE9BQU8sQ0FBQyxLQUF4QixDQUFBO01BRE8sQ0FQTTtNQVNmLFdBQUEsRUFBYSxlQUFlLENBQUMsT0FBTyxDQUFDLFdBVHRCO0tBQWhCLENBWEYsRUFzQkUsYUFBQSxDQUFjLEVBQWQsQ0F0QkYsRUF1QkUsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLDBCQUFaO0tBQUosRUFDRSxXQUFBLENBQVk7TUFBRSxRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFuQjtLQUFaLENBREYsQ0F2QkY7RUFyQkssQ0FqQlI7Q0FGZSJ9

},{"../stores/app-settings-store":662,"../stores/google-file-store":664,"../stores/undo-redo-ui-store":672,"../utils/translate":689,"./build-info-view":694,"./dropdown-view":697,"./modal-google-save-view":713,"./open-in-codap-view":722}],701:[function(require,module,exports){
var AppSettingsStore, CodapStore, Color, DiagramToolkit, GraphStore, ImageDialogStore, Importer, LinkColors, Node, NodeModel, NodeView, PaletteStore, RelationFactory, SimulationStore, div, dropImageHandler, tr,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

NodeView = require('./node-view');

Node = React.createFactory(NodeView);

NodeModel = require('../models/node');

Importer = require('../utils/importer');

Color = require('../utils/colors');

DiagramToolkit = require('../utils/js-plumb-diagram-toolkit');

dropImageHandler = require('../utils/drop-image-handler');

tr = require('../utils/translate');

PaletteStore = require('../stores/palette-store');

GraphStore = require('../stores/graph-store');

ImageDialogStore = require('../stores/image-dialog-store');

RelationFactory = require("../models/relation-factory");

SimulationStore = require("../stores/simulation-store");

AppSettingsStore = require("../stores/app-settings-store");

CodapStore = require("../stores/codap-store");

LinkColors = require("../utils/link-colors");

div = React.DOM.div;

module.exports = React.createClass({
  displayName: 'LinkView',
  mixins: [GraphStore.mixin, SimulationStore.mixin, AppSettingsStore.mixin, CodapStore.mixin],
  getDefaultProps: function() {
    return {
      linkTarget: '.link-top',
      connectionTarget: '.link-target',
      transferTarget: '.link-target'
    };
  },
  componentDidMount: function() {
    var $container;
    $container = $(this.refs.container);
    this.diagramToolkit = new DiagramToolkit($container, {
      Container: $container[0],
      handleConnect: this.handleConnect,
      handleClick: this.handleLinkClick,
      handleLabelEdit: this.handleLabelEdit
    });
    this._updateToolkit();
    this.props.selectionManager.addSelectionListener((function(_this) {
      return function(manager) {
        var editingLink, editingNode, lastLinkSelection, ref, selectedLink, selectedNodes;
        ref = _this.state.selectedLink, lastLinkSelection = ref[ref.length - 1];
        selectedNodes = manager.getNodeInspection() || [];
        editingNode = manager.getNodeTitleEditing()[0] || null;
        selectedLink = manager.getLinkInspection() || [];
        editingLink = manager.getLinkTitleEditing()[0] || null;
        _this.setState({
          selectedNodes: selectedNodes,
          editingNode: editingNode,
          selectedLink: selectedLink,
          editingLink: editingLink
        });
        if (lastLinkSelection === !_this.state.selectedLink) {
          return _this._updateToolkit();
        }
      };
    })(this));
    return $container.droppable({
      accept: '.palette-image',
      hoverClass: "ui-state-highlight",
      drop: (function(_this) {
        return function(e, ui) {
          var $panel, inPanel, panel;
          $panel = $('.inspector-panel-content');
          panel = {
            width: $panel.width(),
            height: $panel.height(),
            offset: $panel.offset()
          };
          inPanel = ui.offset.left >= panel.offset.left && ui.offset.top >= panel.offset.top && ui.offset.left <= panel.offset.left + panel.width && ui.offset.top <= panel.offset.top + panel.height;
          if (!inPanel) {
            return _this.addNode(e, ui);
          }
        };
      })(this)
    });
  },
  addNode: function(e, ui) {
    var data, paletteItem;
    data = ui.draggable.data();
    if (data.droptype === 'new') {
      return paletteItem = this.addNewPaletteNode(e, ui);
    } else if (data.droptype === 'paletteItem') {
      paletteItem = PaletteStore.store.palette[data.index];
      PaletteStore.actions.selectPaletteIndex(data.index);
      return this.addPaletteNode(ui, paletteItem);
    }
  },
  addNewPaletteNode: function(e, ui) {
    return ImageDialogStore.actions.open((function(_this) {
      return function(savedPaletteItem) {
        if (savedPaletteItem) {
          return _this.addPaletteNode(ui, savedPaletteItem);
        }
      };
    })(this));
  },
  addPaletteNode: function(ui, paletteItem) {
    var imageOffset, linkOffset, newNode, title;
    title = tr("~NODE.UNTITLED");
    linkOffset = $(this.refs.linkView).offset();
    imageOffset = NodeView.nodeImageOffset();
    newNode = new NodeModel({
      x: ui.offset.left - linkOffset.left - imageOffset.left,
      y: ui.offset.top - linkOffset.top - imageOffset.top,
      title: title,
      paletteItem: paletteItem.uuid,
      image: paletteItem.image,
      addedThisSession: true
    });
    this.props.graphStore.addNode(newNode);
    return this.props.graphStore.editNode(newNode.key);
  },
  getInitialState: function() {
    return {
      selectedNodes: [],
      editingNode: null,
      selectedLink: [],
      editingLink: null,
      canDrop: false,
      drawingMarquee: false,
      selectBox: {
        startX: 0,
        startY: 0,
        x: 0,
        y: 0
      }
    };
  },
  componentDidUpdate: function(prevProps, prevState) {
    var ref;
    if ((prevState.description.links !== this.state.description.links) || (prevState.simulationPanelExpanded !== this.state.simulationPanelExpanded) || (prevState.selectedLink !== this.state.selectedLink) || (prevState.relationshipSymbols !== this.state.relationshipSymbols) || this.forceRedrawLinks) {
      if ((ref = this.diagramToolkit) != null) {
        if (typeof ref.clear === "function") {
          ref.clear();
        }
      }
      this._updateToolkit();
      return this.forceRedrawLinks = false;
    }
  },
  handleEvent: function(handler) {
    if (this.ignoringEvents) {
      return false;
    } else {
      handler();
      return true;
    }
  },
  onNodeMoved: function(node_event) {
    var left, leftDiff, ref, selectedNodes, theNode, top, topDiff;
    ref = node_event.extra.position, left = ref.left, top = ref.top;
    theNode = GraphStore.store.nodeKeys[node_event.nodeKey];
    leftDiff = left - theNode.x;
    topDiff = top - theNode.y;
    selectedNodes = this.state.selectedNodes;
    if (selectedNodes.length > 0) {
      return this.handleEvent(function() {
        var j, len, node, results;
        if (indexOf.call(selectedNodes, theNode) >= 0) {
          results = [];
          for (j = 0, len = selectedNodes.length; j < len; j++) {
            node = selectedNodes[j];
            results.push(GraphStore.store.moveNode(node.key, leftDiff, topDiff));
          }
          return results;
        } else {
          return GraphStore.store.moveNode(theNode.key, leftDiff, topDiff);
        }
      });
    } else {
      return this.handleEvent(function() {
        return GraphStore.store.moveNode(node_event.nodeKey, leftDiff, topDiff);
      });
    }
  },
  onNodeMoveComplete: function(node_event) {
    var left, leftDiff, ref, selectedNodes, top, topDiff;
    ref = node_event.extra.position, left = ref.left, top = ref.top;
    leftDiff = left - node_event.extra.originalPosition.left;
    topDiff = top - node_event.extra.originalPosition.top;
    selectedNodes = this.state.selectedNodes;
    if (selectedNodes.length > 0) {
      return this.handleEvent(function() {
        var j, len, node, results;
        results = [];
        for (j = 0, len = selectedNodes.length; j < len; j++) {
          node = selectedNodes[j];
          results.push(GraphStore.store.moveNodeCompleted(node.key, leftDiff, topDiff));
        }
        return results;
      });
    } else {
      return this.handleEvent(function() {
        return GraphStore.store.moveNodeCompleted(node_event.nodeKey, leftDiff, topDiff);
      });
    }
  },
  onNodeDeleted: function(node_event) {
    return this.handleEvent(function() {
      return GraphStore.store.removeNode(node_event.nodeKey);
    });
  },
  handleConnect: function(info, evnt) {
    return this.handleEvent((function(_this) {
      return function() {
        _this.forceRedrawLinks = true;
        return GraphStore.store.newLinkFromEvent(info, evnt);
      };
    })(this));
  },
  handleLinkClick: function(connection, evt) {
    return this.handleEvent((function(_this) {
      return function() {
        var multipleSelections;
        multipleSelections = evt.ctrlKey || evt.metaKey || evt.shiftKey;
        _this.forceRedrawLinks = true;
        return GraphStore.store.clickLink(connection.linkModel, multipleSelections);
      };
    })(this));
  },
  _updateNodeValue: function(name, key, value) {
    var changed, j, len, node, ref;
    changed = 0;
    ref = this.state.nodes;
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      if (node.key === name) {
        node[key] = value;
        changed++;
      }
    }
    if (changed > 0) {
      return this.setState({
        nodes: this.state.nodes
      });
    }
  },
  _updateToolkit: function() {
    if (this.diagramToolkit) {
      this.ignoringEvents = true;
      this.diagramToolkit.suspendDrawing();
      this._redrawLinks();
      this._redrawTargets();
      this.diagramToolkit.resumeDrawing();
      this.ignoringEvents = false;
      return this._checkForLinkButtonClientClass();
    }
  },
  _checkForLinkButtonClientClass: function() {
    var connectionSrcElt, connectionSrcTop, nodeLinkButtonElt, nodeLinkButtonElts, nodeLinkButtonTop, topOffset;
    if (this.linkButtonClientClass != null) {
      return;
    }
    nodeLinkButtonElts = $('.graph-view').find('.node-link-button');
    nodeLinkButtonElt = nodeLinkButtonElts && nodeLinkButtonElts[0];
    connectionSrcElt = nodeLinkButtonElt && nodeLinkButtonElt._jsPlumbRelatedElement;
    if (connectionSrcElt && nodeLinkButtonElt) {
      connectionSrcTop = connectionSrcElt.getBoundingClientRect().top;
      nodeLinkButtonTop = nodeLinkButtonElt.getBoundingClientRect().top;
      topOffset = nodeLinkButtonTop - connectionSrcTop;
      return this.linkButtonClientClass = topOffset > 6 ? 'correct-drag-top' : '';
    }
  },
  _redrawTargets: function() {
    var target, targetStyle;
    this.diagramToolkit.makeSource($(this.refs.linkView).find('.connection-source'), this.linkButtonClientClass);
    target = $(this.refs.linkView).find(this.props.linkTarget);
    targetStyle = 'node-link-target';
    return this.diagramToolkit.makeTarget(target, targetStyle);
  },
  _redrawLinks: function() {
    var j, len, link, ref, ref1, results;
    ref = this.state.links;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      link = ref[j];
      if ((ref1 = link.relation) != null ? ref1.isTransfer : void 0) {
        results.push(this._redrawTransferLinks(link));
      } else {
        results.push(this._redrawLink(link));
      }
    }
    return results;
  },
  _redrawLink: function(link) {
    var gradual, isDashed, isEditing, isSelected, magnitude, opts, ref, ref1, relationDetails, source, target, useGradient, useVariableThickness;
    source = $(ReactDOM.findDOMNode(this.refs[link.sourceNode.key])).find(this.props.connectionTarget);
    target = $(ReactDOM.findDOMNode(this.refs[link.targetNode.key])).find(this.props.connectionTarget);
    isSelected = this.props.selectionManager.isSelected(link);
    isEditing = link === this.state.editingLink;
    isDashed = !link.relation.isDefined && this.state.simulationPanelExpanded;
    relationDetails = RelationFactory.selectionsFromRelation(link.relation);
    if (((ref = relationDetails.vector) != null ? ref.isCustomRelationship : void 0) && (link.relation.customData != null)) {
      link.color = LinkColors.customRelationship;
    } else if (((ref1 = relationDetails.accumulator) != null ? ref1.id : void 0) === "setInitialValue") {
      link.color = LinkColors.customRelationship;
    } else if (link.relation.isTransferModifier) {
      link.color = LinkColors.transferModifier;
    } else {
      link.color = LinkColors.fromLink(link);
    }
    magnitude = relationDetails.magnitude;
    gradual = relationDetails.gradual;
    useGradient = false;
    useVariableThickness = true;
    if (source && target) {
      opts = {
        source: source,
        target: target,
        label: link.title,
        color: link.color,
        magnitude: magnitude,
        isDashed: isDashed,
        isSelected: isSelected,
        isEditing: isEditing,
        gradual: gradual,
        useGradient: useGradient,
        useVariableThickness: useVariableThickness,
        linkModel: link,
        showIndicators: this.state.relationshipSymbols
      };
      if (relationDetails.transferModifier != null) {
        opts.thickness = RelationFactory.thicknessFromRelation(link.relation);
      }
      return this.diagramToolkit.addLink(opts);
    }
  },
  _redrawTransferLinks: function(link) {
    if (!link.transferNode) {
      return;
    }
    this._redrawTransferLink(link, link.sourceNode, link.transferNode);
    return this._redrawTransferLink(link, link.transferNode, link.targetNode);
  },
  _redrawTransferLink: function(link, sourceNode, targetNode) {
    var fromSource, opts, source, sourceConnectionClass, target, targetConnectionClass;
    fromSource = sourceNode === link.sourceNode;
    sourceConnectionClass = fromSource ? this.props.connectionTarget : this.props.transferTarget;
    targetConnectionClass = !fromSource ? this.props.connectionTarget : this.props.transferTarget;
    source = $(ReactDOM.findDOMNode(this.refs[sourceNode.key])).find(sourceConnectionClass);
    target = $(ReactDOM.findDOMNode(this.refs[targetNode.key])).find(targetConnectionClass);
    if (source && target) {
      opts = {
        fromSource: fromSource,
        source: source,
        target: target,
        label: "",
        color: LinkColors.transferPipe,
        thickness: 10,
        showIndicators: false,
        isEditing: false,
        linkModel: link,
        isTransfer: true,
        hideArrow: fromSource
      };
      return this.diagramToolkit.addLink(opts);
    }
  },
  onDragOver: function(e) {
    if (!this.state.canDrop) {
      this.setState({
        canDrop: true
      });
    }
    return e.preventDefault();
  },
  onDragLeave: function(e) {
    this.setState({
      canDrop: false
    });
    return e.preventDefault();
  },
  onDrop: function(e) {
    var dropPos, ex, offset;
    this.setState({
      canDrop: false
    });
    e.preventDefault();
    try {
      offset = $(this.refs.linkView).offset();
      dropPos = {
        x: e.clientX - offset.left,
        y: e.clientY - offset.top
      };
      return dropImageHandler(e, (function(_this) {
        return function(file) {
          var node;
          node = _this.props.graphStore.importNode({
            data: {
              x: dropPos.x,
              y: dropPos.y,
              title: tr("~NODE.UNTITLED"),
              image: file.image
            }
          });
          return _this.props.graphStore.editNode(node.key);
        };
      })(this));
    } catch (error) {
      ex = error;
      return console.log("Invalid drag/drop operation", ex);
    }
  },
  onMouseDown: function(e) {
    var offset, selectBox;
    if (e.target === this.refs.container) {
      this.forceRedrawLinks = true;
      this.props.selectionManager.clearSelection();
      selectBox = $.extend({}, this.state.selectBox);
      offset = $(this.refs.linkView).offset();
      selectBox.startX = e.pageX - offset.left;
      selectBox.startY = e.pageY - offset.top;
      selectBox.x = selectBox.startX;
      selectBox.y = selectBox.startY;
      return this.setState({
        drawingMarquee: true,
        selectBox: selectBox
      });
    }
  },
  onMouseUp: function(e) {
    if (e.target === this.refs.container) {
      this.props.selectionManager.clearSelection();
      if (this.state.drawingMarquee) {
        this.checkSelectBoxCollisions();
        this.setState({
          drawingMarquee: false
        });
      }
    }
    if (this.state.drawingMarquee) {
      this.checkSelectBoxCollisions();
      this.checkSelectBoxLinkCollisions();
      return this.setState({
        drawingMarquee: false
      });
    }
  },
  onMouseMove: function(e) {
    var offset, selectBox;
    if (this.state.drawingMarquee) {
      offset = $(this.refs.linkView).offset();
      selectBox = $.extend({}, this.state.selectBox);
      selectBox.x = e.pageX - offset.left;
      selectBox.y = e.pageY - offset.top;
      return this.setState({
        selectBox: selectBox
      });
    }
  },
  checkSelectBoxLinkCollisions: function() {
    var j, len, link, ref, ref1, results;
    ref = this.state.links;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      link = ref[j];
      if (!((ref1 = link.relation) != null ? ref1.isTransfer : void 0) && this.checkBoxLinkCollision(link)) {
        results.push(this.props.selectionManager.selectLinkForInspection(link, true));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  checkSelectBoxCollisions: function() {
    var j, len, node, ref, results;
    ref = this.state.nodes;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      if (this.checkSelectBoxCollision(node)) {
        results.push(this.props.selectionManager.selectNodeForInspection(node, true));
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  checkBoxLinkCollision: function(link) {
    var connection, destination, i, j, origin, p, q, sX, sY, selectBox, t, u1, u2, x, x0, x1, y, y0, y1;
    selectBox = this.state.selectBox;
    connection = link.jsPlumbConnection;
    sX = Math.min(selectBox.startX, selectBox.x);
    sY = Math.min(selectBox.startY, selectBox.y);
    x = Math.max(selectBox.startX, selectBox.x);
    y = Math.max(selectBox.startY, selectBox.y);
    origin = connection.endpoints[0].endpoint;
    destination = connection.endpoints[1].endpoint;
    x0 = origin.x;
    y0 = origin.y;
    x1 = destination.x;
    y1 = destination.y;
    p = [x0 - x1, x1 - x0, y0 - y1, y1 - y0];
    q = [x0 - sX, x - x0, y0 - sY, y - y0];
    u1 = Number.MIN_VALUE;
    u2 = Number.MAX_VALUE;
    for (i = j = 0; j <= 3; i = ++j) {
      if ((p[i] === 0) && (q[i] < 0)) {
        return false;
      } else {
        t = q[i] / p[i];
        if (p[i] < 0 && u1 < t) {
          u1 = t;
        } else if (p[i] > 0 && u2 > t) {
          u2 = t;
        }
      }
    }
    if (u1 > u2 || u1 > 1 || u1 < 0) {
      return false;
    }
    return true;
  },
  checkSelectBoxCollision: function(node) {
    var a, b, c, d, nodeHeight, nodeWidth, result, sX, sY, selectBox, x, y;
    nodeWidth = 45;
    nodeHeight = 45;
    selectBox = this.state.selectBox;
    sX = Math.min(selectBox.startX, selectBox.x);
    sY = Math.min(selectBox.startY, selectBox.y);
    x = Math.max(selectBox.startX, selectBox.x);
    y = Math.max(selectBox.startY, selectBox.y);
    a = node.x < x;
    b = node.x + nodeWidth > sX;
    c = node.y < y;
    d = nodeHeight + node.y > sY;
    result = a && b && c && d;
    return result;
  },
  handleLabelEdit: function(link, title) {
    this.props.graphStore.changeLink(link, {
      title: title
    });
    return this.props.selectionManager.clearSelection();
  },
  render: function() {
    var dataColor, diagramOnly, left, node, top;
    dataColor = Color.colors.mediumGray.value;
    if (this.state.isRecording) {
      dataColor = Color.colors.data.value;
    }
    diagramOnly = this.state.complexity === AppSettingsStore.store.Complexity.diagramOnly;
    return div({
      className: "graph-view " + (this.state.canDrop ? 'can-drop' : ''),
      ref: 'linkView',
      onDragOver: this.onDragOver,
      onDrop: this.onDrop,
      onDragLeave: this.onDragLeave
    }, div({
      className: 'container',
      ref: 'container',
      onMouseDown: this.onMouseDown,
      onMouseUp: this.onMouseUp,
      onMouseMove: this.onMouseMove
    }, this.state.drawingMarquee ? (left = Math.min(this.state.selectBox.startX, this.state.selectBox.x), top = Math.min(this.state.selectBox.startY, this.state.selectBox.y), div({
      className: 'selectionBox',
      ref: 'selectionBox',
      style: {
        width: Math.abs(this.state.selectBox.x - this.state.selectBox.startX),
        height: Math.abs(this.state.selectBox.y - this.state.selectBox.startY),
        left: left,
        top: top,
        border: '1px dotted #CCC',
        position: 'absolute',
        backgroundColor: '#FFFFFF'
      }
    })) : void 0, (function() {
      var j, len, ref, results;
      ref = this.state.nodes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        results.push(Node({
          key: node.key,
          data: node,
          dataColor: dataColor,
          selected: indexOf.call(this.state.selectedNodes, node) >= 0,
          simulating: this.state.simulationPanelExpanded,
          running: this.state.modelIsRunning,
          editTitle: this.state.editingNode === node,
          nodeKey: node.key,
          ref: node.key,
          onMove: this.onNodeMoved,
          onMoveComplete: this.onNodeMoveComplete,
          onDelete: this.onNodeDeleted,
          graphStore: this.props.graphStore,
          selectionManager: this.props.selectionManager,
          showMinigraph: this.state.showingMinigraphs,
          showGraphButton: this.state.codapHasLoaded && !diagramOnly
        }));
      }
      return results;
    }).call(this)));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../models/node":656,"../models/relation-factory":657,"../stores/app-settings-store":662,"../stores/codap-store":663,"../stores/graph-store":665,"../stores/image-dialog-store":666,"../stores/palette-store":670,"../stores/simulation-store":671,"../utils/colors":673,"../utils/drop-image-handler":674,"../utils/importer":679,"../utils/js-plumb-diagram-toolkit":680,"../utils/link-colors":685,"../utils/translate":689,"./node-view":720}],702:[function(require,module,exports){
var ImageDialogStore, ImageMetadata, ImageSearchDialog, LinkDialog, ModalTabbedDialog, ModalTabbedDialogFactory, MyComputerDialog, PaletteStore, TabbedPanel, div, i, img, ref, span, tr;

ModalTabbedDialog = require('./modal-tabbed-dialog-view');

TabbedPanel = require('./tabbed-panel-view');

ModalTabbedDialogFactory = React.createFactory(ModalTabbedDialog);

ImageMetadata = React.createFactory(require('./image-metadata-view'));

ImageSearchDialog = React.createFactory(require('./image-search-dialog-view'));

MyComputerDialog = React.createFactory(require('./image-my-computer-dialog-view'));

LinkDialog = React.createFactory(require('./image-link-dialog-view'));

PaletteStore = require("../stores/palette-store");

ImageDialogStore = require("../stores/image-dialog-store");

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, img = ref.img, i = ref.i, span = ref.span;

module.exports = React.createClass({
  displayName: 'ImageBrowser',
  mixins: [ImageDialogStore.mixin, PaletteStore.mixin],
  render: function() {
    var props, store;
    store = PaletteStore.store;
    props = {
      palette: this.state.palette,
      internalLibrary: this.state.library,
      inPalette: store.inPalette,
      inLibrary: store.inLibrary,
      selectedImage: this.state.paletteItem
    };
    return ModalTabbedDialogFactory({
      title: tr("~ADD-NEW-IMAGE.TITLE"),
      clientClass: 'image-browser',
      close: this.actions.close,
      tabs: [
        TabbedPanel.Tab({
          label: tr("~ADD-NEW-IMAGE.IMAGE-SEARCH-TAB"),
          component: ImageSearchDialog(props)
        }), TabbedPanel.Tab({
          label: tr("~ADD-NEW-IMAGE.MY-COMPUTER-TAB"),
          component: MyComputerDialog(props)
        }), TabbedPanel.Tab({
          label: tr("~ADD-NEW-IMAGE.LINK-TAB"),
          component: LinkDialog(props)
        })
      ]
    });
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW1hZ2UtYnJvd3Nlci12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL2ltYWdlLWJyb3dzZXItdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxpQkFBQSxHQUFvQixPQUFBLENBQVEsNEJBQVI7O0FBQ3BCLFdBQUEsR0FBYyxPQUFBLENBQVEscUJBQVI7O0FBQ2Qsd0JBQUEsR0FBMkIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsaUJBQXBCOztBQUMzQixhQUFBLEdBQWdCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSx1QkFBUixDQUFwQjs7QUFDaEIsaUJBQUEsR0FBb0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLDRCQUFSLENBQXBCOztBQUNwQixnQkFBQSxHQUFtQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsaUNBQVIsQ0FBcEI7O0FBQ25CLFVBQUEsR0FBYSxLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsMEJBQVIsQ0FBcEI7O0FBQ2IsWUFBQSxHQUFlLE9BQUEsQ0FBUSx5QkFBUjs7QUFDZixnQkFBQSxHQUFtQixPQUFBLENBQVEsOEJBQVI7O0FBRW5CLEVBQUEsR0FBSyxPQUFBLENBQVEsb0JBQVI7O0FBQ0wsTUFBc0IsS0FBSyxDQUFDLEdBQTVCLEVBQUMsYUFBRCxFQUFNLGFBQU4sRUFBVyxTQUFYLEVBQWM7O0FBRWQsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FDZjtFQUFBLFdBQUEsRUFBYSxjQUFiO0VBQ0EsTUFBQSxFQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBbEIsRUFBeUIsWUFBWSxDQUFDLEtBQXRDLENBRFI7RUFHQSxNQUFBLEVBQVMsU0FBQTtBQUNQLFFBQUE7SUFBQSxLQUFBLEdBQVEsWUFBWSxDQUFDO0lBRXJCLEtBQUEsR0FDRTtNQUFBLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQWhCO01BQ0EsZUFBQSxFQUFpQixJQUFDLENBQUEsS0FBSyxDQUFDLE9BRHhCO01BRUEsU0FBQSxFQUFXLEtBQUssQ0FBQyxTQUZqQjtNQUdBLFNBQUEsRUFBVyxLQUFLLENBQUMsU0FIakI7TUFJQSxhQUFBLEVBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUp0Qjs7V0FNRCx3QkFBQSxDQUF5QjtNQUN4QixLQUFBLEVBQU8sRUFBQSxDQUFHLHNCQUFILENBRGlCO01BRXhCLFdBQUEsRUFBYSxlQUZXO01BR3hCLEtBQUEsRUFBTyxJQUFDLENBQUEsT0FBTyxDQUFDLEtBSFE7TUFJeEIsSUFBQSxFQUFNO1FBQ0osV0FBVyxDQUFDLEdBQVosQ0FBZ0I7VUFBQyxLQUFBLEVBQVEsRUFBQSxDQUFHLGlDQUFILENBQVQ7VUFBZ0QsU0FBQSxFQUFZLGlCQUFBLENBQWtCLEtBQWxCLENBQTVEO1NBQWhCLENBREksRUFFSixXQUFXLENBQUMsR0FBWixDQUFnQjtVQUFDLEtBQUEsRUFBUSxFQUFBLENBQUcsZ0NBQUgsQ0FBVDtVQUErQyxTQUFBLEVBQVksZ0JBQUEsQ0FBaUIsS0FBakIsQ0FBM0Q7U0FBaEIsQ0FGSSxFQUdKLFdBQVcsQ0FBQyxHQUFaLENBQWdCO1VBQUMsS0FBQSxFQUFRLEVBQUEsQ0FBRyx5QkFBSCxDQUFUO1VBQXdDLFNBQUEsRUFBWSxVQUFBLENBQVcsS0FBWCxDQUFwRDtTQUFoQixDQUhJO09BSmtCO0tBQXpCO0VBVk0sQ0FIVDtDQURlIn0=

},{"../stores/image-dialog-store":666,"../stores/palette-store":670,"../utils/translate":689,"./image-link-dialog-view":703,"./image-metadata-view":704,"./image-my-computer-dialog-view":705,"./image-search-dialog-view":707,"./modal-tabbed-dialog-view":715,"./tabbed-panel-view":736}],703:[function(require,module,exports){
var DropZone, ImageDialogStore, div, input, p, ref, tr;

DropZone = React.createFactory(require('./dropzone-view'));

ImageDialogStore = require('../stores/image-dialog-store');

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, p = ref.p, input = ref.input;

module.exports = React.createClass({
  displayName: 'Link',
  mixins: [ImageDialogStore.mixin, require('../mixins/image-dialog-view')],
  previewImage: function(e) {
    var url;
    e.preventDefault();
    url = $.trim(this.refs.url.value);
    if (url.length === 0) {
      return alert(tr("~IMAGE-BROWSER.PLEASE_DROP_IMAGE"));
    } else if (this.hasValidImageExtension(url)) {
      return this.imageSelected({
        image: url,
        metadata: {
          source: 'external',
          link: url
        }
      });
    }
  },
  render: function() {
    return div({
      className: 'link-dialog'
    }, this.state.selectedImage ? this.renderPreviewImage() : div({}, DropZone({
      header: tr("~IMAGE-BROWSER.DROP_IMAGE_FROM_BROWSER"),
      dropped: this.imageDropped
    }), p({}, tr("~IMAGE-BROWSER.TYPE_OR_PASTE_LINK")), p({}, tr("~IMAGE-BROWSER.IMAGE_URL"), input({
      ref: 'url',
      type: 'text'
    })), p({}, input({
      type: 'submit',
      onClick: this.previewImage,
      value: tr("~IMAGE-BROWSER.PREVIEW_IMAGE")
    }))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW1hZ2UtbGluay1kaWFsb2ctdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9pbWFnZS1saW5rLWRpYWxvZy12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFFBQUEsR0FBVyxLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsaUJBQVIsQ0FBcEI7O0FBQ1gsZ0JBQUEsR0FBbUIsT0FBQSxDQUFRLDhCQUFSOztBQUNuQixFQUFBLEdBQUssT0FBQSxDQUFRLG9CQUFSOztBQUVMLE1BQWtCLEtBQUssQ0FBQyxHQUF4QixFQUFDLGFBQUQsRUFBTSxTQUFOLEVBQVM7O0FBRVQsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FDZjtFQUFBLFdBQUEsRUFBYSxNQUFiO0VBRUEsTUFBQSxFQUFRLENBQUUsZ0JBQWdCLENBQUMsS0FBbkIsRUFBMEIsT0FBQSxDQUFRLDZCQUFSLENBQTFCLENBRlI7RUFLQSxZQUFBLEVBQWMsU0FBQyxDQUFEO0FBQ1osUUFBQTtJQUFBLENBQUMsQ0FBQyxjQUFGLENBQUE7SUFDQSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFDLENBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFqQjtJQUNOLElBQUcsR0FBRyxDQUFDLE1BQUosS0FBYyxDQUFqQjthQUNFLEtBQUEsQ0FBTSxFQUFBLENBQUcsa0NBQUgsQ0FBTixFQURGO0tBQUEsTUFFSyxJQUFHLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixHQUF4QixDQUFIO2FBQ0gsSUFBQyxDQUFBLGFBQUQsQ0FDRTtRQUFBLEtBQUEsRUFBTyxHQUFQO1FBQ0EsUUFBQSxFQUNFO1VBQUEsTUFBQSxFQUFRLFVBQVI7VUFDQSxJQUFBLEVBQU0sR0FETjtTQUZGO09BREYsRUFERzs7RUFMTyxDQUxkO0VBaUJBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGFBQVo7S0FBSixFQUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBVixHQUNFLElBQUMsQ0FBQSxrQkFBRCxDQUFBLENBREYsR0FHRyxHQUFBLENBQUksRUFBSixFQUNFLFFBQUEsQ0FBUztNQUFDLE1BQUEsRUFBUyxFQUFBLENBQUcsd0NBQUgsQ0FBVjtNQUF3RCxPQUFBLEVBQVMsSUFBQyxDQUFBLFlBQWxFO0tBQVQsQ0FERixFQUVFLENBQUEsQ0FBRSxFQUFGLEVBQU8sRUFBQSxDQUFHLG1DQUFILENBQVAsQ0FGRixFQUdFLENBQUEsQ0FBRSxFQUFGLEVBQU8sRUFBQSxDQUFHLDBCQUFILENBQVAsRUFBd0MsS0FBQSxDQUFNO01BQUMsR0FBQSxFQUFLLEtBQU47TUFBYSxJQUFBLEVBQU0sTUFBbkI7S0FBTixDQUF4QyxDQUhGLEVBSUUsQ0FBQSxDQUFFLEVBQUYsRUFBTyxLQUFBLENBQU07TUFBQyxJQUFBLEVBQU0sUUFBUDtNQUFpQixPQUFBLEVBQVMsSUFBQyxDQUFBLFlBQTNCO01BQXlDLEtBQUEsRUFBUSxFQUFBLENBQUcsOEJBQUgsQ0FBakQ7S0FBTixDQUFQLENBSkYsQ0FKSjtFQURLLENBakJSO0NBRGUifQ==

},{"../mixins/image-dialog-view":651,"../stores/image-dialog-store":666,"../utils/translate":689,"./dropzone-view":698}],704:[function(require,module,exports){
var ImageDialogStore, a, div, input, licenses, p, radio, ref, select, table, tbody, td, tr, xlat;

xlat = require('../utils/translate');

licenses = require('../data/licenses');

ImageDialogStore = require('../stores/image-dialog-store');

ref = React.DOM, div = ref.div, table = ref.table, tbody = ref.tbody, tr = ref.tr, td = ref.td, a = ref.a, input = ref.input, select = ref.select, radio = ref.radio, p = ref.p;

module.exports = React.createClass({
  displayName: 'ImageMetadata',
  getInitialState: function() {
    return {
      hostname: null
    };
  },
  hostname: function() {
    var link, ref1;
    link = document.createElement('a');
    link.setAttribute('href', (ref1 = this.props.metadata) != null ? ref1.link : void 0);
    return link.hostname;
  },
  changed: function() {
    var newMetaData;
    newMetaData = {
      title: this.refs.title.value,
      link: this.refs.link.value,
      license: this.refs.license.value,
      source: 'external'
    };
    return this.props.update({
      metadata: newMetaData
    });
  },
  render: function() {
    return div({
      className: 'image-metadata'
    }, this.props.metadata ? this.renderMetadata() : void 0);
  },
  renderMetadata: function() {
    var licenseData, licenseName, link, title;
    licenseName = this.props.metadata.license || 'public domain';
    licenseData = licenses.getLicense(licenseName);
    title = this.props.metadata.title;
    link = this.props.metadata.link;
    if (this.props.metadata.source === 'external') {
      return div({
        key: 'external'
      }, table({}, tbody({}, tr({}, td({}, xlat('~METADATA.TITLE')), td({}, input({
        ref: 'title',
        value: title,
        onChange: this.changed
      }))), tr({}, td({}, xlat('~METADATA.LINK')), td({}, input({
        ref: 'link',
        value: link,
        onChange: this.changed
      }))), tr({}, td({}, xlat('~METADATA.CREDIT')), td({}, select({
        ref: 'license',
        value: licenseName,
        onChange: this.changed
      }, licenses.getRenderOptions(licenseName)))))), p({
        className: 'learn-more'
      }, a({
        href: licenseData.link,
        target: '_blank'
      }, "Learn more about " + licenseData.fullLabel)));
    } else {
      return div({
        key: 'internal'
      }, p({}), div({}, "\"" + title + "\""), link ? div({
        key: 'hostname'
      }, a({
        href: link,
        target: '_blank'
      }, "See it on " + (this.hostname()))) : void 0, p({}), div({}, 'License'), div({
        key: 'license'
      }, a({
        href: licenseData.link,
        target: '_blank'
      }, licenseData.label)));
    }
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW1hZ2UtbWV0YWRhdGEtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9pbWFnZS1tZXRhZGF0YS12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLElBQUEsR0FBYSxPQUFBLENBQVEsb0JBQVI7O0FBQ2IsUUFBQSxHQUFhLE9BQUEsQ0FBUSxrQkFBUjs7QUFDYixnQkFBQSxHQUFtQixPQUFBLENBQVEsOEJBQVI7O0FBRW5CLE1BQTBELEtBQUssQ0FBQyxHQUFoRSxFQUFDLGFBQUQsRUFBTSxpQkFBTixFQUFhLGlCQUFiLEVBQW9CLFdBQXBCLEVBQXdCLFdBQXhCLEVBQTRCLFNBQTVCLEVBQStCLGlCQUEvQixFQUFzQyxtQkFBdEMsRUFBOEMsaUJBQTlDLEVBQXFEOztBQUVyRCxNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLGVBQWI7RUFHQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLFFBQUEsRUFBVSxJQUFWOztFQURlLENBSGpCO0VBTUEsUUFBQSxFQUFVLFNBQUE7QUFFUixRQUFBO0lBQUEsSUFBQSxHQUFPLFFBQVEsQ0FBQyxhQUFULENBQXVCLEdBQXZCO0lBQ1AsSUFBSSxDQUFDLFlBQUwsQ0FBa0IsTUFBbEIsNkNBQXlDLENBQUUsYUFBM0M7V0FDQSxJQUFJLENBQUM7RUFKRyxDQU5WO0VBWUEsT0FBQSxFQUFTLFNBQUE7QUFDUCxRQUFBO0lBQUEsV0FBQSxHQUNFO01BQUEsS0FBQSxFQUFPLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQW5CO01BQ0EsSUFBQSxFQUFNLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBRGpCO01BRUEsT0FBQSxFQUFTLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBRnZCO01BR0EsTUFBQSxFQUFRLFVBSFI7O1dBS0YsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLENBQWM7TUFBQyxRQUFBLEVBQVUsV0FBWDtLQUFkO0VBUE8sQ0FaVDtFQXFCQSxNQUFBLEVBQVEsU0FBQTtXQUNMLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxnQkFBWjtLQUFKLEVBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFWLEdBQ0UsSUFBQyxDQUFBLGNBQUQsQ0FBQSxDQURGLEdBQUEsTUFERDtFQURLLENBckJSO0VBMkJBLGNBQUEsRUFBZ0IsU0FBQTtBQUNkLFFBQUE7SUFBQSxXQUFBLEdBQWMsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBaEIsSUFBMkI7SUFDekMsV0FBQSxHQUFjLFFBQVEsQ0FBQyxVQUFULENBQW9CLFdBQXBCO0lBQ2QsS0FBQSxHQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQzFCLElBQUEsR0FBVSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUUxQixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQWhCLEtBQTBCLFVBQTdCO2FBQ0csR0FBQSxDQUFJO1FBQUMsR0FBQSxFQUFLLFVBQU47T0FBSixFQUNFLEtBQUEsQ0FBTSxFQUFOLEVBQ0UsS0FBQSxDQUFNLEVBQU4sRUFDRSxFQUFBLENBQUcsRUFBSCxFQUFRLEVBQUEsQ0FBRyxFQUFILEVBQU8sSUFBQSxDQUFLLGlCQUFMLENBQVAsQ0FBUixFQUNFLEVBQUEsQ0FBRyxFQUFILEVBQ0UsS0FBQSxDQUFNO1FBQUMsR0FBQSxFQUFLLE9BQU47UUFBZSxLQUFBLEVBQU8sS0FBdEI7UUFBNkIsUUFBQSxFQUFVLElBQUMsQ0FBQSxPQUF4QztPQUFOLENBREYsQ0FERixDQURGLEVBS0UsRUFBQSxDQUFHLEVBQUgsRUFBUSxFQUFBLENBQUcsRUFBSCxFQUFPLElBQUEsQ0FBSyxnQkFBTCxDQUFQLENBQVIsRUFDRSxFQUFBLENBQUcsRUFBSCxFQUNFLEtBQUEsQ0FBTTtRQUFDLEdBQUEsRUFBSyxNQUFOO1FBQWMsS0FBQSxFQUFPLElBQXJCO1FBQTJCLFFBQUEsRUFBVSxJQUFDLENBQUEsT0FBdEM7T0FBTixDQURGLENBREYsQ0FMRixFQVFFLEVBQUEsQ0FBRyxFQUFILEVBQVEsRUFBQSxDQUFHLEVBQUgsRUFBTyxJQUFBLENBQUssa0JBQUwsQ0FBUCxDQUFSLEVBQ0UsRUFBQSxDQUFHLEVBQUgsRUFDRSxNQUFBLENBQU87UUFBQyxHQUFBLEVBQUssU0FBTjtRQUFpQixLQUFBLEVBQU8sV0FBeEI7UUFBcUMsUUFBQSxFQUFVLElBQUMsQ0FBQSxPQUFoRDtPQUFQLEVBQ0MsUUFBUSxDQUFDLGdCQUFULENBQTBCLFdBQTFCLENBREQsQ0FERixDQURGLENBUkYsQ0FERixDQURGLEVBaUJFLENBQUEsQ0FBRTtRQUFDLFNBQUEsRUFBVyxZQUFaO09BQUYsRUFBOEIsQ0FBQSxDQUFFO1FBQUMsSUFBQSxFQUFNLFdBQVcsQ0FBQyxJQUFuQjtRQUF5QixNQUFBLEVBQVEsUUFBakM7T0FBRixFQUE4QyxtQkFBQSxHQUFvQixXQUFXLENBQUMsU0FBOUUsQ0FBOUIsQ0FqQkYsRUFESDtLQUFBLE1BQUE7YUFxQkcsR0FBQSxDQUFJO1FBQUMsR0FBQSxFQUFLLFVBQU47T0FBSixFQUNFLENBQUEsQ0FBRSxFQUFGLENBREYsRUFFRSxHQUFBLENBQUksRUFBSixFQUFRLElBQUEsR0FBSyxLQUFMLEdBQVcsSUFBbkIsQ0FGRixFQUdJLElBQUgsR0FDRyxHQUFBLENBQUk7UUFBQyxHQUFBLEVBQUssVUFBTjtPQUFKLEVBQXdCLENBQUEsQ0FBRTtRQUFDLElBQUEsRUFBTSxJQUFQO1FBQWEsTUFBQSxFQUFRLFFBQXJCO09BQUYsRUFBa0MsWUFBQSxHQUFZLENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBQSxDQUFELENBQTlDLENBQXhCLENBREgsR0FBQSxNQUhELEVBS0UsQ0FBQSxDQUFFLEVBQUYsQ0FMRixFQU1FLEdBQUEsQ0FBSSxFQUFKLEVBQVEsU0FBUixDQU5GLEVBT0UsR0FBQSxDQUFJO1FBQUMsR0FBQSxFQUFLLFNBQU47T0FBSixFQUNFLENBQUEsQ0FBRTtRQUFDLElBQUEsRUFBTSxXQUFXLENBQUMsSUFBbkI7UUFBeUIsTUFBQSxFQUFRLFFBQWpDO09BQUYsRUFBOEMsV0FBVyxDQUFDLEtBQTFELENBREYsQ0FQRixFQXJCSDs7RUFOYyxDQTNCaEI7Q0FGZSJ9

},{"../data/licenses":625,"../stores/image-dialog-store":666,"../utils/translate":689}],705:[function(require,module,exports){
var DropZone, ImageDialogStore, div, input, p, ref, tr;

DropZone = React.createFactory(require('./dropzone-view'));

ImageDialogStore = require('../stores/image-dialog-store');

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, p = ref.p, input = ref.input;

module.exports = React.createClass({
  displayName: 'MyComputer',
  mixins: [ImageDialogStore.mixin, require('../mixins/image-dialog-view')],
  previewImage: function(e) {
    var files, reader, title;
    e.preventDefault();
    files = this.refs.file.files;
    if (files.length === 0) {
      return alert(tr("~IMAGE-BROWSER.PLEASE_DROP_FILE"));
    } else if (this.hasValidImageExtension(files[0].name)) {
      title = (files[0].name.split('.'))[0];
      reader = new FileReader();
      reader.onload = (function(_this) {
        return function(e) {
          return _this.imageSelected({
            image: e.target.result,
            title: title,
            metadata: {
              title: title,
              source: 'external'
            }
          });
        };
      })(this);
      return reader.readAsDataURL(files[0]);
    }
  },
  render: function() {
    return div({
      className: 'my-computer-dialog'
    }, this.state.selectedImage ? this.renderPreviewImage() : div({}, DropZone({
      header: tr("~IMAGE-BROWSER.DROP_IMAGE_FROM_DESKTOP"),
      dropped: this.imageDropped
    }), p({}, tr("~IMAGE-BROWSER.CHOOSE_FILE")), p({}, input({
      ref: 'file',
      type: 'file',
      onChange: this.previewImage
    }))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW1hZ2UtbXktY29tcHV0ZXItZGlhbG9nLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW1hZ2UtbXktY29tcHV0ZXItZGlhbG9nLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsUUFBQSxHQUFXLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxpQkFBUixDQUFwQjs7QUFDWCxnQkFBQSxHQUFtQixPQUFBLENBQVEsOEJBQVI7O0FBRW5CLEVBQUEsR0FBSyxPQUFBLENBQVEsb0JBQVI7O0FBRUwsTUFBa0IsS0FBSyxDQUFDLEdBQXhCLEVBQUMsYUFBRCxFQUFNLFNBQU4sRUFBUzs7QUFFVCxNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUNmO0VBQUEsV0FBQSxFQUFhLFlBQWI7RUFFQSxNQUFBLEVBQVEsQ0FBRSxnQkFBZ0IsQ0FBQyxLQUFuQixFQUEwQixPQUFBLENBQVEsNkJBQVIsQ0FBMUIsQ0FGUjtFQUlBLFlBQUEsRUFBYyxTQUFDLENBQUQ7QUFDWixRQUFBO0lBQUEsQ0FBQyxDQUFDLGNBQUYsQ0FBQTtJQUNBLEtBQUEsR0FBUSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixJQUFHLEtBQUssQ0FBQyxNQUFOLEtBQWdCLENBQW5CO2FBQ0UsS0FBQSxDQUFNLEVBQUEsQ0FBRyxpQ0FBSCxDQUFOLEVBREY7S0FBQSxNQUVLLElBQUcsSUFBQyxDQUFBLHNCQUFELENBQXdCLEtBQU0sQ0FBQSxDQUFBLENBQUUsQ0FBQyxJQUFqQyxDQUFIO01BQ0gsS0FBQSxHQUFRLENBQUMsS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLElBQUksQ0FBQyxLQUFkLENBQW9CLEdBQXBCLENBQUQsQ0FBMEIsQ0FBQSxDQUFBO01BQ2xDLE1BQUEsR0FBUyxJQUFJLFVBQUosQ0FBQTtNQUNULE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxDQUFEO2lCQUNkLEtBQUMsQ0FBQSxhQUFELENBQ0U7WUFBQSxLQUFBLEVBQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFoQjtZQUNBLEtBQUEsRUFBTyxLQURQO1lBRUEsUUFBQSxFQUNFO2NBQUEsS0FBQSxFQUFPLEtBQVA7Y0FDQSxNQUFBLEVBQVEsVUFEUjthQUhGO1dBREY7UUFEYztNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7YUFPaEIsTUFBTSxDQUFDLGFBQVAsQ0FBcUIsS0FBTSxDQUFBLENBQUEsQ0FBM0IsRUFWRzs7RUFMTyxDQUpkO0VBcUJBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLG9CQUFaO0tBQUosRUFDSSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVYsR0FDRSxJQUFDLENBQUEsa0JBQUQsQ0FBQSxDQURGLEdBR0csR0FBQSxDQUFJLEVBQUosRUFDRSxRQUFBLENBQVM7TUFBQyxNQUFBLEVBQVMsRUFBQSxDQUFHLHdDQUFILENBQVY7TUFBd0QsT0FBQSxFQUFTLElBQUMsQ0FBQSxZQUFsRTtLQUFULENBREYsRUFFRSxDQUFBLENBQUUsRUFBRixFQUFPLEVBQUEsQ0FBRyw0QkFBSCxDQUFQLENBRkYsRUFHRSxDQUFBLENBQUUsRUFBRixFQUFPLEtBQUEsQ0FBTTtNQUFDLEdBQUEsRUFBSyxNQUFOO01BQWMsSUFBQSxFQUFNLE1BQXBCO01BQTRCLFFBQUEsRUFBVSxJQUFDLENBQUEsWUFBdkM7S0FBTixDQUFQLENBSEYsQ0FKSjtFQURLLENBckJSO0NBRGUifQ==

},{"../mixins/image-dialog-view":651,"../stores/image-dialog-store":666,"../utils/translate":689,"./dropzone-view":698}],706:[function(require,module,exports){
var ImgChoice, PaletteAddView, PaletteStore, div, img, ref, tr;

ref = React.DOM, div = ref.div, img = ref.img;

tr = require('../utils/translate');

PaletteAddView = React.createFactory(require('./palette-add-view'));

PaletteStore = require('../stores/palette-store');

ImgChoice = React.createFactory(React.createClass({
  displayName: 'ImgChoice',
  selectNode: function() {
    return this.props.onChange(this.props.node);
  },
  render: function() {
    var className;
    className = "image-choice";
    if (this.props.node.image === this.props.selected.image) {
      className = "image-choice selected";
    }
    return div({
      className: className,
      onClick: this.selectNode
    }, img({
      src: this.props.node.image,
      className: 'image-choice'
    }));
  }
}));

module.exports = React.createClass({
  displayName: 'ImagePickerView',
  getInitialState: function() {
    return {
      opened: false
    };
  },
  mixins: [PaletteStore.mixin],
  toggleOpen: function() {
    return this.setState({
      opened: !this.state.opened
    });
  },
  className: function() {
    if (this.state.opened) {
      return "image-choices opened";
    } else {
      return "image-choices closed";
    }
  },
  render: function() {
    var i, node;
    return div({
      onClick: this.toggleOpen,
      className: 'image-picker'
    }, div({
      className: 'selected-image'
    }, img({
      src: this.props.selected.image
    })), div({
      className: this.className()
    }, div({
      className: "image-choice"
    }, PaletteAddView({
      callback: this.props.onChange,
      label: tr('~PALETTE-INSPECTOR.ADD_IMAGE_SHORT')
    })), (function() {
      var j, len, ref1, results;
      ref1 = this.state.palette;
      results = [];
      for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        node = ref1[i];
        results.push(ImgChoice({
          key: i,
          node: node,
          selected: this.props.selected,
          onChange: this.props.onChange
        }));
      }
      return results;
    }).call(this)));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW1hZ2UtcGlja2VyLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW1hZ2UtcGlja2VyLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBYSxLQUFLLENBQUMsR0FBbkIsRUFBQyxhQUFELEVBQU07O0FBQ04sRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFDTCxjQUFBLEdBQXFCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxvQkFBUixDQUFwQjs7QUFDckIsWUFBQSxHQUFlLE9BQUEsQ0FBUSx5QkFBUjs7QUFFZixTQUFBLEdBQVksS0FBSyxDQUFDLGFBQU4sQ0FBb0IsS0FBSyxDQUFDLFdBQU4sQ0FDOUI7RUFBQSxXQUFBLEVBQWEsV0FBYjtFQUVBLFVBQUEsRUFBWSxTQUFBO1dBQ1YsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLENBQWdCLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBdkI7RUFEVSxDQUZaO0VBS0EsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsU0FBQSxHQUFZO0lBQ1osSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFaLEtBQXFCLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQXhDO01BQ0UsU0FBQSxHQUFZLHdCQURkOztXQUVDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxTQUFaO01BQXVCLE9BQUEsRUFBUyxJQUFDLENBQUEsVUFBakM7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLEdBQUEsRUFBSyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFsQjtNQUF5QixTQUFBLEVBQVcsY0FBcEM7S0FBSixDQURGO0VBSkssQ0FMUjtDQUQ4QixDQUFwQjs7QUFjWixNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLGlCQUFiO0VBRUEsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxNQUFBLEVBQVEsS0FBUjs7RUFEZSxDQUZqQjtFQUlBLE1BQUEsRUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFkLENBSlI7RUFLQSxVQUFBLEVBQVksU0FBQTtXQUNWLElBQUMsQ0FBQSxRQUFELENBQ0U7TUFBQSxNQUFBLEVBQVMsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQXBCO0tBREY7RUFEVSxDQUxaO0VBU0EsU0FBQSxFQUFXLFNBQUE7SUFDVCxJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBVjthQUNFLHVCQURGO0tBQUEsTUFBQTthQUdFLHVCQUhGOztFQURTLENBVFg7RUFlQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7V0FBQyxHQUFBLENBQUk7TUFBQyxPQUFBLEVBQVMsSUFBQyxDQUFBLFVBQVg7TUFBdUIsU0FBQSxFQUFXLGNBQWxDO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsZ0JBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLEdBQUEsRUFBSyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUF0QjtLQUFKLENBREYsQ0FERixFQUlFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxJQUFDLENBQUEsU0FBRCxDQUFBLENBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxjQUFaO0tBQUosRUFDRSxjQUFBLENBQWU7TUFDZCxRQUFBLEVBQVcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQURKO01BRWQsS0FBQSxFQUFPLEVBQUEsQ0FBRyxvQ0FBSCxDQUZPO0tBQWYsQ0FERixDQURGOztBQU9DO0FBQUE7V0FBQSw4Q0FBQTs7cUJBQ0csU0FBQSxDQUFVO1VBQUMsR0FBQSxFQUFLLENBQU47VUFBUyxJQUFBLEVBQU0sSUFBZjtVQUFxQixRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUF0QztVQUFnRCxRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFqRTtTQUFWO0FBREg7O2lCQVBELENBSkY7RUFESyxDQWZSO0NBRmUifQ==

},{"../stores/palette-store":670,"../utils/translate":689,"./palette-add-view":723}],707:[function(require,module,exports){
var ImageDialogStore, ImageSearchPageLink, ImageSearchPrevNextLink, ImageSearchResult, OpenClipart, a, br, button, div, form, i, img, input, ref, span, tr;

ImageDialogStore = require("../stores/image-dialog-store");

OpenClipart = require('../utils/open-clipart');

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, input = ref.input, button = ref.button, img = ref.img, i = ref.i, a = ref.a, form = ref.form, br = ref.br, span = ref.span;

ImageSearchResult = React.createFactory(React.createClass({
  displayName: 'ImageSearchResult',
  getInitialState: function() {
    return {
      loaded: false
    };
  },
  componentDidMount: function() {
    var image;
    image = new Image();
    image.src = this.props.imageInfo.image;
    return image.onload = (function(_this) {
      return function() {
        if (!_this.unmounted) {
          return _this.setState({
            loaded: true
          });
        }
      };
    })(this);
  },
  componentWillUnmount: function() {
    return this.unmounted = true;
  },
  clicked: function() {
    return ImageDialogStore.actions.update(this.props.imageInfo);
  },
  render: function() {
    var src;
    src = this.state.loaded ? this.props.imageInfo.image : 'img/bb-chrome/spin.svg';
    if (!this.props.isDisabled(this.props.imageInfo)) {
      return img({
        src: src,
        onClick: this.clicked,
        title: this.props.imageInfo.metadata.title
      });
    } else {
      return null;
    }
  }
}));

ImageSearchPageLink = React.createFactory(React.createClass({
  displayName: 'ImageSearchPageLink',
  selectPage: function(e) {
    e.preventDefault();
    e.stopPropagation();
    return this.props.selectPage(this.props.page);
  },
  render: function() {
    if (this.props.currentPage === this.props.page) {
      return span({
        className: 'image-search-page-link'
      }, this.props.page);
    } else {
      return a({
        className: 'image-search-page-link',
        href: '#',
        onClick: this.selectPage
      }, this.props.page);
    }
  }
}));

ImageSearchPrevNextLink = React.createFactory(React.createClass({
  displayName: 'ImageSearchPrevNextLink',
  selectPage: function(e) {
    e.preventDefault();
    e.stopPropagation();
    return this.props.selectPage(this.props.page);
  },
  render: function() {
    if (this.props.enabled) {
      return a({
        className: 'image-search-prev-next-link',
        href: '#',
        onClick: this.selectPage
      }, this.props.label);
    } else {
      return span({
        className: 'image-search-prev-next-link',
        style: {
          color: "#777"
        }
      }, this.props.label);
    }
  }
}));

module.exports = React.createClass({
  displayName: 'ImageSearch',
  mixins: [require('../mixins/image-dialog-view', ImageDialogStore.mixin)],
  getInitialState: function() {
    return this.getInitialImageDialogViewState({
      searching: false,
      searched: false,
      results: [],
      page: 1,
      numPages: 0
    });
  },
  searchClicked: function(e) {
    e.preventDefault();
    return this.search({
      page: 1,
      newSearch: true
    });
  },
  selectPage: function(page) {
    return this.search({
      page: page,
      newSearch: false
    });
  },
  search: function(options) {
    var query, validQuery;
    query = $.trim(this.refs.search.value);
    validQuery = query.length > 0;
    this.setState({
      query: query,
      searchable: validQuery,
      searching: validQuery,
      searched: false,
      results: [],
      page: options.newSearch ? 1 : options.page,
      numPages: options.newSearch ? 0 : this.state.numPages
    });
    if (validQuery) {
      return OpenClipart.search(query, options, (function(_this) {
        return function(results, page, numPages) {
          return _this.setState({
            searching: false,
            searched: true,
            results: results,
            page: page,
            numPages: numPages
          });
        };
      })(this));
    }
  },
  componentDidMount: function() {
    return this.refs.search.focus();
  },
  isDisabledInInternalLibrary: function(node) {
    return this.props.inPalette(node);
  },
  isDisabledInExternalSearch: function(node) {
    return (this.props.inPalette(node)) || (this.props.inLibrary(node));
  },
  renderPagination: function() {
    var page;
    if (this.state.numPages > 0) {
      return div({
        key: "pagination",
        className: "image-search-dialog-pagination"
      }, ImageSearchPrevNextLink({
        key: "prev",
        page: this.state.page - 1,
        label: tr("~IMAGE-BROWSER.PREVIOUS"),
        selectPage: this.selectPage,
        enabled: this.state.page > 1
      }), (function() {
        var j, ref1, results1;
        results1 = [];
        for (page = j = 1, ref1 = this.state.numPages; 1 <= ref1 ? j <= ref1 : j >= ref1; page = 1 <= ref1 ? ++j : --j) {
          results1.push(ImageSearchPageLink({
            key: "page" + page,
            page: page,
            currentPage: this.state.page,
            selectPage: this.selectPage
          }));
        }
        return results1;
      }).call(this), ImageSearchPrevNextLink({
        key: "next",
        page: this.state.page + 1,
        label: tr("~IMAGE-BROWSER.NEXT"),
        selectPage: this.selectPage,
        enabled: this.state.page < this.state.numPages
      }));
    }
  },
  render: function() {
    var index, noResultsClass, node, ref1, showNoResultsAlert;
    showNoResultsAlert = this.state.searchable && this.state.searched && this.state.results.length === 0;
    noResultsClass = showNoResultsAlert ? ' no-results' : '';
    return div({
      className: 'image-search-dialog'
    }, ((ref1 = this.props.selectedImage) != null ? ref1.image : void 0) ? this.renderPreviewImage() : div({}, div({
      className: 'image-search-dialog-form'
    }, form({}, input({
      type: 'text',
      ref: 'search',
      defaultValue: this.state.query,
      placeholder: tr('~IMAGE-BROWSER.SEARCH_HEADER')
    }), input({
      type: 'submit',
      value: tr("~IMAGE-BROWSER.SEARCH_BUTTON_LABEL"),
      onClick: this.searchClicked
    }))), showNoResultsAlert ? div({
      className: 'modal-dialog-alert'
    }, tr('~IMAGE-BROWSER.NO_IMAGES_FOUND'), br({}), tr('~IMAGE-BROWSER.TRY_ANOTHER_SEARCH')) : void 0, div({
      className: 'image-search-main-results' + noResultsClass
    }, [
      showNoResultsAlert ? div({
        key: 'image-search-section',
        className: 'image-search-section',
        style: {
          height: '100%'
        }
      }, [
        div({
          key: 'image-search-results',
          className: 'image-search-dialog-results show-all'
        }, (function() {
          var j, len, ref2, results1;
          ref2 = _.map(this.props.internalLibrary);
          results1 = [];
          for (index = j = 0, len = ref2.length; j < len; index = ++j) {
            node = ref2[index];
            if (node.image) {
              if (node.image) {
                results1.push(ImageSearchResult({
                  key: index,
                  imageInfo: node,
                  clicked: this.imageSelected,
                  isDisabled: this.isDisabledInInternalLibrary
                }));
              } else {
                results1.push(void 0);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this))
      ]) : div({
        key: 'image-search-section-post-search',
        className: 'image-search-section',
        style: {
          height: '100%'
        }
      }, [
        div({
          key: 'results',
          className: "image-search-dialog-results"
        }, (function() {
          var j, len, ref2, results1;
          if (this.state.searching) {
            return div({}, i({
              className: "icon-codap-options spin"
            }), ' ', tr("~IMAGE-BROWSER.SEARCHING", {
              page: this.state.page === 1 ? tr("~IMAGE-BROWSER.SEARCHING_FIRST_PAGE") : tr("~IMAGE-BROWSER.SEARCHING_PAGE", {
                page: this.state.page
              }),
              query: this.state.query
            }));
          } else if (this.state.searched && this.state.results.length === 0) {
            return tr('~IMAGE-BROWSER.NO_EXTERNAL_FOUND', {
              query: this.state.query
            });
          } else {
            ref2 = this.state.results;
            results1 = [];
            for (index = j = 0, len = ref2.length; j < len; index = ++j) {
              node = ref2[index];
              results1.push(ImageSearchResult({
                key: index,
                imageInfo: node,
                clicked: this.imageSelected,
                isDisabled: this.isDisabledInExternalSearch
              }));
            }
            return results1;
          }
        }).call(this)), this.renderPagination()
      ])
    ])));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../mixins/image-dialog-view":651,"../stores/image-dialog-store":666,"../utils/open-clipart":686,"../utils/translate":689}],708:[function(require,module,exports){
var InspectorPanelStore, LinkInspectorView, LinkRelationInspectorView, LinkValueInspectorView, NodeInspectorView, NodeRelationInspectorView, NodeValueInspectorView, SimulationInspectorView, ToolButton, ToolPanel, div, i, ref, span;

NodeInspectorView = React.createFactory(require('./node-inspector-view'));

LinkInspectorView = React.createFactory(require('./link-inspector-view'));

LinkValueInspectorView = React.createFactory(require('./link-value-inspector-view'));

NodeValueInspectorView = React.createFactory(require('./node-value-inspector-view'));

LinkRelationInspectorView = React.createFactory(require('./relation-inspector-view'));

NodeRelationInspectorView = React.createFactory(require('./relation-inspector-view'));

SimulationInspectorView = React.createFactory(require('./simulation-inspector-view'));

InspectorPanelStore = require("../stores/inspector-panel-store");

ref = React.DOM, div = ref.div, i = ref.i, span = ref.span;

ToolButton = React.createFactory(React.createClass({
  displayName: 'toolButton',
  render: function() {
    var classes, name, onClick;
    name = this.props.name;
    onClick = (function(_this) {
      return function() {
        if (_this.props.onClick) {
          return _this.props.onClick(_this.props.name);
        }
      };
    })(this);
    classes = "icon-codap-" + name + " tool-button";
    if (this.props.selected) {
      classes = classes + " selected";
    }
    if (this.props.disabled) {
      classes = classes + " disabled";
    }
    return div({
      className: classes,
      onClick: onClick
    });
  }
}));

ToolPanel = React.createFactory(React.createClass({
  displayName: 'toolPanel',
  buttonData: [
    {
      name: "styles",
      simple: true,
      shows: "design",
      'enabled': ['node', 'link']
    }, {
      name: "values",
      simple: false,
      shows: "value",
      'enabled': ['node']
    }, {
      name: "qualRel",
      simple: false,
      shows: "relations",
      'enabled': ['dependent-node']
    }, {
      name: "options",
      simple: true,
      shows: "simulation",
      'enabled': ['nothing']
    }
  ],
  isDisabled: function(button) {
    var ref1;
    if (_.includes(button.enabled, 'nothing')) {
      return false;
    }
    if (_.includes(button.enabled, 'node') && this.props.node) {
      return false;
    }
    if (_.includes(button.enabled, 'dependent-node') && ((ref1 = this.props.node) != null ? ref1.isDependent() : void 0)) {
      return false;
    }
    if (_.includes(button.enabled, 'link') && this.props.link) {
      return false;
    }
    return true;
  },
  buttonProps: function(button) {
    var props;
    props = {
      name: button.name,
      shows: button.shows,
      selected: false,
      disabled: this.isDisabled(button)
    };
    if (!this.isDisabled(button)) {
      props.onClick = (function(_this) {
        return function() {
          return _this.select(button.name);
        };
      })(this);
      props.selected = this.props.nowShowing === button.shows;
    }
    return props;
  },
  select: function(name) {
    var button;
    button = _.find(this.buttonData, {
      name: name
    });
    if (button) {
      if (this.props.nowShowing !== button.shows) {
        return this.props.onNowShowing(button.shows);
      } else {
        return this.props.onNowShowing(null);
      }
    }
  },
  render: function() {
    var buttons, buttonsView;
    buttons = this.buttonData.slice(0);
    if (this.props.diagramOnly) {
      buttons = _.filter(buttons, function(button) {
        return button.simple;
      });
    }
    buttonsView = _.map(buttons, (function(_this) {
      return function(button, i) {
        var props;
        props = _this.buttonProps(button);
        props.key = i;
        return ToolButton(props);
      };
    })(this));
    return div({
      className: 'tool-panel'
    }, buttonsView);
  }
}));

module.exports = React.createClass({
  displayName: 'InspectorPanelView',
  mixins: [InspectorPanelStore.mixin],
  renderSimulationInspector: function() {
    return SimulationInspectorView({});
  },
  renderDesignInspector: function() {
    if (this.props.node) {
      return NodeInspectorView({
        node: this.props.node,
        onNodeChanged: this.props.onNodeChanged,
        onNodeDelete: this.props.onNodeDelete,
        palette: this.props.palette
      });
    } else if (this.props.link) {
      return LinkInspectorView({
        link: this.props.link,
        graphStore: this.props.graphStore
      });
    }
  },
  renderValueInspector: function() {
    if (this.props.node) {
      return NodeValueInspectorView({
        node: this.props.node,
        graphStore: this.props.graphStore
      });
    } else if (this.props.link) {
      return LinkValueInspectorView({
        link: this.props.link
      });
    }
  },
  renderRelationInspector: function() {
    var ref1;
    if ((ref1 = this.props.node) != null ? ref1.isDependent() : void 0) {
      return NodeRelationInspectorView({
        node: this.props.node,
        graphStore: this.props.graphStore
      });
    } else if (this.props.link) {
      return LinkRelationInspectorView({
        link: this.props.link,
        graphStore: this.props.graphStore
      });
    } else {
      return null;
    }
  },
  nodeSelectionChanged: function() {
    if (!(this.props.node || this.props.link)) {
      return InspectorPanelStore.actions.closeInspectorPanel();
    }
  },
  renderInspectorPanel: function() {
    var view;
    view = (function() {
      switch (this.state.nowShowing) {
        case 'simulation':
          return this.renderSimulationInspector();
        case 'design':
          return this.renderDesignInspector();
        case 'value':
          return this.renderValueInspector();
        case 'relations':
          return this.renderRelationInspector();
      }
    }).call(this);
    return div({
      className: "inspector-panel-content"
    }, view);
  },
  render: function() {
    var className;
    className = "inspector-panel";
    if (!this.state.nowShowing) {
      className = className + " collapsed";
    }
    return div({
      className: className
    }, ToolPanel({
      node: this.props.node,
      link: this.props.link,
      nowShowing: this.state.nowShowing,
      onNowShowing: InspectorPanelStore.actions.openInspectorPanel,
      diagramOnly: this.props.diagramOnly
    }), this.renderInspectorPanel());
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW5zcGVjdG9yLXBhbmVsLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvaW5zcGVjdG9yLXBhbmVsLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsaUJBQUEsR0FBb0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHVCQUFSLENBQXBCOztBQUNwQixpQkFBQSxHQUFvQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsdUJBQVIsQ0FBcEI7O0FBQ3BCLHNCQUFBLEdBQXlCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSw2QkFBUixDQUFwQjs7QUFDekIsc0JBQUEsR0FBeUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLDZCQUFSLENBQXBCOztBQUN6Qix5QkFBQSxHQUE0QixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsMkJBQVIsQ0FBcEI7O0FBQzVCLHlCQUFBLEdBQTRCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSwyQkFBUixDQUFwQjs7QUFDNUIsdUJBQUEsR0FBNEIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLDZCQUFSLENBQXBCOztBQUU1QixtQkFBQSxHQUF1QixPQUFBLENBQVEsaUNBQVI7O0FBRXZCLE1BQWlCLEtBQUssQ0FBQyxHQUF2QixFQUFDLGFBQUQsRUFBTSxTQUFOLEVBQVM7O0FBRVQsVUFBQSxHQUFhLEtBQUssQ0FBQyxhQUFOLENBQW9CLEtBQUssQ0FBQyxXQUFOLENBQy9CO0VBQUEsV0FBQSxFQUFhLFlBQWI7RUFDQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxJQUFBLEdBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQztJQUNkLE9BQUEsR0FBVSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDUixJQUErQixLQUFDLENBQUEsS0FBSyxDQUFDLE9BQXRDO2lCQUFBLEtBQUMsQ0FBQSxLQUFLLENBQUMsT0FBUCxDQUFlLEtBQUMsQ0FBQSxLQUFLLENBQUMsSUFBdEIsRUFBQTs7TUFEUTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7SUFHVixPQUFBLEdBQVUsYUFBQSxHQUFjLElBQWQsR0FBbUI7SUFDN0IsSUFBbUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUExQztNQUFBLE9BQUEsR0FBYSxPQUFELEdBQVMsWUFBckI7O0lBQ0EsSUFBbUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUExQztNQUFBLE9BQUEsR0FBYSxPQUFELEdBQVMsWUFBckI7O1dBQ0MsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLE9BQVo7TUFBcUIsT0FBQSxFQUFTLE9BQTlCO0tBQUo7RUFSSyxDQURSO0NBRCtCLENBQXBCOztBQVliLFNBQUEsR0FBWSxLQUFLLENBQUMsYUFBTixDQUFvQixLQUFLLENBQUMsV0FBTixDQUM5QjtFQUFBLFdBQUEsRUFBYSxXQUFiO0VBRUEsVUFBQSxFQUFZO0lBQ1I7TUFBQyxJQUFBLEVBQU0sUUFBUDtNQUFpQixNQUFBLEVBQVEsSUFBekI7TUFBK0IsS0FBQSxFQUFPLFFBQXRDO01BQStDLFNBQUEsRUFBVyxDQUFDLE1BQUQsRUFBUSxNQUFSLENBQTFEO0tBRFEsRUFFUjtNQUFDLElBQUEsRUFBTSxRQUFQO01BQWlCLE1BQUEsRUFBUSxLQUF6QjtNQUFnQyxLQUFBLEVBQU8sT0FBdkM7TUFBZ0QsU0FBQSxFQUFXLENBQUMsTUFBRCxDQUEzRDtLQUZRLEVBR1I7TUFBQyxJQUFBLEVBQU0sU0FBUDtNQUFrQixNQUFBLEVBQVEsS0FBMUI7TUFBaUMsS0FBQSxFQUFPLFdBQXhDO01BQW9ELFNBQUEsRUFBVyxDQUFDLGdCQUFELENBQS9EO0tBSFEsRUFJUjtNQUFDLElBQUEsRUFBTSxTQUFQO01BQW1CLE1BQUEsRUFBUSxJQUEzQjtNQUFpQyxLQUFBLEVBQU8sWUFBeEM7TUFBc0QsU0FBQSxFQUFXLENBQUMsU0FBRCxDQUFqRTtLQUpRO0dBRlo7RUFTQSxVQUFBLEVBQVksU0FBQyxNQUFEO0FBQ1YsUUFBQTtJQUFBLElBQWdCLENBQUMsQ0FBQyxRQUFGLENBQVcsTUFBTSxDQUFDLE9BQWxCLEVBQTJCLFNBQTNCLENBQWhCO0FBQUEsYUFBTyxNQUFQOztJQUNBLElBQWdCLENBQUMsQ0FBQyxRQUFGLENBQVcsTUFBTSxDQUFDLE9BQWxCLEVBQTJCLE1BQTNCLENBQUEsSUFBdUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUE5RDtBQUFBLGFBQU8sTUFBUDs7SUFDQSxJQUFnQixDQUFDLENBQUMsUUFBRixDQUFXLE1BQU0sQ0FBQyxPQUFsQixFQUEyQixnQkFBM0IsQ0FBQSw0Q0FBNEQsQ0FBRSxXQUFiLENBQUEsV0FBakU7QUFBQSxhQUFPLE1BQVA7O0lBQ0EsSUFBZ0IsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxNQUFNLENBQUMsT0FBbEIsRUFBMkIsTUFBM0IsQ0FBQSxJQUF1QyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQTlEO0FBQUEsYUFBTyxNQUFQOztBQUNBLFdBQU87RUFMRyxDQVRaO0VBZ0JBLFdBQUEsRUFBYSxTQUFDLE1BQUQ7QUFDWCxRQUFBO0lBQUEsS0FBQSxHQUNFO01BQUEsSUFBQSxFQUFVLE1BQU0sQ0FBQyxJQUFqQjtNQUNBLEtBQUEsRUFBVSxNQUFNLENBQUMsS0FEakI7TUFFQSxRQUFBLEVBQVUsS0FGVjtNQUdBLFFBQUEsRUFBVSxJQUFDLENBQUEsVUFBRCxDQUFZLE1BQVosQ0FIVjs7SUFLRixJQUFBLENBQU8sSUFBQyxDQUFBLFVBQUQsQ0FBWSxNQUFaLENBQVA7TUFDRSxLQUFLLENBQUMsT0FBTixHQUFnQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQ2QsS0FBQyxDQUFBLE1BQUQsQ0FBUSxNQUFNLENBQUMsSUFBZjtRQURjO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtNQUVoQixLQUFLLENBQUMsUUFBTixHQUFpQixJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVAsS0FBcUIsTUFBTSxDQUFDLE1BSC9DOztXQUtBO0VBWlcsQ0FoQmI7RUE4QkEsTUFBQSxFQUFRLFNBQUMsSUFBRDtBQUNOLFFBQUE7SUFBQSxNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFDLENBQUEsVUFBUixFQUFvQjtNQUFDLElBQUEsRUFBTSxJQUFQO0tBQXBCO0lBQ1QsSUFBRyxNQUFIO01BQ0UsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVAsS0FBdUIsTUFBTSxDQUFDLEtBQWpDO2VBQ0UsSUFBQyxDQUFBLEtBQUssQ0FBQyxZQUFQLENBQW9CLE1BQU0sQ0FBQyxLQUEzQixFQURGO09BQUEsTUFBQTtlQUdFLElBQUMsQ0FBQSxLQUFLLENBQUMsWUFBUCxDQUFvQixJQUFwQixFQUhGO09BREY7O0VBRk0sQ0E5QlI7RUFzQ0EsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsT0FBQSxHQUFVLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBWixDQUFrQixDQUFsQjtJQUNWLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFWO01BQ0UsT0FBQSxHQUFVLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVCxFQUFrQixTQUFDLE1BQUQ7ZUFBWSxNQUFNLENBQUM7TUFBbkIsQ0FBbEIsRUFEWjs7SUFFQSxXQUFBLEdBQWMsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxPQUFOLEVBQWUsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLE1BQUQsRUFBUyxDQUFUO0FBQzNCLFlBQUE7UUFBQSxLQUFBLEdBQVEsS0FBQyxDQUFBLFdBQUQsQ0FBYSxNQUFiO1FBQ1IsS0FBSyxDQUFDLEdBQU4sR0FBWTtlQUNYLFVBQUEsQ0FBVyxLQUFYO01BSDBCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFmO1dBS2IsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFlBQVo7S0FBSixFQUErQixXQUEvQjtFQVRLLENBdENSO0NBRDhCLENBQXBCOztBQWtEWixNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLG9CQUFiO0VBRUEsTUFBQSxFQUFRLENBQUUsbUJBQW1CLENBQUMsS0FBdEIsQ0FGUjtFQUlBLHlCQUFBLEVBQTJCLFNBQUE7V0FDeEIsdUJBQUEsQ0FBd0IsRUFBeEI7RUFEd0IsQ0FKM0I7RUFPQSxxQkFBQSxFQUF1QixTQUFBO0lBQ3JCLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFWO2FBQ0csaUJBQUEsQ0FBa0I7UUFDakIsSUFBQSxFQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFESTtRQUVqQixhQUFBLEVBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUZMO1FBR2pCLFlBQUEsRUFBYyxJQUFDLENBQUEsS0FBSyxDQUFDLFlBSEo7UUFJakIsT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FKQztPQUFsQixFQURIO0tBQUEsTUFPSyxJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBVjthQUNGLGlCQUFBLENBQWtCO1FBQUMsSUFBQSxFQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBZDtRQUFxQixVQUFBLEVBQVksSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUF4QztPQUFsQixFQURFOztFQVJnQixDQVB2QjtFQWtCQSxvQkFBQSxFQUFzQixTQUFBO0lBQ3BCLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFWO2FBQ0csc0JBQUEsQ0FBdUI7UUFBQyxJQUFBLEVBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFkO1FBQW9CLFVBQUEsRUFBWSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQXZDO09BQXZCLEVBREg7S0FBQSxNQUVLLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFWO2FBQ0Ysc0JBQUEsQ0FBdUI7UUFBQyxJQUFBLEVBQUssSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFiO09BQXZCLEVBREU7O0VBSGUsQ0FsQnRCO0VBd0JBLHVCQUFBLEVBQXlCLFNBQUE7QUFDdkIsUUFBQTtJQUFBLDJDQUFjLENBQUUsV0FBYixDQUFBLFVBQUg7YUFDRyx5QkFBQSxDQUEwQjtRQUFDLElBQUEsRUFBSyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQWI7UUFBbUIsVUFBQSxFQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBdEM7T0FBMUIsRUFESDtLQUFBLE1BRUssSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQVY7YUFDRix5QkFBQSxDQUEwQjtRQUFDLElBQUEsRUFBSyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQWI7UUFBbUIsVUFBQSxFQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBdEM7T0FBMUIsRUFERTtLQUFBLE1BQUE7QUFHSCxhQUFPLEtBSEo7O0VBSGtCLENBeEJ6QjtFQWtDQSxvQkFBQSxFQUFzQixTQUFBO0lBQ3BCLElBQUEsQ0FBTyxDQUFDLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxJQUFlLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBdkIsQ0FBUDthQUNFLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxtQkFBNUIsQ0FBQSxFQURGOztFQURvQixDQWxDdEI7RUFzQ0Esb0JBQUEsRUFBc0IsU0FBQTtBQUNwQixRQUFBO0lBQUEsSUFBQTtBQUFPLGNBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFkO0FBQUEsYUFDQSxZQURBO2lCQUNrQixJQUFDLENBQUEseUJBQUQsQ0FBQTtBQURsQixhQUVBLFFBRkE7aUJBRWtCLElBQUMsQ0FBQSxxQkFBRCxDQUFBO0FBRmxCLGFBR0EsT0FIQTtpQkFHa0IsSUFBQyxDQUFBLG9CQUFELENBQUE7QUFIbEIsYUFJQSxXQUpBO2lCQUlrQixJQUFDLENBQUEsdUJBQUQsQ0FBQTtBQUpsQjs7V0FNTixHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcseUJBQVo7S0FBSixFQUNDLElBREQ7RUFQbUIsQ0F0Q3RCO0VBaURBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtJQUFBLFNBQUEsR0FBWTtJQUNaLElBQUEsQ0FBTyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQWQ7TUFDRSxTQUFBLEdBQWUsU0FBRCxHQUFXLGFBRDNCOztXQUdDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxTQUFaO0tBQUosRUFDRSxTQUFBLENBQ0M7TUFBQSxJQUFBLEVBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFiO01BQ0EsSUFBQSxFQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFEYjtNQUVBLFVBQUEsRUFBWSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBRm5CO01BR0EsWUFBQSxFQUFjLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxrQkFIMUM7TUFJQSxXQUFBLEVBQWEsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUpwQjtLQURELENBREYsRUFRQyxJQUFDLENBQUEsb0JBQUQsQ0FBQSxDQVJEO0VBTEssQ0FqRFI7Q0FGZSJ9

},{"../stores/inspector-panel-store":667,"./link-inspector-view":709,"./link-value-inspector-view":711,"./node-inspector-view":717,"./node-value-inspector-view":719,"./relation-inspector-view":730,"./simulation-inspector-view":731}],709:[function(require,module,exports){
var button, div, h2, input, label, palette, palettes, ref, tr;

ref = React.DOM, div = ref.div, h2 = ref.h2, button = ref.button, label = ref.label, input = ref.input;

tr = require("../utils/translate");

palettes = [['#4D6A6D', '#798478', "#A0A083", "#C9ADA1", "#EAE0CC"], ['#351431', '#775253', "#BDC696", "#D1D3C4", "#DFE0DC"], ['#D6F49D', '#EAD637', "#CBA328", "#230C0F", "#A2D3C2"]];

palette = palettes[2];

module.exports = React.createClass({
  displayName: 'LinkEditView',
  changeTitle: function(e) {
    return this.props.graphStore.changeLink(this.props.link, {
      title: e.target.value
    });
  },
  deleteLink: function() {
    return this.props.graphStore.changeLink(this.props.link, {
      deleted: true
    });
  },
  pickColor: function(e) {
    return this.props.graphStore.changeLink(this.props.link, {
      color: $(e.target).css('background-color')
    });
  },
  render: function() {
    var selected, tabs;
    tabs = [tr('design'), tr('define')];
    selected = tr('design');
    return div({
      className: 'link-inspector-view'
    }, div({
      className: 'inspector-content'
    }, !this.props.link.transferNode ? div({
      className: 'edit-row'
    }, label({
      name: 'title'
    }, tr("~LINK-EDIT.TITLE")), input({
      type: 'text',
      name: 'title',
      value: this.props.link.title,
      onChange: this.changeTitle
    })) : void 0, div({
      className: 'edit-row'
    }, label({
      className: 'link-delete',
      onClick: this.deleteLink
    }, tr("~LINK-EDIT.DELETE")))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbGluay1pbnNwZWN0b3Itdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9saW5rLWluc3BlY3Rvci12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQWtDLEtBQUssQ0FBQyxHQUF4QyxFQUFDLGFBQUQsRUFBTSxXQUFOLEVBQVUsbUJBQVYsRUFBa0IsaUJBQWxCLEVBQXlCOztBQUN6QixFQUFBLEdBQUssT0FBQSxDQUFRLG9CQUFSOztBQUVMLFFBQUEsR0FBVyxDQUNULENBQUMsU0FBRCxFQUFXLFNBQVgsRUFBc0IsU0FBdEIsRUFBaUMsU0FBakMsRUFBNEMsU0FBNUMsQ0FEUyxFQUVULENBQUMsU0FBRCxFQUFXLFNBQVgsRUFBc0IsU0FBdEIsRUFBaUMsU0FBakMsRUFBNEMsU0FBNUMsQ0FGUyxFQUdULENBQUMsU0FBRCxFQUFXLFNBQVgsRUFBc0IsU0FBdEIsRUFBaUMsU0FBakMsRUFBNEMsU0FBNUMsQ0FIUzs7QUFLWCxPQUFBLEdBQVUsUUFBUyxDQUFBLENBQUE7O0FBRW5CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsY0FBYjtFQUdBLFdBQUEsRUFBYSxTQUFDLENBQUQ7V0FDWCxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFsQixDQUE2QixJQUFDLENBQUEsS0FBSyxDQUFDLElBQXBDLEVBQTBDO01BQUMsS0FBQSxFQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBakI7S0FBMUM7RUFEVyxDQUhiO0VBTUEsVUFBQSxFQUFZLFNBQUE7V0FDVixJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFsQixDQUE2QixJQUFDLENBQUEsS0FBSyxDQUFDLElBQXBDLEVBQTBDO01BQUMsT0FBQSxFQUFTLElBQVY7S0FBMUM7RUFEVSxDQU5aO0VBU0EsU0FBQSxFQUFXLFNBQUMsQ0FBRDtXQUNULElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQWxCLENBQTZCLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBcEMsRUFBMEM7TUFBQyxLQUFBLEVBQU8sQ0FBQSxDQUFFLENBQUMsQ0FBQyxNQUFKLENBQVcsQ0FBQyxHQUFaLENBQWdCLGtCQUFoQixDQUFSO0tBQTFDO0VBRFMsQ0FUWDtFQVlBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtJQUFBLElBQUEsR0FBTyxDQUFDLEVBQUEsQ0FBRyxRQUFILENBQUQsRUFBZSxFQUFBLENBQUcsUUFBSCxDQUFmO0lBQ1AsUUFBQSxHQUFXLEVBQUEsQ0FBRyxRQUFIO1dBQ1YsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLHFCQUFaO0tBQUosRUFHRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsbUJBQVo7S0FBSixFQUNJLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBbkIsR0FDRyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsVUFBWjtLQUFKLEVBQ0UsS0FBQSxDQUFNO01BQUMsSUFBQSxFQUFNLE9BQVA7S0FBTixFQUF1QixFQUFBLENBQUcsa0JBQUgsQ0FBdkIsQ0FERixFQUVFLEtBQUEsQ0FBTTtNQUFDLElBQUEsRUFBTSxNQUFQO01BQWUsSUFBQSxFQUFNLE9BQXJCO01BQThCLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFqRDtNQUF3RCxRQUFBLEVBQVUsSUFBQyxDQUFBLFdBQW5FO0tBQU4sQ0FGRixDQURILEdBQUEsTUFERCxFQU1FLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxVQUFaO0tBQUosRUFDRSxLQUFBLENBQU07TUFBQyxTQUFBLEVBQVcsYUFBWjtNQUEyQixPQUFBLEVBQVMsSUFBQyxDQUFBLFVBQXJDO0tBQU4sRUFBd0QsRUFBQSxDQUFHLG1CQUFILENBQXhELENBREYsQ0FORixDQUhGO0VBSEssQ0FaUjtDQUZlIn0=

},{"../utils/translate":689}],710:[function(require,module,exports){
var AppSettingsStore, Graph, LinkRelationView, QuantStart, RelationFactory, SimulationStore, SvgGraph, autosize, br, div, h2, i, input, label, option, p, ref, select, span, textarea, tr;

ref = React.DOM, br = ref.br, div = ref.div, h2 = ref.h2, label = ref.label, span = ref.span, input = ref.input, p = ref.p, i = ref.i, select = ref.select, option = ref.option, textarea = ref.textarea;

RelationFactory = require("../models/relation-factory");

SvgGraph = React.createFactory(require("./svg-graph-view"));

tr = require("../utils/translate");

autosize = require("autosize");

SimulationStore = require('../stores/simulation-store');

AppSettingsStore = require('../stores/app-settings-store');

Graph = React.createFactory(React.createClass({
  render: function() {
    return SvgGraph({
      width: 130,
      height: 130,
      yLabel: this.props.yAxis,
      xLabel: this.props.xAxis,
      link: this.props.link,
      graphStore: this.props.graphStore
    });
  }
}));

QuantStart = React.createFactory(React.createClass({
  render: function() {
    var start;
    start = tr("~NODE-RELATION-EDIT.SEMI_QUANT_START");
    return div({
      style: {
        width: "95%"
      }
    }, span({}, (tr("~NODE-RELATION-EDIT.AN_INCREASE_IN")) + " "), span({
      className: "source"
    }, this.props.source), span({}, " " + (tr("~NODE-RELATION-EDIT.CAUSES")) + " "), span({
      className: "target"
    }, this.props.target));
  }
}));

module.exports = LinkRelationView = React.createClass({
  displayName: 'LinkRelationView',
  mixins: [SimulationStore.mixin, AppSettingsStore.mixin],
  getDefaultProps: function() {
    return {
      link: {
        targetNode: {
          title: "default target node"
        },
        sourceNode: {
          title: "default source node"
        }
      }
    };
  },
  getInitialState: function() {
    var status;
    status = this.checkStatus(this.props.link);
    return {
      selectedVector: null,
      selectedScalar: null,
      selectedVectorHasChanged: false,
      selectedAccumulator: null,
      selectedTransferModifier: null,
      isAccumulator: status.isAccumulator,
      isDualAccumulator: status.isDualAccumulator,
      isTransfer: status.isTransfer,
      isTransferModifier: status.isTransferModifier
    };
  },
  componentWillMount: function() {
    var selectedScalar, selectedVector;
    if (this.state.isAccumulator || this.state.isTransferModifier || (this.state.selectedVector == null)) {
      return this.updateState(this.props);
    } else if (this.props.link.relation.customData != null) {
      selectedVector = RelationFactory.vary;
      selectedScalar = RelationFactory.custom;
      return this.setState({
        selectedVector: selectedVector,
        selectedScalar: selectedScalar
      });
    }
  },
  componentDidMount: function() {
    return autosize(this.refs.reasoning);
  },
  componentWillReceiveProps: function(newProps) {
    if (this.props.link !== newProps.link) {
      this.updateState(newProps);
      this.props.link.reasoning = this.refs.reasoning.value;
    }
    return this.refs.reasoning.value = newProps.link.reasoning;
  },
  checkStatus: function(link) {
    var ref1, sourceNode, status, targetNode;
    sourceNode = link.sourceNode, targetNode = link.targetNode;
    return status = {
      isAccumulator: targetNode.isAccumulator,
      isDualAccumulator: sourceNode.isAccumulator && targetNode.isAccumulator,
      isTransferModifier: targetNode.isTransfer && ((ref1 = targetNode.transferLink) != null ? ref1.sourceNode : void 0) === sourceNode
    };
  },
  updateState: function(props) {
    var accumulator, ref1, scalar, status, transferModifier, vector;
    status = this.checkStatus(props.link);
    ref1 = RelationFactory.selectionsFromRelation(props.link.relation), vector = ref1.vector, scalar = ref1.scalar, accumulator = ref1.accumulator, transferModifier = ref1.transferModifier;
    if (props.link.relation.customData != null) {
      vector = RelationFactory.vary;
      scalar = RelationFactory.custom;
    }
    return this.setState({
      selectedVector: vector,
      selectedScalar: scalar,
      selectedAccumulator: accumulator,
      selectedTransferModifier: transferModifier,
      isAccumulator: status.isAccumulator,
      isDualAccumulator: status.isDualAccumulator,
      isTransferModifier: status.isTransferModifier
    });
  },
  updateRelation: function() {
    var existingData, link, relation, selectedAccumulator, selectedScalar, selectedTransferModifier, selectedVector;
    if (this.state.isAccumulator) {
      selectedAccumulator = this.getAccumulator();
      this.setState({
        selectedAccumulator: selectedAccumulator
      });
      if (selectedAccumulator != null) {
        link = this.props.link;
        relation = RelationFactory.CreateRelation(selectedAccumulator);
        relation.isDefined = true;
        return this.props.graphStore.changeLink(link, {
          relation: relation
        });
      }
    } else if (this.state.isTransferModifier) {
      selectedTransferModifier = this.getTransferModifier();
      this.setState({
        selectedTransferModifier: selectedTransferModifier
      });
      if (selectedTransferModifier != null) {
        link = this.props.link;
        relation = RelationFactory.CreateRelation(selectedTransferModifier);
        relation.isDefined = true;
        return this.props.graphStore.changeLink(link, {
          relation: relation
        });
      }
    } else {
      selectedVector = this.getVector();
      selectedScalar = this.getScalar();
      if ((selectedVector != null) && selectedVector.isCustomRelationship) {
        selectedScalar = RelationFactory.custom;
      }
      this.setState({
        selectedVector: selectedVector,
        selectedScalar: selectedScalar
      });
      if (selectedVector != null) {
        link = this.props.link;
        existingData = link.relation.customData;
        relation = RelationFactory.fromSelections(selectedVector, selectedScalar, existingData);
        relation.isDefined = (selectedVector != null) && (selectedScalar != null);
        if (!selectedVector.isCustomRelationship) {
          relation.customData = null;
        } else {
          relation.isDefined = link.relation.customData != null;
          relation.isCustomRelationship = true;
        }
        return this.props.graphStore.changeLink(link, {
          relation: relation
        });
      }
    }
  },
  updateReasoning: function() {
    return this.props.graphStore.changeLink(this.props.link, {
      reasoning: this.refs.reasoning.value
    });
  },
  getAccumulator: function() {
    return RelationFactory.accumulators[this.refs.accumulator.value];
  },
  getTransferModifier: function() {
    return RelationFactory.transferModifiers[this.refs.transfer.value];
  },
  getVector: function() {
    var id, newVector, selectedVectorHasChanged;
    id = this.refs.vector.value;
    newVector = RelationFactory.vectors[id];
    selectedVectorHasChanged = false;
    if (this.state.selectedVector && id !== this.state.selectedVector.id) {
      selectedVectorHasChanged = true;
    }
    this.setState({
      selectedVectorHasChanged: selectedVectorHasChanged
    });
    return newVector;
  },
  getScalar: function() {
    if (this.state.complexity === AppSettingsStore.store.Complexity.basic) {
      return RelationFactory.scalars.aboutTheSame;
    } else if (this.refs.scalar) {
      return RelationFactory.scalars[this.refs.scalar.value];
    } else {
      return void 0;
    }
  },
  renderVectorPulldown: function(vectorSelection) {
    var currentOption, options, vectorOptions;
    vectorOptions = this.state.complexity === AppSettingsStore.store.Complexity.basic ? RelationFactory.basicVectors : RelationFactory.vectors;
    options = _.map(vectorOptions, function(opt, i) {
      return option({
        value: opt.id,
        key: i
      }, opt.uiText);
    });
    if (vectorSelection == null) {
      options.unshift(option({
        key: "placeholder",
        value: "unselected",
        disabled: "disabled"
      }, tr("~NODE-RELATION-EDIT.UNSELECTED")));
      currentOption = "unselected";
    } else {
      currentOption = vectorSelection.id;
    }
    return div({
      className: "bb-select"
    }, span({}, (tr("~NODE-RELATION-EDIT.TO")) + " "), select({
      value: currentOption,
      className: "",
      ref: "vector",
      onChange: this.updateRelation
    }, options));
  },
  renderScalarPulldown: function(scalarSelection) {
    var currentOption, onlyBasic, options, ref1, vectorSelected, visClass, visible;
    options = _.map(RelationFactory.scalars, function(opt, i) {
      return option({
        value: opt.id,
        key: i
      }, opt.uiText);
    });
    if (scalarSelection == null) {
      options.unshift(option({
        key: "placeholder",
        value: "unselected",
        disabled: "disabled"
      }, tr("~NODE-RELATION-EDIT.UNSELECTED")));
      currentOption = "unselected";
    } else {
      currentOption = scalarSelection.id;
    }
    onlyBasic = this.state.complexity === AppSettingsStore.store.Complexity.basic;
    vectorSelected = this.state.selectedVector;
    visible = vectorSelected && !onlyBasic;
    visClass = visible ? ' visible' : ' hidden';
    if ((ref1 = this.state.selectedVector) != null ? ref1.isCustomRelationship : void 0) {
      return div({
        className: "bb-select" + visClass
      }, span({}, "" + (tr("~NODE-RELATION-EDIT.CUSTOM"))));
    } else {
      return div({
        className: "bb-select" + visClass
      }, span({}, (tr("~NODE-RELATION-EDIT.BY")) + " "), select({
        value: currentOption,
        className: "",
        ref: "scalar",
        onChange: this.updateRelation
      }, options));
    }
  },
  renderAccumulator: function(source, target) {
    var currentOption, options, ref1, textClass;
    options = [];
    _.each(RelationFactory.accumulators, (function(_this) {
      return function(opt, i) {
        if ((!opt.forDualAccumulator || _this.state.isDualAccumulator) && (!opt.forSoloAccumulatorOnly || !_this.state.isDualAccumulator)) {
          return options.push(option({
            value: opt.id,
            key: opt.id
          }, opt.text));
        }
      };
    })(this));
    if (!this.state.selectedAccumulator) {
      options.unshift(option({
        key: "placeholder",
        value: "unselected",
        disabled: "disabled"
      }, tr("~NODE-RELATION-EDIT.UNSELECTED")));
      currentOption = "unselected";
    } else {
      currentOption = this.state.selectedAccumulator.id;
    }
    textClass = ((ref1 = this.state.selectedAccumulator) != null ? ref1.hideAdditionalText : void 0) ? "hidden" : "";
    return div({
      className: 'top'
    }, span({
      className: "source"
    }, source), span({
      className: textClass
    }, " " + (tr("~NODE-RELATION-EDIT.IS")) + " "), div({}, select({
      value: currentOption,
      ref: "accumulator",
      onChange: this.updateRelation
    }, options)), span({
      className: "target"
    }, target), span({
      className: textClass
    }, " " + (tr("~NODE-RELATION-EDIT.EACH")) + " "), span({
      className: textClass
    }, this.state.stepUnits.toLowerCase()));
  },
  renderTransfer: function(source, target) {
    var currentOption, options;
    options = _.map(RelationFactory.transferModifiers, function(opt, i) {
      return option({
        value: opt.id,
        key: opt.id
      }, opt.text);
    });
    if (!this.state.selectedTransferModifier) {
      options.unshift(option({
        key: "placeholder",
        value: "unselected",
        disabled: "disabled"
      }, tr("~NODE-RELATION-EDIT.UNSELECTED")));
      currentOption = "unselected";
    } else {
      currentOption = this.state.selectedTransferModifier.id;
    }
    return div({
      className: 'top'
    }, select({
      value: currentOption,
      ref: "transfer",
      onChange: this.updateRelation
    }, options), span({}, " " + (tr("~NODE-RELATION-EDIT.OF")) + " "), span({
      className: "source"
    }, source), span({}, " " + (tr("~NODE-RELATION-EDIT.WILL_FLOW_TO")) + " "), span({
      className: "target"
    }, target), span({}, " " + (tr("~NODE-RELATION-EDIT.EACH")) + " "), span({}, this.state.stepUnits.toLowerCase()));
  },
  renderNonAccumulator: function(source, target) {
    return div({}, div({
      className: 'top'
    }, QuantStart({
      source: source,
      target: target
    }), div({
      className: 'full'
    }, this.renderVectorPulldown(this.state.selectedVector)), div({
      className: 'full'
    }, this.renderScalarPulldown(this.state.selectedScalar))), div({
      className: 'bottom'
    }, div({
      className: 'graph',
      id: 'relation-graph'
    }, Graph({
      xAxis: source,
      yAxis: target,
      link: this.props.link,
      graphStore: this.props.graphStore
    }))));
  },
  render: function() {
    var ref1, ref2, ref3, source, target;
    source = this.props.link.sourceNode.title;
    target = this.props.link.targetNode.title;
    return div({
      className: 'link-relation-view'
    }, this.state.isAccumulator ? this.renderAccumulator(source, target) : this.state.isTransferModifier ? (target = (ref1 = this.props.link.targetNode) != null ? (ref2 = ref1.transferLink) != null ? (ref3 = ref2.targetNode) != null ? ref3.title : void 0 : void 0 : void 0, this.renderTransfer(source, target)) : this.renderNonAccumulator(source, target), div({
      className: 'bottom'
    }, div({}, span({}, (tr("~NODE-RELATION-EDIT.BECAUSE")) + " ")), textarea({
      defaultValue: this.props.link.reasoning,
      placeholder: tr("~NODE-RELATION-EDIT.BECAUSE_PLACEHOLDER"),
      onChange: this.updateReasoning,
      ref: 'reasoning',
      className: 'full',
      rows: 3,
      style: {
        overflowY: "scroll",
        resize: "none"
      }
    })));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../models/relation-factory":657,"../stores/app-settings-store":662,"../stores/simulation-store":671,"../utils/translate":689,"./svg-graph-view":735,"autosize":2}],711:[function(require,module,exports){
var button, div, h2, input, label, optgroup, option, ref, select, tr;

ref = React.DOM, div = ref.div, h2 = ref.h2, label = ref.label, input = ref.input, select = ref.select, option = ref.option, optgroup = ref.optgroup, button = ref.button;

tr = require("../utils/translate");

module.exports = React.createClass({
  displayName: 'LinkValueInspectorView',
  render: function() {
    return div({
      className: 'link-inspector-view'
    });
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbGluay12YWx1ZS1pbnNwZWN0b3Itdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9saW5rLXZhbHVlLWluc3BlY3Rvci12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQTRELEtBQUssQ0FBQyxHQUFsRSxFQUFDLGFBQUQsRUFBTSxXQUFOLEVBQVUsaUJBQVYsRUFBaUIsaUJBQWpCLEVBQXdCLG1CQUF4QixFQUFnQyxtQkFBaEMsRUFBd0MsdUJBQXhDLEVBQWtEOztBQUVsRCxFQUFBLEdBQUssT0FBQSxDQUFRLG9CQUFSOztBQUVMLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsd0JBQWI7RUFHQSxNQUFBLEVBQVEsU0FBQTtXQUNMLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxxQkFBWjtLQUFKO0VBREssQ0FIUjtDQUZlIn0=

},{"../utils/translate":689}],712:[function(require,module,exports){
var Modal, div, i, ref;

Modal = React.createFactory(require('./modal-view'));

ref = React.DOM, div = ref.div, i = ref.i;

module.exports = React.createClass({
  displayName: 'ModalDialog',
  close: function() {
    var base;
    return typeof (base = this.props).close === "function" ? base.close() : void 0;
  },
  render: function() {
    return Modal({
      close: this.props.close
    }, div({
      className: 'modal-dialog'
    }, div({
      className: 'modal-dialog-wrapper'
    }, div({
      className: 'modal-dialog-title'
    }, i({
      className: "modal-dialog-title-close icon-codap-ex",
      onClick: this.close
    }), this.props.title || 'Untitled Dialog'), div({
      className: 'modal-dialog-workspace'
    }, this.props.children))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbW9kYWwtZGlhbG9nLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbW9kYWwtZGlhbG9nLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsS0FBQSxHQUFRLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxjQUFSLENBQXBCOztBQUNSLE1BQVcsS0FBSyxDQUFDLEdBQWpCLEVBQUMsYUFBRCxFQUFNOztBQUVOLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsYUFBYjtFQUVBLEtBQUEsRUFBTyxTQUFBO0FBQ0wsUUFBQTtpRUFBTSxDQUFDO0VBREYsQ0FGUDtFQUtBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsS0FBQSxDQUFNO01BQUMsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBZjtLQUFOLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGNBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxzQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLG9CQUFaO0tBQUosRUFDRSxDQUFBLENBQUU7TUFBQyxTQUFBLEVBQVcsd0NBQVo7TUFBc0QsT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUFoRTtLQUFGLENBREYsRUFFQyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsSUFBZ0IsaUJBRmpCLENBREYsRUFLRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsd0JBQVo7S0FBSixFQUEyQyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQWxELENBTEYsQ0FERixDQURGO0VBREssQ0FMUjtDQUZlIn0=

},{"./modal-view":716}],713:[function(require,module,exports){
var ModalDialog, a, button, div, input, label, li, ref, span, tr, ul;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, ul = ref.ul, li = ref.li, a = ref.a, input = ref.input, label = ref.label, span = ref.span, button = ref.button;

module.exports = React.createClass({
  displayName: 'ModalGoogleSave',
  onSave: function() {
    var base, base1;
    if (typeof (base = this.props).onRename === "function") {
      base.onRename(this.state.filename);
    }
    if (typeof (base1 = this.props).setIsPublic === "function") {
      base1.setIsPublic(this.state.isPublic);
    }
    this.props.onSave();
    return this.props.onClose();
  },
  getInitialState: function() {
    return {
      filename: this.props.filename,
      isPublic: this.props.isPublic
    };
  },
  handleFilenameChange: function(e) {
    return this.setState({
      filename: e.target.value
    });
  },
  handlePublicChange: function(e) {
    return this.setState({
      isPublic: e.target.checked
    });
  },
  render: function() {
    var title;
    return div({
      className: 'modal-simple-popup'
    }, this.props.showing ? (title = tr("~GOOGLE_SAVE.TITLE"), ModalDialog({
      title: title,
      close: this.props.onClose
    }, div({
      className: "simple-popup-panel label-text"
    }, div({
      className: 'filename'
    }, label({}, 'Name'), input({
      name: "fileName",
      ref: "fileName",
      value: this.state.filename,
      type: 'text',
      placeholder: tr('~MENU.UNTITLED_MODEL'),
      onChange: this.handleFilenameChange
    })), div({
      className: 'make-public'
    }, label({}, [
      input({
        type: 'checkbox',
        value: 'public',
        checked: this.state.isPublic,
        onChange: this.handlePublicChange
      }), tr('~GOOGLE_SAVE.MAKE_PUBLIC')
    ])), div({
      className: 'buttons'
    }, button({
      name: 'cancel',
      value: 'Cancel',
      onClick: this.props.onClose
    }, 'Cancel'), button({
      name: 'save',
      value: 'Save',
      onClick: this.onSave
    }, 'Save'))))) : void 0);
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbW9kYWwtZ29vZ2xlLXNhdmUtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9tb2RhbC1nb29nbGUtc2F2ZS12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFdBQUEsR0FBc0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHFCQUFSLENBQXBCOztBQUN0QixFQUFBLEdBQXNCLE9BQUEsQ0FBUSxvQkFBUjs7QUFFdEIsTUFBK0MsS0FBSyxDQUFDLEdBQXJELEVBQUMsYUFBRCxFQUFNLFdBQU4sRUFBVSxXQUFWLEVBQWMsU0FBZCxFQUFpQixpQkFBakIsRUFBd0IsaUJBQXhCLEVBQStCLGVBQS9CLEVBQXFDOztBQUVyQyxNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLGlCQUFiO0VBRUEsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBOztVQUFNLENBQUMsU0FBVSxJQUFDLENBQUEsS0FBSyxDQUFDOzs7V0FDbEIsQ0FBQyxZQUFhLElBQUMsQ0FBQSxLQUFLLENBQUM7O0lBQzNCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFBO1dBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLENBQUE7RUFKTSxDQUZSO0VBUUEsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFqQjtNQUNBLFFBQUEsRUFBVSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBRGpCOztFQURlLENBUmpCO0VBWUEsb0JBQUEsRUFBc0IsU0FBQyxDQUFEO1dBQ3BCLElBQUMsQ0FBQSxRQUFELENBQVU7TUFBQSxRQUFBLEVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFuQjtLQUFWO0VBRG9CLENBWnRCO0VBZUEsa0JBQUEsRUFBb0IsU0FBQyxDQUFEO1dBQ2xCLElBQUMsQ0FBQSxRQUFELENBQVU7TUFBQSxRQUFBLEVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFuQjtLQUFWO0VBRGtCLENBZnBCO0VBa0JBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtXQUFDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVSxvQkFBWDtLQUFKLEVBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFWLEdBQ0UsQ0FBQSxLQUFBLEdBQVEsRUFBQSxDQUFHLG9CQUFILENBQVIsRUFDQyxXQUFBLENBQVk7TUFBQyxLQUFBLEVBQU8sS0FBUjtNQUFlLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQTdCO0tBQVosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsK0JBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxVQUFaO0tBQUosRUFDRSxLQUFBLENBQU0sRUFBTixFQUFVLE1BQVYsQ0FERixFQUVFLEtBQUEsQ0FBTTtNQUNMLElBQUEsRUFBTSxVQUREO01BRUwsR0FBQSxFQUFLLFVBRkE7TUFHTCxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUhUO01BSUwsSUFBQSxFQUFNLE1BSkQ7TUFLTCxXQUFBLEVBQWEsRUFBQSxDQUFHLHNCQUFILENBTFI7TUFNTCxRQUFBLEVBQVUsSUFBQyxDQUFBLG9CQU5OO0tBQU4sQ0FGRixDQURGLEVBWUUsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGFBQVo7S0FBSixFQUNFLEtBQUEsQ0FBTSxFQUFOLEVBQVU7TUFDVCxLQUFBLENBQU07UUFBQyxJQUFBLEVBQU0sVUFBUDtRQUFtQixLQUFBLEVBQU8sUUFBMUI7UUFBb0MsT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBcEQ7UUFBOEQsUUFBQSxFQUFVLElBQUMsQ0FBQSxrQkFBekU7T0FBTixDQURTLEVBRVQsRUFBQSxDQUFHLDBCQUFILENBRlM7S0FBVixDQURGLENBWkYsRUFrQkUsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFNBQVo7S0FBSixFQUNFLE1BQUEsQ0FBTztNQUFDLElBQUEsRUFBTSxRQUFQO01BQWlCLEtBQUEsRUFBTyxRQUF4QjtNQUFrQyxPQUFBLEVBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFsRDtLQUFQLEVBQW1FLFFBQW5FLENBREYsRUFFRSxNQUFBLENBQU87TUFBQyxJQUFBLEVBQU0sTUFBUDtNQUFlLEtBQUEsRUFBTyxNQUF0QjtNQUE4QixPQUFBLEVBQVMsSUFBQyxDQUFBLE1BQXhDO0tBQVAsRUFBd0QsTUFBeEQsQ0FGRixDQWxCRixDQURGLENBREQsQ0FERixHQUFBLE1BREQ7RUFESyxDQWxCUjtDQUZlIn0=

},{"../utils/translate":689,"./modal-dialog-view":712}],714:[function(require,module,exports){
var ModalDialog, NodesStore, PaletteDeleteView, PaletteDialogStore, a, div, li, ref, tr, ul;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

PaletteDeleteView = React.createFactory(require('./palette-delete-view'));

PaletteDialogStore = require('../stores/palette-delete-dialog-store');

NodesStore = require('../stores/nodes-store');

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, ul = ref.ul, li = ref.li, a = ref.a;

module.exports = React.createClass({
  displayName: 'ModalPaletteDelete',
  mixins: [PaletteDialogStore.mixin],
  render: function() {
    var title;
    return div({
      key: 'ModalPaletteDelete'
    }, this.state.showing ? (title = tr("~PALETTE-DIALOG.TITLE"), ModalDialog({
      title: title,
      close: PaletteDialogStore.actions.close
    }, PaletteDeleteView({
      options: this.state.options,
      paletteItem: this.state.paletteItem,
      replacement: this.state.replacement,
      showReplacement: this.state.showReplacement,
      cancel: PaletteDialogStore.actions.close,
      ok: (function(_this) {
        return function() {
          return PaletteDialogStore.actions["delete"](_this.state.paletteItem);
        };
      })(this)
    }))) : void 0);
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbW9kYWwtcGFsZXR0ZS1kZWxldGUtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9tb2RhbC1wYWxldHRlLWRlbGV0ZS12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFdBQUEsR0FBc0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHFCQUFSLENBQXBCOztBQUN0QixpQkFBQSxHQUFzQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsdUJBQVIsQ0FBcEI7O0FBQ3RCLGtCQUFBLEdBQXNCLE9BQUEsQ0FBUSx1Q0FBUjs7QUFDdEIsVUFBQSxHQUFzQixPQUFBLENBQVEsdUJBQVI7O0FBQ3RCLEVBQUEsR0FBc0IsT0FBQSxDQUFRLG9CQUFSOztBQUV0QixNQUFtQixLQUFLLENBQUMsR0FBekIsRUFBQyxhQUFELEVBQU0sV0FBTixFQUFVLFdBQVYsRUFBYzs7QUFFZCxNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLG9CQUFiO0VBQ0EsTUFBQSxFQUFRLENBQUMsa0JBQWtCLENBQUMsS0FBcEIsQ0FEUjtFQUdBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtXQUFDLEdBQUEsQ0FBSTtNQUFDLEdBQUEsRUFBSSxvQkFBTDtLQUFKLEVBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFWLEdBQ0UsQ0FBQSxLQUFBLEdBQVEsRUFBQSxDQUFHLHVCQUFILENBQVIsRUFDQyxXQUFBLENBQVk7TUFBQyxLQUFBLEVBQU8sS0FBUjtNQUFlLEtBQUEsRUFBTyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBakQ7S0FBWixFQUNFLGlCQUFBLENBQWtCO01BQ2pCLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BREM7TUFFakIsV0FBQSxFQUFhLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FGSDtNQUdqQixXQUFBLEVBQWEsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUhIO01BSWpCLGVBQUEsRUFBaUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxlQUpQO01BS2pCLE1BQUEsRUFBUSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FMbEI7TUFNakIsRUFBQSxFQUFJLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUMsTUFBRCxFQUExQixDQUFrQyxLQUFDLENBQUEsS0FBSyxDQUFDLFdBQXpDO1FBQUg7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBTmE7S0FBbEIsQ0FERixDQURELENBREYsR0FBQSxNQUREO0VBREssQ0FIUjtDQUZlIn0=

},{"../stores/nodes-store":668,"../stores/palette-delete-dialog-store":669,"../utils/translate":689,"./modal-dialog-view":712,"./palette-delete-view":724}],715:[function(require,module,exports){
var ModalDialog, TabbedPanel;

ModalDialog = React.createFactory(require('./modal-dialog-view'));

TabbedPanel = React.createFactory(require('./tabbed-panel-view'));

module.exports = React.createClass({
  displayName: 'ModalTabbedDialogView',
  render: function() {
    return ModalDialog({
      title: this.props.title,
      close: this.props.close
    }, TabbedPanel({
      clientClass: this.props.clientClass,
      tabs: this.props.tabs
    }));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbW9kYWwtdGFiYmVkLWRpYWxvZy12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL21vZGFsLXRhYmJlZC1kaWFsb2ctdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxXQUFBLEdBQWMsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHFCQUFSLENBQXBCOztBQUNkLFdBQUEsR0FBYyxLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEscUJBQVIsQ0FBcEI7O0FBRWQsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FFZjtFQUFBLFdBQUEsRUFBYSx1QkFBYjtFQUVBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsV0FBQSxDQUFZO01BQUMsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBZjtNQUFzQixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFwQztLQUFaLEVBQ0UsV0FBQSxDQUFZO01BQUMsV0FBQSxFQUFhLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FBckI7TUFBa0MsSUFBQSxFQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBL0M7S0FBWixDQURGO0VBREssQ0FGUjtDQUZlIn0=

},{"./modal-dialog-view":712,"./tabbed-panel-view":736}],716:[function(require,module,exports){
var div;

div = React.DOM.div;

module.exports = React.createClass({
  displayName: 'Modal',
  watchForEscape: function(e) {
    var base;
    if (e.keyCode === 27) {
      return typeof (base = this.props).close === "function" ? base.close() : void 0;
    }
  },
  componentDidMount: function() {
    return $(window).on('keyup', this.watchForEscape);
  },
  componentWillUnmount: function() {
    return $(window).off('keyup', this.watchForEscape);
  },
  render: function() {
    return div({
      className: 'modal'
    }, div({
      className: 'modal-background'
    }), div({
      className: 'modal-content'
    }, this.props.children));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvbW9kYWwtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9tb2RhbC12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFDLE1BQU8sS0FBSyxDQUFDOztBQUVkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsT0FBYjtFQUVBLGNBQUEsRUFBZ0IsU0FBQyxDQUFEO0FBQ2QsUUFBQTtJQUFBLElBQUcsQ0FBQyxDQUFDLE9BQUYsS0FBYSxFQUFoQjttRUFDUSxDQUFDLGlCQURUOztFQURjLENBRmhCO0VBTUEsaUJBQUEsRUFBbUIsU0FBQTtXQUNqQixDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsRUFBVixDQUFhLE9BQWIsRUFBc0IsSUFBQyxDQUFBLGNBQXZCO0VBRGlCLENBTm5CO0VBU0Esb0JBQUEsRUFBc0IsU0FBQTtXQUNwQixDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsR0FBVixDQUFjLE9BQWQsRUFBdUIsSUFBQyxDQUFBLGNBQXhCO0VBRG9CLENBVHRCO0VBWUEsTUFBQSxFQUFRLFNBQUE7V0FDTCxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsT0FBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGtCQUFaO0tBQUosQ0FERixFQUVFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxlQUFaO0tBQUosRUFBa0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUF6QyxDQUZGO0VBREssQ0FaUjtDQUZlIn0=

},{}],717:[function(require,module,exports){
var ColorPicker, ImagePickerView, button, div, h2, i, input, label, optgroup, option, ref, select, tr;

ref = React.DOM, div = ref.div, h2 = ref.h2, label = ref.label, input = ref.input, select = ref.select, option = ref.option, optgroup = ref.optgroup, button = ref.button, i = ref.i;

tr = require("../utils/translate");

ColorPicker = React.createFactory(require('./color-picker-view'));

ImagePickerView = React.createFactory(require('./image-picker-view'));

module.exports = React.createClass({
  displayName: 'NodeInspectorView',
  mixins: [require("../mixins/node-title")],
  changeTitle: function(e) {
    var base, newTitle;
    newTitle = this.cleanupTitle(e.target.value);
    return typeof (base = this.props).onNodeChanged === "function" ? base.onNodeChanged(this.props.node, {
      title: newTitle
    }) : void 0;
  },
  changeImage: function(node) {
    var base;
    return typeof (base = this.props).onNodeChanged === "function" ? base.onNodeChanged(this.props.node, {
      image: node.image,
      paletteItem: node.uuid
    }) : void 0;
  },
  changeColor: function(color) {
    var base;
    return typeof (base = this.props).onNodeChanged === "function" ? base.onNodeChanged(this.props.node, {
      color: color
    }) : void 0;
  },
  "delete": function(e) {
    var base;
    return typeof (base = this.props).onNodeDelete === "function" ? base.onNodeDelete(this.props.node) : void 0;
  },
  render: function() {
    var builtInNodes, displayTitle, droppedNodes, remoteNodes, selected, tabs;
    builtInNodes = [];
    droppedNodes = [];
    remoteNodes = [];
    tabs = [tr('design'), tr('define')];
    selected = tr('design');
    displayTitle = this.displayTitleForInput(this.props.node.title);
    return div({
      className: 'node-inspector-view'
    }, div({
      className: 'inspector-content'
    }, !this.props.node.isTransfer ? (div({
      className: 'edit-row'
    }, label({
      htmlFor: 'title'
    }, tr("~NODE-EDIT.TITLE")), input({
      type: 'text',
      name: 'title',
      value: displayTitle,
      placeholder: this.titlePlaceholder(),
      onChange: this.changeTitle
    })), div({
      className: 'edit-row'
    }, label({
      htmlFor: 'color'
    }, tr("~NODE-EDIT.COLOR")), ColorPicker({
      selected: this.props.node.color,
      onChange: this.changeColor
    })), div({
      className: 'edit-row'
    }, label({
      htmlFor: 'image'
    }, tr("~NODE-EDIT.IMAGE")), ImagePickerView({
      selected: this.props.node,
      onChange: this.changeImage
    }))) : void 0, div({
      className: 'edit-row'
    }, label({
      className: 'node-delete',
      onClick: this["delete"]
    }, i({
      className: "icon-codap-trash"
    }), tr("~NODE-EDIT.DELETE")))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvbm9kZS1pbnNwZWN0b3Itdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9ub2RlLWluc3BlY3Rvci12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQStELEtBQUssQ0FBQyxHQUFyRSxFQUFDLGFBQUQsRUFBTSxXQUFOLEVBQVUsaUJBQVYsRUFBaUIsaUJBQWpCLEVBQXdCLG1CQUF4QixFQUFnQyxtQkFBaEMsRUFBd0MsdUJBQXhDLEVBQWtELG1CQUFsRCxFQUEwRDs7QUFDMUQsRUFBQSxHQUFLLE9BQUEsQ0FBUSxvQkFBUjs7QUFDTCxXQUFBLEdBQWMsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHFCQUFSLENBQXBCOztBQUNkLGVBQUEsR0FBa0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHFCQUFSLENBQXBCOztBQUNsQixNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLG1CQUFiO0VBQ0EsTUFBQSxFQUFRLENBQUMsT0FBQSxDQUFRLHNCQUFSLENBQUQsQ0FEUjtFQUVBLFdBQUEsRUFBYSxTQUFDLENBQUQ7QUFDWCxRQUFBO0lBQUEsUUFBQSxHQUFXLElBQUMsQ0FBQSxZQUFELENBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUF2Qjt5RUFDTCxDQUFDLGNBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNO01BQUMsS0FBQSxFQUFPLFFBQVI7O0VBRnhCLENBRmI7RUFNQSxXQUFBLEVBQWEsU0FBQyxJQUFEO0FBQ1gsUUFBQTt5RUFBTSxDQUFDLGNBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNO01BQUMsS0FBQSxFQUFPLElBQUksQ0FBQyxLQUFiO01BQW9CLFdBQUEsRUFBYSxJQUFJLENBQUMsSUFBdEM7O0VBRHhCLENBTmI7RUFTQSxXQUFBLEVBQWEsU0FBQyxLQUFEO0FBQ1gsUUFBQTt5RUFBTSxDQUFDLGNBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNO01BQUMsS0FBQSxFQUFPLEtBQVI7O0VBRHhCLENBVGI7RUFZQSxDQUFBLE1BQUEsQ0FBQSxFQUFRLFNBQUMsQ0FBRDtBQUNOLFFBQUE7d0VBQU0sQ0FBQyxhQUFjLElBQUMsQ0FBQSxLQUFLLENBQUM7RUFEdEIsQ0FaUjtFQWVBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtJQUFBLFlBQUEsR0FBZTtJQUNmLFlBQUEsR0FBZTtJQUNmLFdBQUEsR0FBYztJQUNkLElBQUEsR0FBTyxDQUFDLEVBQUEsQ0FBRyxRQUFILENBQUQsRUFBZSxFQUFBLENBQUcsUUFBSCxDQUFmO0lBQ1AsUUFBQSxHQUFXLEVBQUEsQ0FBRyxRQUFIO0lBQ1gsWUFBQSxHQUFlLElBQUMsQ0FBQSxvQkFBRCxDQUFzQixJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFsQztXQUVkLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxxQkFBWjtLQUFKLEVBR0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLG1CQUFaO0tBQUosRUFDSSxDQUFJLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQW5CLEdBQ0UsQ0FBQyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsVUFBWjtLQUFKLEVBQ0UsS0FBQSxDQUFNO01BQUMsT0FBQSxFQUFTLE9BQVY7S0FBTixFQUEwQixFQUFBLENBQUcsa0JBQUgsQ0FBMUIsQ0FERixFQUVFLEtBQUEsQ0FBTTtNQUFDLElBQUEsRUFBTSxNQUFQO01BQWUsSUFBQSxFQUFNLE9BQXJCO01BQThCLEtBQUEsRUFBTyxZQUFyQztNQUFtRCxXQUFBLEVBQWEsSUFBQyxDQUFBLGdCQUFELENBQUEsQ0FBaEU7TUFBc0YsUUFBQSxFQUFVLElBQUMsQ0FBQSxXQUFqRztLQUFOLENBRkYsQ0FBRCxFQUlDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxVQUFaO0tBQUosRUFDRSxLQUFBLENBQU07TUFBQyxPQUFBLEVBQVMsT0FBVjtLQUFOLEVBQTBCLEVBQUEsQ0FBRyxrQkFBSCxDQUExQixDQURGLEVBRUUsV0FBQSxDQUFZO01BQUMsUUFBQSxFQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQXZCO01BQStCLFFBQUEsRUFBVSxJQUFDLENBQUEsV0FBMUM7S0FBWixDQUZGLENBSkQsRUFRQyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsVUFBWjtLQUFKLEVBQ0UsS0FBQSxDQUFNO01BQUMsT0FBQSxFQUFTLE9BQVY7S0FBTixFQUEwQixFQUFBLENBQUcsa0JBQUgsQ0FBMUIsQ0FERixFQUVFLGVBQUEsQ0FBZ0I7TUFBQyxRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFsQjtNQUF3QixRQUFBLEVBQVUsSUFBQyxDQUFBLFdBQW5DO0tBQWhCLENBRkYsQ0FSRCxDQURGLEdBQUEsTUFERCxFQWNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxVQUFaO0tBQUosRUFDRSxLQUFBLENBQU07TUFBQyxTQUFBLEVBQVcsYUFBWjtNQUEyQixPQUFBLEVBQVMsSUFBQyxFQUFBLE1BQUEsRUFBckM7S0FBTixFQUNFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyxrQkFBWjtLQUFGLENBREYsRUFFQyxFQUFBLENBQUcsbUJBQUgsQ0FGRCxDQURGLENBZEYsQ0FIRjtFQVJLLENBZlI7Q0FGZSJ9

},{"../mixins/node-title":652,"../utils/translate":689,"./color-picker-view":695,"./image-picker-view":706}],718:[function(require,module,exports){
var NodeSvgGraphView, SimulationStore, div, image, line, path, ref, svg, text, tspan;

ref = React.DOM, svg = ref.svg, path = ref.path, line = ref.line, text = ref.text, div = ref.div, tspan = ref.tspan, image = ref.image;

SimulationStore = require('../stores/simulation-store');

module.exports = NodeSvgGraphView = React.createClass({
  displayName: 'NodeSvgGraphView',
  mixins: [SimulationStore.mixin],
  getDefaultProps: function() {
    return {
      width: 48,
      height: 48,
      strokeWidth: 3,
      min: 0,
      max: 100,
      data: [],
      color: '#aaa'
    };
  },
  invertPoint: function(point) {
    return {
      x: this.props.width - point.x,
      y: this.props.height - point.y
    };
  },
  graphMapPoint: function(point) {
    var x, y;
    x = point.x * this.props.width;
    y = (this.props.strokeWidth - 1) + point.y * (this.props.height - (this.props.strokeWidth + 1));
    return this.invertPoint({
      x: x,
      y: y
    });
  },
  pointsToPath: function(points) {
    var data;
    if (!points.length) {
      return "";
    }
    data = _.map(points, (function(_this) {
      return function(p) {
        return _this.graphMapPoint(p);
      };
    })(this));
    data = _.map(data, function(p) {
      return p.x + " " + p.y;
    });
    data = data.join(" L ");
    return "M " + data;
  },
  getPathPoints: function() {
    var data, j, len, max, min, point, rangex, rangey;
    max = this.props.max;
    min = this.props.min;
    data = this.props.data;
    rangex = SimulationStore.store.simulationDuration();
    data = _.takeRight(data, rangex).reverse();
    for (j = 0, len = data.length; j < len; j++) {
      point = data[j];
      if (point > max) {
        max = point;
      }
      if (point < min) {
        min = point;
      }
    }
    rangey = max - min;
    data = _.map(data, function(d, i) {
      var x, y;
      x = i / rangex;
      y = d / rangey;
      return {
        x: x,
        y: y
      };
    });
    return data;
  },
  renderImage: function() {
    var imageOffset, imageStyle;
    imageOffset = 2;
    imageStyle = {
      position: "absolute",
      top: imageOffset,
      left: imageOffset,
      opacity: 0.25,
      width: this.props.width + imageOffset,
      height: this.props.height + imageOffset
    };
    return div({
      style: imageStyle
    }, this.props.image);
  },
  renderSVG: function() {
    var svgOffset, svgStyle;
    svgOffset = 3;
    svgStyle = {
      position: "absolute",
      top: svgOffset,
      left: svgOffset
    };
    return svg({
      style: svgStyle,
      width: this.props.width,
      height: this.props.height
    }, path({
      d: this.pointsToPath(this.getPathPoints()),
      strokeWidth: this.props.strokeWidth,
      stroke: this.props.color,
      fill: "none"
    }));
  },
  render: function() {
    return div({}, this.renderImage(), this.renderSVG());
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvbm9kZS1zdmctZ3JhcGgtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9ub2RlLXN2Zy1ncmFwaC12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQTZDLEtBQUssQ0FBQyxHQUFuRCxFQUFDLGFBQUQsRUFBTSxlQUFOLEVBQVksZUFBWixFQUFrQixlQUFsQixFQUF3QixhQUF4QixFQUE2QixpQkFBN0IsRUFBb0M7O0FBRXBDLGVBQUEsR0FBa0IsT0FBQSxDQUFRLDRCQUFSOztBQUVsQixNQUFNLENBQUMsT0FBUCxHQUFpQixnQkFBQSxHQUFtQixLQUFLLENBQUMsV0FBTixDQUNsQztFQUFBLFdBQUEsRUFBYSxrQkFBYjtFQUNBLE1BQUEsRUFBUSxDQUFFLGVBQWUsQ0FBQyxLQUFsQixDQURSO0VBR0EsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxLQUFBLEVBQU8sRUFBUDtNQUNBLE1BQUEsRUFBUSxFQURSO01BRUEsV0FBQSxFQUFhLENBRmI7TUFHQSxHQUFBLEVBQUssQ0FITDtNQUlBLEdBQUEsRUFBSyxHQUpMO01BS0EsSUFBQSxFQUFNLEVBTE47TUFNQSxLQUFBLEVBQU8sTUFOUDs7RUFEZSxDQUhqQjtFQVlBLFdBQUEsRUFBYSxTQUFDLEtBQUQ7V0FDWDtNQUFDLENBQUEsRUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBZSxLQUFLLENBQUMsQ0FBekI7TUFBNEIsQ0FBQSxFQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxHQUFnQixLQUFLLENBQUMsQ0FBckQ7O0VBRFcsQ0FaYjtFQWVBLGFBQUEsRUFBZSxTQUFDLEtBQUQ7QUFDYixRQUFBO0lBQUEsQ0FBQSxHQUFJLEtBQUssQ0FBQyxDQUFOLEdBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUNyQixDQUFBLEdBQUksQ0FBQyxJQUFDLENBQUEsS0FBSyxDQUFDLFdBQVAsR0FBbUIsQ0FBcEIsQ0FBQSxHQUF5QixLQUFLLENBQUMsQ0FBTixHQUFVLENBQUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLEdBQWdCLENBQUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFQLEdBQW1CLENBQXBCLENBQWpCO1dBQ3ZDLElBQUMsQ0FBQSxXQUFELENBQWE7TUFBQSxDQUFBLEVBQUUsQ0FBRjtNQUFLLENBQUEsRUFBRSxDQUFQO0tBQWI7RUFIYSxDQWZmO0VBb0JBLFlBQUEsRUFBYyxTQUFDLE1BQUQ7QUFDWixRQUFBO0lBQUEsSUFBQSxDQUFpQixNQUFNLENBQUMsTUFBeEI7QUFBQSxhQUFPLEdBQVA7O0lBQ0EsSUFBQSxHQUFPLENBQUMsQ0FBQyxHQUFGLENBQU0sTUFBTixFQUFjLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO2VBQU8sS0FBQyxDQUFBLGFBQUQsQ0FBZSxDQUFmO01BQVA7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWQ7SUFDUCxJQUFBLEdBQU8sQ0FBQyxDQUFDLEdBQUYsQ0FBTSxJQUFOLEVBQWMsU0FBQyxDQUFEO2FBQVUsQ0FBQyxDQUFDLENBQUgsR0FBSyxHQUFMLEdBQVEsQ0FBQyxDQUFDO0lBQW5CLENBQWQ7SUFDUCxJQUFBLEdBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxLQUFWO1dBQ1AsSUFBQSxHQUFLO0VBTE8sQ0FwQmQ7RUEyQkEsYUFBQSxFQUFlLFNBQUE7QUFDYixRQUFBO0lBQUEsR0FBQSxHQUFPLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFDZCxHQUFBLEdBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQztJQUNkLElBQUEsR0FBTyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBRWQsTUFBQSxHQUFTLGVBQWUsQ0FBQyxLQUFLLENBQUMsa0JBQXRCLENBQUE7SUFDVCxJQUFBLEdBQU8sQ0FBQyxDQUFDLFNBQUYsQ0FBWSxJQUFaLEVBQWtCLE1BQWxCLENBQXlCLENBQUMsT0FBMUIsQ0FBQTtBQUVQLFNBQUEsc0NBQUE7O01BQ0UsSUFBRyxLQUFBLEdBQVEsR0FBWDtRQUFvQixHQUFBLEdBQU0sTUFBMUI7O01BQ0EsSUFBRyxLQUFBLEdBQVEsR0FBWDtRQUFvQixHQUFBLEdBQU0sTUFBMUI7O0FBRkY7SUFHQSxNQUFBLEdBQVMsR0FBQSxHQUFNO0lBRWYsSUFBQSxHQUFPLENBQUMsQ0FBQyxHQUFGLENBQU0sSUFBTixFQUFZLFNBQUMsQ0FBRCxFQUFJLENBQUo7QUFDakIsVUFBQTtNQUFBLENBQUEsR0FBSSxDQUFBLEdBQUk7TUFDUixDQUFBLEdBQUksQ0FBQSxHQUFJO2FBQ1I7UUFBQyxDQUFBLEVBQUcsQ0FBSjtRQUFPLENBQUEsRUFBRyxDQUFWOztJQUhpQixDQUFaO1dBSVA7RUFqQmEsQ0EzQmY7RUE4Q0EsV0FBQSxFQUFhLFNBQUE7QUFDWCxRQUFBO0lBQUEsV0FBQSxHQUFjO0lBQ2QsVUFBQSxHQUNFO01BQUEsUUFBQSxFQUFVLFVBQVY7TUFDQSxHQUFBLEVBQUssV0FETDtNQUVBLElBQUEsRUFBTSxXQUZOO01BR0EsT0FBQSxFQUFTLElBSFQ7TUFJQSxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEdBQWUsV0FKdEI7TUFLQSxNQUFBLEVBQVEsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLEdBQWdCLFdBTHhCOztXQU9ELEdBQUEsQ0FBSTtNQUFDLEtBQUEsRUFBTyxVQUFSO0tBQUosRUFBeUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFoQztFQVZVLENBOUNiO0VBMERBLFNBQUEsRUFBVyxTQUFBO0FBQ1QsUUFBQTtJQUFBLFNBQUEsR0FBWTtJQUNaLFFBQUEsR0FDRTtNQUFBLFFBQUEsRUFBVSxVQUFWO01BQ0EsR0FBQSxFQUFLLFNBREw7TUFFQSxJQUFBLEVBQU0sU0FGTjs7V0FHRCxHQUFBLENBQUk7TUFBQyxLQUFBLEVBQU8sUUFBUjtNQUFrQixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFoQztNQUF1QyxNQUFBLEVBQVEsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUF0RDtLQUFKLEVBQ0UsSUFBQSxDQUFLO01BQUMsQ0FBQSxFQUFHLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLGFBQUQsQ0FBQSxDQUFkLENBQUo7TUFBcUMsV0FBQSxFQUFhLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FBekQ7TUFBc0UsTUFBQSxFQUFRLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBckY7TUFBNEYsSUFBQSxFQUFNLE1BQWxHO0tBQUwsQ0FERjtFQU5RLENBMURYO0VBb0VBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsR0FBQSxDQUFJLEVBQUosRUFDQyxJQUFDLENBQUEsV0FBRCxDQUFBLENBREQsRUFFQyxJQUFDLENBQUEsU0FBRCxDQUFBLENBRkQ7RUFESyxDQXBFUjtDQURrQyJ9

},{"../stores/simulation-store":671}],719:[function(require,module,exports){
var AppSettingsStore, SimulationStore, div, h2, i, input, label, p, ref, span, tr;

ref = React.DOM, div = ref.div, h2 = ref.h2, label = ref.label, span = ref.span, input = ref.input, p = ref.p, i = ref.i;

SimulationStore = require('../stores/simulation-store');

AppSettingsStore = require('../stores/app-settings-store');

tr = require("../utils/translate");

module.exports = React.createClass({
  displayName: 'NodeValueInspectorView',
  mixins: [SimulationStore.mixin, AppSettingsStore.mixin],
  propTypes: {
    max: React.PropTypes.number,
    min: React.PropTypes.number,
    onChange: React.PropTypes.func
  },
  getInitialState: function() {
    return {
      'editing-min': false,
      'editing-max': false,
      'min-value': this.props.node.min,
      'max-value': this.props.node.max
    };
  },
  componentWillReceiveProps: function() {
    return this.setState({
      'min-value': this.props.node.min,
      'max-value': this.props.node.max
    });
  },
  trim: function(inputValue) {
    return Math.max(this.props.node.min, Math.min(this.props.node.max, inputValue));
  },
  updateValue: function(evt) {
    var value;
    if (this.state.modelIsRunning && !this.props.node.canEditValueWhileRunning()) {
      return;
    }
    if (value = evt.target.value) {
      value = this.trim(parseInt(value));
      return this.props.graphStore.changeNode({
        initialValue: value
      });
    }
  },
  updateAccumulatorChecked: function(evt) {
    var value;
    value = evt.target.checked;
    this.props.graphStore.changeNode({
      isAccumulator: value
    });
    return SimulationStore.actions.toggledCollectorTo(value);
  },
  updateNegativeValuesAllowed: function(evt) {
    var value;
    value = evt.target.checked;
    return this.props.graphStore.changeNode({
      allowNegativeValues: value
    });
  },
  updateDefiningType: function() {
    return this.props.graphStore.changeNode({
      valueDefinedSemiQuantitatively: !this.props.node.valueDefinedSemiQuantitatively
    });
  },
  selectText: function(evt) {
    return evt.target.select();
  },
  renderEditableProperty: function(property, classNames) {
    var keyDown, swapState, updateProperty;
    swapState = (function(_this) {
      return function() {
        var obj;
        if (_this.state["editing-" + property]) {
          _this.props.graphStore.changeNodeProperty(property, _this.state[property + "-value"]);
        }
        return _this.setState((
          obj = {},
          obj["editing-" + property] = !_this.state["editing-" + property],
          obj
        ), function() {
          var ref1;
          return (ref1 = this.refs.focusable) != null ? ref1.focus() : void 0;
        });
      };
    })(this);
    updateProperty = (function(_this) {
      return function(evt) {
        var obj, value;
        value = parseInt(evt.target.value);
        if (value != null) {
          return _this.setState((
            obj = {},
            obj[property + "-value"] = value,
            obj
          ));
        }
      };
    })(this);
    keyDown = function(evt) {
      if (evt.key === 'Enter') {
        return swapState();
      }
    };
    if (!this.state["editing-" + property]) {
      return div({
        className: "half small editable-prop " + classNames,
        onClick: swapState
      }, this.state[property + "-value"]);
    } else {
      return input({
        className: "half small editable-prop " + classNames,
        type: 'number',
        value: this.state[property + "-value"],
        onChange: updateProperty,
        onBlur: swapState,
        onKeyDown: keyDown,
        ref: 'focusable'
      });
    }
  },
  renderMinAndMax: function(node) {
    if (node.valueDefinedSemiQuantitatively) {
      return div({
        className: "group full"
      }, label({
        className: "left half small"
      }, tr("~NODE-VALUE-EDIT.LOW")), label({
        className: "right half small"
      }, tr("~NODE-VALUE-EDIT.HIGH")));
    } else {
      return div({
        className: "group full"
      }, this.renderEditableProperty("min", "left"), this.renderEditableProperty("max", "right"));
    }
  },
  renderCollectorOptions: function(node) {
    var isChecked, positiveCheckbox, tooltip;
    if (this.state.complexity !== AppSettingsStore.store.Complexity.collectors) {
      return null;
    }
    isChecked = !this.state.capNodeValues && node.allowNegativeValues;
    tooltip = this.state.capNodeValues ? tr("~NODE-VALUE-EDIT.RESTRICT_POSITIVE_DISABLED_TOOLTIP") : (isChecked ? tr("~NODE-VALUE-EDIT.RESTRICT_POSITIVE_CHECKED_TOOLTIP") : tr("~NODE-VALUE-EDIT.RESTRICT_POSITIVE_UNCHECKED_TOOLTIP"));
    positiveCheckbox = label({
      className: this.state.capNodeValues ? 'disabled' : '',
      title: tooltip,
      key: 'positive-label'
    }, [
      input({
        key: 'positive-checkbox',
        type: 'checkbox',
        checked: isChecked,
        disabled: this.state.capNodeValues,
        onChange: this.state.capNodeValues ? null : this.updateNegativeValuesAllowed
      }), tr("~NODE-VALUE-EDIT.RESTRICT_POSITIVE")
    ]);
    return span({
      className: "checkbox group full"
    }, label({
      key: 'accumulator-label'
    }, [
      input({
        key: 'accumulator-checkbox',
        type: 'checkbox',
        checked: node.isAccumulator,
        onChange: this.updateAccumulatorChecked
      }), tr("~NODE-VALUE-EDIT.IS_ACCUMULATOR")
    ]), node.isAccumulator ? positiveCheckbox : null);
  },
  render: function() {
    var node;
    node = this.props.node;
    return div({
      className: 'value-inspector'
    }, div({
      className: 'inspector-content group'
    }, div({
      className: 'full'
    }, !node.valueDefinedSemiQuantitatively ? span({
      className: 'full'
    }, label({
      className: 'right'
    }, tr("~NODE-VALUE-EDIT.INITIAL-VALUE")), input({
      className: 'left',
      type: "number",
      min: "" + node.min,
      max: "" + node.max,
      value: "" + node.initialValue,
      onClick: this.selectText,
      onChange: this.updateValue
    })) : void 0, div({
      className: "slider group full"
    }, input({
      className: "full",
      type: "range",
      min: "" + node.min,
      max: "" + node.max,
      value: "" + node.initialValue,
      onChange: this.updateValue
    }), this.renderMinAndMax(node))), !node.isTransfer ? this.renderCollectorOptions(node) : void 0), div({
      className: "bottom-pane"
    }, p({}, node.valueDefinedSemiQuantitatively ? tr("~NODE-VALUE-EDIT.DEFINING_WITH_WORDS") : tr("~NODE-VALUE-EDIT.DEFINING_WITH_NUMBERS")), p({}, label({
      className: 'node-switch-edit-mode',
      onClick: this.updateDefiningType
    }, node.valueDefinedSemiQuantitatively ? tr("~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_NUMBERS") : tr("~NODE-VALUE-EDIT.SWITCH_TO_DEFINING_WITH_WORDS")))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../stores/app-settings-store":662,"../stores/simulation-store":671,"../utils/translate":689}],720:[function(require,module,exports){
var CodapConnect, DEFAULT_CONTEXT_NAME, GraphView, InspectorPanelStore, NodeTitle, NodeView, SimulationActions, SliderView, SquareImage, StackedImage, div, groupView, i, img, input, label, myView, ref, span, tr;

ref = React.DOM, input = ref.input, div = ref.div, i = ref.i, img = ref.img, span = ref.span, label = ref.label, img = ref.img;

tr = require("../utils/translate");

SimulationActions = require("../stores/simulation-store").actions;

SquareImage = React.createFactory(require("./square-image-view"));

StackedImage = React.createFactory(require("./stacked-image-view"));

SliderView = React.createFactory(require("./value-slider-view"));

GraphView = React.createFactory(require("./node-svg-graph-view"));

CodapConnect = require('../models/codap-connect');

DEFAULT_CONTEXT_NAME = 'building-models';

InspectorPanelStore = require("../stores/inspector-panel-store");

NodeTitle = React.createFactory(React.createClass({
  displayName: "NodeTitle",
  mixins: [require('../mixins/node-title')],
  getInitialState: function() {
    return {
      isUniqueTitle: this.isUniqueTitle(this.props.node.title)
    };
  },
  isUniqueTitle: function(title) {
    return this.props.graphStore.isUniqueTitle(title, this.props.node);
  },
  componentWillUnmount: function() {
    if (this.props.isEditing) {
      return this.inputElm().off();
    }
  },
  componentWillUpdate: function(nextProps) {
    if (this.props.isEditing && !nextProps.isEditing) {
      return this.titleUpdated = true;
    }
  },
  componentDidUpdate: function() {
    var $elem, enterKey;
    if (this.props.isEditing) {
      $elem = this.inputElm();
      $elem.focus();
      $elem.off();
      enterKey = 13;
      return $elem.on("keyup", (function(_this) {
        return function(e) {
          if (e.which === enterKey) {
            return _this.finishEditing();
          }
        };
      })(this));
    }
  },
  inputElm: function() {
    return $(this.refs.input);
  },
  inputValue: function() {
    return this.inputElm().val();
  },
  detectDeleteWhenEmpty: function(e) {
    var ref1;
    if (((ref1 = e.which) === 8 || ref1 === 46) && !this.titleUpdated) {
      return this.props.graphStore.removeNode(this.props.nodeKey);
    }
  },
  updateTitle: function(isComplete) {
    var newTitle;
    this.titleUpdated = true;
    newTitle = this.cleanupTitle(this.inputValue(), isComplete);
    this.setState({
      isUniqueTitle: this.isUniqueTitle(newTitle)
    });
    return this.props.onChange(newTitle, isComplete);
  },
  finishEditing: function() {
    this.updateTitle(true);
    return this.props.onStopEditing();
  },
  renderTitle: function() {
    return div({
      className: "node-title" + (this.isDefaultTitle ? ' untitled' : ''),
      key: "display",
      style: {
        display: this.props.isEditing ? "none" : "block"
      },
      onClick: this.props.onStartEditing
    }, this.props.title);
  },
  renderTitleInput: function() {
    var canDeleteWhenEmpty, className, displayTitle;
    displayTitle = this.displayTitleForInput(this.props.title);
    canDeleteWhenEmpty = this.props.node.addedThisSession && !this.titleUpdated;
    className = "node-title" + (!this.state.isUniqueTitle ? ' non-unique-title' : '');
    return input({
      type: "text",
      ref: "input",
      key: "edit",
      style: {
        display: this.props.isEditing ? "block" : "none"
      },
      className: className,
      onKeyUp: canDeleteWhenEmpty ? this.detectDeleteWhenEmpty : null,
      onChange: (function(_this) {
        return function() {
          return _this.updateTitle();
        };
      })(this),
      value: displayTitle,
      maxLength: this.maxTitleLength(),
      placeholder: this.titlePlaceholder(),
      onBlur: (function(_this) {
        return function() {
          return _this.finishEditing();
        };
      })(this)
    });
  },
  render: function() {
    return div({
      className: 'node-title-box'
    }, [this.renderTitle(), this.renderTitleInput()]);
  }
}));

module.exports = NodeView = React.createClass({
  displayName: "NodeView",
  componentDidUpdate: function() {
    var $elem, handle;
    handle = '.img-background';
    if (this.props.selected) {
      handle = null;
    }
    $elem = $(this.refs.node);
    return $elem.draggable("option", "handle", handle);
  },
  componentDidMount: function() {
    var $elem;
    $elem = $(this.refs.node);
    return $elem.draggable({
      drag: this.doMove,
      stop: this.doStop,
      containment: "parent"
    });
  },
  getInitialState: function() {
    return {
      editingNodeTitle: false,
      ignoreDrag: false,
      isTransfer: this.props.data.isTransfer
    };
  },
  handleSelected: function(actually_select, evt) {
    var multipleSelections, now, selectionKey;
    if (!this.props.selectionManager) {
      return;
    }
    selectionKey = actually_select ? this.props.nodeKey : "dont-select-anything";
    multipleSelections = evt.ctrlKey || evt.metaKey || evt.shiftKey;
    this.props.selectionManager.selectNodeForInspection(this.props.data, multipleSelections);
    if (this.props.data.inLinks().length > 0) {
      now = (new Date()).getTime();
      if (now - (this.lastClickLinkTime || 0) <= 250) {
        InspectorPanelStore.actions.openInspectorPanel('relations');
      }
      return this.lastClickLinkTime = now;
    }
  },
  propTypes: {
    onDelete: React.PropTypes.func,
    onMove: React.PropTypes.func,
    onSelect: React.PropTypes.func,
    nodeKey: React.PropTypes.string
  },
  getDefaultProps: function() {
    return {
      onMove: function() {
        return log.info("internal move handler");
      },
      onStop: function() {
        return log.info("internal move handler");
      },
      onDelete: function() {
        return log.info("internal on-delete handler");
      },
      onSelect: function() {
        return log.info("internal select handler");
      },
      selected: false,
      simulating: false,
      value: null,
      dataColor: "#aaa",
      data: {
        title: "foo",
        x: 10,
        y: 10,
        color: "dark-blue"
      }
    };
  },
  doMove: function(evt, extra) {
    this.props.onMove({
      nodeKey: this.props.nodeKey,
      reactComponent: this,
      domElement: this.refs.node,
      syntheticEvent: evt,
      extra: extra
    });
    return !this.state.ignoreDrag;
  },
  doStop: function(evt, extra) {
    return this.props.onMoveComplete({
      nodeKey: this.props.nodeKey,
      reactComponent: this,
      domElement: this.refs.node,
      syntheticEvent: evt,
      extra: extra
    });
  },
  doDelete: function(evt) {
    return this.props.onDelete({
      nodeKey: this.props.nodeKey,
      reactComponent: this,
      domElement: this.refs.node,
      syntheticEvent: evt
    });
  },
  changeValue: function(newValue) {
    return this.props.graphStore.changeNodeWithKey(this.props.nodeKey, {
      initialValue: newValue
    });
  },
  changeTitle: function(newTitle, isComplete) {
    if (isComplete) {
      newTitle = this.props.graphStore.ensureUniqueTitle(this.props.data, newTitle);
    }
    this.props.graphStore.startNodeEdit();
    log.info("Title is changing to " + newTitle);
    return this.props.graphStore.changeNodeWithKey(this.props.nodeKey, {
      title: newTitle
    });
  },
  startEditing: function() {
    this.initialTitle = this.props.graphStore.nodeKeys[this.props.nodeKey].title;
    return this.props.selectionManager.selectNodeForTitleEditing(this.props.data);
  },
  stopEditing: function() {
    this.props.graphStore.endNodeEdit();
    return this.props.selectionManager.clearTitleEditing();
  },
  isEditing: function() {
    return this.props.selectionManager.isSelectedForTitleEditing(this.props.data);
  },
  renderValue: function() {
    var value;
    value = this.props.data.value || this.props.data.initialValue;
    value = Math.round(value);
    return div({
      className: "value"
    }, label({}, tr("~NODE.SIMULATION.VALUE")), input({
      type: "text",
      className: "value",
      value: value
    }));
  },
  handleSliderDragStart: function() {
    return this.setState({
      ignoreDrag: true
    });
  },
  handleSliderDragEnd: function() {
    return this.setState({
      ignoreDrag: false
    });
  },
  renderSliderView: function() {
    var ref1, showHandle, value;
    showHandle = this.props.data.canEditInitialValue();
    value = (ref1 = this.props.data.currentValue) != null ? ref1 : this.props.data.initialValue;
    if (showHandle) {
      value = this.props.data.initialValue;
    }
    return SliderView({
      orientation: "vertical",
      filled: true,
      height: 44,
      width: 15,
      showHandle: showHandle,
      showLabels: false,
      onValueChange: this.changeValue,
      value: value,
      displaySemiQuant: this.props.data.valueDefinedSemiQuantitatively,
      max: this.props.data.max,
      min: this.props.data.min,
      onSliderDragStart: this.handleSliderDragStart,
      onSliderDragEnd: this.handleSliderDragEnd,
      color: this.props.dataColor
    });
  },
  handleGraphClick: function(attributeName) {
    var codapConnect;
    codapConnect = CodapConnect.instance(DEFAULT_CONTEXT_NAME);
    return codapConnect.createGraph(attributeName);
  },
  nodeClasses: function() {
    var classes;
    classes = ['elm'];
    if (this.props.selected) {
      classes.push("selected");
    }
    return classes.join(" ");
  },
  topClasses: function() {
    var classes;
    classes = ['top'];
    classes.push("link-top");
    return classes.join(" ");
  },
  linkTargetClasses: function() {
    var classes;
    classes = ['link-target'];
    if (this.props.simulating) {
      classes.push("simulate");
    }
    return classes.join(" ");
  },
  nodeSliderClasses: function() {
    if (this.props.simulating && this.props.data.canEditInitialValue()) {
      return "slider";
    } else {
      return "";
    }
  },
  renderNodeInternal: function() {
    var getNodeImage, nodeImage;
    getNodeImage = function(node) {
      if (node.isAccumulator) {
        return StackedImage({
          image: node.image,
          imageProps: node.collectorImageProps()
        });
      } else {
        return SquareImage({
          image: node.isTransfer ? 'img/nodes/transfer.png' : node.image
        });
      }
    };
    nodeImage = getNodeImage(this.props.data);
    if (this.props.showMinigraph) {
      return GraphView({
        min: this.props.data.min,
        max: this.props.data.max,
        data: this.props.data.frames,
        color: this.props.dataColor,
        image: nodeImage
      });
    } else {
      return nodeImage;
    }
  },
  render: function() {
    var fullWidthBackgroundClass, style;
    style = {
      top: this.props.data.y,
      left: this.props.data.x,
      "color": this.props.data.color
    };
    fullWidthBackgroundClass = this.props.data.isTransfer ? "full-width" : "";
    return div({
      className: this.nodeClasses(),
      ref: "node",
      style: style
    }, div({
      className: this.linkTargetClasses(),
      "data-node-key": this.props.nodeKey
    }, div({}, div({
      className: "actions"
    }, div({
      className: "connection-source action-circle icon-codap-link",
      "data-node-key": this.props.nodeKey
    }), this.props.showGraphButton ? div({
      className: "graph-source action-circle icon-codap-graph",
      onClick: ((function(_this) {
        return function() {
          return _this.handleGraphClick(_this.props.data.title);
        };
      })(this))
    }) : void 0), div({
      className: this.topClasses(),
      "data-node-key": this.props.nodeKey
    }, div({
      className: "img-background transfer-target " + fullWidthBackgroundClass,
      onClick: ((function(_this) {
        return function(evt) {
          return _this.handleSelected(true, evt);
        };
      })(this)),
      onTouchEnd: ((function(_this) {
        return function() {
          return _this.handleSelected(true);
        };
      })(this))
    }, this.renderNodeInternal()), this.props.data.isTransfer ? div({
      className: "node-title"
    }) : NodeTitle({
      isEditing: this.props.editTitle,
      title: this.props.data.title,
      onChange: this.changeTitle,
      onStopEditing: this.stopEditing,
      onStartEditing: this.startEditing,
      node: this.props.data,
      nodeKey: this.props.nodeKey,
      graphStore: this.props.graphStore
    }))), div({
      className: this.nodeSliderClasses(),
      "data-node-key": this.props.nodeKey
    }, this.props.simulating ? div({}, this.renderSliderView()) : void 0)));
  }
});

NodeView.nodeImageOffset = function() {
  var elementTopMargin, linkTargetTopMargin;
  linkTargetTopMargin = 6;
  elementTopMargin = 6;
  return {
    left: 0,
    top: linkTargetTopMargin + elementTopMargin
  };
};

myView = React.createFactory(NodeView);

groupView = React.createFactory(React.createClass({
  render: function() {
    var selectSimulated, selected, simulated, unselected;
    selectSimulated = {
      selected: true,
      simulating: true,
      data: {
        x: 50,
        y: 100,
        title: "selectSimulated"
      }
    };
    simulated = _.clone(selectSimulated, true);
    simulated.selected = false;
    simulated.data.x = 300;
    selected = _.clone(selectSimulated, true);
    selected.simulating = false;
    selected.data.x = 500;
    selected.data.title = "selected";
    unselected = _.clone(selected, true);
    unselected.selected = false;
    unselected.data.x = 800;
    unselected.data.title = "unselected";
    return div({
      className: "group"
    }, myView(selectSimulated), myView(simulated), myView(selected), myView(unselected));
  }
}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../mixins/node-title":652,"../models/codap-connect":653,"../stores/inspector-panel-store":667,"../stores/simulation-store":671,"../utils/translate":689,"./node-svg-graph-view":718,"./square-image-view":733,"./stacked-image-view":734,"./value-slider-view":737}],721:[function(require,module,exports){
var PaletteInspectorView, PaletteStore, div;

PaletteInspectorView = React.createFactory(require('./palette-inspector-view'));

PaletteStore = require('../stores/palette-store');

div = React.DOM.div;

module.exports = React.createClass({
  displayName: 'NodeWell',
  mixins: [PaletteStore.mixin],
  getInitialState: function() {
    return {
      nodes: [],
      collapsed: true
    };
  },
  collapse: function() {
    return this.setState({
      collapsed: true
    });
  },
  expand: function() {
    return this.setState({
      collapsed: false
    });
  },
  toggle: function() {
    if (this.state.collapsed) {
      return this.expand();
    } else {
      return this.collapse();
    }
  },
  render: function() {
    var topNodePaletteClass, topNodeTabPaletteClass;
    topNodePaletteClass = 'top-node-palette-wrapper';
    topNodeTabPaletteClass = 'top-node-palette-tab';
    if (this.state.collapsed) {
      topNodePaletteClass = 'top-node-palette-wrapper collapsed';
      topNodeTabPaletteClass = 'top-node-palette-tab collapsed';
    }
    return div({
      className: 'wrapperwrapper'
    }, div({
      className: topNodePaletteClass
    }, PaletteInspectorView({
      toggleImageBrowser: this.props.toggleImageBrowser,
      graphStore: this.props.graphStore
    })), div({
      className: 'tab-wrapper'
    }, div({
      className: topNodeTabPaletteClass,
      onClick: this.toggle
    })));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvbm9kZS13ZWxsLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvbm9kZS13ZWxsLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsb0JBQUEsR0FBd0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLDBCQUFSLENBQXBCOztBQUN4QixZQUFBLEdBQWUsT0FBQSxDQUFRLHlCQUFSOztBQUNkLE1BQU8sS0FBSyxDQUFDOztBQUVkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsVUFBYjtFQUVBLE1BQUEsRUFBUSxDQUFFLFlBQVksQ0FBQyxLQUFmLENBRlI7RUFJQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLEtBQUEsRUFBTyxFQUFQO01BQ0EsU0FBQSxFQUFXLElBRFg7O0VBRGUsQ0FKakI7RUFRQSxRQUFBLEVBQVUsU0FBQTtXQUNSLElBQUMsQ0FBQSxRQUFELENBQVU7TUFBQSxTQUFBLEVBQVcsSUFBWDtLQUFWO0VBRFEsQ0FSVjtFQVdBLE1BQUEsRUFBUSxTQUFBO1dBQ04sSUFBQyxDQUFBLFFBQUQsQ0FBVTtNQUFBLFNBQUEsRUFBVyxLQUFYO0tBQVY7RUFETSxDQVhSO0VBY0EsTUFBQSxFQUFRLFNBQUE7SUFDTixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBVjthQUNFLElBQUMsQ0FBQSxNQUFELENBQUEsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsUUFBRCxDQUFBLEVBSEY7O0VBRE0sQ0FkUjtFQW9CQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxtQkFBQSxHQUF5QjtJQUN6QixzQkFBQSxHQUF5QjtJQUN6QixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBVjtNQUNFLG1CQUFBLEdBQXlCO01BQ3pCLHNCQUFBLEdBQXlCLGlDQUYzQjs7V0FHQyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsZ0JBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxtQkFBWjtLQUFKLEVBQ0Usb0JBQUEsQ0FBcUI7TUFDcEIsa0JBQUEsRUFBb0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxrQkFEUDtNQUVwQixVQUFBLEVBQVksSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUZDO0tBQXJCLENBREYsQ0FERixFQU9FLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxhQUFaO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsc0JBQVo7TUFBb0MsT0FBQSxFQUFTLElBQUMsQ0FBQSxNQUE5QztLQUFKLENBREYsQ0FQRjtFQU5LLENBcEJSO0NBRmUifQ==

},{"../stores/palette-store":670,"./palette-inspector-view":725}],722:[function(require,module,exports){
var Dropdown, a, ref, span, tr;

ref = React.DOM, a = ref.a, span = ref.span;

tr = require('../utils/translate');

Dropdown = React.createFactory(require('./dropdown-view'));

module.exports = React.createClass({
  displayName: 'OpenInCodap',
  getDefaultProps: function() {
    return {
      linkTitle: tr('~OPEN_IN_CODAP.TITLE'),
      codapUrl: "http://codap.concord.org/releases/latest/static/dg/en/cert/index.html",
      documentServer: "http://document-store.herokuapp.com/",
      openInNewWindow: true
    };
  },
  thisEncodedUrl: function() {
    return encodeURIComponent(window.location.toString());
  },
  link: function() {
    return this.props.codapUrl + "?documentServer=" + this.props.documentServer + "&di=" + (this.thisEncodedUrl());
  },
  render: function() {
    var opts;
    opts = {
      href: this.link()
    };
    if (this.props.openInNewWindow) {
      opts.target = "_blank";
    }
    if (this.props.disabled) {
      opts.className = "disabled";
      opts.disabled = true;
      opts.onClick = function(e) {
        e.preventDefault();
        return alert(tr("~OPEN_IN_CODAP.DISABLED"));
      };
    }
    return span({
      className: 'link'
    }, a(opts, this.props.linkTitle));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvb3Blbi1pbi1jb2RhcC12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL29wZW4taW4tY29kYXAtdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxNQUFZLEtBQUssQ0FBQyxHQUFsQixFQUFDLFNBQUQsRUFBSTs7QUFDSixFQUFBLEdBQUssT0FBQSxDQUFRLG9CQUFSOztBQUVMLFFBQUEsR0FBVyxLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsaUJBQVIsQ0FBcEI7O0FBQ1gsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FFZjtFQUFBLFdBQUEsRUFBYSxhQUFiO0VBRUEsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxTQUFBLEVBQVcsRUFBQSxDQUFHLHNCQUFILENBQVg7TUFDQSxRQUFBLEVBQVUsdUVBRFY7TUFFQSxjQUFBLEVBQWdCLHNDQUZoQjtNQUdBLGVBQUEsRUFBaUIsSUFIakI7O0VBRGUsQ0FGakI7RUFRQSxjQUFBLEVBQWdCLFNBQUE7V0FDZCxrQkFBQSxDQUFtQixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQWhCLENBQUEsQ0FBbkI7RUFEYyxDQVJoQjtFQVdBLElBQUEsRUFBTSxTQUFBO1dBQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFSLEdBQWlCLGtCQUFqQixHQUFtQyxJQUFDLENBQUEsS0FBSyxDQUFDLGNBQTFDLEdBQXlELE1BQXpELEdBQThELENBQUMsSUFBQyxDQUFBLGNBQUQsQ0FBQSxDQUFEO0VBRDVELENBWE47RUFjQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxJQUFBLEdBQU87TUFBRSxJQUFBLEVBQU0sSUFBQyxDQUFBLElBQUQsQ0FBQSxDQUFSOztJQUVQLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxlQUFWO01BQ0UsSUFBSSxDQUFDLE1BQUwsR0FBYyxTQURoQjs7SUFHQSxJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBVjtNQUNFLElBQUksQ0FBQyxTQUFMLEdBQWlCO01BQ2pCLElBQUksQ0FBQyxRQUFMLEdBQWdCO01BQ2hCLElBQUksQ0FBQyxPQUFMLEdBQWUsU0FBQyxDQUFEO1FBQ2IsQ0FBQyxDQUFDLGNBQUYsQ0FBQTtlQUNBLEtBQUEsQ0FBTSxFQUFBLENBQUcseUJBQUgsQ0FBTjtNQUZhLEVBSGpCOztXQU9DLElBQUEsQ0FBSztNQUFDLFNBQUEsRUFBVyxNQUFaO0tBQUwsRUFDRSxDQUFBLENBQUUsSUFBRixFQUFRLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBZixDQURGO0VBYkssQ0FkUjtDQUZlIn0=

},{"../utils/translate":689,"./dropdown-view":697}],723:[function(require,module,exports){
var Draggable, ImageDialogStore, div, tr;

ImageDialogStore = require("../stores/image-dialog-store");

Draggable = require('../mixins/draggable');

tr = require("../utils/translate");

div = React.DOM.div;

module.exports = React.createClass({
  displayName: 'PaletteAddView',
  mixins: [Draggable],
  getDefaultProps: function() {
    return {
      callback: false,
      label: tr('~PALETTE-INSPECTOR.ADD_IMAGE')
    };
  },
  render: function() {
    return div({
      className: 'palette-image',
      'data-droptype': 'new'
    }, div({
      className: 'palette-add-image',
      onClick: (function(_this) {
        return function() {
          return ImageDialogStore.actions.open.trigger(_this.props.callback);
        };
      })(this)
    }, this.props.label));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcGFsZXR0ZS1hZGQtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9wYWxldHRlLWFkZC12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGdCQUFBLEdBQXFCLE9BQUEsQ0FBUSw4QkFBUjs7QUFDckIsU0FBQSxHQUFxQixPQUFBLENBQVEscUJBQVI7O0FBQ3JCLEVBQUEsR0FBcUIsT0FBQSxDQUFRLG9CQUFSOztBQUVwQixNQUFPLEtBQUssQ0FBQzs7QUFFZCxNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLGdCQUFiO0VBQ0EsTUFBQSxFQUFRLENBQUMsU0FBRCxDQURSO0VBRUEsZUFBQSxFQUFpQixTQUFBO1dBQ2Y7TUFBQSxRQUFBLEVBQVUsS0FBVjtNQUNBLEtBQUEsRUFBTyxFQUFBLENBQUcsOEJBQUgsQ0FEUDs7RUFEZSxDQUZqQjtFQU1BLE1BQUEsRUFBUSxTQUFBO1dBQ0wsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGVBQVo7TUFBNkIsZUFBQSxFQUFpQixLQUE5QztLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQ0gsU0FBQSxFQUFXLG1CQURSO01BRUgsT0FBQSxFQUFTLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQTlCLENBQXNDLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBN0M7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FGTjtLQUFKLEVBSUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUpSLENBREY7RUFESyxDQU5SO0NBRmUifQ==

},{"../mixins/draggable":650,"../stores/image-dialog-store":666,"../utils/translate":689}],724:[function(require,module,exports){
var ImagePickerView, PaletteDialogStore, a, button, div, i, img, ref, span, tr;

tr = require('../utils/translate');

PaletteDialogStore = require('../stores/palette-delete-dialog-store');

ImagePickerView = React.createFactory(require('./image-picker-view'));

ref = React.DOM, div = ref.div, span = ref.span, i = ref.i, img = ref.img, button = ref.button, a = ref.a;

module.exports = React.createClass({
  displayName: 'PaletteDeleteView',
  changePalette: function(args) {
    return PaletteDialogStore.actions.select(args);
  },
  cancel: function() {
    var base;
    return typeof (base = this.props).cancel === "function" ? base.cancel() : void 0;
  },
  ok: function() {
    var base;
    return typeof (base = this.props).ok === "function" ? base.ok() : void 0;
  },
  renderArrow: function() {
    if (this.props.showReplacement) {
      return div({
        className: "vertical-content"
      }, i({
        className: 'arrow-div icon-codap-right-arrow'
      }));
    }
  },
  renderReplacement: function() {
    if (this.props.showReplacement) {
      return div({
        className: "vertical-content"
      }, div({
        className: "label"
      }, tr("~PALETTE-DIALOG.REPLACE")), ImagePickerView({
        selected: this.props.replacement,
        onChange: this.changePalette
      }));
    }
  },
  renderPaletteItem: function() {
    var oldImage, ref1;
    oldImage = (ref1 = this.props.paletteItem) != null ? ref1.image : void 0;
    return div({
      className: "vertical-content"
    }, div({
      className: "label"
    }, tr("~PALETTE-DIALOG.DELETE")), oldImage ? img({
      src: oldImage
    }) : void 0);
  },
  renderButtons: function() {
    return div({
      className: "vertical-content buttons"
    }, div({}, button({
      className: 'button ok',
      onClick: this.ok
    }, tr("~PALETTE-DIALOG.OK"))), div({
      className: "cancel"
    }, a({
      onClick: this.cancel
    }, tr("~PALETTE-DIALOG.CANCEL"))));
  },
  render: function() {
    return div({
      className: 'palette-delete-view'
    }, div({
      className: 'horizontal-content'
    }, this.renderPaletteItem(), this.renderArrow(), this.renderReplacement(), this.renderButtons()));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcGFsZXR0ZS1kZWxldGUtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9wYWxldHRlLWRlbGV0ZS12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsb0JBQVI7O0FBQ0wsa0JBQUEsR0FBcUIsT0FBQSxDQUFRLHVDQUFSOztBQUNyQixlQUFBLEdBQWtCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxxQkFBUixDQUFwQjs7QUFFbEIsTUFBaUMsS0FBSyxDQUFDLEdBQXZDLEVBQUMsYUFBRCxFQUFNLGVBQU4sRUFBWSxTQUFaLEVBQWUsYUFBZixFQUFvQixtQkFBcEIsRUFBNEI7O0FBRTVCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsbUJBQWI7RUFDQSxhQUFBLEVBQWUsU0FBQyxJQUFEO1dBQ2Isa0JBQWtCLENBQUMsT0FBTyxDQUFDLE1BQTNCLENBQWtDLElBQWxDO0VBRGEsQ0FEZjtFQUlBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtrRUFBTSxDQUFDO0VBREQsQ0FKUjtFQU9BLEVBQUEsRUFBSSxTQUFBO0FBQ0YsUUFBQTs4REFBTSxDQUFDO0VBREwsQ0FQSjtFQVdBLFdBQUEsRUFBYSxTQUFBO0lBQ1gsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLGVBQVY7YUFDRyxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVcsa0JBQVo7T0FBSixFQUNFLENBQUEsQ0FBRTtRQUFDLFNBQUEsRUFBVyxrQ0FBWjtPQUFGLENBREYsRUFESDs7RUFEVyxDQVhiO0VBaUJBLGlCQUFBLEVBQW1CLFNBQUE7SUFDakIsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLGVBQVY7YUFDRyxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVcsa0JBQVo7T0FBSixFQUNFLEdBQUEsQ0FBSTtRQUFDLFNBQUEsRUFBVyxPQUFaO09BQUosRUFBMEIsRUFBQSxDQUFHLHlCQUFILENBQTFCLENBREYsRUFFRSxlQUFBLENBQWdCO1FBQ2YsUUFBQSxFQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FERjtRQUVmLFFBQUEsRUFBVSxJQUFDLENBQUEsYUFGSTtPQUFoQixDQUZGLEVBREg7O0VBRGlCLENBakJuQjtFQTJCQSxpQkFBQSxFQUFtQixTQUFBO0FBQ2pCLFFBQUE7SUFBQSxRQUFBLGlEQUErQixDQUFFO1dBQ2hDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxrQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLE9BQVo7S0FBSixFQUEwQixFQUFBLENBQUcsd0JBQUgsQ0FBMUIsQ0FERixFQUVJLFFBQUgsR0FDRyxHQUFBLENBQUk7TUFBQyxHQUFBLEVBQUssUUFBTjtLQUFKLENBREgsR0FBQSxNQUZEO0VBRmdCLENBM0JuQjtFQW1DQSxhQUFBLEVBQWUsU0FBQTtXQUNaLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVywwQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJLEVBQUosRUFDRSxNQUFBLENBQU87TUFBQyxTQUFBLEVBQVcsV0FBWjtNQUF5QixPQUFBLEVBQVMsSUFBQyxDQUFBLEVBQW5DO0tBQVAsRUFBK0MsRUFBQSxDQUFHLG9CQUFILENBQS9DLENBREYsQ0FERixFQUlFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxRQUFaO0tBQUosRUFDRSxDQUFBLENBQUU7TUFBQyxPQUFBLEVBQVMsSUFBQyxDQUFBLE1BQVg7S0FBRixFQUFzQixFQUFBLENBQUcsd0JBQUgsQ0FBdEIsQ0FERixDQUpGO0VBRFksQ0FuQ2Y7RUE2Q0EsTUFBQSxFQUFRLFNBQUE7V0FDTCxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcscUJBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxvQkFBWjtLQUFKLEVBQ0MsSUFBQyxDQUFBLGlCQUFELENBQUEsQ0FERCxFQUVDLElBQUMsQ0FBQSxXQUFELENBQUEsQ0FGRCxFQUdDLElBQUMsQ0FBQSxpQkFBRCxDQUFBLENBSEQsRUFJQyxJQUFDLENBQUEsYUFBRCxDQUFBLENBSkQsQ0FERjtFQURLLENBN0NSO0NBRmUifQ==

},{"../stores/palette-delete-dialog-store":669,"../utils/translate":689,"./image-picker-view":706}],725:[function(require,module,exports){
var ImageMetadata, NodesStore, PaletteAddView, PaletteDialogStore, PaletteItemView, PaletteStore, div, i, img, label, ref, span, tr;

PaletteItemView = React.createFactory(require('./palette-item-view'));

PaletteAddView = React.createFactory(require('./palette-add-view'));

ImageMetadata = React.createFactory(require('./image-metadata-view'));

PaletteStore = require("../stores/palette-store");

PaletteDialogStore = require("../stores/palette-delete-dialog-store");

NodesStore = require("../stores/nodes-store");

tr = require("../utils/translate");

ref = React.DOM, label = ref.label, div = ref.div, img = ref.img, i = ref.i, span = ref.span;

module.exports = React.createClass({
  displayName: 'PaletteInspector',
  mixins: [PaletteStore.mixin, NodesStore.mixin],
  imageSelected: function(index) {
    return PaletteStore.actions.selectPaletteIndex(index);
  },
  "delete": function() {
    return PaletteDialogStore.actions.open();
  },
  render: function() {
    var index;
    index = 0;
    return div({
      className: 'palette-inspector'
    }, div({
      className: 'palette',
      ref: 'palette'
    }, div({}, PaletteAddView({}), _.map(this.state.palette, (function(_this) {
      return function(node, index) {
        return PaletteItemView({
          key: index,
          index: index,
          node: node,
          image: node.image,
          selected: index === _this.state.selectedPaletteIndex,
          onSelect: _this.imageSelected
        });
      };
    })(this)))), this.state.selectedPaletteItem ? div({
      className: 'palette-about-image'
    }, div({
      className: 'palette-about-image-title'
    }, i({
      className: "icon-codap-info"
    }), span({}, tr('~PALETTE-INSPECTOR.ABOUT_IMAGE')), img({
      src: this.state.selectedPaletteImage
    })), !(this.state.palette.length === 1 && this.state.paletteItemHasNodes) ? div({
      className: 'palette-delete',
      onClick: this["delete"]
    }, this.state.paletteItemHasNodes ? span({}, i({
      className: "icon-codap-swapAxis"
    }), label({}, tr('~PALETTE-INSPECTOR.REPLACE'))) : span({}, i({
      className: "icon-codap-trash"
    }), label({}, tr('~PALETTE-INSPECTOR.DELETE')))) : void 0, div({
      className: 'palette-about-image-info'
    }, this.state.selectedPaletteItem.metadata ? ImageMetadata({
      metadata: this.state.selectedPaletteItem.metadata,
      update: PaletteStore.actions.update
    }) : void 0)) : void 0);
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcGFsZXR0ZS1pbnNwZWN0b3Itdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9wYWxldHRlLWluc3BlY3Rvci12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGVBQUEsR0FBcUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHFCQUFSLENBQXBCOztBQUNyQixjQUFBLEdBQXFCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxvQkFBUixDQUFwQjs7QUFDckIsYUFBQSxHQUFxQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsdUJBQVIsQ0FBcEI7O0FBRXJCLFlBQUEsR0FBcUIsT0FBQSxDQUFRLHlCQUFSOztBQUNyQixrQkFBQSxHQUFxQixPQUFBLENBQVEsdUNBQVI7O0FBQ3JCLFVBQUEsR0FBcUIsT0FBQSxDQUFRLHVCQUFSOztBQUVyQixFQUFBLEdBQXFCLE9BQUEsQ0FBUSxvQkFBUjs7QUFFckIsTUFBNkIsS0FBSyxDQUFDLEdBQW5DLEVBQUMsaUJBQUQsRUFBUSxhQUFSLEVBQWEsYUFBYixFQUFrQixTQUFsQixFQUFxQjs7QUFHckIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FFZjtFQUFBLFdBQUEsRUFBYSxrQkFBYjtFQUNBLE1BQUEsRUFBUSxDQUFFLFlBQVksQ0FBQyxLQUFmLEVBQXNCLFVBQVUsQ0FBQyxLQUFqQyxDQURSO0VBR0EsYUFBQSxFQUFlLFNBQUMsS0FBRDtXQUNiLFlBQVksQ0FBQyxPQUFPLENBQUMsa0JBQXJCLENBQXdDLEtBQXhDO0VBRGEsQ0FIZjtFQU1BLENBQUEsTUFBQSxDQUFBLEVBQVEsU0FBQTtXQUNOLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUEzQixDQUFBO0VBRE0sQ0FOUjtFQVNBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtJQUFBLEtBQUEsR0FBUTtXQUNQLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxtQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFNBQVo7TUFBdUIsR0FBQSxFQUFLLFNBQTVCO0tBQUosRUFDRSxHQUFBLENBQUksRUFBSixFQUNFLGNBQUEsQ0FBZSxFQUFmLENBREYsRUFJQyxDQUFDLENBQUMsR0FBRixDQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBYixFQUFzQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRCxFQUFPLEtBQVA7ZUFDbkIsZUFBQSxDQUFnQjtVQUNmLEdBQUEsRUFBSyxLQURVO1VBRWYsS0FBQSxFQUFPLEtBRlE7VUFHZixJQUFBLEVBQU0sSUFIUztVQUlmLEtBQUEsRUFBTyxJQUFJLENBQUMsS0FKRztVQUtmLFFBQUEsRUFBVSxLQUFBLEtBQVMsS0FBQyxDQUFBLEtBQUssQ0FBQyxvQkFMWDtVQU1mLFFBQUEsRUFBVSxLQUFDLENBQUEsYUFOSTtTQUFoQjtNQURtQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEIsQ0FKRCxDQURGLENBREYsRUFpQkksSUFBQyxDQUFBLEtBQUssQ0FBQyxtQkFBVixHQUNHLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxxQkFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLDJCQUFaO0tBQUosRUFDRSxDQUFBLENBQUU7TUFBQyxTQUFBLEVBQVcsaUJBQVo7S0FBRixDQURGLEVBRUUsSUFBQSxDQUFLLEVBQUwsRUFBUyxFQUFBLENBQUcsZ0NBQUgsQ0FBVCxDQUZGLEVBR0UsR0FBQSxDQUFJO01BQUMsR0FBQSxFQUFLLElBQUMsQ0FBQSxLQUFLLENBQUMsb0JBQWI7S0FBSixDQUhGLENBREYsRUFNQyxDQUFBLENBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBZixLQUF5QixDQUF6QixJQUErQixJQUFDLENBQUEsS0FBSyxDQUFDLG1CQUE3QyxDQUFBLEdBQ0csR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGdCQUFaO01BQThCLE9BQUEsRUFBUyxJQUFDLEVBQUEsTUFBQSxFQUF4QztLQUFKLEVBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxtQkFBVixHQUNHLElBQUEsQ0FBSyxFQUFMLEVBQ0UsQ0FBQSxDQUFFO01BQUMsU0FBQSxFQUFXLHFCQUFaO0tBQUYsQ0FERixFQUVFLEtBQUEsQ0FBTSxFQUFOLEVBQVUsRUFBQSxDQUFHLDRCQUFILENBQVYsQ0FGRixDQURILEdBTUcsSUFBQSxDQUFLLEVBQUwsRUFDRSxDQUFBLENBQUU7TUFBQyxTQUFBLEVBQVcsa0JBQVo7S0FBRixDQURGLEVBRUUsS0FBQSxDQUFNLEVBQU4sRUFBVSxFQUFBLENBQUcsMkJBQUgsQ0FBVixDQUZGLENBUEosQ0FESCxHQUFBLE1BTkQsRUFtQkUsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLDBCQUFaO0tBQUosRUFDSSxJQUFDLENBQUEsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFFBQTlCLEdBQ0csYUFBQSxDQUFjO01BQ2IsUUFBQSxFQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsbUJBQW1CLENBQUMsUUFEeEI7TUFFYixNQUFBLEVBQVEsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUZoQjtLQUFkLENBREgsR0FBQSxNQURELENBbkJGLENBREgsR0FBQSxNQWpCRDtFQUZLLENBVFI7Q0FGZSJ9

},{"../stores/nodes-store":668,"../stores/palette-delete-dialog-store":669,"../stores/palette-store":670,"../utils/translate":689,"./image-metadata-view":704,"./palette-add-view":723,"./palette-item-view":726}],726:[function(require,module,exports){
var Draggable, SquareImage, div, img, ref;

ref = React.DOM, div = ref.div, img = ref.img;

Draggable = require('../mixins/draggable');

SquareImage = React.createFactory(require('./square-image-view'));

module.exports = React.createClass({
  displayName: 'ProtoNode',
  mixins: [Draggable],
  onClick: function() {
    return this.props.onSelect(this.props.index);
  },
  removeClasses: ["palette-image"],
  render: function() {
    var className, defaultImage, imageUrl, ref1;
    className = "palette-image";
    defaultImage = "img/nodes/blank.png";
    imageUrl = ((ref1 = this.props.image) != null ? ref1.length : void 0) > 0 ? this.props.image : defaultImage;
    return div({
      'data-index': this.props.index,
      'data-title': this.props.node.title,
      'data-droptype': 'paletteItem',
      className: className,
      ref: 'node',
      onClick: this.onClick
    }, div({
      className: 'proto-node'
    }, div({
      className: 'img-background'
    }, SquareImage({
      image: imageUrl
    }))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcGFsZXR0ZS1pdGVtLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcGFsZXR0ZS1pdGVtLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBYSxLQUFLLENBQUMsR0FBbkIsRUFBQyxhQUFELEVBQU07O0FBQ04sU0FBQSxHQUFZLE9BQUEsQ0FBUSxxQkFBUjs7QUFDWixXQUFBLEdBQWMsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHFCQUFSLENBQXBCOztBQUNkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsV0FBYjtFQUVBLE1BQUEsRUFBUSxDQUFDLFNBQUQsQ0FGUjtFQUlBLE9BQUEsRUFBUyxTQUFBO1dBQ1AsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLENBQWdCLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBdkI7RUFETyxDQUpUO0VBT0EsYUFBQSxFQUFlLENBQUMsZUFBRCxDQVBmO0VBU0EsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsU0FBQSxHQUFZO0lBQ1osWUFBQSxHQUFlO0lBQ2YsUUFBQSw0Q0FBMEIsQ0FBRSxnQkFBZCxHQUF1QixDQUExQixHQUFpQyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQXhDLEdBQW1EO1dBRTdELEdBQUEsQ0FBSTtNQUNILFlBQUEsRUFBYyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBRGxCO01BRUgsWUFBQSxFQUFjLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBRnZCO01BR0gsZUFBQSxFQUFpQixhQUhkO01BSUgsU0FBQSxFQUFXLFNBSlI7TUFLSCxHQUFBLEVBQUssTUFMRjtNQU1ILE9BQUEsRUFBUyxJQUFDLENBQUEsT0FOUDtLQUFKLEVBU0UsR0FBQSxDQUFJO01BQUUsU0FBQSxFQUFXLFlBQWI7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxnQkFBWjtLQUFKLEVBQ0UsV0FBQSxDQUFZO01BQUMsS0FBQSxFQUFPLFFBQVI7S0FBWixDQURGLENBREYsQ0FURjtFQUxLLENBVFI7Q0FGZSJ9

},{"../mixins/draggable":650,"./square-image-view":733}],727:[function(require,module,exports){
var div;

div = React.DOM.div;

module.exports = React.createClass({
  displayName: 'Placeholder',
  render: function() {
    return div({
      className: "placeholder " + this.props.className
    }, div({
      className: 'placeholder-content'
    }, this.props.label));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcGxhY2Vob2xkZXItdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9wbGFjZWhvbGRlci12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFDLE1BQU8sS0FBSyxDQUFDOztBQUVkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEsYUFBYjtFQUVBLE1BQUEsRUFBUSxTQUFBO1dBQ0wsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGNBQUEsR0FBZSxJQUFDLENBQUEsS0FBSyxDQUFDLFNBQWxDO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcscUJBQVo7S0FBSixFQUF3QyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQS9DLENBREY7RUFESyxDQUZSO0NBRmUifQ==

},{}],728:[function(require,module,exports){
var ImageManger, ImageMetadata, PaletteStore, a, button, div, i, img, ref, tr;

ImageMetadata = React.createFactory(require('./image-metadata-view'));

ImageManger = require("../stores/image-dialog-store");

PaletteStore = require("../stores/palette-store");

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, button = ref.button, img = ref.img, i = ref.i, a = ref.a;

module.exports = React.createClass({
  displayName: 'ImageSearchResult',
  cancel: function(e) {
    e.preventDefault();
    return ImageManger.actions.cancel();
  },
  addImage: function() {
    return PaletteStore.actions.addToPalette(this.props.imageInfo);
  },
  render: function() {
    var ref1, ref2;
    return div({
      key: this.props.key
    }, div({
      className: 'header'
    }, tr('~IMAGE-BROWSER.PREVIEW')), div({
      className: 'preview-image'
    }, img({
      src: (ref1 = this.props.imageInfo) != null ? ref1.image : void 0
    }), a({
      href: '#',
      onClick: this.cancel
    }, i({
      className: "icon-codap-ex"
    }), 'cancel')), div({
      className: 'preview-add-image'
    }, button({
      onClick: this.addImage
    }, tr('~IMAGE-BROWSER.ADD_IMAGE'))), ((ref2 = this.props.imageInfo) != null ? ref2.metadata : void 0) ? div({
      className: 'preview-metadata'
    }, ImageMetadata({
      metadata: this.props.imageInfo.metadata,
      update: ImageManger.actions.update,
      className: 'image-browser-preview-metadata'
    })) : void 0);
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcHJldmlldy1pbWFnZS1kaWFsb2ctdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9wcmV2aWV3LWltYWdlLWRpYWxvZy12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGFBQUEsR0FBZ0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHVCQUFSLENBQXBCOztBQUNoQixXQUFBLEdBQWdCLE9BQUEsQ0FBUSw4QkFBUjs7QUFDaEIsWUFBQSxHQUFnQixPQUFBLENBQVEseUJBQVI7O0FBRWhCLEVBQUEsR0FBSyxPQUFBLENBQVEsb0JBQVI7O0FBRUwsTUFBMkIsS0FBSyxDQUFDLEdBQWpDLEVBQUMsYUFBRCxFQUFNLG1CQUFOLEVBQWMsYUFBZCxFQUFtQixTQUFuQixFQUFzQjs7QUFDdEIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FDZjtFQUFBLFdBQUEsRUFBYSxtQkFBYjtFQUVBLE1BQUEsRUFBUSxTQUFDLENBQUQ7SUFDTixDQUFDLENBQUMsY0FBRixDQUFBO1dBQ0EsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFwQixDQUFBO0VBRk0sQ0FGUjtFQU1BLFFBQUEsRUFBVSxTQUFBO1dBQ1IsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFyQixDQUFrQyxJQUFDLENBQUEsS0FBSyxDQUFDLFNBQXpDO0VBRFEsQ0FOVjtFQVNBLE1BQUEsRUFBUSxTQUFBO0FBQ04sUUFBQTtXQUFDLEdBQUEsQ0FBSTtNQUFDLEdBQUEsRUFBSyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQWI7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxRQUFaO0tBQUosRUFBMkIsRUFBQSxDQUFHLHdCQUFILENBQTNCLENBREYsRUFFRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsZUFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsR0FBQSw4Q0FBcUIsQ0FBRSxjQUF4QjtLQUFKLENBREYsRUFFRSxDQUFBLENBQUU7TUFBQyxJQUFBLEVBQU0sR0FBUDtNQUFZLE9BQUEsRUFBUyxJQUFDLENBQUEsTUFBdEI7S0FBRixFQUNFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyxlQUFaO0tBQUYsQ0FERixFQUVDLFFBRkQsQ0FGRixDQUZGLEVBU0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLG1CQUFaO0tBQUosRUFDRSxNQUFBLENBQU87TUFBQyxPQUFBLEVBQVMsSUFBQyxDQUFBLFFBQVg7S0FBUCxFQUE2QixFQUFBLENBQUcsMEJBQUgsQ0FBN0IsQ0FERixDQVRGLCtDQVlvQixDQUFFLGtCQUFyQixHQUNHLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxrQkFBWjtLQUFKLEVBQ0UsYUFBQSxDQUNDO01BQUEsUUFBQSxFQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQTNCO01BQ0EsTUFBQSxFQUFTLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFEN0I7TUFFQSxTQUFBLEVBQVcsZ0NBRlg7S0FERCxDQURGLENBREgsR0FBQSxNQVpEO0VBREssQ0FUUjtDQURlIn0=

},{"../stores/image-dialog-store":666,"../stores/palette-store":670,"../utils/translate":689,"./image-metadata-view":704}],729:[function(require,module,exports){
var div, i, ref, span, tr;

tr = require('../utils/translate');

ref = React.DOM, div = ref.div, span = ref.span, i = ref.i;

module.exports = React.createClass({
  displayName: 'RecordButton',
  getDefaultProps: function() {
    return {
      recording: false,
      includeLight: false,
      enabled: true,
      icon: "icon-codap-video-camera"
    };
  },
  renderRecordingLight: function() {
    var classNames;
    if (this.props.includeLight) {
      classNames = ['recording-light'];
      if (this.props.recording) {
        classNames.push('recording');
      }
      return div({
        className: 'recording-box vertical'
      }, div({
        className: classNames.join(" ")
      }));
    }
  },
  classNames: function() {
    var classes;
    classes = ["button"];
    if (this.props.disabled) {
      classes.push("disabled");
    }
    if (this.props.cantRecord) {
      classes.push("error");
    }
    if (this.props.recording) {
      classes.push("recording");
    }
    if (this.props.includeLight) {
      classes.push("bigger");
    }
    return classes.join(" ");
  },
  render: function() {
    var onClick, verticalStyle;
    verticalStyle = {};
    if (this.props.includeLight) {
      verticalStyle = {
        'paddingRight': '0.5em'
      };
    }
    if (this.props.disabled) {
      onClick = function() {
        return null;
      };
    } else {
      onClick = this.props.onClick;
    }
    return div({
      className: this.classNames(),
      onClick: onClick
    }, div({
      className: 'horizontal'
    }, div({
      className: 'vertical',
      style: verticalStyle
    }, this.props.children), this.renderRecordingLight()));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcmVjb3JkLWJ1dHRvbi12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL3JlY29yZC1idXR0b24tdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxFQUFBLEdBQWtCLE9BQUEsQ0FBUSxvQkFBUjs7QUFDbEIsTUFBa0IsS0FBSyxDQUFDLEdBQXhCLEVBQUMsYUFBRCxFQUFNLGVBQU4sRUFBWTs7QUFFWixNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUNmO0VBQUEsV0FBQSxFQUFhLGNBQWI7RUFFQSxlQUFBLEVBQWlCLFNBQUE7V0FDZjtNQUFBLFNBQUEsRUFBVyxLQUFYO01BQ0EsWUFBQSxFQUFjLEtBRGQ7TUFFQSxPQUFBLEVBQVMsSUFGVDtNQUdBLElBQUEsRUFBTSx5QkFITjs7RUFEZSxDQUZqQjtFQVFBLG9CQUFBLEVBQXNCLFNBQUE7QUFDcEIsUUFBQTtJQUFBLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxZQUFWO01BQ0UsVUFBQSxHQUFhLENBQUMsaUJBQUQ7TUFDYixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBVjtRQUNFLFVBQVUsQ0FBQyxJQUFYLENBQWdCLFdBQWhCLEVBREY7O2FBRUMsR0FBQSxDQUFJO1FBQUMsU0FBQSxFQUFXLHdCQUFaO09BQUosRUFDRSxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVcsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsR0FBaEIsQ0FBWjtPQUFKLENBREYsRUFKSDs7RUFEb0IsQ0FSdEI7RUFpQkEsVUFBQSxFQUFZLFNBQUE7QUFDVixRQUFBO0lBQUEsT0FBQSxHQUFVLENBQUMsUUFBRDtJQUNWLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFWO01BQ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxVQUFiLEVBREY7O0lBRUEsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVY7TUFDRSxPQUFPLENBQUMsSUFBUixDQUFhLE9BQWIsRUFERjs7SUFFQSxJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBVjtNQUNFLE9BQU8sQ0FBQyxJQUFSLENBQWEsV0FBYixFQURGOztJQUVBLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxZQUFWO01BQ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxRQUFiLEVBREY7O1dBRUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxHQUFiO0VBVlUsQ0FqQlo7RUE2QkEsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsYUFBQSxHQUFnQjtJQUNoQixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsWUFBVjtNQUNFLGFBQUEsR0FBZ0I7UUFBQyxjQUFBLEVBQWUsT0FBaEI7UUFEbEI7O0lBRUEsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVY7TUFDRSxPQUFBLEdBQVUsU0FBQTtlQUFHO01BQUgsRUFEWjtLQUFBLE1BQUE7TUFHRSxPQUFBLEdBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUhuQjs7V0FJQyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsSUFBQyxDQUFBLFVBQUQsQ0FBQSxDQUFaO01BQTJCLE9BQUEsRUFBUyxPQUFwQztLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFlBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxVQUFaO01BQXdCLEtBQUEsRUFBTyxhQUEvQjtLQUFKLEVBQ0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQURSLENBREYsRUFJQyxJQUFDLENBQUEsb0JBQUQsQ0FBQSxDQUpELENBREY7RUFSSyxDQTdCUjtDQURlIn0=

},{"../utils/translate":689}],730:[function(require,module,exports){
var LinkRelationView, RelationFactory, RelationInspectorView, TabbedPanel, Tabber, div, graphStore, h2, i, input, inspectorPanelStore, label, option, p, ref, select, span, tr;

LinkRelationView = React.createFactory(require("./link-relation-view"));

RelationFactory = require("../models/relation-factory");

TabbedPanel = React.createFactory(require('./tabbed-panel-view'));

Tabber = require('./tabbed-panel-view');

tr = require("../utils/translate");

inspectorPanelStore = require('../stores/inspector-panel-store');

graphStore = require('../stores/graph-store');

ref = React.DOM, div = ref.div, h2 = ref.h2, label = ref.label, span = ref.span, input = ref.input, p = ref.p, i = ref.i, select = ref.select, option = ref.option;

module.exports = RelationInspectorView = React.createClass({
  displayName: 'RelationInspectorView',
  mixins: [inspectorPanelStore.mixin, graphStore.mixin],
  renderTabforLink: function(link) {
    var accumulator, isFullyDefined, ref1, relationView, scalar, transferModifier, vector;
    relationView = LinkRelationView({
      link: link,
      graphStore: this.props.graphStore
    });
    label = link.sourceNode.title;
    ref1 = RelationFactory.selectionsFromRelation(link.relation), vector = ref1.vector, scalar = ref1.scalar, accumulator = ref1.accumulator, transferModifier = ref1.transferModifier;
    isFullyDefined = (link.relation.isDefined && (vector != null) && (scalar != null)) || (link.relation.customData != null) || (accumulator != null) || (transferModifier != null);
    return Tabber.Tab({
      label: label,
      component: relationView,
      defined: isFullyDefined
    });
  },
  onTabSelected: function(index) {
    var ref1;
    return inspectorPanelStore.actions.openInspectorPanel('relations', {
      link: (ref1 = this.props.node.inLinks()) != null ? ref1[index] : void 0
    });
  },
  onMethodSelected: function(evt) {
    return graphStore.store.changeNode({
      combineMethod: evt.target.value
    }, this.props.node);
  },
  renderNodeDetailsInspector: function() {
    var inputCount, method, ref1, ref2, ref3;
    inputCount = (ref1 = (ref2 = this.props.node.inLinks()) != null ? ref2.length : void 0) != null ? ref1 : 0;
    if (!(inputCount > 1)) {
      return null;
    }
    method = (ref3 = this.props.node.combineMethod) != null ? ref3 : 'average';
    return div({
      className: 'node-details-inspector',
      key: 'details'
    }, [
      tr("~NODE-RELATION-EDIT.COMBINATION_METHOD"), select({
        key: 0,
        value: method,
        onChange: this.onMethodSelected
      }, [
        option({
          value: 'average',
          key: 1
        }, tr("~NODE-RELATION-EDIT.ARITHMETIC_MEAN")), option({
          value: 'product',
          key: 2
        }, tr("~NODE-RELATION-EDIT.SCALED_PRODUCT"))
      ])
    ]);
  },
  renderNodeRelationInspector: function() {
    var selectedTabIndex, tabs;
    selectedTabIndex = 0;
    tabs = _.map(this.props.node.inLinks(), (function(_this) {
      return function(link, i) {
        if (_this.state.selectedLink === link) {
          selectedTabIndex = i;
        }
        return _this.renderTabforLink(link);
      };
    })(this));
    return div({
      className: 'relation-inspector'
    }, TabbedPanel({
      tabs: tabs,
      selectedTabIndex: selectedTabIndex,
      onTabSelected: this.onTabSelected,
      onRenderBelowTabsComponent: this.renderNodeDetailsInspector
    }));
  },
  renderLinkRelationInspector: function() {
    return div({
      className: 'relation-inspector'
    });
  },
  render: function() {
    if (this.props.node) {
      return this.renderNodeRelationInspector();
    } else {
      return this.renderLinkRelationInspector();
    }
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcmVsYXRpb24taW5zcGVjdG9yLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvcmVsYXRpb24taW5zcGVjdG9yLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsZ0JBQUEsR0FBbUIsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLHNCQUFSLENBQXBCOztBQUNuQixlQUFBLEdBQWtCLE9BQUEsQ0FBUSw0QkFBUjs7QUFDbEIsV0FBQSxHQUFjLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSxxQkFBUixDQUFwQjs7QUFDZCxNQUFBLEdBQVMsT0FBQSxDQUFRLHFCQUFSOztBQUNULEVBQUEsR0FBSyxPQUFBLENBQVEsb0JBQVI7O0FBRUwsbUJBQUEsR0FBc0IsT0FBQSxDQUFRLGlDQUFSOztBQUN0QixVQUFBLEdBQWEsT0FBQSxDQUFRLHVCQUFSOztBQUViLE1BQXNELEtBQUssQ0FBQyxHQUE1RCxFQUFDLGFBQUQsRUFBTSxXQUFOLEVBQVUsaUJBQVYsRUFBaUIsZUFBakIsRUFBdUIsaUJBQXZCLEVBQThCLFNBQTlCLEVBQWlDLFNBQWpDLEVBQW9DLG1CQUFwQyxFQUE0Qzs7QUFFNUMsTUFBTSxDQUFDLE9BQVAsR0FBaUIscUJBQUEsR0FBd0IsS0FBSyxDQUFDLFdBQU4sQ0FFdkM7RUFBQSxXQUFBLEVBQWEsdUJBQWI7RUFJQSxNQUFBLEVBQVEsQ0FBRSxtQkFBbUIsQ0FBQyxLQUF0QixFQUE2QixVQUFVLENBQUMsS0FBeEMsQ0FKUjtFQU1BLGdCQUFBLEVBQWtCLFNBQUMsSUFBRDtBQUNoQixRQUFBO0lBQUEsWUFBQSxHQUFnQixnQkFBQSxDQUFpQjtNQUFDLElBQUEsRUFBTSxJQUFQO01BQWEsVUFBQSxFQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBaEM7S0FBakI7SUFDaEIsS0FBQSxHQUFRLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDeEIsT0FBa0QsZUFBZSxDQUFDLHNCQUFoQixDQUF1QyxJQUFJLENBQUMsUUFBNUMsQ0FBbEQsRUFBQyxvQkFBRCxFQUFTLG9CQUFULEVBQWlCLDhCQUFqQixFQUE4QjtJQUM5QixjQUFBLEdBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFkLElBQTRCLGdCQUE1QixJQUF3QyxnQkFBekMsQ0FBQSxJQUFxRCxrQ0FBckQsSUFBa0YscUJBQWxGLElBQWtHO1dBRWxILE1BQU0sQ0FBQyxHQUFQLENBQVc7TUFBQyxLQUFBLEVBQU8sS0FBUjtNQUFlLFNBQUEsRUFBVyxZQUExQjtNQUF3QyxPQUFBLEVBQVMsY0FBakQ7S0FBWDtFQU5lLENBTmxCO0VBY0EsYUFBQSxFQUFlLFNBQUMsS0FBRDtBQUNiLFFBQUE7V0FBQSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsa0JBQTVCLENBQStDLFdBQS9DLEVBQTREO01BQUMsSUFBQSxtREFBNkIsQ0FBQSxLQUFBLFVBQTlCO0tBQTVEO0VBRGEsQ0FkZjtFQWlCQSxnQkFBQSxFQUFrQixTQUFDLEdBQUQ7V0FDaEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFqQixDQUE0QjtNQUFFLGFBQUEsRUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQTVCO0tBQTVCLEVBQWlFLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBeEU7RUFEZ0IsQ0FqQmxCO0VBb0JBLDBCQUFBLEVBQTRCLFNBQUE7QUFDMUIsUUFBQTtJQUFBLFVBQUEsK0ZBQTZDO0lBQzdDLElBQUEsQ0FBQSxDQUFtQixVQUFBLEdBQWEsQ0FBaEMsQ0FBQTtBQUFBLGFBQU8sS0FBUDs7SUFFQSxNQUFBLDJEQUFxQztXQUNwQyxHQUFBLENBQUk7TUFBRSxTQUFBLEVBQVcsd0JBQWI7TUFBdUMsR0FBQSxFQUFLLFNBQTVDO0tBQUosRUFBNkQ7TUFDNUQsRUFBQSxDQUFHLHdDQUFILENBRDRELEVBRTNELE1BQUEsQ0FBTztRQUFFLEdBQUEsRUFBSyxDQUFQO1FBQVUsS0FBQSxFQUFPLE1BQWpCO1FBQXlCLFFBQUEsRUFBVSxJQUFDLENBQUEsZ0JBQXBDO09BQVAsRUFBK0Q7UUFDN0QsTUFBQSxDQUFPO1VBQUMsS0FBQSxFQUFPLFNBQVI7VUFBbUIsR0FBQSxFQUFLLENBQXhCO1NBQVAsRUFDQyxFQUFBLENBQUcscUNBQUgsQ0FERCxDQUQ2RCxFQUc3RCxNQUFBLENBQU87VUFBQyxLQUFBLEVBQU8sU0FBUjtVQUFtQixHQUFBLEVBQUssQ0FBeEI7U0FBUCxFQUNDLEVBQUEsQ0FBRyxvQ0FBSCxDQURELENBSDZEO09BQS9ELENBRjJEO0tBQTdEO0VBTHlCLENBcEI1QjtFQW1DQSwyQkFBQSxFQUE2QixTQUFBO0FBQzNCLFFBQUE7SUFBQSxnQkFBQSxHQUFtQjtJQUNuQixJQUFBLEdBQU8sQ0FBQyxDQUFDLEdBQUYsQ0FBTSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFaLENBQUEsQ0FBTixFQUE2QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRCxFQUFPLENBQVA7UUFDbEMsSUFBeUIsS0FBQyxDQUFBLEtBQUssQ0FBQyxZQUFQLEtBQXVCLElBQWhEO1VBQUEsZ0JBQUEsR0FBbUIsRUFBbkI7O2VBQ0EsS0FBQyxDQUFBLGdCQUFELENBQWtCLElBQWxCO01BRmtDO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE3QjtXQUdOLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVSxvQkFBWDtLQUFKLEVBQ0UsV0FBQSxDQUFZO01BQ1gsSUFBQSxFQUFNLElBREs7TUFFWCxnQkFBQSxFQUFrQixnQkFGUDtNQUdYLGFBQUEsRUFBZSxJQUFDLENBQUEsYUFITDtNQUlYLDBCQUFBLEVBQTRCLElBQUMsQ0FBQSwwQkFKbEI7S0FBWixDQURGO0VBTDBCLENBbkM3QjtFQWlEQSwyQkFBQSxFQUE2QixTQUFBO1dBQzFCLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVSxvQkFBWDtLQUFKO0VBRDBCLENBakQ3QjtFQW9EQSxNQUFBLEVBQVEsU0FBQTtJQUNOLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFWO2FBQ0UsSUFBQyxDQUFBLDJCQUFELENBQUEsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsMkJBQUQsQ0FBQSxFQUhGOztFQURNLENBcERSO0NBRnVDIn0=

},{"../models/relation-factory":657,"../stores/graph-store":665,"../stores/inspector-panel-store":667,"../utils/translate":689,"./link-relation-view":710,"./tabbed-panel-view":736}],731:[function(require,module,exports){
var AppSettingsStore, Complexity, Dropdown, GraphStore, Radio, RadioF, RadioGroup, RadioGroupF, SimulationStore, div, i, input, label, ref, ref1, span, tr;

ref = require('react-radio-group'), RadioGroup = ref.RadioGroup, Radio = ref.Radio;

RadioGroupF = React.createFactory(RadioGroup);

RadioF = React.createFactory(Radio);

Dropdown = React.createFactory(require('./dropdown-view'));

SimulationStore = require('../stores/simulation-store');

AppSettingsStore = require('../stores/app-settings-store');

GraphStore = require('../stores/graph-store').store;

tr = require('../utils/translate');

ref1 = React.DOM, div = ref1.div, span = ref1.span, i = ref1.i, input = ref1.input, label = ref1.label;

Complexity = AppSettingsStore.store.Complexity;

module.exports = React.createClass({
  displayName: 'SimulationInspector',
  mixins: [SimulationStore.mixin, AppSettingsStore.mixin],
  setDuration: function(e) {
    return SimulationStore.actions.setDuration(parseInt(e.target.value));
  },
  setCapNodeValues: function(e) {
    return SimulationStore.actions.capNodeValues(e.target.checked);
  },
  setShowingMinigraphs: function(e) {
    return AppSettingsStore.actions.showMinigraphs(e.target.checked);
  },
  setRelationshipSymbols: function(e) {
    return AppSettingsStore.actions.relationshipSymbols(e.target.checked);
  },
  setComplexity: function(val) {
    return AppSettingsStore.actions.setComplexity(val);
  },
  render: function() {
    var basicDisabled, diagramOnly, diagramOnlyDisabled, expandedDisabled, minComplexity, runPanelClasses;
    runPanelClasses = "run-panel";
    diagramOnly = this.state.complexity === Complexity.diagramOnly;
    if (diagramOnly) {
      runPanelClasses += " collapsed";
    }
    minComplexity = GraphStore.getMinimumComplexity();
    diagramOnlyDisabled = minComplexity > Complexity.diagramOnly;
    basicDisabled = minComplexity > Complexity.basic;
    expandedDisabled = minComplexity > Complexity.expanded;
    return div({
      className: "simulation-panel"
    }, div({
      className: "title"
    }, tr("~SIMULATION.DIAGRAM_SETTINGS")), RadioGroupF({
      name: "complexity",
      selectedValue: this.state.complexity,
      onChange: this.setComplexity,
      className: "radio-group"
    }, [
      label({
        key: 'complexity-diagram-only'
      }, RadioF({
        value: Complexity.diagramOnly,
        disabled: diagramOnlyDisabled
      }), span({
        className: diagramOnlyDisabled ? "disabled" : void 0
      }, tr('~SIMULATION.COMPLEXITY.DIAGRAM_ONLY'))), label({
        key: 'complexity-basic'
      }, RadioF({
        value: Complexity.basic,
        disabled: basicDisabled
      }), span({
        className: basicDisabled ? "disabled" : void 0
      }, tr('~SIMULATION.COMPLEXITY.BASIC'))), label({
        key: 'complexity-expanded'
      }, RadioF({
        value: Complexity.expanded,
        disabled: expandedDisabled
      }), span({
        className: expandedDisabled ? "disabled" : void 0
      }, tr('~SIMULATION.COMPLEXITY.EXPANDED'))), label({
        key: 'complexity-collectors'
      }, RadioF({
        value: Complexity.collectors
      }), span({}, tr('~SIMULATION.COMPLEXITY.COLLECTORS')))
    ]), div({
      className: runPanelClasses
    }, div({
      className: "title"
    }, tr("~SIMULATION.VIEW_SETTINGS")), div({
      className: "row"
    }, label({
      key: 'minigraphs-label'
    }, [
      input({
        key: 'minigraphs-checkbox',
        type: 'checkbox',
        value: 'show-mini',
        checked: this.state.showingMinigraphs,
        onChange: this.setShowingMinigraphs
      }), tr('~DOCUMENT.ACTIONS.SHOW_MINI_GRAPHS')
    ])), div({
      className: "row"
    }, label({
      key: 'symbols-label'
    }, [
      input({
        key: 'symbols-checkbox',
        type: 'checkbox',
        value: 'relationship-symbols',
        checked: this.state.relationshipSymbols,
        onChange: this.setRelationshipSymbols
      }), tr('~SIMULATION.RELATIONSHIP_SYMBOLS')
    ]))), div({
      className: runPanelClasses
    }, div({
      className: "title"
    }, tr("~SIMULATION.SIMULATION_SETTINGS")), div({
      className: "row"
    }, label({
      key: 'cap-label'
    }, [
      input({
        key: 'cap-checkbox',
        type: 'checkbox',
        value: 'cap-values',
        checked: this.state.capNodeValues,
        onChange: this.setCapNodeValues
      }), tr('~SIMULATION.CAP_VALUES')
    ]))));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvc2ltdWxhdGlvbi1pbnNwZWN0b3Itdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9zaW11bGF0aW9uLWluc3BlY3Rvci12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQXVCLE9BQUEsQ0FBUSxtQkFBUixDQUF2QixFQUFDLDJCQUFELEVBQWE7O0FBQ2IsV0FBQSxHQUFrQixLQUFLLENBQUMsYUFBTixDQUFvQixVQUFwQjs7QUFDbEIsTUFBQSxHQUFrQixLQUFLLENBQUMsYUFBTixDQUFvQixLQUFwQjs7QUFDbEIsUUFBQSxHQUFrQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsaUJBQVIsQ0FBcEI7O0FBQ2xCLGVBQUEsR0FBa0IsT0FBQSxDQUFRLDRCQUFSOztBQUNsQixnQkFBQSxHQUFtQixPQUFBLENBQVEsOEJBQVI7O0FBQ25CLFVBQUEsR0FBa0IsT0FBQSxDQUFRLHVCQUFSLENBQWdDLENBQUM7O0FBQ25ELEVBQUEsR0FBa0IsT0FBQSxDQUFRLG9CQUFSOztBQUNsQixPQUFnQyxLQUFLLENBQUMsR0FBdEMsRUFBQyxjQUFELEVBQU0sZ0JBQU4sRUFBWSxVQUFaLEVBQWUsa0JBQWYsRUFBc0I7O0FBRXRCLFVBQUEsR0FBYSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7O0FBRXBDLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBQUssQ0FBQyxXQUFOLENBRWY7RUFBQSxXQUFBLEVBQWEscUJBQWI7RUFFQSxNQUFBLEVBQVEsQ0FBRSxlQUFlLENBQUMsS0FBbEIsRUFBeUIsZ0JBQWdCLENBQUMsS0FBMUMsQ0FGUjtFQUlBLFdBQUEsRUFBYSxTQUFDLENBQUQ7V0FDWCxlQUFlLENBQUMsT0FBTyxDQUFDLFdBQXhCLENBQW9DLFFBQUEsQ0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQWxCLENBQXBDO0VBRFcsQ0FKYjtFQU9BLGdCQUFBLEVBQWtCLFNBQUMsQ0FBRDtXQUNoQixlQUFlLENBQUMsT0FBTyxDQUFDLGFBQXhCLENBQXNDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBL0M7RUFEZ0IsQ0FQbEI7RUFVQSxvQkFBQSxFQUFzQixTQUFDLENBQUQ7V0FDcEIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGNBQXpCLENBQXdDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBakQ7RUFEb0IsQ0FWdEI7RUFhQSxzQkFBQSxFQUF3QixTQUFDLENBQUQ7V0FDdEIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLG1CQUF6QixDQUE2QyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQXREO0VBRHNCLENBYnhCO0VBZ0JBLGFBQUEsRUFBZSxTQUFDLEdBQUQ7V0FDYixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBekIsQ0FBdUMsR0FBdkM7RUFEYSxDQWhCZjtFQW1CQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxlQUFBLEdBQWtCO0lBQ2xCLFdBQUEsR0FBYyxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVAsS0FBcUIsVUFBVSxDQUFDO0lBQzlDLElBQUcsV0FBSDtNQUFvQixlQUFBLElBQW1CLGFBQXZDOztJQUVBLGFBQUEsR0FBZ0IsVUFBVSxDQUFDLG9CQUFYLENBQUE7SUFDaEIsbUJBQUEsR0FBc0IsYUFBQSxHQUFnQixVQUFVLENBQUM7SUFDakQsYUFBQSxHQUFnQixhQUFBLEdBQWdCLFVBQVUsQ0FBQztJQUMzQyxnQkFBQSxHQUFtQixhQUFBLEdBQWdCLFVBQVUsQ0FBQztXQUU3QyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsa0JBQVo7S0FBSixFQUNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxPQUFaO0tBQUosRUFBMEIsRUFBQSxDQUFHLDhCQUFILENBQTFCLENBREYsRUFFRSxXQUFBLENBQVk7TUFDWCxJQUFBLEVBQU0sWUFESztNQUVYLGFBQUEsRUFBZSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBRlg7TUFHWCxRQUFBLEVBQVUsSUFBQyxDQUFBLGFBSEE7TUFJWCxTQUFBLEVBQVcsYUFKQTtLQUFaLEVBS0U7TUFDQSxLQUFBLENBQU07UUFBQyxHQUFBLEVBQUsseUJBQU47T0FBTixFQUNFLE1BQUEsQ0FBTztRQUFDLEtBQUEsRUFBTyxVQUFVLENBQUMsV0FBbkI7UUFBZ0MsUUFBQSxFQUFVLG1CQUExQztPQUFQLENBREYsRUFFRSxJQUFBLENBQUs7UUFBQyxTQUFBLEVBQWMsbUJBQUgsR0FBNEIsVUFBNUIsR0FBQSxNQUFaO09BQUwsRUFBMEQsRUFBQSxDQUFHLHFDQUFILENBQTFELENBRkYsQ0FEQSxFQUtBLEtBQUEsQ0FBTTtRQUFDLEdBQUEsRUFBSyxrQkFBTjtPQUFOLEVBQ0UsTUFBQSxDQUFPO1FBQUMsS0FBQSxFQUFPLFVBQVUsQ0FBQyxLQUFuQjtRQUEwQixRQUFBLEVBQVUsYUFBcEM7T0FBUCxDQURGLEVBRUUsSUFBQSxDQUFLO1FBQUMsU0FBQSxFQUFjLGFBQUgsR0FBc0IsVUFBdEIsR0FBQSxNQUFaO09BQUwsRUFBb0QsRUFBQSxDQUFHLDhCQUFILENBQXBELENBRkYsQ0FMQSxFQVNBLEtBQUEsQ0FBTTtRQUFDLEdBQUEsRUFBSyxxQkFBTjtPQUFOLEVBQ0UsTUFBQSxDQUFPO1FBQUMsS0FBQSxFQUFPLFVBQVUsQ0FBQyxRQUFuQjtRQUE2QixRQUFBLEVBQVUsZ0JBQXZDO09BQVAsQ0FERixFQUVFLElBQUEsQ0FBSztRQUFDLFNBQUEsRUFBYyxnQkFBSCxHQUF5QixVQUF6QixHQUFBLE1BQVo7T0FBTCxFQUF1RCxFQUFBLENBQUcsaUNBQUgsQ0FBdkQsQ0FGRixDQVRBLEVBYUEsS0FBQSxDQUFNO1FBQUMsR0FBQSxFQUFLLHVCQUFOO09BQU4sRUFDRSxNQUFBLENBQU87UUFBQyxLQUFBLEVBQU8sVUFBVSxDQUFDLFVBQW5CO09BQVAsQ0FERixFQUVFLElBQUEsQ0FBSyxFQUFMLEVBQVMsRUFBQSxDQUFHLG1DQUFILENBQVQsQ0FGRixDQWJBO0tBTEYsQ0FGRixFQXlCRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsZUFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLE9BQVo7S0FBSixFQUEwQixFQUFBLENBQUcsMkJBQUgsQ0FBMUIsQ0FERixFQUVFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxLQUFaO0tBQUosRUFDRSxLQUFBLENBQU07TUFBQyxHQUFBLEVBQUssa0JBQU47S0FBTixFQUFpQztNQUNoQyxLQUFBLENBQU07UUFDSixHQUFBLEVBQUsscUJBREQ7UUFFSixJQUFBLEVBQU0sVUFGRjtRQUdKLEtBQUEsRUFBTyxXQUhIO1FBSUosT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsaUJBSlo7UUFLSixRQUFBLEVBQVUsSUFBQyxDQUFBLG9CQUxQO09BQU4sQ0FEZ0MsRUFRaEMsRUFBQSxDQUFHLG9DQUFILENBUmdDO0tBQWpDLENBREYsQ0FGRixFQWNFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxLQUFaO0tBQUosRUFDRSxLQUFBLENBQU07TUFBQyxHQUFBLEVBQUssZUFBTjtLQUFOLEVBQThCO01BQzdCLEtBQUEsQ0FBTTtRQUNKLEdBQUEsRUFBSyxrQkFERDtRQUVKLElBQUEsRUFBTSxVQUZGO1FBR0osS0FBQSxFQUFPLHNCQUhIO1FBSUosT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsbUJBSlo7UUFLSixRQUFBLEVBQVUsSUFBQyxDQUFBLHNCQUxQO09BQU4sQ0FENkIsRUFRN0IsRUFBQSxDQUFHLGtDQUFILENBUjZCO0tBQTlCLENBREYsQ0FkRixDQXpCRixFQW9ERSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsZUFBWjtLQUFKLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLE9BQVo7S0FBSixFQUEwQixFQUFBLENBQUcsaUNBQUgsQ0FBMUIsQ0FERixFQUdFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxLQUFaO0tBQUosRUFDRSxLQUFBLENBQU07TUFBQyxHQUFBLEVBQUssV0FBTjtLQUFOLEVBQTBCO01BQ3pCLEtBQUEsQ0FBTTtRQUNKLEdBQUEsRUFBSyxjQUREO1FBRUosSUFBQSxFQUFNLFVBRkY7UUFHSixLQUFBLEVBQU8sWUFISDtRQUlKLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBSyxDQUFDLGFBSlo7UUFLSixRQUFBLEVBQVUsSUFBQyxDQUFBLGdCQUxQO09BQU4sQ0FEeUIsRUFRekIsRUFBQSxDQUFHLHdCQUFILENBUnlCO0tBQTFCLENBREYsQ0FIRixDQXBERjtFQVZLLENBbkJSO0NBRmUifQ==

},{"../stores/app-settings-store":662,"../stores/graph-store":665,"../stores/simulation-store":671,"../utils/translate":689,"./dropdown-view":697,"react-radio-group":570}],732:[function(require,module,exports){
var Dropdown, ExperimentPanel, RecordButton, SimulationStore, div, i, input, ref, span, tr;

SimulationStore = require('../stores/simulation-store');

tr = require('../utils/translate');

RecordButton = React.createFactory(require('./record-button-view'));

Dropdown = React.createFactory(require('./dropdown-view'));

ExperimentPanel = React.createFactory(require('./experiment-panel-view'));

ref = React.DOM, div = ref.div, span = ref.span, i = ref.i, input = ref.input;

module.exports = React.createClass({
  displayName: 'SimulationRunPanel',
  mixins: [SimulationStore.mixin],
  setDuration: function(e) {
    return SimulationStore.actions.setDuration(parseInt(e.target.value));
  },
  toggle: function() {
    if (this.state.simulationPanelExpanded) {
      return SimulationStore.actions.collapseSimulationPanel();
    } else {
      return SimulationStore.actions.expandSimulationPanel();
    }
  },
  renderToggleButton: function() {
    var iconClass, simRefFunc, simStyle, simText, simTextLeft, simTextWidth;
    iconClass = this.state.simulationPanelExpanded ? "inspectorArrow-collapse" : "inspectorArrow-expand";
    simRefFunc = (function(_this) {
      return function(elt) {
        return _this.simulateElt = elt;
      };
    })(this);
    simText = tr("~DOCUMENT.ACTIONS.SIMULATE");
    simTextWidth = this.simulateElt != null ? this.simulateElt.clientWidth : simText.length * 6;
    simTextLeft = simTextWidth / 2 - 6;
    simStyle = {
      left: simTextLeft
    };
    return div({
      className: "flow",
      onClick: this.toggle
    }, div({
      className: "toggle-title",
      ref: simRefFunc,
      style: simStyle
    }, simText), i({
      className: "icon-codap-" + iconClass
    }));
  },
  renderControls: function() {
    var disabled, experimentDisabled, wrapperClasses;
    wrapperClasses = "buttons flow";
    if (!this.state.simulationPanelExpanded) {
      wrapperClasses += " closed";
    }
    disabled = (this.state.isRecording && !this.state.isRecordingOne) || !this.state.modelIsRunnable;
    experimentDisabled = !this.state.modelIsRunnable || this.state.isRecordingPeriod;
    return div({
      className: wrapperClasses
    }, div({
      className: "vertical"
    }, ExperimentPanel({
      disabled: experimentDisabled
    }), this.state.graphHasCollector ? this.renderRecordForCollectors() : div({
      className: "horizontal"
    }, RecordButton({
      onClick: SimulationStore.actions.recordOne,
      disabled: disabled
    }, div({
      className: "horizontal"
    }, span({}, tr("~DOCUMENT.ACTIONS.DATA.RECORD-1")), i({
      className: "icon-codap-camera"
    })), div({
      className: "horizontal"
    }, span({}, tr("~DOCUMENT.ACTIONS.DATA.POINT")))), this.renderRecordStreamButton())));
  },
  renderRecordForCollectors: function() {
    var props, recordAction;
    recordAction = SimulationStore.actions.recordPeriod;
    if (this.state.isRecording) {
      recordAction = function() {};
    }
    props = {
      onClick: recordAction,
      includeLight: false,
      recording: this.state.isRecording,
      disabled: !this.state.modelIsRunnable
    };
    return div({
      className: 'horizontal'
    }, RecordButton(props, div({
      className: 'horizontal'
    }, span({}, tr("~DOCUMENT.ACTIONS.DATA.RECORD")), i({
      className: "icon-codap-video-camera"
    }))), input({
      type: "number",
      min: 1,
      max: 1000,
      style: {
        width: (Math.max(3, this.state.duration.toString().length + 1)) + "em"
      },
      value: this.state.duration,
      onChange: this.setDuration
    }), Dropdown({
      isActionMenu: false,
      onSelect: SimulationStore.actions.setStepUnits,
      anchor: this.state.stepUnitsName,
      items: this.state.timeUnitOptions
    }));
  },
  renderRecordStreamButton: function() {
    var props, recordAction;
    recordAction = SimulationStore.actions.recordStream;
    if (this.state.isRecording) {
      recordAction = SimulationStore.actions.stopRecording;
    }
    props = {
      onClick: recordAction,
      includeLight: true,
      recording: this.state.isRecordingStream,
      disabled: !this.state.modelIsRunnable || this.state.isRecordingOne
    };
    if (this.state.isRecording) {
      return RecordButton(props, div({
        className: 'horizontal'
      }, span({}, tr("~DOCUMENT.ACTIONS.DATA.STOP")), i({
        className: "icon-codap-video-camera"
      })), div({
        className: 'horizontal'
      }, span({}, tr("~DOCUMENT.ACTIONS.DATA.RECORDING"))));
    } else {
      return RecordButton(props, div({
        className: 'horizontal'
      }, span({}, tr("~DOCUMENT.ACTIONS.DATA.RECORD")), i({
        className: "icon-codap-video-camera"
      })), div({
        className: 'horizontal'
      }, span({}, tr("~DOCUMENT.ACTIONS.DATA.STREAM"))));
    }
  },
  render: function() {
    return div({
      className: "simulation-run-panel"
    }, this.renderToggleButton(), this.renderControls());
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvc2ltdWxhdGlvbi1ydW4tcGFuZWwtdmlldy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvbnBhZXNzZWwvbGFiL2NjL2J1aWxkaW5nLW1vZGVscy9zcmMvY29kZS92aWV3cy9zaW11bGF0aW9uLXJ1bi1wYW5lbC12aWV3LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGVBQUEsR0FBa0IsT0FBQSxDQUFRLDRCQUFSOztBQUNsQixFQUFBLEdBQWtCLE9BQUEsQ0FBUSxvQkFBUjs7QUFDbEIsWUFBQSxHQUFrQixLQUFLLENBQUMsYUFBTixDQUFvQixPQUFBLENBQVEsc0JBQVIsQ0FBcEI7O0FBQ2xCLFFBQUEsR0FBa0IsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBQSxDQUFRLGlCQUFSLENBQXBCOztBQUNsQixlQUFBLEdBQWtCLEtBQUssQ0FBQyxhQUFOLENBQW9CLE9BQUEsQ0FBUSx5QkFBUixDQUFwQjs7QUFFbEIsTUFBeUIsS0FBSyxDQUFDLEdBQS9CLEVBQUMsYUFBRCxFQUFNLGVBQU4sRUFBWSxTQUFaLEVBQWU7O0FBRWYsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FFZjtFQUFBLFdBQUEsRUFBYSxvQkFBYjtFQUVBLE1BQUEsRUFBUSxDQUFFLGVBQWUsQ0FBQyxLQUFsQixDQUZSO0VBS0EsV0FBQSxFQUFhLFNBQUMsQ0FBRDtXQUNYLGVBQWUsQ0FBQyxPQUFPLENBQUMsV0FBeEIsQ0FBb0MsUUFBQSxDQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBbEIsQ0FBcEM7RUFEVyxDQUxiO0VBUUEsTUFBQSxFQUFRLFNBQUE7SUFDTixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsdUJBQVY7YUFDRSxlQUFlLENBQUMsT0FBTyxDQUFDLHVCQUF4QixDQUFBLEVBREY7S0FBQSxNQUFBO2FBR0UsZUFBZSxDQUFDLE9BQU8sQ0FBQyxxQkFBeEIsQ0FBQSxFQUhGOztFQURNLENBUlI7RUFjQSxrQkFBQSxFQUFvQixTQUFBO0FBQ2xCLFFBQUE7SUFBQSxTQUFBLEdBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyx1QkFBVixHQUF1Qyx5QkFBdkMsR0FBc0U7SUFDbEYsVUFBQSxHQUFhLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxHQUFEO2VBQVMsS0FBQyxDQUFBLFdBQUQsR0FBZTtNQUF4QjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7SUFDYixPQUFBLEdBQVUsRUFBQSxDQUFHLDRCQUFIO0lBQ1YsWUFBQSxHQUFrQix3QkFBSCxHQUFzQixJQUFDLENBQUEsV0FBVyxDQUFDLFdBQW5DLEdBQW9ELE9BQU8sQ0FBQyxNQUFSLEdBQWlCO0lBQ3BGLFdBQUEsR0FBYyxZQUFBLEdBQWUsQ0FBZixHQUFtQjtJQUNqQyxRQUFBLEdBQVc7TUFBRSxJQUFBLEVBQU0sV0FBUjs7V0FDVixHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsTUFBWjtNQUFvQixPQUFBLEVBQVMsSUFBQyxDQUFBLE1BQTlCO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsY0FBWjtNQUE0QixHQUFBLEVBQUssVUFBakM7TUFBNkMsS0FBQSxFQUFPLFFBQXBEO0tBQUosRUFBb0UsT0FBcEUsQ0FERixFQUVFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyxhQUFBLEdBQWMsU0FBMUI7S0FBRixDQUZGO0VBUGlCLENBZHBCO0VBMEJBLGNBQUEsRUFBZ0IsU0FBQTtBQUNkLFFBQUE7SUFBQSxjQUFBLEdBQWlCO0lBQ2pCLElBQUcsQ0FBQyxJQUFDLENBQUEsS0FBSyxDQUFDLHVCQUFYO01BQXdDLGNBQUEsSUFBa0IsVUFBMUQ7O0lBQ0EsUUFBQSxHQUFXLENBQUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFQLElBQXNCLENBQUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxjQUEvQixDQUFBLElBQWtELENBQUMsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUNyRSxrQkFBQSxHQUFxQixDQUFDLElBQUMsQ0FBQSxLQUFLLENBQUMsZUFBUixJQUEyQixJQUFDLENBQUEsS0FBSyxDQUFDO1dBQ3RELEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxjQUFaO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsVUFBWjtLQUFKLEVBQ0UsZUFBQSxDQUFnQjtNQUFDLFFBQUEsRUFBVSxrQkFBWDtLQUFoQixDQURGLEVBRUksSUFBQyxDQUFBLEtBQUssQ0FBQyxpQkFBVixHQUNFLElBQUMsQ0FBQSx5QkFBRCxDQUFBLENBREYsR0FHRyxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsWUFBWjtLQUFKLEVBQ0UsWUFBQSxDQUNDO01BQUEsT0FBQSxFQUFTLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBakM7TUFDQSxRQUFBLEVBQVUsUUFEVjtLQURELEVBSUUsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFlBQVo7S0FBSixFQUNFLElBQUEsQ0FBSyxFQUFMLEVBQVMsRUFBQSxDQUFHLGlDQUFILENBQVQsQ0FERixFQUVFLENBQUEsQ0FBRTtNQUFBLFNBQUEsRUFBVyxtQkFBWDtLQUFGLENBRkYsQ0FKRixFQVFFLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxZQUFaO0tBQUosRUFDRSxJQUFBLENBQUssRUFBTCxFQUFTLEVBQUEsQ0FBRyw4QkFBSCxDQUFULENBREYsQ0FSRixDQURGLEVBYUMsSUFBQyxDQUFBLHdCQUFELENBQUEsQ0FiRCxDQUxKLENBREY7RUFMYSxDQTFCaEI7RUF3REEseUJBQUEsRUFBMkIsU0FBQTtBQUN6QixRQUFBO0lBQUEsWUFBQSxHQUFlLGVBQWUsQ0FBQyxPQUFPLENBQUM7SUFDdkMsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFdBQVY7TUFDRSxZQUFBLEdBQWUsU0FBQSxHQUFBLEVBRGpCOztJQUdBLEtBQUEsR0FDRTtNQUFBLE9BQUEsRUFBUyxZQUFUO01BQ0EsWUFBQSxFQUFjLEtBRGQ7TUFFQSxTQUFBLEVBQVcsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUZsQjtNQUdBLFFBQUEsRUFBVSxDQUFDLElBQUMsQ0FBQSxLQUFLLENBQUMsZUFIbEI7O1dBSUQsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFVLFlBQVg7S0FBSixFQUNFLFlBQUEsQ0FBYSxLQUFiLEVBQ0UsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLFlBQVo7S0FBSixFQUNFLElBQUEsQ0FBSyxFQUFMLEVBQVMsRUFBQSxDQUFHLCtCQUFILENBQVQsQ0FERixFQUVFLENBQUEsQ0FBRTtNQUFDLFNBQUEsRUFBVyx5QkFBWjtLQUFGLENBRkYsQ0FERixDQURGLEVBT0UsS0FBQSxDQUFNO01BQ0wsSUFBQSxFQUFNLFFBREQ7TUFFTCxHQUFBLEVBQUssQ0FGQTtNQUdMLEdBQUEsRUFBSyxJQUhBO01BSUwsS0FBQSxFQUNFO1FBQUEsS0FBQSxFQUFTLENBQUMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULEVBQWEsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBaEIsQ0FBQSxDQUEwQixDQUFDLE1BQTNCLEdBQWtDLENBQS9DLENBQUQsQ0FBQSxHQUFtRCxJQUE1RDtPQUxHO01BTUwsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFOVDtNQU9MLFFBQUEsRUFBVSxJQUFDLENBQUEsV0FQTjtLQUFOLENBUEYsRUFnQkUsUUFBQSxDQUNDO01BQUEsWUFBQSxFQUFjLEtBQWQ7TUFDQSxRQUFBLEVBQVUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQURsQztNQUVBLE1BQUEsRUFBUSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBRmY7TUFHQSxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxlQUhkO0tBREQsQ0FoQkY7RUFWd0IsQ0F4RDNCO0VBMkZBLHdCQUFBLEVBQTBCLFNBQUE7QUFDeEIsUUFBQTtJQUFBLFlBQUEsR0FBZSxlQUFlLENBQUMsT0FBTyxDQUFDO0lBQ3ZDLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFWO01BQ0UsWUFBQSxHQUFlLGVBQWUsQ0FBQyxPQUFPLENBQUMsY0FEekM7O0lBR0EsS0FBQSxHQUNFO01BQUEsT0FBQSxFQUFTLFlBQVQ7TUFDQSxZQUFBLEVBQWMsSUFEZDtNQUVBLFNBQUEsRUFBVyxJQUFDLENBQUEsS0FBSyxDQUFDLGlCQUZsQjtNQUdBLFFBQUEsRUFBVSxDQUFDLElBQUMsQ0FBQSxLQUFLLENBQUMsZUFBUixJQUEyQixJQUFDLENBQUEsS0FBSyxDQUFDLGNBSDVDOztJQUtGLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFWO2FBQ0csWUFBQSxDQUFhLEtBQWIsRUFDRSxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVcsWUFBWjtPQUFKLEVBQ0UsSUFBQSxDQUFLLEVBQUwsRUFBUyxFQUFBLENBQUcsNkJBQUgsQ0FBVCxDQURGLEVBRUUsQ0FBQSxDQUFFO1FBQUMsU0FBQSxFQUFXLHlCQUFaO09BQUYsQ0FGRixDQURGLEVBS0UsR0FBQSxDQUFJO1FBQUMsU0FBQSxFQUFXLFlBQVo7T0FBSixFQUNFLElBQUEsQ0FBSyxFQUFMLEVBQVMsRUFBQSxDQUFHLGtDQUFILENBQVQsQ0FERixDQUxGLEVBREg7S0FBQSxNQUFBO2FBV0csWUFBQSxDQUFhLEtBQWIsRUFDRSxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVcsWUFBWjtPQUFKLEVBQ0UsSUFBQSxDQUFLLEVBQUwsRUFBUyxFQUFBLENBQUcsK0JBQUgsQ0FBVCxDQURGLEVBRUUsQ0FBQSxDQUFFO1FBQUMsU0FBQSxFQUFXLHlCQUFaO09BQUYsQ0FGRixDQURGLEVBS0UsR0FBQSxDQUFJO1FBQUMsU0FBQSxFQUFXLFlBQVo7T0FBSixFQUNFLElBQUEsQ0FBSyxFQUFMLEVBQVMsRUFBQSxDQUFHLCtCQUFILENBQVQsQ0FERixDQUxGLEVBWEg7O0VBWHdCLENBM0YxQjtFQTJIQSxNQUFBLEVBQVEsU0FBQTtXQUNMLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyxzQkFBWjtLQUFKLEVBQ0MsSUFBQyxDQUFBLGtCQUFELENBQUEsQ0FERCxFQUVDLElBQUMsQ0FBQSxjQUFELENBQUEsQ0FGRDtFQURLLENBM0hSO0NBRmUifQ==

},{"../stores/simulation-store":671,"../utils/translate":689,"./dropdown-view":697,"./experiment-panel-view":699,"./record-button-view":729}],733:[function(require,module,exports){
var div;

div = React.DOM.div;

module.exports = React.createClass({
  displayName: "SquareImage",
  image: function() {
    var ref;
    if (((ref = this.props.image) != null ? ref.length : void 0) > 0 && this.props.image !== "#remote") {
      return "url(" + this.props.image + ")";
    } else {
      return "none";
    }
  },
  renderImage: function() {
    return img({
      src: this.props.image
    });
  },
  css: function() {
    return {
      "backgroundImage": this.image(),
      "backgroundSize": "contain",
      "backgroundPosition": "center",
      "backgroundRepeat": "no-repeat",
      "margin": "0px",
      "padding": "0px",
      "height": "100%",
      "width": "100%"
    };
  },
  render: function() {
    return div({
      style: this.css()
    });
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvc3F1YXJlLWltYWdlLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvc3F1YXJlLWltYWdlLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUMsTUFBTyxLQUFLLENBQUM7O0FBR2QsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FFZjtFQUFBLFdBQUEsRUFBYSxhQUFiO0VBRUEsS0FBQSxFQUFPLFNBQUE7QUFDTCxRQUFBO0lBQUEsMkNBQWUsQ0FBRSxnQkFBZCxHQUF1QixDQUF2QixJQUE2QixJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsS0FBa0IsU0FBbEQ7YUFDRSxNQUFBLEdBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFkLEdBQW9CLElBRHRCO0tBQUEsTUFBQTthQUdFLE9BSEY7O0VBREssQ0FGUDtFQVFBLFdBQUEsRUFBYSxTQUFBO1dBQ1YsR0FBQSxDQUFJO01BQUMsR0FBQSxFQUFLLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBYjtLQUFKO0VBRFUsQ0FSYjtFQVdBLEdBQUEsRUFBSyxTQUFBO1dBQ0g7TUFBQSxpQkFBQSxFQUFtQixJQUFDLENBQUEsS0FBRCxDQUFBLENBQW5CO01BQ0EsZ0JBQUEsRUFBa0IsU0FEbEI7TUFFQSxvQkFBQSxFQUFzQixRQUZ0QjtNQUdBLGtCQUFBLEVBQW9CLFdBSHBCO01BSUEsUUFBQSxFQUFVLEtBSlY7TUFLQSxTQUFBLEVBQVcsS0FMWDtNQU1BLFFBQUEsRUFBVSxNQU5WO01BT0EsT0FBQSxFQUFTLE1BUFQ7O0VBREcsQ0FYTDtFQXFCQSxNQUFBLEVBQVEsU0FBQTtXQUNMLEdBQUEsQ0FBSTtNQUFDLEtBQUEsRUFBTyxJQUFDLENBQUEsR0FBRCxDQUFBLENBQVI7S0FBSjtFQURLLENBckJSO0NBRmUifQ==

},{}],734:[function(require,module,exports){
var div;

div = React.DOM.div;

module.exports = React.createClass({
  displayName: "StackedImage",
  image: function() {
    var ref;
    if (((ref = this.props.image) != null ? ref.length : void 0) > 0 && this.props.image !== "#remote") {
      return "url(" + this.props.image + ")";
    } else {
      return "none";
    }
  },
  css: function(index) {
    return {
      position: "absolute",
      backgroundImage: this.image(),
      backgroundSize: "contain",
      backgroundPosition: "center",
      backgroundRepeat: "no-repeat",
      margin: 0,
      padding: 0,
      height: "50%",
      width: "50%"
    };
  },
  render: function() {
    var styles;
    styles = this.props.imageProps.map(function(imgProps) {
      return {
        top: imgProps.top + "%",
        left: imgProps.left + "%",
        transform: "rotate(" + imgProps.rotation + "deg)"
      };
    });
    return div({
      style: {
        position: "relative",
        width: "100%",
        height: "100%"
      }
    }, _.map(this.props.imageProps, (function(_this) {
      return function(imgProps, index) {
        return div({
          style: _.assign({}, _this.css(index), styles[index]),
          key: index
        });
      };
    })(this)));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3Mvc3RhY2tlZC1pbWFnZS12aWV3LmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ucGFlc3NlbC9sYWIvY2MvYnVpbGRpbmctbW9kZWxzL3NyYy9jb2RlL3ZpZXdzL3N0YWNrZWQtaW1hZ2Utdmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQyxNQUFPLEtBQUssQ0FBQzs7QUFFZCxNQUFNLENBQUMsT0FBUCxHQUFpQixLQUFLLENBQUMsV0FBTixDQUVmO0VBQUEsV0FBQSxFQUFhLGNBQWI7RUFFQSxLQUFBLEVBQU8sU0FBQTtBQUNMLFFBQUE7SUFBQSwyQ0FBZSxDQUFFLGdCQUFkLEdBQXVCLENBQXZCLElBQTZCLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxLQUFrQixTQUFsRDthQUNFLE1BQUEsR0FBTyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQWQsR0FBb0IsSUFEdEI7S0FBQSxNQUFBO2FBR0UsT0FIRjs7RUFESyxDQUZQO0VBUUEsR0FBQSxFQUFLLFNBQUMsS0FBRDtXQUNIO01BQUEsUUFBQSxFQUFVLFVBQVY7TUFDQSxlQUFBLEVBQWlCLElBQUMsQ0FBQSxLQUFELENBQUEsQ0FEakI7TUFFQSxjQUFBLEVBQWdCLFNBRmhCO01BR0Esa0JBQUEsRUFBb0IsUUFIcEI7TUFJQSxnQkFBQSxFQUFrQixXQUpsQjtNQUtBLE1BQUEsRUFBUSxDQUxSO01BTUEsT0FBQSxFQUFTLENBTlQ7TUFPQSxNQUFBLEVBQVEsS0FQUjtNQVFBLEtBQUEsRUFBTyxLQVJQOztFQURHLENBUkw7RUFtQkEsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsTUFBQSxHQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQWxCLENBQXNCLFNBQUMsUUFBRDthQUM3QjtRQUFBLEdBQUEsRUFBUSxRQUFRLENBQUMsR0FBVixHQUFjLEdBQXJCO1FBQ0EsSUFBQSxFQUFTLFFBQVEsQ0FBQyxJQUFWLEdBQWUsR0FEdkI7UUFFQSxTQUFBLEVBQVcsU0FBQSxHQUFVLFFBQVEsQ0FBQyxRQUFuQixHQUE0QixNQUZ2Qzs7SUFENkIsQ0FBdEI7V0FLVCxHQUFBLENBQUk7TUFBRSxLQUFBLEVBQU87UUFBRSxRQUFBLEVBQVUsVUFBWjtRQUF3QixLQUFBLEVBQU8sTUFBL0I7UUFBdUMsTUFBQSxFQUFRLE1BQS9DO09BQVQ7S0FBSixFQUNJLENBQUMsQ0FBQyxHQUFGLENBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFiLEVBQXlCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxRQUFELEVBQVcsS0FBWDtlQUN2QixHQUFBLENBQUk7VUFBRSxLQUFBLEVBQU8sQ0FBQyxDQUFDLE1BQUYsQ0FBUyxFQUFULEVBQWEsS0FBQyxDQUFBLEdBQUQsQ0FBSyxLQUFMLENBQWIsRUFBMEIsTUFBTyxDQUFBLEtBQUEsQ0FBakMsQ0FBVDtVQUFtRCxHQUFBLEVBQUssS0FBeEQ7U0FBSjtNQUR1QjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBekIsQ0FESjtFQU5NLENBbkJSO0NBRmUifQ==

},{}],735:[function(require,module,exports){
var SvgGraphView, div, line, math, path, ref, span, svg, text, tr, tspan;

ref = React.DOM, svg = ref.svg, path = ref.path, line = ref.line, text = ref.text, div = ref.div, tspan = ref.tspan, span = ref.span;

tr = require("../utils/translate");

math = require('mathjs');

module.exports = SvgGraphView = React.createClass({
  displayName: 'SvgGraphView',
  getDefaultProps: function() {
    return {
      width: 200,
      height: 200,
      strokeWidth: 3,
      strokeDasharray: "10,6",
      fontSize: 16,
      xLabel: "x axis",
      yLabel: "y axis",
      link: null
    };
  },
  drawing: false,
  getInitialState: function() {
    return {
      currentData: null,
      pointPathData: null,
      canDraw: false,
      definedRelationship: false,
      newCustomData: false
    };
  },
  componentWillMount: function() {
    var canDraw, currentData, formula, isDefined, newCustomData;
    canDraw = false;
    currentData = this.props.link.relation.customData;
    isDefined = this.props.link.relation.isDefined;
    formula = this.props.link.relation.formula;
    newCustomData = false;
    if (this.props.link.relation.isCustomRelationship || ((currentData != null) && isDefined)) {
      canDraw = true;
      formula = null;
      newCustomData = currentData == null;
    }
    this.setState({
      currentData: currentData,
      canDraw: canDraw,
      newCustomData: newCustomData,
      definedRelationship: isDefined
    });
    if ((this.state.pointPathData == null) && isDefined) {
      if (currentData != null) {
        return this.updatePointData(null, currentData);
      } else if (formula != null) {
        return this.updatePointData(formula, null);
      }
    }
  },
  componentWillReceiveProps: function(newProps) {
    var canDraw, currentData, formula, isDefined, newCustomData;
    if (newProps) {
      canDraw = false;
      currentData = newProps.link.relation.customData;
      isDefined = newProps.link.relation.isDefined;
      formula = newProps.link.relation.formula;
      if (newProps.link.relation.isCustomRelationship || ((currentData != null) && isDefined)) {
        canDraw = true;
        if (!isDefined) {
          newCustomData = true;
          formula = "1 * 1";
        } else {
          formula = null;
        }
      } else if (formula != null) {
        canDraw = false;
        newCustomData = false;
        currentData = null;
      }
      this.setState({
        currentData: currentData,
        pointPathData: null,
        canDraw: canDraw,
        newCustomData: newCustomData,
        definedRelationship: isDefined
      });
      return this.updatePointData(formula, currentData);
    }
  },
  updatePointData: function(formula, currentData) {
    var pointPathData;
    if ((currentData == null) && (formula != null)) {
      currentData = this.loadCustomDataFromFormula(formula);
    } else if (currentData != null) {
      this.setState({
        definedRelationship: true
      });
    }
    pointPathData = this.getPathPoints(currentData);
    return this.setState({
      currentData: currentData,
      pointPathData: pointPathData
    });
  },
  marginal: function() {
    return this.props.fontSize * 0.4;
  },
  margin: function() {
    return this.props.fontSize + this.marginal();
  },
  invertPoint: function(point) {
    return {
      x: point.x,
      y: this.props.height - point.y
    };
  },
  graphMapPoint: function(point) {
    var height, width, x, xOffset, y, yOffset;
    yOffset = this.margin();
    xOffset = this.margin();
    width = this.props.width - (xOffset + this.props.strokeWidth);
    height = this.props.height - (yOffset + this.props.strokeWidth);
    x = point.x * width + xOffset;
    y = point.y * height + yOffset;
    return this.invertPoint({
      x: x,
      y: y
    });
  },
  findClosestPoint: function(path, pointX, pointY) {
    var graphOrigin, p, x, y;
    graphOrigin = this.graphMapPoint({
      x: 0,
      y: 0
    });
    x = pointX - $(path).offset().left;
    y = pointX - $(path).offset().top;
    p = {
      x: x,
      y: y
    };
    return p;
  },
  pointsToPath: function(points) {
    var data;
    data = _.map(points, (function(_this) {
      return function(p) {
        return _this.graphMapPoint(p);
      };
    })(this));
    data = _.map(data, function(p) {
      return p.x + " " + p.y;
    });
    data = data.join(" L ");
    return "M " + data;
  },
  loadCustomDataFromFormula: function(formula) {
    var data, maxy, miny, rangex;
    rangex = 100;
    data = _.range(0, rangex);
    miny = 2e308;
    maxy = -2e308;
    return data = _.map(data, function(x) {
      var error, scope, y;
      scope = {
        "in": x,
        out: 0,
        maxIn: rangex,
        maxOut: rangex
      };
      try {
        y = math["eval"](formula, scope);
        if (y < miny) {
          miny = y;
        }
        if (y > maxy) {
          maxy = y;
        }
      } catch (error1) {
        error = error1;
        console.log("Error: " + error);
      }
      return [x, y];
    });
  },
  getPathPoints: function(currentData) {
    var data, maxy, miny, rangex;
    rangex = 100;
    data = _.range(0, rangex);
    miny = 2e308;
    maxy = -2e308;
    if (currentData != null) {
      data = _.map(currentData, function(point) {
        var x, y;
        x = _.first(point);
        y = _.last(point);
        if (y < miny) {
          miny = y;
        }
        if (y > maxy) {
          maxy = y;
        }
        return {
          y: y,
          x: x
        };
      });
    }
    data = _.map(data, function(d) {
      var x, y;
      x = d.x, y = d.y;
      x = x / rangex;
      y = y / rangex;
      return {
        x: x,
        y: y
      };
    });
    return data;
  },
  renderXLabel: function() {
    var y;
    y = this.props.height - this.props.fontSize + 2 * this.marginal();
    return text({
      className: "xLabel",
      x: this.margin(),
      y: y
    }, this.props.xLabel);
  },
  renderYLabel: function() {
    var rotate, transform, translate, y;
    rotate = "rotate(-90 0, " + this.props.height + ")";
    translate = "translate(" + this.props.fontSize + ")";
    transform = "" + rotate;
    y = this.props.height + this.props.fontSize - 3;
    return text({
      className: "yLabel",
      x: this.margin(),
      y: y,
      transform: transform
    }, this.props.yLabel);
  },
  renderAxisLines: function() {
    var data;
    data = [
      {
        x: 0,
        y: 1
      }, {
        x: 0,
        y: 0
      }, {
        x: 1,
        y: 0
      }
    ];
    return path({
      className: 'axisLines',
      d: this.pointsToPath(data)
    });
  },
  renderLineData: function() {
    var data;
    if (this.state.definedRelationship) {
      data = this.pointsToPath(this.state.pointPathData);
      if (this.state.newCustomData) {
        return path({
          className: 'data',
          d: data,
          strokeWidth: this.props.strokeWidth,
          strokeDasharray: this.props.strokeDasharray
        });
      } else {
        return path({
          className: 'data',
          d: data,
          strokeWidth: this.props.strokeWidth
        });
      }
    }
  },
  startDrawCurve: function(evt) {
    var newCustomData, scaledCoords, starterFunction;
    if (this.state.canDraw) {
      document.addEventListener('mousemove', this.drawCurve);
      document.addEventListener('mouseup', this.endDrawCurve);
      this.drawing = true;
      if (this.state.newCustomData) {
        scaledCoords = this.pointToScaledCoords(evt);
        starterFunction = '1 * ' + scaledCoords.y;
        this.updatePointData(starterFunction, null);
        newCustomData = false;
        this.setState({
          newCustomData: newCustomData
        });
      }
      return this.drawCurve(evt);
    }
  },
  drawCurve: function(evt) {
    var newData, scaledCoords;
    if (this.drawing && !this.state.newCustomData) {
      evt.preventDefault();
      scaledCoords = this.pointToScaledCoords(evt);
      if (scaledCoords.x >= 0 && scaledCoords.x <= 100 && scaledCoords.y >= 0 && scaledCoords.y <= 100) {
        newData = _.map(this.state.currentData, function(d) {
          var x, y;
          x = d[0];
          y = d[1];
          if (x > scaledCoords.x - 4 && x < scaledCoords.x + 4) {
            y = scaledCoords.y;
          }
          return [x, y];
        });
        return this.updatePointData(this.props.formula, newData);
      }
    }
  },
  endDrawCurve: function(evt) {
    if (this.drawing) {
      document.removeEventListener('mousemove', this.drawCurve);
      document.removeEventListener('mouseup', this.endDrawCurve);
      this.drawing = false;
      return this.updateRelationCustomData(this.state.currentData);
    }
  },
  pointToScaledCoords: function(evt) {
    var coords, rect, ref1, scaledCoords;
    rect = (ref1 = this.refs.graphBody) != null ? ref1.getBoundingClientRect() : void 0;
    coords = {
      x: rect.width - (rect.right - evt.clientX),
      y: rect.bottom - evt.clientY
    };
    coords.y = Math.max(0, Math.min(coords.y, rect.height));
    scaledCoords = {
      x: Math.round(coords.x / rect.width * 100),
      y: Math.round(coords.y / rect.height * 100)
    };
    return scaledCoords;
  },
  updateRelationCustomData: function(customData) {
    var link;
    link = this.props.link;
    link.relation.customData = customData;
    link.relation.isDefined = customData != null;
    return this.props.graphStore.changeLink(link, {
      relation: link.relation
    });
  },
  render: function() {
    var drawClass;
    drawClass = 'draw-graph';
    if (this.state.canDraw) {
      drawClass += ' drawing';
    }
    return div({
      className: 'svgGraphView'
    }, svg({
      width: this.props.width,
      height: this.props.height
    }, this.renderAxisLines(), this.renderLineData(), this.renderXLabel(), this.renderYLabel()), div({
      className: drawClass,
      onMouseDown: this.startDrawCurve,
      ref: "graphBody"
    }, this.state.newCustomData ? div({
      className: 'graph-hint'
    }, span({}, (tr("~NODE-RELATION-EDIT.CUSTOM_HINT")) + " ")) : !this.state.definedRelationship ? div({
      className: 'unknown-graph'
    }, "?") : void 0));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../utils/translate":689,"mathjs":20}],736:[function(require,module,exports){
var Tab, TabInfo, a, div, li, ref, ul;

ref = React.DOM, div = ref.div, ul = ref.ul, li = ref.li, a = ref.a;

TabInfo = (function() {
  function TabInfo(settings) {
    if (settings == null) {
      settings = {};
    }
    this.label = settings.label, this.component = settings.component, this.defined = settings.defined;
  }

  return TabInfo;

})();

Tab = React.createFactory(React.createClass({
  displayName: 'TabbedPanelTab',
  clicked: function(e) {
    e.preventDefault();
    return this.props.onSelected(this.props.index);
  },
  render: function() {
    var classname;
    classname = this.props.defined ? 'tab-link-defined' : '';
    if (this.props.selected) {
      classname += ' tab-selected';
    }
    return li({
      className: classname,
      onClick: this.clicked
    }, this.props.label);
  }
}));

module.exports = React.createClass({
  displayName: 'TabbedPanelView',
  getInitialState: function() {
    return {
      selectedTabIndex: this.props.selectedTabIndex || 0
    };
  },
  componentWillReceiveProps: function(nextProps) {
    if (this.state.selectedTabIndex !== nextProps.selectedTabIndex) {
      return this.selectedTab(nextProps.selectedTabIndex);
    }
  },
  statics: {
    Tab: function(settings) {
      return new TabInfo(settings);
    }
  },
  selectedTab: function(index) {
    return this.setState({
      selectedTabIndex: index || 0
    });
  },
  onTabSelected: function(index) {
    if (this.props.onTabSelected) {
      return this.props.onTabSelected(index);
    } else {
      return this.selectedTab(index);
    }
  },
  renderTab: function(tab, index) {
    return Tab({
      label: tab.label,
      key: index,
      index: index,
      defined: tab.defined,
      selected: index === this.state.selectedTabIndex,
      onSelected: this.onTabSelected
    });
  },
  renderTabs: function(clientClass) {
    var index, tab;
    return div({
      className: "workspace-tabs" + clientClass,
      key: 'tabs'
    }, ul({}, (function() {
      var i, len, ref1, results;
      ref1 = this.props.tabs;
      results = [];
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        tab = ref1[index];
        results.push(this.renderTab(tab, index));
      }
      return results;
    }).call(this)));
  },
  renderSelectedPanel: function(clientClass) {
    var index, tab;
    return div({
      className: "workspace-tab-component" + clientClass
    }, (function() {
      var i, len, ref1, results;
      ref1 = this.props.tabs;
      results = [];
      for (index = i = 0, len = ref1.length; i < len; index = ++i) {
        tab = ref1[index];
        results.push(div({
          key: index,
          style: {
            display: index === this.state.selectedTabIndex ? 'block' : 'none'
          }
        }, tab.component));
      }
      return results;
    }).call(this));
  },
  render: function() {
    var clientClass;
    clientClass = this.props.clientClass ? ' ' + this.props.clientClass : '';
    return div({
      className: "tabbed-panel" + clientClass
    }, div({
      className: "tabbed-panel-left" + clientClass
    }, [this.renderTabs(clientClass), this.props.onRenderBelowTabsComponent != null ? this.props.onRenderBelowTabsComponent() : void 0]), this.renderSelectedPanel(clientClass));
  }
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvdGFiYmVkLXBhbmVsLXZpZXcuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL25wYWVzc2VsL2xhYi9jYy9idWlsZGluZy1tb2RlbHMvc3JjL2NvZGUvdmlld3MvdGFiYmVkLXBhbmVsLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBbUIsS0FBSyxDQUFDLEdBQXpCLEVBQUMsYUFBRCxFQUFNLFdBQU4sRUFBVSxXQUFWLEVBQWM7O0FBRVI7RUFDUyxpQkFBQyxRQUFEOztNQUFDLFdBQVM7O0lBQ3BCLElBQUMsQ0FBQSxpQkFBQSxLQUFGLEVBQVMsSUFBQyxDQUFBLHFCQUFBLFNBQVYsRUFBcUIsSUFBQyxDQUFBLG1CQUFBO0VBRFg7Ozs7OztBQUdmLEdBQUEsR0FBTSxLQUFLLENBQUMsYUFBTixDQUFvQixLQUFLLENBQUMsV0FBTixDQUV4QjtFQUFBLFdBQUEsRUFBYSxnQkFBYjtFQUVBLE9BQUEsRUFBUyxTQUFDLENBQUQ7SUFDUCxDQUFDLENBQUMsY0FBRixDQUFBO1dBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLENBQWtCLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBekI7RUFGTyxDQUZUO0VBTUEsTUFBQSxFQUFRLFNBQUE7QUFDTixRQUFBO0lBQUEsU0FBQSxHQUFlLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBVixHQUF1QixrQkFBdkIsR0FBK0M7SUFDM0QsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVY7TUFBd0IsU0FBQSxJQUFhLGdCQUFyQzs7V0FDQyxFQUFBLENBQUc7TUFBQyxTQUFBLEVBQVcsU0FBWjtNQUF1QixPQUFBLEVBQVMsSUFBQyxDQUFBLE9BQWpDO0tBQUgsRUFBOEMsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFyRDtFQUhLLENBTlI7Q0FGd0IsQ0FBcEI7O0FBYU4sTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLFdBQU4sQ0FFZjtFQUFBLFdBQUEsRUFBYSxpQkFBYjtFQUVBLGVBQUEsRUFBaUIsU0FBQTtXQUNmO01BQUEsZ0JBQUEsRUFBa0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxnQkFBUCxJQUEyQixDQUE3Qzs7RUFEZSxDQUZqQjtFQUtBLHlCQUFBLEVBQTJCLFNBQUMsU0FBRDtJQUN6QixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsZ0JBQVAsS0FBNkIsU0FBUyxDQUFDLGdCQUExQzthQUNFLElBQUMsQ0FBQSxXQUFELENBQWEsU0FBUyxDQUFDLGdCQUF2QixFQURGOztFQUR5QixDQUwzQjtFQVNBLE9BQUEsRUFDRTtJQUFBLEdBQUEsRUFBSyxTQUFDLFFBQUQ7YUFBYyxJQUFJLE9BQUosQ0FBWSxRQUFaO0lBQWQsQ0FBTDtHQVZGO0VBWUEsV0FBQSxFQUFhLFNBQUMsS0FBRDtXQUNYLElBQUMsQ0FBQSxRQUFELENBQVU7TUFBQSxnQkFBQSxFQUFrQixLQUFBLElBQVMsQ0FBM0I7S0FBVjtFQURXLENBWmI7RUFlQSxhQUFBLEVBQWUsU0FBQyxLQUFEO0lBQ2IsSUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVY7YUFDRSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUIsS0FBckIsRUFERjtLQUFBLE1BQUE7YUFHRSxJQUFDLENBQUEsV0FBRCxDQUFhLEtBQWIsRUFIRjs7RUFEYSxDQWZmO0VBcUJBLFNBQUEsRUFBVyxTQUFDLEdBQUQsRUFBTSxLQUFOO1dBQ1IsR0FBQSxDQUNDO01BQUEsS0FBQSxFQUFPLEdBQUcsQ0FBQyxLQUFYO01BQ0EsR0FBQSxFQUFLLEtBREw7TUFFQSxLQUFBLEVBQU8sS0FGUDtNQUdBLE9BQUEsRUFBUyxHQUFHLENBQUMsT0FIYjtNQUlBLFFBQUEsRUFBVyxLQUFBLEtBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQyxnQkFKM0I7TUFLQSxVQUFBLEVBQVksSUFBQyxDQUFBLGFBTGI7S0FERDtFQURRLENBckJYO0VBK0JBLFVBQUEsRUFBWSxTQUFDLFdBQUQ7QUFDVixRQUFBO1dBQUMsR0FBQSxDQUFJO01BQUMsU0FBQSxFQUFXLGdCQUFBLEdBQWlCLFdBQTdCO01BQTRDLEdBQUEsRUFBSyxNQUFqRDtLQUFKLEVBQ0UsRUFBQSxDQUFHLEVBQUg7O0FBQVE7QUFBQTtXQUFBLHNEQUFBOztxQkFBQSxJQUFDLENBQUEsU0FBRCxDQUFXLEdBQVgsRUFBZSxLQUFmO0FBQUE7O2lCQUFSLENBREY7RUFEUyxDQS9CWjtFQXFDQSxtQkFBQSxFQUFxQixTQUFDLFdBQUQ7QUFDbkIsUUFBQTtXQUFDLEdBQUEsQ0FBSTtNQUFDLFNBQUEsRUFBVyx5QkFBQSxHQUEwQixXQUF0QztLQUFKOztBQUNDO0FBQUE7V0FBQSxzREFBQTs7cUJBQ0csR0FBQSxDQUFJO1VBQ0gsR0FBQSxFQUFLLEtBREY7VUFFSCxLQUFBLEVBQ0U7WUFBQSxPQUFBLEVBQVksS0FBQSxLQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsZ0JBQW5CLEdBQXlDLE9BQXpDLEdBQXNELE1BQS9EO1dBSEM7U0FBSixFQUtDLEdBQUcsQ0FBQyxTQUxMO0FBREg7O2lCQUREO0VBRGtCLENBckNyQjtFQWlEQSxNQUFBLEVBQVEsU0FBQTtBQUNOLFFBQUE7SUFBQSxXQUFBLEdBQWlCLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FBVixHQUEyQixHQUFBLEdBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUF4QyxHQUF5RDtXQUN0RSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsY0FBQSxHQUFlLFdBQTNCO0tBQUosRUFDRSxHQUFBLENBQUk7TUFBQyxTQUFBLEVBQVcsbUJBQUEsR0FBb0IsV0FBaEM7S0FBSixFQUFvRCxDQUNuRCxJQUFDLENBQUEsVUFBRCxDQUFZLFdBQVosQ0FEbUQsRUFFWiw2Q0FBdkMsR0FBQSxJQUFDLENBQUEsS0FBSyxDQUFDLDBCQUFQLENBQUEsQ0FBQSxHQUFBLE1BRm1ELENBQXBELENBREYsRUFLQyxJQUFDLENBQUEsbUJBQUQsQ0FBcUIsV0FBckIsQ0FMRDtFQUZLLENBakRSO0NBRmUifQ==

},{}],737:[function(require,module,exports){
var Demo, Slider, ValueSlider, circle, circleRadius, constants, div, g, i, input, label, path, rect, ref, span, svg, tr;

ref = React.DOM, div = ref.div, i = ref.i, label = ref.label, span = ref.span, input = ref.input, svg = ref.svg, circle = ref.circle, path = ref.path, rect = ref.rect, g = ref.g;

tr = require("../utils/translate");

circleRadius = 2;

constants = {
  orientation: {
    horizontal: {
      dimension: 'width',
      direction: 'left',
      coordinate: 'x'
    },
    vertical: {
      dimension: 'height',
      direction: 'top',
      coordinate: 'y'
    }
  }
};

ValueSlider = React.createClass({
  displayName: 'SVGSlider',
  getDefaultProps: function() {
    return {
      width: 72,
      height: 20,
      min: 0,
      max: 100,
      value: 50,
      handleSize: 16,
      minEditable: false,
      maxEditable: false,
      stepSize: 1,
      showTicks: false,
      showLabels: true,
      showHandle: true,
      snapToSteps: false,
      displayPrecision: 0,
      renderValueTooltip: true,
      minLabel: null,
      maxLabel: null,
      displaySemiQuant: false,
      orientation: "horizontal",
      color: "gray",
      filled: false,
      onValueChange: function(v) {
        return log.info("new value " + v);
      },
      onRangeChange: function(r) {
        return log.info("new range " + r.min + ", " + r.max);
      }
    };
  },
  getInitialState: function() {
    return {
      limit: 0,
      grab: 0,
      dragging: false,
      "editing-min": false,
      "editing-max": false
    };
  },
  updateRange: function(property, value) {
    var range;
    range = {
      min: this.props.min,
      max: this.props.max
    };
    range[property] = value;
    if (property === "max") {
      range.min = Math.min(range.min, range.max);
    } else {
      range.max = Math.max(range.min, range.max);
    }
    if (this.props.value < range.min || this.props.value > range.max) {
      value = Math.max(range.min, Math.min(range.max, this.props.value));
      this.props.onValueChange(value);
    }
    return this.props.onRangeChange(range);
  },
  componentDidMount: function() {
    window.addEventListener('resize', this.handleUpdate);
    return this.handleUpdate();
  },
  componentWillUnmount: function() {
    return window.removeEventListener('resize', this.handleUpdate);
  },
  handleUpdate: function() {
    var dimension, handlePos, orientation, ref1, sliderPos;
    orientation = this.props.orientation;
    dimension = constants.orientation[orientation].dimension;
    dimension = dimension.charAt(0).toUpperCase() + dimension.substr(1);
    sliderPos = this.slider["offset" + dimension];
    handlePos = ((ref1 = this.handle) != null ? ref1["offset" + dimension] : void 0) || 0;
    return this.setState({
      limit: sliderPos - handlePos,
      grab: handlePos / 2
    });
  },
  sliderLocation: function() {
    return this.clamp((this.props.value - this.props.min) / (this.props.max - this.props.min), 0, 1);
  },
  sliderPercent: function() {
    var p;
    p = this.sliderLocation() * 100;
    if (this.props.orientation === 'horizontal') {
      return p;
    } else {
      return 100 - p;
    }
  },
  thickness: function() {
    if (this.props.orientation === 'horizontal') {
      return this.props.height;
    } else {
      return this.props.width;
    }
  },
  length: function() {
    if (this.props.orientation === 'horizontal') {
      return this.props.width;
    } else {
      return this.props.height;
    }
  },
  renderNumber: function() {
    var style;
    style = {
      bottom: this.props.handleSize + "px"
    };
    if (this.state.dragging && this.props.renderValueTooltip) {
      style.display = "block";
    }
    return div({
      className: "number",
      style: style
    }, this.props.value.toFixed(this.props.displayPrecision));
  },
  handleNoop: function(e) {
    e.stopPropagation();
    return e.preventDefault();
  },
  handleStart: function(e) {
    var base;
    this.handleNoop(e);
    if (typeof (base = this.props).onSliderDragStart === "function") {
      base.onSliderDragStart();
    }
    document.addEventListener('mousemove', this.handleDrag);
    return document.addEventListener('mouseup', this.handleEnd);
  },
  handleEnd: function() {
    var base;
    if (typeof (base = this.props).onSliderDragEnd === "function") {
      base.onSliderDragEnd();
    }
    document.removeEventListener('mousemove', this.handleDrag);
    return document.removeEventListener('mouseup', this.handleEnd);
  },
  handleDrag: function(e) {
    var onValueChange, value;
    this.handleNoop(e);
    onValueChange = this.props.onValueChange;
    if (onValueChange == null) {
      return;
    }
    value = this.position(e);
    if (value !== this.props.value) {
      return onValueChange(value);
    }
  },
  handleJumpAndDrag: function(e) {
    this.handleDrag(e);
    return this.handleStart(e);
  },
  clamp: function(value, min, max) {
    return Math.min(Math.max(value, min), max);
  },
  getValueFromPosition: function(pos) {
    var baseVal, limit, max, min, orientation, percentage, ref1, stepSize, value;
    limit = this.state.limit;
    ref1 = this.props, orientation = ref1.orientation, min = ref1.min, max = ref1.max, stepSize = ref1.stepSize;
    percentage = this.clamp(pos, 0, limit) / (limit || 1);
    baseVal = stepSize * Math.round(percentage * (max - min) / stepSize);
    if (orientation === 'horizontal') {
      value = baseVal + min;
    } else {
      value = max - baseVal;
    }
    return this.clamp(value, min, max);
  },
  position: function(e) {
    var clientCoordinateStyle, coordinate, coordinateStyle, direction, directionStyle, grab, node, orientation, pos, value;
    grab = this.state.grab;
    orientation = this.props.orientation;
    node = this.slider;
    coordinateStyle = constants.orientation[orientation].coordinate;
    directionStyle = constants.orientation[orientation].direction;
    clientCoordinateStyle = "client" + (coordinateStyle.toUpperCase());
    coordinate = !e.touches ? e[clientCoordinateStyle] : e.touches[0][clientCoordinateStyle];
    direction = node.getBoundingClientRect()[directionStyle];
    pos = coordinate - direction - grab;
    value = this.getValueFromPosition(pos);
    return value;
  },
  renderHandle: function() {
    var centerOfDiv, classNames, displaySemiQuant, handleSize, height, orientation, outerEdge, ref1, style, width;
    ref1 = this.props, orientation = ref1.orientation, handleSize = ref1.handleSize, displaySemiQuant = ref1.displaySemiQuant;
    width = height = handleSize + "px";
    centerOfDiv = (this.sliderPercent()) + "%";
    outerEdge = Math.round((this.thickness() - handleSize) / 2.0);
    style = {
      "width": width,
      "height": height,
      "fontSize": (handleSize / 2) + "px"
    };
    if (orientation === 'horizontal') {
      style.top = outerEdge + "px";
      style.left = centerOfDiv;
      style.marginLeft = "-" + (handleSize / 2) + "px";
      style.marginRight = "-" + (handleSize / 2) + "px";
    } else {
      style.left = outerEdge + "px";
      style.top = centerOfDiv;
      style.marginTop = "-" + (handleSize / 2) + "px";
      style.marginBottom = "-" + (handleSize / 2) + "px";
    }
    if (!displaySemiQuant) {
      label = this.renderNumber();
    } else {
      label = null;
    }
    classNames = "icon-codap-smallSliderLines";
    if (orientation !== 'horizontal') {
      classNames += " rotated";
    }
    return div({
      className: "value-slider-handle",
      style: style,
      ref: (function(_this) {
        return function(s) {
          return _this.handle = s;
        };
      })(this),
      onMouseDown: this.handleStart,
      onTouchEnd: this.handleNoop,
      onTouchMove: this.handleDrag
    }, i({
      className: classNames
    }), label);
  },
  renderEditableProperty: function(property) {
    var classNames, isEditable, keyDown, swapState;
    isEditable = this.props[property + "Editable"];
    swapState = (function(_this) {
      return function() {
        var newValue, obj, ref1;
        if (!isEditable) {
          return;
        }
        if (_this.state["editing-" + property]) {
          newValue = parseInt((ref1 = ReactDOM.findDOMNode(_this.refs.focusable)) != null ? ref1.value : void 0);
          if (newValue != null) {
            _this.updateRange(property, newValue);
          }
        }
        return _this.setState((
          obj = {},
          obj["editing-" + property] = !_this.state["editing-" + property],
          obj
        ), function() {
          var ref2;
          return (ref2 = this.refs.focusable) != null ? ref2.focus() : void 0;
        });
      };
    })(this);
    keyDown = function(evt) {
      if (evt.key === 'Enter') {
        return swapState();
      }
    };
    classNames = property;
    if (isEditable) {
      classNames += " editable";
    }
    if (!this.state["editing-" + property]) {
      return div({
        className: classNames,
        onClick: swapState
      }, this.props[property]);
    } else {
      return input({
        className: property,
        type: 'number',
        value: this.props[property],
        onBlur: swapState,
        onKeyDown: keyDown,
        ref: 'focusable'
      });
    }
  },
  renderLegend: function() {
    var displaySemiQuant, max, maxLabel, min, minLabel, orientation, ref1, width;
    ref1 = this.props, minLabel = ref1.minLabel, maxLabel = ref1.maxLabel, displaySemiQuant = ref1.displaySemiQuant, orientation = ref1.orientation, width = ref1.width;
    min = minLabel || (displaySemiQuant ? tr("~NODE-VALUE-EDIT.LOW") : this.renderEditableProperty("min"));
    max = maxLabel || (displaySemiQuant ? tr("~NODE-VALUE-EDIT.HIGH") : this.renderEditableProperty("max"));
    if (orientation === 'horizontal') {
      return div({
        className: "legend"
      }, min, max);
    } else {
      return div({
        className: "legend",
        style: {
          left: width / 1.7
        }
      }, max, min);
    }
  },
  renderTicks: function() {
    var center, j, k, max, min, numTicks, orientation, ref1, ref2, showTicks, stepSize, tickDistance, tickHeight, ticks;
    ref1 = this.props, showTicks = ref1.showTicks, max = ref1.max, min = ref1.min, stepSize = ref1.stepSize, orientation = ref1.orientation;
    if (!showTicks) {
      return;
    }
    center = this.thickness() / 2;
    numTicks = (max - min) / stepSize;
    tickDistance = this.length() / numTicks;
    tickHeight = circleRadius * 1.5;
    ticks = [];
    for (j = k = 1, ref2 = numTicks; 1 <= ref2 ? k < ref2 : k > ref2; j = 1 <= ref2 ? ++k : --k) {
      if (orientation === 'horizontal') {
        ticks.push(path({
          key: j,
          d: "M" + (j * tickDistance) + " " + (center - tickHeight) + " l 0 " + (tickHeight * 2),
          className: "slider-line"
        }));
      } else {
        ticks.push(path({
          key: j,
          d: "M" + (center - tickHeight) + " " + (j * tickDistance) + " l " + (tickHeight * 2) + " 0",
          className: "slider-line"
        }));
      }
    }
    return ticks;
  },
  renderLine: function() {
    var center, filled, height, inset, orientation, ref1, width;
    ref1 = this.props, filled = ref1.filled, orientation = ref1.orientation, width = ref1.width, height = ref1.height, filled = ref1.filled;
    center = this.thickness() / 2;
    inset = circleRadius;
    if (filled) {
      inset += 1;
    }
    if (orientation === 'horizontal') {
      return g({}, path({
        d: "M" + inset + " " + center + " l " + (width - (inset * 2)) + " 0",
        className: "slider-line",
        stroke: "#ccc"
      }), !filled ? g({}, circle({
        cx: circleRadius,
        cy: center,
        r: circleRadius,
        className: "slider-shape",
        stroke: "#ccc"
      }), circle({
        cx: width - circleRadius,
        cy: center,
        r: circleRadius,
        className: "slider-shape"
      })) : void 0, this.renderTicks());
    } else {
      return g({}, path({
        d: "M" + center + " " + inset + " l 0 " + (height - (inset * 2)),
        className: "slider-line",
        stroke: "#ccc"
      }), !filled ? g({}, circle({
        cx: center,
        cy: circleRadius,
        r: circleRadius,
        className: "slider-shape",
        stroke: "#ccc"
      }), circle({
        cx: center,
        cy: height - circleRadius,
        r: circleRadius,
        className: "slider-shape"
      })) : void 0, this.renderTicks());
    }
  },
  renderFill: function() {
    var center, color, height, inset, orientation, ref1, top, totalHeight, width;
    ref1 = this.props, orientation = ref1.orientation, color = ref1.color, width = ref1.width, height = ref1.height;
    center = this.thickness() / 2;
    inset = circleRadius + 1;
    if (orientation === 'horizontal') {
      return path({
        d: "M" + inset + " " + center + " l " + (width - (inset * 2)) + " 0",
        className: "slider-line fill-line",
        stroke: color
      });
    } else {
      totalHeight = height - (inset * 2);
      top = inset + (totalHeight * (1 - this.sliderLocation()));
      height = totalHeight - top;
      if (height > 0) {
        return g({}, path({
          d: "M" + center + " " + top + " l 0 " + height,
          className: "slider-line fill-line",
          stroke: color
        }), path({
          d: "M" + center + " " + totalHeight + " l 0 1",
          className: "slider-line fill-line cap",
          stroke: color
        }));
      }
    }
  },
  render: function() {
    var classNames, filled, height, horizontal, lengendHeight, orientation, ref1, showHandle, showLabels, style, width;
    ref1 = this.props, orientation = ref1.orientation, width = ref1.width, height = ref1.height, filled = ref1.filled, showHandle = ref1.showHandle, showLabels = ref1.showLabels;
    horizontal = orientation === 'horizontal';
    lengendHeight = 9 + 4.5;
    style = {
      padding: "0px",
      border: "0px",
      width: width + (!horizontal && !filled ? lengendHeight : 0),
      height: height + (horizontal ? lengendHeight : 0)
    };
    classNames = "value-slider" + (showHandle ? ' show-handle' : ' no-handle');
    if (!horizontal) {
      classNames += " vertical";
    }
    if (filled) {
      classNames += " filled";
    }
    return div({
      className: classNames,
      style: style,
      ref: (function(_this) {
        return function(s) {
          return _this.slider = s;
        };
      })(this),
      onMouseDown: showHandle ? this.handleJumpAndDrag : this.handleNoop,
      onTouchStart: showHandle ? this.handleJumpAndDrag : this.handleNoop,
      onTouchEnd: this.handleNoop
    }, svg({
      className: "svg-background",
      width: width + "px",
      height: height + "px",
      viewBox: "0 0 " + width + " " + height
    }, this.renderLine(), filled ? this.renderFill() : void 0), showHandle ? this.renderHandle() : void 0, showLabels ? this.renderLegend() : void 0);
  }
});

module.exports = ValueSlider;

Slider = React.createFactory(ValueSlider);

Demo = React.createClass({
  getInitialState: function() {
    return {
      value: 50,
      min: 0,
      max: 100
    };
  },
  onValueChange: function(v) {
    return this.setState({
      value: v
    });
  },
  onRangeChange: function(range) {
    return this.setState({
      min: range.min,
      max: range.max
    });
  },
  render: function() {
    return div({
      style: {
        display: "flex"
      }
    }, div({}, Slider({
      value: this.state.value,
      min: this.state.min,
      max: this.state.max,
      stepSize: 25,
      showTicks: true,
      snapToSteps: true,
      minEditable: true,
      maxEditable: true,
      onValueChange: this.onValueChange,
      onRangeChange: this.onRangeChange
    }), Slider({
      orientation: "vertical",
      height: 72,
      width: 20,
      value: this.state.value,
      min: this.state.min,
      max: this.state.max,
      stepSize: 25,
      showTicks: true,
      snapToSteps: true,
      minEditable: true,
      maxEditable: true,
      onValueChange: this.onValueChange,
      onRangeChange: this.onRangeChange
    })), div({}, Slider({
      orientation: "vertical",
      filled: true,
      showLabels: false,
      showHandle: true,
      renderValueTooltip: false,
      height: 72,
      width: 20,
      value: this.state.value,
      min: this.state.min,
      max: this.state.max,
      stepSize: 1,
      minEditable: true,
      maxEditable: true,
      onValueChange: this.onValueChange,
      onRangeChange: this.onRangeChange
    })), div({}, Slider({
      orientation: "vertical",
      filled: true,
      showLabels: false,
      showHandle: false,
      height: 72,
      width: 20,
      value: this.state.value,
      min: this.state.min,
      max: this.state.max,
      stepSize: 1,
      minEditable: true,
      maxEditable: true,
      onValueChange: this.onValueChange,
      onRangeChange: this.onRangeChange
    })));
  }
});

window.testComponent = function(domID) {
  return ReactDOM.render(React.createElement(Demo, {}), domID);
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

},{"../utils/translate":689}]},{},[1]);
