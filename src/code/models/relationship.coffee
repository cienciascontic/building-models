math = require 'mathjs'  # For formula parsing...
tr   = require "../utils/translate"

module.exports = class Relationship

  @errValue:          -1
  @defaultFunc: (scope) ->
    scope.in


  @defaultErrHandler: (error,expr,vars)->
    log.error "Error in eval: #{Error}"
    log.error "Expression:    #{expr}"
    log.error "vars=#{vars}"

  constructor: (@opts={}) ->
    @text        = @opts.text
    formula      = @opts.formula
    @func        = @opts.func
    @errHandler  = @opts.errHandler or Relationship.defaultErrHandler
    @isDefined   = @opts.formula? or @opts.func?
    @hasError    = false
    @setFormula(formula)
    @dataPoints
    @customData

  setFormula: (newf) ->
    @formula = newf
    @checkFormula()

  checkFormula: ->
    @isDefined   = @opts.formula? or @opts.func?
    if @isDefined
      @evaluate(1, 1) #sets the @hasError flag if there is a problem

  evaluate: (inV,outV, maxIn=100, maxOut=100)->
    result = Relationship.errValue
    scope =
      in: inV
      out: outV
      maxIn: maxIn
      maxOut: maxOut
    if @customData
      roundedInV = Math.round(inV)
      if @dataPoints[roundedInV]?
        result = @dataPoints[roundedInV].y
      else result = 0
    else if @func
      result = @func scope
    else
      try
        result = math.eval @formula, scope
      catch error
        @hasError = true
        @errHandler(error, @formula, inV, outV)
    result

  loadCustomData: (source)->
    if source?
      @customData = source
    else
      @customData = [[0,0.0315330040568425],[1,0.0432862375572867],[2,0.059041155121282],[3,0.0800166505716637],[4,0.107752264517118],[5,0.144175995627215],[6,0.191681424232947],[7,0.253213940282686],[8,0.332365326565821],[9,0.433475269072082],[10,0.561737548442409],[11,0.723307718598223],[12,0.925408022040759],[13,1.17642416171993],[14,1.48598739860325],[15,1.86503434072018],[16,2.32583581830341],[17,2.88198549955238],[18,3.54833850149776],[19,4.34089030372386],[20,5.27658688911547],[21,6.37305831225372],[22,7.64826990598602],[23,9.1200881187303],[24,10.8057615224151],[25,12.7213217818534],[26,14.880914207311],[27,17.2960727347483],[28,19.9749595412518],[29,22.9215946992212],[30,26.135105951927],[31,29.6090324814472],[32,33.3307190645567],[33,37.2808379282536],[34,41.4330746381835],[35,45.7540112823635],[36,50.2032349662931],[37,54.7336922664505],[38,59.2923009983467],[39,63.8208197942859],[40,68.2569640471871],[41,72.5357443717836],[42,76.5909915604364],[43,80.357020807414],[44,83.7703784749983],[45,86.7716075485052],[46,89.3069637335701],[47,91.3300132864565],[48,92.8030463388882],[49,93.6982456653885],[50,93.9985602986625],[51,93.6982456653885],[52,92.8030463388882],[53,91.3300132864565],[54,89.3069637335701],[55,86.7716075485052],[56,83.7703784749983],[57,80.357020807414],[58,76.5909915604364],[59,72.5357443717836],[60,68.2569640471871],[61,63.8208197942859],[62,59.2923009983467],[63,54.7336922664505],[64,50.2032349662931],[65,45.7540112823635],[66,41.4330746381835],[67,37.2808379282536],[68,33.3307190645567],[69,29.6090324814472],[70,26.135105951927],[71,22.9215946992212],[72,19.9749595412518],[73,17.2960727347483],[74,14.880914207311],[75,12.7213217818534],[76,10.8057615224151],[77,9.1200881187303],[78,7.64826990598602],[79,6.37305831225372],[80,5.27658688911547],[81,4.34089030372386],[82,3.54833850149776],[83,2.88198549955238],[84,2.32583581830341],[85,1.86503434072018],[86,1.48598739860325],[87,1.17642416171993],[88,0.925408022040759],[89,0.723307718598223],[90,0.561737548442409],[91,0.433475269072082],[92,0.332365326565821],[93,0.253213940282686],[94,0.191681424232947],[95,0.144175995627215],[96,0.107752264517118],[97,0.0800166505716637],[98,0.059041155121282],[99,0.0432862375572867]]

    points = _.map source, (point) ->
      x = _.first point
      y = _.last point
      { y: y, x: x}
    @dataPoints = _.indexBy points, 'x'
    
  toExport: ->
    text        : @text
    formula     : @formula
